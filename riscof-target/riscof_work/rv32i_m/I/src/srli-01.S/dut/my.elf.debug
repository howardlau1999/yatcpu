
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed8ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff76af52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb3fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd87d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00001317          	auipc	t1,0x1
    102c:	fd830313          	addi	t1,t1,-40 # 2000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb86f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfdab79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfebdba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff46db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f8b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bfadb3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadfbed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fc769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7cbb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5bcdd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadcee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56cf72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab4fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d58fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbeaafea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df53ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa87f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d2bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe7dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df26fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f7b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb7a5bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedbbadb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76dc56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6cab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",srli)

RVTEST_SIGBASE( x5,signature_x5_1)
    10f8:	00001297          	auipc	t0,0x1
    10fc:	f1828293          	addi	t0,t0,-232 # 2010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x30, rd==x8, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val==-46340, imm_val == 2
// opcode: srli ; op1:x30; dest:x8; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( srli, x8, x30, 0x3fffd2bf, -0xb504, 0x2, x5, 0, x6)
    1100:	ffff5f37          	lui	t5,0xffff5
    1104:	afcf0f13          	addi	t5,t5,-1284 # ffff4afc <_end+0xffff1af8>
    1108:	002f5413          	srli	s0,t5,0x2
    110c:	0082a023          	sw	s0,0(t0)

00001110 <inst_1>:

inst_1:
// rs1 == rd, rs1==x17, rd==x17, rs1_val > 0 and imm_val > 0 and imm_val < xlen, 
// opcode: srli ; op1:x17; dest:x17; op1val:0x7;  immval:0x13
TEST_IMM_OP( srli, x17, x17, 0x0, 0x7, 0x13, x5, 4, x6)
    1110:	00700893          	li	a7,7
    1114:	0138d893          	srli	a7,a7,0x13
    1118:	0112a223          	sw	a7,4(t0)

0000111c <inst_2>:

inst_2:
// rs1==x27, rd==x19, rs1_val < 0 and imm_val == 0, 
// opcode: srli ; op1:x27; dest:x19; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( srli, x19, x27, 0xffff4afc, -0xb504, 0x0, x5, 8, x6)
    111c:	ffff5db7          	lui	s11,0xffff5
    1120:	afcd8d93          	addi	s11,s11,-1284 # ffff4afc <_end+0xffff1af8>
    1124:	000dd993          	srli	s3,s11,0x0
    1128:	0132a423          	sw	s3,8(t0)

0000112c <inst_3>:

inst_3:
// rs1==x29, rd==x9, rs1_val > 0 and imm_val == 0, 
// opcode: srli ; op1:x29; dest:x9; op1val:0x3fffffff;  immval:0x0
TEST_IMM_OP( srli, x9, x29, 0x3fffffff, 0x3fffffff, 0x0, x5, 12, x6)
    112c:	40000eb7          	lui	t4,0x40000
    1130:	fffe8e93          	addi	t4,t4,-1 # 3fffffff <_end+0x3fffcffb>
    1134:	000ed493          	srli	s1,t4,0x0
    1138:	0092a623          	sw	s1,12(t0)

0000113c <inst_4>:

inst_4:
// rs1==x25, rd==x22, rs1_val < 0 and imm_val == (xlen-1), 
// opcode: srli ; op1:x25; dest:x22; op1val:-0xa;  immval:0x1f
TEST_IMM_OP( srli, x22, x25, 0x1, -0xa, 0x1f, x5, 16, x6)
    113c:	ff600c93          	li	s9,-10
    1140:	01fcdb13          	srli	s6,s9,0x1f
    1144:	0162a823          	sw	s6,16(t0)

00001148 <inst_5>:

inst_5:
// rs1==x1, rd==x13, rs1_val > 0 and imm_val == (xlen-1), rs1_val == 512
// opcode: srli ; op1:x1; dest:x13; op1val:0x200;  immval:0x1f
TEST_IMM_OP( srli, x13, x1, 0x0, 0x200, 0x1f, x5, 20, x6)
    1148:	20000093          	li	ra,512
    114c:	01f0d693          	srli	a3,ra,0x1f
    1150:	00d2aa23          	sw	a3,20(t0)

00001154 <inst_6>:

inst_6:
// rs1==x21, rd==x0, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, rs1_val==3
// opcode: srli ; op1:x21; dest:x0; op1val:0x3;  immval:0x3
TEST_IMM_OP( srli, x0, x21, 0, 0x3, 0x3, x5, 24, x6)
    1154:	00300a93          	li	s5,3
    1158:	003ad013          	srli	zero,s5,0x3
    115c:	0002ac23          	sw	zero,24(t0)

00001160 <inst_7>:

inst_7:
// rs1==x0, rd==x29, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648
// opcode: srli ; op1:x0; dest:x29; op1val:0x0;  immval:0x9
TEST_IMM_OP( srli, x29, x0, 0x0, 0x0, 0x9, x5, 28, x6)
    1160:	00000013          	nop
    1164:	00905e93          	srli	t4,zero,0x9
    1168:	01d2ae23          	sw	t4,28(t0)

0000116c <inst_8>:

inst_8:
// rs1==x16, rd==x18, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, imm_val == 1, rs1_val==0
// opcode: srli ; op1:x16; dest:x18; op1val:0x0;  immval:0x1
TEST_IMM_OP( srli, x18, x16, 0x0, 0x0, 0x1, x5, 32, x6)
    116c:	00000813          	li	a6,0
    1170:	00185913          	srli	s2,a6,0x1
    1174:	0322a023          	sw	s2,32(t0)

00001178 <inst_9>:

inst_9:
// rs1==x20, rd==x27, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: srli ; op1:x20; dest:x27; op1val:0x7fffffff;  immval:0x11
TEST_IMM_OP( srli, x27, x20, 0x3fff, 0x7fffffff, 0x11, x5, 36, x6)
    1178:	80000a37          	lui	s4,0x80000
    117c:	fffa0a13          	addi	s4,s4,-1 # 7fffffff <_end+0x7fffcffb>
    1180:	011a5d93          	srli	s11,s4,0x11
    1184:	03b2a223          	sw	s11,36(t0)

00001188 <inst_10>:

inst_10:
// rs1==x31, rd==x2, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, rs1_val == 1
// opcode: srli ; op1:x31; dest:x2; op1val:0x1;  immval:0x12
TEST_IMM_OP( srli, x2, x31, 0x0, 0x1, 0x12, x5, 40, x6)
    1188:	00100f93          	li	t6,1
    118c:	012fd113          	srli	sp,t6,0x12
    1190:	0222a423          	sw	sp,40(t0)

00001194 <inst_11>:

inst_11:
// rs1==x7, rd==x31, rs1_val == 2, imm_val == 29, rs1_val==2
// opcode: srli ; op1:x7; dest:x31; op1val:0x2;  immval:0x1d
TEST_IMM_OP( srli, x31, x7, 0x0, 0x2, 0x1d, x5, 44, x6)
    1194:	00200393          	li	t2,2
    1198:	01d3df93          	srli	t6,t2,0x1d
    119c:	03f2a623          	sw	t6,44(t0)

000011a0 <inst_12>:

inst_12:
// rs1==x14, rd==x16, rs1_val == 4, rs1_val==4, imm_val == 15
// opcode: srli ; op1:x14; dest:x16; op1val:0x4;  immval:0xf
TEST_IMM_OP( srli, x16, x14, 0x0, 0x4, 0xf, x5, 48, x6)
    11a0:	00400713          	li	a4,4
    11a4:	00f75813          	srli	a6,a4,0xf
    11a8:	0302a823          	sw	a6,48(t0)

000011ac <inst_13>:

inst_13:
// rs1==x12, rd==x25, rs1_val == 8, imm_val == 27
// opcode: srli ; op1:x12; dest:x25; op1val:0x8;  immval:0x1b
TEST_IMM_OP( srli, x25, x12, 0x0, 0x8, 0x1b, x5, 52, x6)
    11ac:	00800613          	li	a2,8
    11b0:	01b65c93          	srli	s9,a2,0x1b
    11b4:	0392aa23          	sw	s9,52(t0)

000011b8 <inst_14>:

inst_14:
// rs1==x4, rd==x11, rs1_val == 16, 
// opcode: srli ; op1:x4; dest:x11; op1val:0x10;  immval:0xf
TEST_IMM_OP( srli, x11, x4, 0x0, 0x10, 0xf, x5, 56, x6)
    11b8:	01000213          	li	tp,16
    11bc:	00f25593          	srli	a1,tp,0xf
    11c0:	02b2ac23          	sw	a1,56(t0)

000011c4 <inst_15>:

inst_15:
// rs1==x24, rd==x23, rs1_val == 32, imm_val == 23
// opcode: srli ; op1:x24; dest:x23; op1val:0x20;  immval:0x17
TEST_IMM_OP( srli, x23, x24, 0x0, 0x20, 0x17, x5, 60, x6)
    11c4:	02000c13          	li	s8,32
    11c8:	017c5b93          	srli	s7,s8,0x17
    11cc:	0372ae23          	sw	s7,60(t0)

000011d0 <inst_16>:

inst_16:
// rs1==x8, rd==x28, rs1_val == 64, 
// opcode: srli ; op1:x8; dest:x28; op1val:0x40;  immval:0xd
TEST_IMM_OP( srli, x28, x8, 0x0, 0x40, 0xd, x5, 64, x6)
    11d0:	04000413          	li	s0,64
    11d4:	00d45e13          	srli	t3,s0,0xd
    11d8:	05c2a023          	sw	t3,64(t0)

000011dc <inst_17>:

inst_17:
// rs1==x15, rd==x30, rs1_val == 128, imm_val == 30
// opcode: srli ; op1:x15; dest:x30; op1val:0x80;  immval:0x1e
TEST_IMM_OP( srli, x30, x15, 0x0, 0x80, 0x1e, x5, 68, x6)
    11dc:	08000793          	li	a5,128
    11e0:	01e7df13          	srli	t5,a5,0x1e
    11e4:	05e2a223          	sw	t5,68(t0)

000011e8 <inst_18>:

inst_18:
// rs1==x18, rd==x20, rs1_val == 256, 
// opcode: srli ; op1:x18; dest:x20; op1val:0x100;  immval:0x1f
TEST_IMM_OP( srli, x20, x18, 0x0, 0x100, 0x1f, x5, 72, x6)
    11e8:	10000913          	li	s2,256
    11ec:	01f95a13          	srli	s4,s2,0x1f
    11f0:	0542a423          	sw	s4,72(t0)

000011f4 <inst_19>:

inst_19:
// rs1==x13, rd==x14, rs1_val == 1024, 
// opcode: srli ; op1:x13; dest:x14; op1val:0x400;  immval:0x12
TEST_IMM_OP( srli, x14, x13, 0x0, 0x400, 0x12, x5, 76, x6)
    11f4:	40000693          	li	a3,1024
    11f8:	0126d713          	srli	a4,a3,0x12
    11fc:	04e2a623          	sw	a4,76(t0)

00001200 <inst_20>:

inst_20:
// rs1==x11, rd==x3, rs1_val == 2048, 
// opcode: srli ; op1:x11; dest:x3; op1val:0x800;  immval:0xf
TEST_IMM_OP( srli, x3, x11, 0x0, 0x800, 0xf, x5, 80, x6)
    1200:	000015b7          	lui	a1,0x1
    1204:	80058593          	addi	a1,a1,-2048 # 800 <offset+0x6f0>
    1208:	00f5d193          	srli	gp,a1,0xf
    120c:	0432a823          	sw	gp,80(t0)

00001210 <inst_21>:

inst_21:
// rs1==x23, rd==x26, rs1_val == 4096, 
// opcode: srli ; op1:x23; dest:x26; op1val:0x1000;  immval:0xf
TEST_IMM_OP( srli, x26, x23, 0x0, 0x1000, 0xf, x5, 84, x13)
    1210:	00001bb7          	lui	s7,0x1
    1214:	00fbdd13          	srli	s10,s7,0xf
    1218:	05a2aa23          	sw	s10,84(t0)
RVTEST_SIGBASE( x8,signature_x8_0)
    121c:	00001417          	auipc	s0,0x1
    1220:	e4c40413          	addi	s0,s0,-436 # 2068 <signature_x8_0>

00001224 <inst_22>:

inst_22:
// rs1==x19, rd==x10, rs1_val == 8192, 
// opcode: srli ; op1:x19; dest:x10; op1val:0x2000;  immval:0x2
TEST_IMM_OP( srli, x10, x19, 0x800, 0x2000, 0x2, x8, 0, x13)
    1224:	000029b7          	lui	s3,0x2
    1228:	0029d513          	srli	a0,s3,0x2
    122c:	00a42023          	sw	a0,0(s0)

00001230 <inst_23>:

inst_23:
// rs1==x10, rd==x21, rs1_val == 16384, 
// opcode: srli ; op1:x10; dest:x21; op1val:0x4000;  immval:0xe
TEST_IMM_OP( srli, x21, x10, 0x1, 0x4000, 0xe, x8, 4, x13)
    1230:	00004537          	lui	a0,0x4
    1234:	00e55a93          	srli	s5,a0,0xe
    1238:	01542223          	sw	s5,4(s0)

0000123c <inst_24>:

inst_24:
// rs1==x5, rd==x7, rs1_val == 32768, 
// opcode: srli ; op1:x5; dest:x7; op1val:0x8000;  immval:0x3
TEST_IMM_OP( srli, x7, x5, 0x1000, 0x8000, 0x3, x8, 8, x13)
    123c:	000082b7          	lui	t0,0x8
    1240:	0032d393          	srli	t2,t0,0x3
    1244:	00742423          	sw	t2,8(s0)

00001248 <inst_25>:

inst_25:
// rs1==x2, rd==x5, rs1_val == 65536, 
// opcode: srli ; op1:x2; dest:x5; op1val:0x10000;  immval:0x17
TEST_IMM_OP( srli, x5, x2, 0x0, 0x10000, 0x17, x8, 12, x13)
    1248:	00010137          	lui	sp,0x10
    124c:	01715293          	srli	t0,sp,0x17
    1250:	00542623          	sw	t0,12(s0)

00001254 <inst_26>:

inst_26:
// rs1==x28, rd==x6, rs1_val == 131072, 
// opcode: srli ; op1:x28; dest:x6; op1val:0x20000;  immval:0x11
TEST_IMM_OP( srli, x6, x28, 0x1, 0x20000, 0x11, x8, 16, x13)
    1254:	00020e37          	lui	t3,0x20
    1258:	011e5313          	srli	t1,t3,0x11
    125c:	00642823          	sw	t1,16(s0)

00001260 <inst_27>:

inst_27:
// rs1==x3, rd==x12, rs1_val == 262144, 
// opcode: srli ; op1:x3; dest:x12; op1val:0x40000;  immval:0x7
TEST_IMM_OP( srli, x12, x3, 0x800, 0x40000, 0x7, x8, 20, x13)
    1260:	000401b7          	lui	gp,0x40
    1264:	0071d613          	srli	a2,gp,0x7
    1268:	00c42a23          	sw	a2,20(s0)

0000126c <inst_28>:

inst_28:
// rs1==x26, rd==x4, rs1_val == 524288, 
// opcode: srli ; op1:x26; dest:x4; op1val:0x80000;  immval:0x1d
TEST_IMM_OP( srli, x4, x26, 0x0, 0x80000, 0x1d, x8, 24, x13)
    126c:	00080d37          	lui	s10,0x80
    1270:	01dd5213          	srli	tp,s10,0x1d
    1274:	00442c23          	sw	tp,24(s0)

00001278 <inst_29>:

inst_29:
// rs1==x9, rd==x24, rs1_val == 1048576, 
// opcode: srli ; op1:x9; dest:x24; op1val:0x100000;  immval:0x2
TEST_IMM_OP( srli, x24, x9, 0x40000, 0x100000, 0x2, x8, 28, x13)
    1278:	001004b7          	lui	s1,0x100
    127c:	0024dc13          	srli	s8,s1,0x2
    1280:	01842e23          	sw	s8,28(s0)

00001284 <inst_30>:

inst_30:
// rs1==x6, rd==x15, rs1_val == 2097152, 
// opcode: srli ; op1:x6; dest:x15; op1val:0x200000;  immval:0x5
TEST_IMM_OP( srli, x15, x6, 0x10000, 0x200000, 0x5, x8, 32, x13)
    1284:	00200337          	lui	t1,0x200
    1288:	00535793          	srli	a5,t1,0x5
    128c:	02f42023          	sw	a5,32(s0)

00001290 <inst_31>:

inst_31:
// rs1==x22, rd==x1, rs1_val == 4194304, 
// opcode: srli ; op1:x22; dest:x1; op1val:0x400000;  immval:0xc
TEST_IMM_OP( srli, x1, x22, 0x400, 0x400000, 0xc, x8, 36, x13)
    1290:	00400b37          	lui	s6,0x400
    1294:	00cb5093          	srli	ra,s6,0xc
    1298:	02142223          	sw	ra,36(s0)

0000129c <inst_32>:

inst_32:
// rs1_val == 8388608, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x800000;  immval:0x9
TEST_IMM_OP( srli, x11, x10, 0x4000, 0x800000, 0x9, x8, 40, x13)
    129c:	00800537          	lui	a0,0x800
    12a0:	00955593          	srli	a1,a0,0x9
    12a4:	02b42423          	sw	a1,40(s0)

000012a8 <inst_33>:

inst_33:
// rs1_val == 16777216, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x1000000;  immval:0xe
TEST_IMM_OP( srli, x11, x10, 0x400, 0x1000000, 0xe, x8, 44, x13)
    12a8:	01000537          	lui	a0,0x1000
    12ac:	00e55593          	srli	a1,a0,0xe
    12b0:	02b42623          	sw	a1,44(s0)

000012b4 <inst_34>:

inst_34:
// rs1_val == 33554432, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x2000000;  immval:0x3
TEST_IMM_OP( srli, x11, x10, 0x400000, 0x2000000, 0x3, x8, 48, x13)
    12b4:	02000537          	lui	a0,0x2000
    12b8:	00355593          	srli	a1,a0,0x3
    12bc:	02b42823          	sw	a1,48(s0)

000012c0 <inst_35>:

inst_35:
// rs1_val == 67108864, imm_val == 4
// opcode: srli ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x4
TEST_IMM_OP( srli, x11, x10, 0x400000, 0x4000000, 0x4, x8, 52, x13)
    12c0:	04000537          	lui	a0,0x4000
    12c4:	00455593          	srli	a1,a0,0x4
    12c8:	02b42a23          	sw	a1,52(s0)

000012cc <inst_36>:

inst_36:
// rs1_val == 134217728, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x7
TEST_IMM_OP( srli, x11, x10, 0x100000, 0x8000000, 0x7, x8, 56, x13)
    12cc:	08000537          	lui	a0,0x8000
    12d0:	00755593          	srli	a1,a0,0x7
    12d4:	02b42c23          	sw	a1,56(s0)

000012d8 <inst_37>:

inst_37:
// rs1_val == 268435456, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x7
TEST_IMM_OP( srli, x11, x10, 0x200000, 0x10000000, 0x7, x8, 60, x13)
    12d8:	10000537          	lui	a0,0x10000
    12dc:	00755593          	srli	a1,a0,0x7
    12e0:	02b42e23          	sw	a1,60(s0)

000012e4 <inst_38>:

inst_38:
// rs1_val == 536870912, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x20000000;  immval:0x0
TEST_IMM_OP( srli, x11, x10, 0x20000000, 0x20000000, 0x0, x8, 64, x13)
    12e4:	20000537          	lui	a0,0x20000
    12e8:	00055593          	srli	a1,a0,0x0
    12ec:	04b42023          	sw	a1,64(s0)

000012f0 <inst_39>:

inst_39:
// rs1_val == 1073741824, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x40000000;  immval:0x1e
TEST_IMM_OP( srli, x11, x10, 0x1, 0x40000000, 0x1e, x8, 68, x13)
    12f0:	40000537          	lui	a0,0x40000
    12f4:	01e55593          	srli	a1,a0,0x1e
    12f8:	04b42223          	sw	a1,68(s0)

000012fc <inst_40>:

inst_40:
// rs1_val == -2, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x2;  immval:0x1d
TEST_IMM_OP( srli, x11, x10, 0x7, -0x2, 0x1d, x8, 72, x13)
    12fc:	ffe00513          	li	a0,-2
    1300:	01d55593          	srli	a1,a0,0x1d
    1304:	04b42423          	sw	a1,72(s0)

00001308 <inst_41>:

inst_41:
// rs1_val == -3, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x3;  immval:0xb
TEST_IMM_OP( srli, x11, x10, 0x1fffff, -0x3, 0xb, x8, 76, x13)
    1308:	ffd00513          	li	a0,-3
    130c:	00b55593          	srli	a1,a0,0xb
    1310:	04b42623          	sw	a1,76(s0)

00001314 <inst_42>:

inst_42:
// rs1_val == -5, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x5;  immval:0x5
TEST_IMM_OP( srli, x11, x10, 0x7ffffff, -0x5, 0x5, x8, 80, x13)
    1314:	ffb00513          	li	a0,-5
    1318:	00555593          	srli	a1,a0,0x5
    131c:	04b42823          	sw	a1,80(s0)

00001320 <inst_43>:

inst_43:
// rs1_val == -9, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x9;  immval:0x1
TEST_IMM_OP( srli, x11, x10, 0x7ffffffb, -0x9, 0x1, x8, 84, x13)
    1320:	ff700513          	li	a0,-9
    1324:	00155593          	srli	a1,a0,0x1
    1328:	04b42a23          	sw	a1,84(s0)

0000132c <inst_44>:

inst_44:
// rs1_val == -17, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x11;  immval:0x1d
TEST_IMM_OP( srli, x11, x10, 0x7, -0x11, 0x1d, x8, 88, x13)
    132c:	fef00513          	li	a0,-17
    1330:	01d55593          	srli	a1,a0,0x1d
    1334:	04b42c23          	sw	a1,88(s0)

00001338 <inst_45>:

inst_45:
// rs1_val == -33, imm_val == 16
// opcode: srli ; op1:x10; dest:x11; op1val:-0x21;  immval:0x10
TEST_IMM_OP( srli, x11, x10, 0xffff, -0x21, 0x10, x8, 92, x13)
    1338:	fdf00513          	li	a0,-33
    133c:	01055593          	srli	a1,a0,0x10
    1340:	04b42e23          	sw	a1,92(s0)

00001344 <inst_46>:

inst_46:
// rs1_val == -65, imm_val == 8
// opcode: srli ; op1:x10; dest:x11; op1val:-0x41;  immval:0x8
TEST_IMM_OP( srli, x11, x10, 0xffffff, -0x41, 0x8, x8, 96, x13)
    1344:	fbf00513          	li	a0,-65
    1348:	00855593          	srli	a1,a0,0x8
    134c:	06b42023          	sw	a1,96(s0)

00001350 <inst_47>:

inst_47:
// rs1_val == -129, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x81;  immval:0x12
TEST_IMM_OP( srli, x11, x10, 0x3fff, -0x81, 0x12, x8, 100, x13)
    1350:	f7f00513          	li	a0,-129
    1354:	01255593          	srli	a1,a0,0x12
    1358:	06b42223          	sw	a1,100(s0)

0000135c <inst_48>:

inst_48:
// rs1_val == -257, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x101;  immval:0x3
TEST_IMM_OP( srli, x11, x10, 0x1fffffdf, -0x101, 0x3, x8, 104, x13)
    135c:	eff00513          	li	a0,-257
    1360:	00355593          	srli	a1,a0,0x3
    1364:	06b42423          	sw	a1,104(s0)

00001368 <inst_49>:

inst_49:
// rs1_val == -513, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x201;  immval:0x13
TEST_IMM_OP( srli, x11, x10, 0x1fff, -0x201, 0x13, x8, 108, x13)
    1368:	dff00513          	li	a0,-513
    136c:	01355593          	srli	a1,a0,0x13
    1370:	06b42623          	sw	a1,108(s0)

00001374 <inst_50>:

inst_50:
// rs1_val == -1025, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x401;  immval:0x9
TEST_IMM_OP( srli, x11, x10, 0x7ffffd, -0x401, 0x9, x8, 112, x13)
    1374:	bff00513          	li	a0,-1025
    1378:	00955593          	srli	a1,a0,0x9
    137c:	06b42823          	sw	a1,112(s0)

00001380 <inst_51>:

inst_51:
// rs1_val == -2049, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x801;  immval:0x7
TEST_IMM_OP( srli, x11, x10, 0x1ffffef, -0x801, 0x7, x8, 116, x13)
    1380:	fffff537          	lui	a0,0xfffff
    1384:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffffc7fb>
    1388:	00755593          	srli	a1,a0,0x7
    138c:	06b42a23          	sw	a1,116(s0)

00001390 <inst_52>:

inst_52:
// rs1_val == -4097, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x1001;  immval:0x0
TEST_IMM_OP( srli, x11, x10, 0xffffefff, -0x1001, 0x0, x8, 120, x13)
    1390:	fffff537          	lui	a0,0xfffff
    1394:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0xffffbffb>
    1398:	00055593          	srli	a1,a0,0x0
    139c:	06b42c23          	sw	a1,120(s0)

000013a0 <inst_53>:

inst_53:
// rs1_val == -8193, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x2001;  immval:0xe
TEST_IMM_OP( srli, x11, x10, 0x3ffff, -0x2001, 0xe, x8, 124, x13)
    13a0:	ffffe537          	lui	a0,0xffffe
    13a4:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffffaffb>
    13a8:	00e55593          	srli	a1,a0,0xe
    13ac:	06b42e23          	sw	a1,124(s0)

000013b0 <inst_54>:

inst_54:
// rs1_val == -16385, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x4001;  immval:0x1
TEST_IMM_OP( srli, x11, x10, 0x7fffdfff, -0x4001, 0x1, x8, 128, x13)
    13b0:	ffffc537          	lui	a0,0xffffc
    13b4:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff8ffb>
    13b8:	00155593          	srli	a1,a0,0x1
    13bc:	08b42023          	sw	a1,128(s0)

000013c0 <inst_55>:

inst_55:
// rs1_val == -32769, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x1d
TEST_IMM_OP( srli, x11, x10, 0x7, -0x8001, 0x1d, x8, 132, x13)
    13c0:	ffff8537          	lui	a0,0xffff8
    13c4:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0xffff4ffb>
    13c8:	01d55593          	srli	a1,a0,0x1d
    13cc:	08b42223          	sw	a1,132(s0)

000013d0 <inst_56>:

inst_56:
// rs1_val == -65537, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x10001;  immval:0x9
TEST_IMM_OP( srli, x11, x10, 0x7fff7f, -0x10001, 0x9, x8, 136, x13)
    13d0:	ffff0537          	lui	a0,0xffff0
    13d4:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffecffb>
    13d8:	00955593          	srli	a1,a0,0x9
    13dc:	08b42423          	sw	a1,136(s0)

000013e0 <inst_57>:

inst_57:
// rs1_val == -131073, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x20001;  immval:0x7
TEST_IMM_OP( srli, x11, x10, 0x1fffbff, -0x20001, 0x7, x8, 140, x13)
    13e0:	fffe0537          	lui	a0,0xfffe0
    13e4:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0xfffdcffb>
    13e8:	00755593          	srli	a1,a0,0x7
    13ec:	08b42623          	sw	a1,140(s0)

000013f0 <inst_58>:

inst_58:
// rs1_val == -262145, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x40001;  immval:0x13
TEST_IMM_OP( srli, x11, x10, 0x1fff, -0x40001, 0x13, x8, 144, x13)
    13f0:	fffc0537          	lui	a0,0xfffc0
    13f4:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffbcffb>
    13f8:	01355593          	srli	a1,a0,0x13
    13fc:	08b42823          	sw	a1,144(s0)

00001400 <inst_59>:

inst_59:
// rs1_val == -524289, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x80001;  immval:0xf
TEST_IMM_OP( srli, x11, x10, 0x1ffef, -0x80001, 0xf, x8, 148, x13)
    1400:	fff80537          	lui	a0,0xfff80
    1404:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0xfff7cffb>
    1408:	00f55593          	srli	a1,a0,0xf
    140c:	08b42a23          	sw	a1,148(s0)

00001410 <inst_60>:

inst_60:
// rs1_val == -1048577, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x100001;  immval:0x10
TEST_IMM_OP( srli, x11, x10, 0xffef, -0x100001, 0x10, x8, 152, x13)
    1410:	fff00537          	lui	a0,0xfff00
    1414:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0xffefcffb>
    1418:	01055593          	srli	a1,a0,0x10
    141c:	08b42c23          	sw	a1,152(s0)

00001420 <inst_61>:

inst_61:
// rs1_val == -2097153, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x6
TEST_IMM_OP( srli, x11, x10, 0x3ff7fff, -0x200001, 0x6, x8, 156, x13)
    1420:	ffe00537          	lui	a0,0xffe00
    1424:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdfcffb>
    1428:	00655593          	srli	a1,a0,0x6
    142c:	08b42e23          	sw	a1,156(s0)

00001430 <inst_62>:

inst_62:
// rs1_val == -4194305, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x8
TEST_IMM_OP( srli, x11, x10, 0xffbfff, -0x400001, 0x8, x8, 160, x13)
    1430:	ffc00537          	lui	a0,0xffc00
    1434:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbfcffb>
    1438:	00855593          	srli	a1,a0,0x8
    143c:	0ab42023          	sw	a1,160(s0)

00001440 <inst_63>:

inst_63:
// rs1_val == -8388609, imm_val == 10
// opcode: srli ; op1:x10; dest:x11; op1val:-0x800001;  immval:0xa
TEST_IMM_OP( srli, x11, x10, 0x3fdfff, -0x800001, 0xa, x8, 164, x13)
    1440:	ff800537          	lui	a0,0xff800
    1444:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7fcffb>
    1448:	00a55593          	srli	a1,a0,0xa
    144c:	0ab42223          	sw	a1,164(s0)

00001450 <inst_64>:

inst_64:
// rs1_val == -16777217, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x1000001;  immval:0xb
TEST_IMM_OP( srli, x11, x10, 0x1fdfff, -0x1000001, 0xb, x8, 168, x13)
    1450:	ff000537          	lui	a0,0xff000
    1454:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeffcffb>
    1458:	00b55593          	srli	a1,a0,0xb
    145c:	0ab42423          	sw	a1,168(s0)

00001460 <inst_65>:

inst_65:
// rs1_val == -33554433, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x2000001;  immval:0x1
TEST_IMM_OP( srli, x11, x10, 0x7effffff, -0x2000001, 0x1, x8, 172, x13)
    1460:	fe000537          	lui	a0,0xfe000
    1464:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdffcffb>
    1468:	00155593          	srli	a1,a0,0x1
    146c:	0ab42623          	sw	a1,172(s0)

00001470 <inst_66>:

inst_66:
// rs1_val == -67108865, imm_val == 21
// opcode: srli ; op1:x10; dest:x11; op1val:-0x4000001;  immval:0x15
TEST_IMM_OP( srli, x11, x10, 0x7df, -0x4000001, 0x15, x8, 176, x13)
    1470:	fc000537          	lui	a0,0xfc000
    1474:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbffcffb>
    1478:	01555593          	srli	a1,a0,0x15
    147c:	0ab42823          	sw	a1,176(s0)

00001480 <inst_67>:

inst_67:
// rs1_val == -134217729, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0x15
TEST_IMM_OP( srli, x11, x10, 0x7bf, -0x8000001, 0x15, x8, 180, x13)
    1480:	f8000537          	lui	a0,0xf8000
    1484:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ffcffb>
    1488:	01555593          	srli	a1,a0,0x15
    148c:	0ab42a23          	sw	a1,180(s0)

00001490 <inst_68>:

inst_68:
// rs1_val == -268435457, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0xe
TEST_IMM_OP( srli, x11, x10, 0x3bfff, -0x10000001, 0xe, x8, 184, x13)
    1490:	f0000537          	lui	a0,0xf0000
    1494:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefffcffb>
    1498:	00e55593          	srli	a1,a0,0xe
    149c:	0ab42c23          	sw	a1,184(s0)

000014a0 <inst_69>:

inst_69:
// rs1_val == -536870913, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x20000001;  immval:0x2
TEST_IMM_OP( srli, x11, x10, 0x37ffffff, -0x20000001, 0x2, x8, 188, x13)
    14a0:	e0000537          	lui	a0,0xe0000
    14a4:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfffcffb>
    14a8:	00255593          	srli	a1,a0,0x2
    14ac:	0ab42e23          	sw	a1,188(s0)

000014b0 <inst_70>:

inst_70:
// rs1_val == -1073741825, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x40000001;  immval:0x12
TEST_IMM_OP( srli, x11, x10, 0x2fff, -0x40000001, 0x12, x8, 192, x13)
    14b0:	c0000537          	lui	a0,0xc0000
    14b4:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0xbfffcffb>
    14b8:	01255593          	srli	a1,a0,0x12
    14bc:	0cb42023          	sw	a1,192(s0)

000014c0 <inst_71>:

inst_71:
// rs1_val == 1431655765, rs1_val==1431655765
// opcode: srli ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x13
TEST_IMM_OP( srli, x11, x10, 0xaaa, 0x55555555, 0x13, x8, 196, x13)
    14c0:	55555537          	lui	a0,0x55555
    14c4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55552551>
    14c8:	01355593          	srli	a1,a0,0x13
    14cc:	0cb42223          	sw	a1,196(s0)

000014d0 <inst_72>:

inst_72:
// rs1_val == -1431655766, rs1_val==-1431655766
// opcode: srli ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0xc
TEST_IMM_OP( srli, x11, x10, 0xaaaaa, -0x55555556, 0xc, x8, 200, x13)
    14d0:	aaaab537          	lui	a0,0xaaaab
    14d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa7aa6>
    14d8:	00c55593          	srli	a1,a0,0xc
    14dc:	0cb42423          	sw	a1,200(s0)

000014e0 <inst_73>:

inst_73:
// rs1_val==5, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( srli, x11, x10, 0x0, 0x5, 0x3, x8, 204, x13)
    14e0:	00500513          	li	a0,5
    14e4:	00355593          	srli	a1,a0,0x3
    14e8:	0cb42623          	sw	a1,204(s0)

000014ec <inst_74>:

inst_74:
// rs1_val==1717986919, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x17
TEST_IMM_OP( srli, x11, x10, 0xcc, 0x66666667, 0x17, x8, 208, x13)
    14ec:	66666537          	lui	a0,0x66666
    14f0:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66663663>
    14f4:	01755593          	srli	a1,a0,0x17
    14f8:	0cb42823          	sw	a1,208(s0)

000014fc <inst_75>:

inst_75:
// rs1_val==-46339, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0xb503;  immval:0xa
TEST_IMM_OP( srli, x11, x10, 0x3fffd2, -0xb503, 0xa, x8, 212, x13)
    14fc:	ffff5537          	lui	a0,0xffff5
    1500:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xffff1af9>
    1504:	00a55593          	srli	a1,a0,0xa
    1508:	0cb42a23          	sw	a1,212(s0)

0000150c <inst_76>:

inst_76:
// rs1_val==46341, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xb505;  immval:0xd
TEST_IMM_OP( srli, x11, x10, 0x5, 0xb505, 0xd, x8, 216, x13)
    150c:	0000b537          	lui	a0,0xb
    1510:	50550513          	addi	a0,a0,1285 # b505 <_end+0x8501>
    1514:	00d55593          	srli	a1,a0,0xd
    1518:	0cb42c23          	sw	a1,216(s0)

0000151c <inst_77>:

inst_77:
// rs1_val==858993459, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x33333333;  immval:0xc
TEST_IMM_OP( srli, x11, x10, 0x33333, 0x33333333, 0xc, x8, 220, x13)
    151c:	33333537          	lui	a0,0x33333
    1520:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3333032f>
    1524:	00c55593          	srli	a1,a0,0xc
    1528:	0cb42e23          	sw	a1,220(s0)

0000152c <inst_78>:

inst_78:
// rs1_val==1717986918, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x15
TEST_IMM_OP( srli, x11, x10, 0x333, 0x66666666, 0x15, x8, 224, x13)
    152c:	66666537          	lui	a0,0x66666
    1530:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66663662>
    1534:	01555593          	srli	a1,a0,0x15
    1538:	0eb42023          	sw	a1,224(s0)

0000153c <inst_79>:

inst_79:
// rs1_val==46340, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xb504;  immval:0xf
TEST_IMM_OP( srli, x11, x10, 0x1, 0xb504, 0xf, x8, 228, x13)
    153c:	0000b537          	lui	a0,0xb
    1540:	50450513          	addi	a0,a0,1284 # b504 <_end+0x8500>
    1544:	00f55593          	srli	a1,a0,0xf
    1548:	0eb42223          	sw	a1,228(s0)

0000154c <inst_80>:

inst_80:
// rs1_val==1431655764, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x1d
TEST_IMM_OP( srli, x11, x10, 0x2, 0x55555554, 0x1d, x8, 232, x13)
    154c:	55555537          	lui	a0,0x55555
    1550:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55552550>
    1554:	01d55593          	srli	a1,a0,0x1d
    1558:	0eb42423          	sw	a1,232(s0)

0000155c <inst_81>:

inst_81:
// rs1_val==858993458, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x1b
TEST_IMM_OP( srli, x11, x10, 0x6, 0x33333332, 0x1b, x8, 236, x13)
    155c:	33333537          	lui	a0,0x33333
    1560:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3333032e>
    1564:	01b55593          	srli	a1,a0,0x1b
    1568:	0eb42623          	sw	a1,236(s0)

0000156c <inst_82>:

inst_82:
// rs1_val==1717986917, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x9
TEST_IMM_OP( srli, x11, x10, 0x333333, 0x66666665, 0x9, x8, 240, x13)
    156c:	66666537          	lui	a0,0x66666
    1570:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66663661>
    1574:	00955593          	srli	a1,a0,0x9
    1578:	0eb42823          	sw	a1,240(s0)

0000157c <inst_83>:

inst_83:
// rs1_val==46339, 
// opcode: srli ; op1:x10; dest:x11; op1val:0xb503;  immval:0x12
TEST_IMM_OP( srli, x11, x10, 0x0, 0xb503, 0x12, x8, 244, x13)
    157c:	0000b537          	lui	a0,0xb
    1580:	50350513          	addi	a0,a0,1283 # b503 <_end+0x84ff>
    1584:	01255593          	srli	a1,a0,0x12
    1588:	0eb42a23          	sw	a1,244(s0)

0000158c <inst_84>:

inst_84:
// rs1_val==1431655766, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x55555556;  immval:0xf
TEST_IMM_OP( srli, x11, x10, 0xaaaa, 0x55555556, 0xf, x8, 248, x13)
    158c:	55555537          	lui	a0,0x55555
    1590:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55552552>
    1594:	00f55593          	srli	a1,a0,0xf
    1598:	0eb42c23          	sw	a1,248(s0)

0000159c <inst_85>:

inst_85:
// rs1_val==-1431655765, 
// opcode: srli ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x1d
TEST_IMM_OP( srli, x11, x10, 0x5, -0x55555555, 0x1d, x8, 252, x13)
    159c:	aaaab537          	lui	a0,0xaaaab
    15a0:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa7aa7>
    15a4:	01d55593          	srli	a1,a0,0x1d
    15a8:	0eb42e23          	sw	a1,252(s0)

000015ac <inst_86>:

inst_86:
// rs1_val==6, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x6;  immval:0x1f
TEST_IMM_OP( srli, x11, x10, 0x0, 0x6, 0x1f, x8, 256, x13)
    15ac:	00600513          	li	a0,6
    15b0:	01f55593          	srli	a1,a0,0x1f
    15b4:	10b42023          	sw	a1,256(s0)

000015b8 <inst_87>:

inst_87:
// rs1_val==858993460, 
// opcode: srli ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( srli, x11, x10, 0xcccccc, 0x33333334, 0x6, x8, 260, x13)
    15b8:	33333537          	lui	a0,0x33333
    15bc:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x33330330>
    15c0:	00655593          	srli	a1,a0,0x6
    15c4:	10b42223          	sw	a1,260(s0)

000015c8 <inst_88>:

inst_88:
// rs1_val == imm_val and imm_val > 0 and imm_val < xlen, rs1_val==3
// opcode: srli ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( srli, x11, x10, 0x0, 0x3, 0x3, x8, 264, x13)
    15c8:	00300513          	li	a0,3
    15cc:	00355593          	srli	a1,a0,0x3
    15d0:	10b42423          	sw	a1,264(s0)

000015d4 <inst_89>:

inst_89:
// rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648
// opcode: srli ; op1:x10; dest:x11; op1val:-0x80000000;  immval:0x9
TEST_IMM_OP( srli, x11, x10, 0x400000, -0x80000000, 0x9, x8, 268, x13)
    15d4:	80000537          	lui	a0,0x80000
    15d8:	00955593          	srli	a1,a0,0x9
    15dc:	10b42623          	sw	a1,268(s0)

000015e0 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    15e0:	babed0b7          	lui	ra,0xbabed
    15e4:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe9afa>

000015e8 <write_tohost>:
    15e8:	00002017          	auipc	zero,0x2
    15ec:	a0102c23          	sw	ra,-1512(zero) # fffffa18 <_end+0xffffca14>

000015f0 <loop>:
    15f0:	0000006f          	j	15f0 <loop>
    15f4:	0000                	unimp
	...
