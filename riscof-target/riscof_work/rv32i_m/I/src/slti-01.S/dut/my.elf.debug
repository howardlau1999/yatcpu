
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed6ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff768f52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb1fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd67d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00003317          	auipc	t1,0x3
    102c:	fd830313          	addi	t1,t1,-40 # 4000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb66f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfd8b79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfe9dba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff26db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f6b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bf8db3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadf9ed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fa769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7abb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5badd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadaee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56af72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab2fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d56fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbea8fea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df51ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa67f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d0bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe5dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df06fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f5b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb785bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedb9adb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76da56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6aab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",slti)

RVTEST_SIGBASE( x2,signature_x2_1)
    10f8:	00003117          	auipc	sp,0x3
    10fc:	f1810113          	addi	sp,sp,-232 # 4010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x25, rd==x12, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val == -129, rs1_val < 0 and imm_val < 0
// opcode: slti ; op1:x25; dest:x12; op1val:-0x81;  immval:-0x800
TEST_IMM_OP( slti, x12, x25, 0x0, -0x81, -0x800, x2, 0, x19)
    1100:	f7f00c93          	li	s9,-129
    1104:	800ca613          	slti	a2,s9,-2048
    1108:	00c12023          	sw	a2,0(sp)

0000110c <inst_1>:

inst_1:
// rs1 == rd, rs1==x5, rd==x5, imm_val == 0, rs1_val == -4097
// opcode: slti ; op1:x5; dest:x5; op1val:-0x1001;  immval:0x0
TEST_IMM_OP( slti, x5, x5, 0x1, -0x1001, 0x0, x2, 4, x19)
    110c:	fffff2b7          	lui	t0,0xfffff
    1110:	fff28293          	addi	t0,t0,-1 # ffffefff <_end+0xffff9ffb>
    1114:	0002a293          	slti	t0,t0,0
    1118:	00512223          	sw	t0,4(sp)

0000111c <inst_2>:

inst_2:
// rs1==x4, rd==x28, imm_val == (2**(12-1)-1), rs1_val < 0 and imm_val > 0, imm_val == 2047
// opcode: slti ; op1:x4; dest:x28; op1val:-0x40000000;  immval:0x7ff
TEST_IMM_OP( slti, x28, x4, 0x1, -0x40000000, 0x7ff, x2, 8, x19)
    111c:	c0000237          	lui	tp,0xc0000
    1120:	7ff22e13          	slti	t3,tp,2047
    1124:	01c12423          	sw	t3,8(sp)

00001128 <inst_3>:

inst_3:
// rs1==x31, rd==x15, imm_val == 1, rs1_val == -17
// opcode: slti ; op1:x31; dest:x15; op1val:-0x11;  immval:0x1
TEST_IMM_OP( slti, x15, x31, 0x1, -0x11, 0x1, x2, 12, x19)
    1128:	fef00f93          	li	t6,-17
    112c:	001fa793          	slti	a5,t6,1
    1130:	00f12623          	sw	a5,12(sp)

00001134 <inst_4>:

inst_4:
// rs1==x1, rd==x13, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: slti ; op1:x1; dest:x13; op1val:-0x80000000;  immval:0x3
TEST_IMM_OP( slti, x13, x1, 0x1, -0x80000000, 0x3, x2, 16, x19)
    1134:	800000b7          	lui	ra,0x80000
    1138:	0030a693          	slti	a3,ra,3
    113c:	00d12823          	sw	a3,16(sp)

00001140 <inst_5>:

inst_5:
// rs1==x15, rd==x1, rs1_val == 0, rs1_val==0 and imm_val==2, imm_val == 2
// opcode: slti ; op1:x15; dest:x1; op1val:0x0;  immval:0x2
TEST_IMM_OP( slti, x1, x15, 0x1, 0x0, 0x2, x2, 20, x19)
    1140:	00000793          	li	a5,0
    1144:	0027a093          	slti	ra,a5,2
    1148:	00112a23          	sw	ra,20(sp)

0000114c <inst_6>:

inst_6:
// rs1==x16, rd==x9, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and imm_val < 0, rs1_val == 2147483647
// opcode: slti ; op1:x16; dest:x9; op1val:0x7fffffff;  immval:-0x8
TEST_IMM_OP( slti, x9, x16, 0x0, 0x7fffffff, -0x8, x2, 24, x19)
    114c:	80000837          	lui	a6,0x80000
    1150:	fff80813          	addi	a6,a6,-1 # 7fffffff <_end+0x7fffaffb>
    1154:	ff882493          	slti	s1,a6,-8
    1158:	00912c23          	sw	s1,24(sp)

0000115c <inst_7>:

inst_7:
// rs1==x11, rd==x31, rs1_val == 1, 
// opcode: slti ; op1:x11; dest:x31; op1val:0x1;  immval:-0x400
TEST_IMM_OP( slti, x31, x11, 0x0, 0x1, -0x400, x2, 28, x19)
    115c:	00100593          	li	a1,1
    1160:	c005af93          	slti	t6,a1,-1024
    1164:	01f12e23          	sw	t6,28(sp)

00001168 <inst_8>:

inst_8:
// rs1==x14, rd==x27, rs1_val == imm_val, imm_val == 16, rs1_val > 0 and imm_val > 0, rs1_val == 16
// opcode: slti ; op1:x14; dest:x27; op1val:0x10;  immval:0x10
TEST_IMM_OP( slti, x27, x14, 0x0, 0x10, 0x10, x2, 32, x19)
    1168:	01000713          	li	a4,16
    116c:	01072d93          	slti	s11,a4,16
    1170:	03b12023          	sw	s11,32(sp)

00001174 <inst_9>:

inst_9:
// rs1==x12, rd==x26, imm_val == 4, rs1_val==858993460 and imm_val==4
// opcode: slti ; op1:x12; dest:x26; op1val:0x33333334;  immval:0x4
TEST_IMM_OP( slti, x26, x12, 0x0, 0x33333334, 0x4, x2, 36, x19)
    1174:	33333637          	lui	a2,0x33333
    1178:	33460613          	addi	a2,a2,820 # 33333334 <_end+0x3332e330>
    117c:	00462d13          	slti	s10,a2,4
    1180:	03a12223          	sw	s10,36(sp)

00001184 <inst_10>:

inst_10:
// rs1==x17, rd==x4, imm_val == 8, 
// opcode: slti ; op1:x17; dest:x4; op1val:0x3fffffff;  immval:0x8
TEST_IMM_OP( slti, x4, x17, 0x0, 0x3fffffff, 0x8, x2, 40, x19)
    1184:	400008b7          	lui	a7,0x40000
    1188:	fff88893          	addi	a7,a7,-1 # 3fffffff <_end+0x3fffaffb>
    118c:	0088a213          	slti	tp,a7,8
    1190:	02412423          	sw	tp,40(sp)

00001194 <inst_11>:

inst_11:
// rs1==x18, rd==x10, imm_val == 32, rs1_val == -8193
// opcode: slti ; op1:x18; dest:x10; op1val:-0x2001;  immval:0x20
TEST_IMM_OP( slti, x10, x18, 0x1, -0x2001, 0x20, x2, 44, x19)
    1194:	ffffe937          	lui	s2,0xffffe
    1198:	fff90913          	addi	s2,s2,-1 # ffffdfff <_end+0xffff8ffb>
    119c:	02092513          	slti	a0,s2,32
    11a0:	02a12623          	sw	a0,44(sp)

000011a4 <inst_12>:

inst_12:
// rs1==x27, rd==x21, imm_val == 64, 
// opcode: slti ; op1:x27; dest:x21; op1val:0x3;  immval:0x40
TEST_IMM_OP( slti, x21, x27, 0x1, 0x3, 0x40, x2, 48, x19)
    11a4:	00300d93          	li	s11,3
    11a8:	040daa93          	slti	s5,s11,64
    11ac:	03512823          	sw	s5,48(sp)

000011b0 <inst_13>:

inst_13:
// rs1==x3, rd==x8, imm_val == 128, 
// opcode: slti ; op1:x3; dest:x8; op1val:0x55555554;  immval:0x80
TEST_IMM_OP( slti, x8, x3, 0x0, 0x55555554, 0x80, x2, 52, x19)
    11b0:	555551b7          	lui	gp,0x55555
    11b4:	55418193          	addi	gp,gp,1364 # 55555554 <_end+0x55550550>
    11b8:	0801a413          	slti	s0,gp,128
    11bc:	02812a23          	sw	s0,52(sp)

000011c0 <inst_14>:

inst_14:
// rs1==x7, rd==x0, imm_val == 256, 
// opcode: slti ; op1:x7; dest:x0; op1val:0x55555554;  immval:0x100
TEST_IMM_OP( slti, x0, x7, 0, 0x55555554, 0x100, x2, 56, x19)
    11c0:	555553b7          	lui	t2,0x55555
    11c4:	55438393          	addi	t2,t2,1364 # 55555554 <_end+0x55550550>
    11c8:	1003a013          	slti	zero,t2,256
    11cc:	02012c23          	sw	zero,56(sp)

000011d0 <inst_15>:

inst_15:
// rs1==x22, rd==x24, imm_val == 512, rs1_val == -1431655766
// opcode: slti ; op1:x22; dest:x24; op1val:-0x55555556;  immval:0x200
TEST_IMM_OP( slti, x24, x22, 0x1, -0x55555556, 0x200, x2, 60, x19)
    11d0:	aaaabb37          	lui	s6,0xaaaab
    11d4:	aaab0b13          	addi	s6,s6,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    11d8:	200b2c13          	slti	s8,s6,512
    11dc:	03812e23          	sw	s8,60(sp)

000011e0 <inst_16>:

inst_16:
// rs1==x24, rd==x18, imm_val == 1024, rs1_val == 16384
// opcode: slti ; op1:x24; dest:x18; op1val:0x4000;  immval:0x400
TEST_IMM_OP( slti, x18, x24, 0x0, 0x4000, 0x400, x2, 64, x19)
    11e0:	00004c37          	lui	s8,0x4
    11e4:	400c2913          	slti	s2,s8,1024
    11e8:	05212023          	sw	s2,64(sp)

000011ec <inst_17>:

inst_17:
// rs1==x6, rd==x25, imm_val == -2, rs1_val == -1025
// opcode: slti ; op1:x6; dest:x25; op1val:-0x401;  immval:-0x2
TEST_IMM_OP( slti, x25, x6, 0x1, -0x401, -0x2, x2, 68, x19)
    11ec:	bff00313          	li	t1,-1025
    11f0:	ffe32c93          	slti	s9,t1,-2
    11f4:	05912223          	sw	s9,68(sp)

000011f8 <inst_18>:

inst_18:
// rs1==x21, rd==x23, imm_val == -3, 
// opcode: slti ; op1:x21; dest:x23; op1val:0x66666667;  immval:-0x3
TEST_IMM_OP( slti, x23, x21, 0x0, 0x66666667, -0x3, x2, 72, x19)
    11f8:	66666ab7          	lui	s5,0x66666
    11fc:	667a8a93          	addi	s5,s5,1639 # 66666667 <_end+0x66661663>
    1200:	ffdaab93          	slti	s7,s5,-3
    1204:	05712423          	sw	s7,72(sp)

00001208 <inst_19>:

inst_19:
// rs1==x0, rd==x7, imm_val == -5, rs1_val == -1048577
// opcode: slti ; op1:x0; dest:x7; op1val:0x0;  immval:-0x5
TEST_IMM_OP( slti, x7, x0, 0x0, 0x0, -0x5, x2, 76, x19)
    1208:	00000013          	nop
    120c:	ffb02393          	slti	t2,zero,-5
    1210:	04712623          	sw	t2,76(sp)

00001214 <inst_20>:

inst_20:
// rs1==x10, rd==x20, imm_val == -9, 
// opcode: slti ; op1:x10; dest:x20; op1val:-0xb504;  immval:-0x9
TEST_IMM_OP( slti, x20, x10, 0x1, -0xb504, -0x9, x2, 80, x19)
    1214:	ffff5537          	lui	a0,0xffff5
    1218:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    121c:	ff752a13          	slti	s4,a0,-9
    1220:	05412823          	sw	s4,80(sp)

00001224 <inst_21>:

inst_21:
// rs1==x26, rd==x16, imm_val == -17, 
// opcode: slti ; op1:x26; dest:x16; op1val:0x3fffffff;  immval:-0x11
TEST_IMM_OP( slti, x16, x26, 0x0, 0x3fffffff, -0x11, x2, 84, x4)
    1224:	40000d37          	lui	s10,0x40000
    1228:	fffd0d13          	addi	s10,s10,-1 # 3fffffff <_end+0x3fffaffb>
    122c:	fefd2813          	slti	a6,s10,-17
    1230:	05012a23          	sw	a6,84(sp)

00001234 <inst_22>:

inst_22:
// rs1==x20, rd==x29, imm_val == -33, rs1_val == -524289
// opcode: slti ; op1:x20; dest:x29; op1val:-0x80001;  immval:-0x21
TEST_IMM_OP( slti, x29, x20, 0x1, -0x80001, -0x21, x2, 88, x4)
    1234:	fff80a37          	lui	s4,0xfff80
    1238:	fffa0a13          	addi	s4,s4,-1 # fff7ffff <_end+0xfff7affb>
    123c:	fdfa2e93          	slti	t4,s4,-33
    1240:	05d12c23          	sw	t4,88(sp)
RVTEST_SIGBASE( x1,signature_x1_0)
    1244:	00003097          	auipc	ra,0x3
    1248:	e2808093          	addi	ra,ra,-472 # 406c <signature_x1_0>

0000124c <inst_23>:

inst_23:
// rs1==x13, rd==x3, imm_val == -65, rs1_val == -268435457
// opcode: slti ; op1:x13; dest:x3; op1val:-0x10000001;  immval:-0x41
TEST_IMM_OP( slti, x3, x13, 0x1, -0x10000001, -0x41, x1, 0, x4)
    124c:	f00006b7          	lui	a3,0xf0000
    1250:	fff68693          	addi	a3,a3,-1 # efffffff <_end+0xefffaffb>
    1254:	fbf6a193          	slti	gp,a3,-65
    1258:	0030a023          	sw	gp,0(ra)

0000125c <inst_24>:

inst_24:
// rs1==x29, rd==x14, imm_val == -129, rs1_val == 8388608
// opcode: slti ; op1:x29; dest:x14; op1val:0x800000;  immval:-0x81
TEST_IMM_OP( slti, x14, x29, 0x0, 0x800000, -0x81, x1, 4, x4)
    125c:	00800eb7          	lui	t4,0x800
    1260:	f7fea713          	slti	a4,t4,-129
    1264:	00e0a223          	sw	a4,4(ra)

00001268 <inst_25>:

inst_25:
// rs1==x23, rd==x2, imm_val == -257, 
// opcode: slti ; op1:x23; dest:x2; op1val:-0x10000001;  immval:-0x101
TEST_IMM_OP( slti, x2, x23, 0x1, -0x10000001, -0x101, x1, 8, x4)
    1268:	f0000bb7          	lui	s7,0xf0000
    126c:	fffb8b93          	addi	s7,s7,-1 # efffffff <_end+0xefffaffb>
    1270:	effba113          	slti	sp,s7,-257
    1274:	0020a423          	sw	sp,8(ra)

00001278 <inst_26>:

inst_26:
// rs1==x2, rd==x22, imm_val == -513, 
// opcode: slti ; op1:x2; dest:x22; op1val:0x0;  immval:-0x201
TEST_IMM_OP( slti, x22, x2, 0x0, 0x0, -0x201, x1, 12, x4)
    1278:	00000113          	li	sp,0
    127c:	dff12b13          	slti	s6,sp,-513
    1280:	0160a623          	sw	s6,12(ra)

00001284 <inst_27>:

inst_27:
// rs1==x30, rd==x19, imm_val == -1025, rs1_val == -262145
// opcode: slti ; op1:x30; dest:x19; op1val:-0x40001;  immval:-0x401
TEST_IMM_OP( slti, x19, x30, 0x1, -0x40001, -0x401, x1, 16, x4)
    1284:	fffc0f37          	lui	t5,0xfffc0
    1288:	ffff0f13          	addi	t5,t5,-1 # fffbffff <_end+0xfffbaffb>
    128c:	bfff2993          	slti	s3,t5,-1025
    1290:	0130a823          	sw	s3,16(ra)

00001294 <inst_28>:

inst_28:
// rs1==x19, rd==x11, imm_val == 1365, rs1_val == 4, rs1_val==4 and imm_val==1365
// opcode: slti ; op1:x19; dest:x11; op1val:0x4;  immval:0x555
TEST_IMM_OP( slti, x11, x19, 0x1, 0x4, 0x555, x1, 20, x4)
    1294:	00400993          	li	s3,4
    1298:	5559a593          	slti	a1,s3,1365
    129c:	00b0aa23          	sw	a1,20(ra)

000012a0 <inst_29>:

inst_29:
// rs1==x8, rd==x30, imm_val == -1366, 
// opcode: slti ; op1:x8; dest:x30; op1val:-0x40000000;  immval:-0x556
TEST_IMM_OP( slti, x30, x8, 0x1, -0x40000000, -0x556, x1, 24, x4)
    12a0:	c0000437          	lui	s0,0xc0000
    12a4:	aaa42f13          	slti	t5,s0,-1366
    12a8:	01e0ac23          	sw	t5,24(ra)

000012ac <inst_30>:

inst_30:
// rs1==x9, rd==x17, rs1_val == 2, 
// opcode: slti ; op1:x9; dest:x17; op1val:0x2;  immval:0x7ff
TEST_IMM_OP( slti, x17, x9, 0x1, 0x2, 0x7ff, x1, 28, x4)
    12ac:	00200493          	li	s1,2
    12b0:	7ff4a893          	slti	a7,s1,2047
    12b4:	0110ae23          	sw	a7,28(ra)

000012b8 <inst_31>:

inst_31:
// rs1==x28, rd==x6, rs1_val == 8, 
// opcode: slti ; op1:x28; dest:x6; op1val:0x8;  immval:-0x555
TEST_IMM_OP( slti, x6, x28, 0x0, 0x8, -0x555, x1, 32, x4)
    12b8:	00800e13          	li	t3,8
    12bc:	aabe2313          	slti	t1,t3,-1365
    12c0:	0260a023          	sw	t1,32(ra)

000012c4 <inst_32>:

inst_32:
// rs1_val == 32, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x20;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, 0x20, 0x555, x1, 36, x4)
    12c4:	02000513          	li	a0,32
    12c8:	55552593          	slti	a1,a0,1365
    12cc:	02b0a223          	sw	a1,36(ra)

000012d0 <inst_33>:

inst_33:
// rs1_val == 64, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x40;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, 0x40, 0x555, x1, 40, x4)
    12d0:	04000513          	li	a0,64
    12d4:	55552593          	slti	a1,a0,1365
    12d8:	02b0a423          	sw	a1,40(ra)

000012dc <inst_34>:

inst_34:
// rs1_val == 128, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x80;  immval:0x200
TEST_IMM_OP( slti, x11, x10, 0x1, 0x80, 0x200, x1, 44, x4)
    12dc:	08000513          	li	a0,128
    12e0:	20052593          	slti	a1,a0,512
    12e4:	02b0a623          	sw	a1,44(ra)

000012e8 <inst_35>:

inst_35:
// rs1_val == 256, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x100;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x100, 0x2e, x1, 48, x4)
    12e8:	10000513          	li	a0,256
    12ec:	02e52593          	slti	a1,a0,46
    12f0:	02b0a823          	sw	a1,48(ra)

000012f4 <inst_36>:

inst_36:
// rs1_val == 512, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x200;  immval:-0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x200, -0x3, x1, 52, x4)
    12f4:	20000513          	li	a0,512
    12f8:	ffd52593          	slti	a1,a0,-3
    12fc:	02b0aa23          	sw	a1,52(ra)

00001300 <inst_37>:

inst_37:
// rs1_val == 1024, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x400;  immval:-0x101
TEST_IMM_OP( slti, x11, x10, 0x0, 0x400, -0x101, x1, 56, x4)
    1300:	40000513          	li	a0,1024
    1304:	eff52593          	slti	a1,a0,-257
    1308:	02b0ac23          	sw	a1,56(ra)

0000130c <inst_38>:

inst_38:
// rs1_val == 2048, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x800;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x800, 0x2d, x1, 60, x4)
    130c:	00001537          	lui	a0,0x1
    1310:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x79c>
    1314:	02d52593          	slti	a1,a0,45
    1318:	02b0ae23          	sw	a1,60(ra)

0000131c <inst_39>:

inst_39:
// rs1_val == 4096, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x1000;  immval:-0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x1000, -0x5, x1, 64, x4)
    131c:	00001537          	lui	a0,0x1
    1320:	ffb52593          	slti	a1,a0,-5
    1324:	04b0a023          	sw	a1,64(ra)

00001328 <inst_40>:

inst_40:
// rs1_val == 8192, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2000;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2000, 0x0, x1, 68, x4)
    1328:	00002537          	lui	a0,0x2
    132c:	00052593          	slti	a1,a0,0
    1330:	04b0a223          	sw	a1,68(ra)

00001334 <inst_41>:

inst_41:
// rs1_val == 32768, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x8000;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x8000, -0x556, x1, 72, x4)
    1334:	00008537          	lui	a0,0x8
    1338:	aaa52593          	slti	a1,a0,-1366
    133c:	04b0a423          	sw	a1,72(ra)

00001340 <inst_42>:

inst_42:
// rs1_val == 65536, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x10000;  immval:-0x1
TEST_IMM_OP( slti, x11, x10, 0x0, 0x10000, -0x1, x1, 76, x4)
    1340:	00010537          	lui	a0,0x10
    1344:	fff52593          	slti	a1,a0,-1
    1348:	04b0a623          	sw	a1,76(ra)

0000134c <inst_43>:

inst_43:
// rs1_val == 131072, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x20000;  immval:-0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x20000, -0x2, x1, 80, x4)
    134c:	00020537          	lui	a0,0x20
    1350:	ffe52593          	slti	a1,a0,-2
    1354:	04b0a823          	sw	a1,80(ra)

00001358 <inst_44>:

inst_44:
// rs1_val == 262144, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x40000;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x40000, 0x6, x1, 84, x4)
    1358:	00040537          	lui	a0,0x40
    135c:	00652593          	slti	a1,a0,6
    1360:	04b0aa23          	sw	a1,84(ra)

00001364 <inst_45>:

inst_45:
// rs1_val == 524288, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x80000;  immval:-0x41
TEST_IMM_OP( slti, x11, x10, 0x0, 0x80000, -0x41, x1, 88, x4)
    1364:	00080537          	lui	a0,0x80
    1368:	fbf52593          	slti	a1,a0,-65
    136c:	04b0ac23          	sw	a1,88(ra)

00001370 <inst_46>:

inst_46:
// rs1_val == 1048576, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x100000;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x100000, -0x556, x1, 92, x4)
    1370:	00100537          	lui	a0,0x100
    1374:	aaa52593          	slti	a1,a0,-1366
    1378:	04b0ae23          	sw	a1,92(ra)

0000137c <inst_47>:

inst_47:
// rs1_val == 2097152, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x200000;  immval:-0x11
TEST_IMM_OP( slti, x11, x10, 0x0, 0x200000, -0x11, x1, 96, x4)
    137c:	00200537          	lui	a0,0x200
    1380:	fef52593          	slti	a1,a0,-17
    1384:	06b0a023          	sw	a1,96(ra)

00001388 <inst_48>:

inst_48:
// rs1_val == 4194304, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x400000;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x400000, 0x2e, x1, 100, x4)
    1388:	00400537          	lui	a0,0x400
    138c:	02e52593          	slti	a1,a0,46
    1390:	06b0a223          	sw	a1,100(ra)

00001394 <inst_49>:

inst_49:
// rs1_val == 16777216, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x1000000;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x1000000, -0x2c, x1, 104, x4)
    1394:	01000537          	lui	a0,0x1000
    1398:	fd452593          	slti	a1,a0,-44
    139c:	06b0a423          	sw	a1,104(ra)

000013a0 <inst_50>:

inst_50:
// rs1_val == 33554432, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2000000;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2000000, 0x555, x1, 108, x4)
    13a0:	02000537          	lui	a0,0x2000
    13a4:	55552593          	slti	a1,a0,1365
    13a8:	06b0a623          	sw	a1,108(ra)

000013ac <inst_51>:

inst_51:
// rs1_val == 67108864, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4000000;  immval:-0x41
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4000000, -0x41, x1, 112, x4)
    13ac:	04000537          	lui	a0,0x4000
    13b0:	fbf52593          	slti	a1,a0,-65
    13b4:	06b0a823          	sw	a1,112(ra)

000013b8 <inst_52>:

inst_52:
// rs1_val == 134217728, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x7ff
TEST_IMM_OP( slti, x11, x10, 0x0, 0x8000000, 0x7ff, x1, 116, x4)
    13b8:	08000537          	lui	a0,0x8000
    13bc:	7ff52593          	slti	a1,a0,2047
    13c0:	06b0aa23          	sw	a1,116(ra)

000013c4 <inst_53>:

inst_53:
// rs1_val == 268435456, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x10000000, 0x2d, x1, 120, x4)
    13c4:	10000537          	lui	a0,0x10000
    13c8:	02d52593          	slti	a1,a0,45
    13cc:	06b0ac23          	sw	a1,120(ra)

000013d0 <inst_54>:

inst_54:
// rs1_val == 536870912, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x20000000;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x20000000, 0x0, x1, 124, x4)
    13d0:	20000537          	lui	a0,0x20000
    13d4:	00052593          	slti	a1,a0,0
    13d8:	06b0ae23          	sw	a1,124(ra)

000013dc <inst_55>:

inst_55:
// rs1_val == 1073741824, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x40000000;  immval:-0x11
TEST_IMM_OP( slti, x11, x10, 0x0, 0x40000000, -0x11, x1, 128, x4)
    13dc:	40000537          	lui	a0,0x40000
    13e0:	fef52593          	slti	a1,a0,-17
    13e4:	08b0a023          	sw	a1,128(ra)

000013e8 <inst_56>:

inst_56:
// rs1_val == -2, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x2;  immval:0x1
TEST_IMM_OP( slti, x11, x10, 0x1, -0x2, 0x1, x1, 132, x4)
    13e8:	ffe00513          	li	a0,-2
    13ec:	00152593          	slti	a1,a0,1
    13f0:	08b0a223          	sw	a1,132(ra)

000013f4 <inst_57>:

inst_57:
// rs1_val == -3, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x3;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, -0x3, -0x555, x1, 136, x4)
    13f4:	ffd00513          	li	a0,-3
    13f8:	aab52593          	slti	a1,a0,-1365
    13fc:	08b0a423          	sw	a1,136(ra)

00001400 <inst_58>:

inst_58:
// rs1_val == -5, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x5;  immval:0x100
TEST_IMM_OP( slti, x11, x10, 0x1, -0x5, 0x100, x1, 140, x4)
    1400:	ffb00513          	li	a0,-5
    1404:	10052593          	slti	a1,a0,256
    1408:	08b0a623          	sw	a1,140(ra)

0000140c <inst_59>:

inst_59:
// rs1_val == -9, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x9;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x1, -0x9, 0x2, x1, 144, x4)
    140c:	ff700513          	li	a0,-9
    1410:	00252593          	slti	a1,a0,2
    1414:	08b0a823          	sw	a1,144(ra)

00001418 <inst_60>:

inst_60:
// rs1_val == -33, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x21;  immval:0x1
TEST_IMM_OP( slti, x11, x10, 0x1, -0x21, 0x1, x1, 148, x4)
    1418:	fdf00513          	li	a0,-33
    141c:	00152593          	slti	a1,a0,1
    1420:	08b0aa23          	sw	a1,148(ra)

00001424 <inst_61>:

inst_61:
// rs1_val == -65, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x41;  immval:-0x4
TEST_IMM_OP( slti, x11, x10, 0x1, -0x41, -0x4, x1, 152, x4)
    1424:	fbf00513          	li	a0,-65
    1428:	ffc52593          	slti	a1,a0,-4
    142c:	08b0ac23          	sw	a1,152(ra)

00001430 <inst_62>:

inst_62:
// rs1_val == -257, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x101;  immval:-0x800
TEST_IMM_OP( slti, x11, x10, 0x0, -0x101, -0x800, x1, 156, x4)
    1430:	eff00513          	li	a0,-257
    1434:	80052593          	slti	a1,a0,-2048
    1438:	08b0ae23          	sw	a1,156(ra)

0000143c <inst_63>:

inst_63:
// rs1_val == -513, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x201;  immval:0x9
TEST_IMM_OP( slti, x11, x10, 0x1, -0x201, 0x9, x1, 160, x4)
    143c:	dff00513          	li	a0,-513
    1440:	00952593          	slti	a1,a0,9
    1444:	0ab0a023          	sw	a1,160(ra)

00001448 <inst_64>:

inst_64:
// rs1_val == -2049, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x801;  immval:-0x8
TEST_IMM_OP( slti, x11, x10, 0x1, -0x801, -0x8, x1, 164, x4)
    1448:	fffff537          	lui	a0,0xfffff
    144c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffffa7fb>
    1450:	ff852593          	slti	a1,a0,-8
    1454:	0ab0a223          	sw	a1,164(ra)

00001458 <inst_65>:

inst_65:
// rs1_val == -16385, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x4001;  immval:0x400
TEST_IMM_OP( slti, x11, x10, 0x1, -0x4001, 0x400, x1, 168, x4)
    1458:	ffffc537          	lui	a0,0xffffc
    145c:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff6ffb>
    1460:	40052593          	slti	a1,a0,1024
    1464:	0ab0a423          	sw	a1,168(ra)

00001468 <inst_66>:

inst_66:
// rs1_val == -32769, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, -0x8001, 0x333, x1, 172, x4)
    1468:	ffff8537          	lui	a0,0xffff8
    146c:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0xffff2ffb>
    1470:	33352593          	slti	a1,a0,819
    1474:	0ab0a623          	sw	a1,172(ra)

00001478 <inst_67>:

inst_67:
// rs1_val == -65537, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x10001;  immval:-0x101
TEST_IMM_OP( slti, x11, x10, 0x1, -0x10001, -0x101, x1, 176, x4)
    1478:	ffff0537          	lui	a0,0xffff0
    147c:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffeaffb>
    1480:	eff52593          	slti	a1,a0,-257
    1484:	0ab0a823          	sw	a1,176(ra)

00001488 <inst_68>:

inst_68:
// rs1_val == -131073, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x20001;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x1, -0x20001, 0x3, x1, 180, x4)
    1488:	fffe0537          	lui	a0,0xfffe0
    148c:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0xfffdaffb>
    1490:	00352593          	slti	a1,a0,3
    1494:	0ab0aa23          	sw	a1,180(ra)

00001498 <inst_69>:

inst_69:
// rs1_val == -2097153, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x200001;  immval:-0x6
TEST_IMM_OP( slti, x11, x10, 0x1, -0x200001, -0x6, x1, 184, x4)
    1498:	ffe00537          	lui	a0,0xffe00
    149c:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdfaffb>
    14a0:	ffa52593          	slti	a1,a0,-6
    14a4:	0ab0ac23          	sw	a1,184(ra)

000014a8 <inst_70>:

inst_70:
// rs1_val == -4194305, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0x400001, 0x555, x1, 188, x4)
    14a8:	ffc00537          	lui	a0,0xffc00
    14ac:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbfaffb>
    14b0:	55552593          	slti	a1,a0,1365
    14b4:	0ab0ae23          	sw	a1,188(ra)

000014b8 <inst_71>:

inst_71:
// rs1_val == -8388609, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x7
TEST_IMM_OP( slti, x11, x10, 0x1, -0x800001, 0x7, x1, 192, x4)
    14b8:	ff800537          	lui	a0,0xff800
    14bc:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7faffb>
    14c0:	00752593          	slti	a1,a0,7
    14c4:	0cb0a023          	sw	a1,192(ra)

000014c8 <inst_72>:

inst_72:
// rs1_val == -16777217, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x1000001;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0x1000001, -0x2d, x1, 196, x4)
    14c8:	ff000537          	lui	a0,0xff000
    14cc:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeffaffb>
    14d0:	fd352593          	slti	a1,a0,-45
    14d4:	0cb0a223          	sw	a1,196(ra)

000014d8 <inst_73>:

inst_73:
// rs1_val == -33554433, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x2000001;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, -0x2000001, 0x334, x1, 200, x4)
    14d8:	fe000537          	lui	a0,0xfe000
    14dc:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdffaffb>
    14e0:	33452593          	slti	a1,a0,820
    14e4:	0cb0a423          	sw	a1,200(ra)

000014e8 <inst_74>:

inst_74:
// rs1_val == -67108865, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x4000001;  immval:-0x4
TEST_IMM_OP( slti, x11, x10, 0x1, -0x4000001, -0x4, x1, 204, x4)
    14e8:	fc000537          	lui	a0,0xfc000
    14ec:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbffaffb>
    14f0:	ffc52593          	slti	a1,a0,-4
    14f4:	0cb0a623          	sw	a1,204(ra)

000014f8 <inst_75>:

inst_75:
// rs1_val == -134217729, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0x8000001, 0x2d, x1, 208, x4)
    14f8:	f8000537          	lui	a0,0xf8000
    14fc:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ffaffb>
    1500:	02d52593          	slti	a1,a0,45
    1504:	0cb0a823          	sw	a1,208(ra)

00001508 <inst_76>:

inst_76:
// rs1_val == -536870913, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x20000001;  immval:0x10
TEST_IMM_OP( slti, x11, x10, 0x1, -0x20000001, 0x10, x1, 212, x4)
    1508:	e0000537          	lui	a0,0xe0000
    150c:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfffaffb>
    1510:	01052593          	slti	a1,a0,16
    1514:	0cb0aa23          	sw	a1,212(ra)

00001518 <inst_77>:

inst_77:
// rs1_val == -1073741825, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x40000001;  immval:-0x101
TEST_IMM_OP( slti, x11, x10, 0x1, -0x40000001, -0x101, x1, 216, x4)
    1518:	c0000537          	lui	a0,0xc0000
    151c:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0xbfffaffb>
    1520:	eff52593          	slti	a1,a0,-257
    1524:	0cb0ac23          	sw	a1,216(ra)

00001528 <inst_78>:

inst_78:
// rs1_val == 1431655765, rs1_val==1431655765 and imm_val==0
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x0, x1, 220, x4)
    1528:	55555537          	lui	a0,0x55555
    152c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1530:	00052593          	slti	a1,a0,0
    1534:	0cb0ae23          	sw	a1,220(ra)

00001538 <inst_79>:

inst_79:
// rs1_val==3 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x3, 0x3, x1, 224, x4)
    1538:	00300513          	li	a0,3
    153c:	00352593          	slti	a1,a0,3
    1540:	0eb0a023          	sw	a1,224(ra)

00001544 <inst_80>:

inst_80:
// rs1_val==3 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x555, x1, 228, x4)
    1544:	00300513          	li	a0,3
    1548:	55552593          	slti	a1,a0,1365
    154c:	0eb0a223          	sw	a1,228(ra)

00001550 <inst_81>:

inst_81:
// rs1_val==3 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x3, -0x556, x1, 232, x4)
    1550:	00300513          	li	a0,3
    1554:	aaa52593          	slti	a1,a0,-1366
    1558:	0eb0a423          	sw	a1,232(ra)

0000155c <inst_82>:

inst_82:
// rs1_val==3 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x5, x1, 236, x4)
    155c:	00300513          	li	a0,3
    1560:	00552593          	slti	a1,a0,5
    1564:	0eb0a623          	sw	a1,236(ra)

00001568 <inst_83>:

inst_83:
// rs1_val==3 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x333, x1, 240, x4)
    1568:	00300513          	li	a0,3
    156c:	33352593          	slti	a1,a0,819
    1570:	0eb0a823          	sw	a1,240(ra)

00001574 <inst_84>:

inst_84:
// rs1_val==3 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x666, x1, 244, x4)
    1574:	00300513          	li	a0,3
    1578:	66652593          	slti	a1,a0,1638
    157c:	0eb0aa23          	sw	a1,244(ra)

00001580 <inst_85>:

inst_85:
// rs1_val==3 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x3, -0x2d, x1, 248, x4)
    1580:	00300513          	li	a0,3
    1584:	fd352593          	slti	a1,a0,-45
    1588:	0eb0ac23          	sw	a1,248(ra)

0000158c <inst_86>:

inst_86:
// rs1_val==3 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x2d, x1, 252, x4)
    158c:	00300513          	li	a0,3
    1590:	02d52593          	slti	a1,a0,45
    1594:	0eb0ae23          	sw	a1,252(ra)

00001598 <inst_87>:

inst_87:
// rs1_val==3 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x3, 0x2, x1, 256, x4)
    1598:	00300513          	li	a0,3
    159c:	00252593          	slti	a1,a0,2
    15a0:	10b0a023          	sw	a1,256(ra)

000015a4 <inst_88>:

inst_88:
// rs1_val==3 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x554, x1, 260, x4)
    15a4:	00300513          	li	a0,3
    15a8:	55452593          	slti	a1,a0,1364
    15ac:	10b0a223          	sw	a1,260(ra)

000015b0 <inst_89>:

inst_89:
// rs1_val==3 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x3, 0x0, x1, 264, x4)
    15b0:	00300513          	li	a0,3
    15b4:	00052593          	slti	a1,a0,0
    15b8:	10b0a423          	sw	a1,264(ra)

000015bc <inst_90>:

inst_90:
// rs1_val==3 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x4, x1, 268, x4)
    15bc:	00300513          	li	a0,3
    15c0:	00452593          	slti	a1,a0,4
    15c4:	10b0a623          	sw	a1,268(ra)

000015c8 <inst_91>:

inst_91:
// rs1_val==3 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x332, x1, 272, x4)
    15c8:	00300513          	li	a0,3
    15cc:	33252593          	slti	a1,a0,818
    15d0:	10b0a823          	sw	a1,272(ra)

000015d4 <inst_92>:

inst_92:
// rs1_val==3 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x665, x1, 276, x4)
    15d4:	00300513          	li	a0,3
    15d8:	66552593          	slti	a1,a0,1637
    15dc:	10b0aa23          	sw	a1,276(ra)

000015e0 <inst_93>:

inst_93:
// rs1_val==3 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x2c, x1, 280, x4)
    15e0:	00300513          	li	a0,3
    15e4:	02c52593          	slti	a1,a0,44
    15e8:	10b0ac23          	sw	a1,280(ra)

000015ec <inst_94>:

inst_94:
// rs1_val==3 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x556, x1, 284, x4)
    15ec:	00300513          	li	a0,3
    15f0:	55652593          	slti	a1,a0,1366
    15f4:	10b0ae23          	sw	a1,284(ra)

000015f8 <inst_95>:

inst_95:
// rs1_val==3 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x3, -0x555, x1, 288, x4)
    15f8:	00300513          	li	a0,3
    15fc:	aab52593          	slti	a1,a0,-1365
    1600:	12b0a023          	sw	a1,288(ra)

00001604 <inst_96>:

inst_96:
// rs1_val==3 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x6, x1, 292, x4)
    1604:	00300513          	li	a0,3
    1608:	00652593          	slti	a1,a0,6
    160c:	12b0a223          	sw	a1,292(ra)

00001610 <inst_97>:

inst_97:
// rs1_val==3 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x334, x1, 296, x4)
    1610:	00300513          	li	a0,3
    1614:	33452593          	slti	a1,a0,820
    1618:	12b0a423          	sw	a1,296(ra)

0000161c <inst_98>:

inst_98:
// rs1_val==3 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x667, x1, 300, x4)
    161c:	00300513          	li	a0,3
    1620:	66752593          	slti	a1,a0,1639
    1624:	12b0a623          	sw	a1,300(ra)

00001628 <inst_99>:

inst_99:
// rs1_val==3 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x3, -0x2c, x1, 304, x4)
    1628:	00300513          	li	a0,3
    162c:	fd452593          	slti	a1,a0,-44
    1630:	12b0a823          	sw	a1,304(ra)

00001634 <inst_100>:

inst_100:
// rs1_val==3 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x3;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, 0x3, 0x2e, x1, 308, x4)
    1634:	00300513          	li	a0,3
    1638:	02e52593          	slti	a1,a0,46
    163c:	12b0aa23          	sw	a1,308(ra)

00001640 <inst_101>:

inst_101:
// rs1_val==1431655765 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x3, x1, 312, x4)
    1640:	55555537          	lui	a0,0x55555
    1644:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1648:	00352593          	slti	a1,a0,3
    164c:	12b0ac23          	sw	a1,312(ra)

00001650 <inst_102>:

inst_102:
// rs1_val==1431655765 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x555, x1, 316, x4)
    1650:	55555537          	lui	a0,0x55555
    1654:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1658:	55552593          	slti	a1,a0,1365
    165c:	12b0ae23          	sw	a1,316(ra)

00001660 <inst_103>:

inst_103:
// rs1_val==1431655765 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, -0x556, x1, 320, x4)
    1660:	55555537          	lui	a0,0x55555
    1664:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1668:	aaa52593          	slti	a1,a0,-1366
    166c:	14b0a023          	sw	a1,320(ra)

00001670 <inst_104>:

inst_104:
// rs1_val==1431655765 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x5, x1, 324, x4)
    1670:	55555537          	lui	a0,0x55555
    1674:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1678:	00552593          	slti	a1,a0,5
    167c:	14b0a223          	sw	a1,324(ra)

00001680 <inst_105>:

inst_105:
// rs1_val==1431655765 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x333, x1, 328, x4)
    1680:	55555537          	lui	a0,0x55555
    1684:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1688:	33352593          	slti	a1,a0,819
    168c:	14b0a423          	sw	a1,328(ra)

00001690 <inst_106>:

inst_106:
// rs1_val==1431655765 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x666, x1, 332, x4)
    1690:	55555537          	lui	a0,0x55555
    1694:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1698:	66652593          	slti	a1,a0,1638
    169c:	14b0a623          	sw	a1,332(ra)

000016a0 <inst_107>:

inst_107:
// rs1_val==1431655765 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, -0x2d, x1, 336, x4)
    16a0:	55555537          	lui	a0,0x55555
    16a4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16a8:	fd352593          	slti	a1,a0,-45
    16ac:	14b0a823          	sw	a1,336(ra)

000016b0 <inst_108>:

inst_108:
// rs1_val==1431655765 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x2d, x1, 340, x4)
    16b0:	55555537          	lui	a0,0x55555
    16b4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16b8:	02d52593          	slti	a1,a0,45
    16bc:	14b0aa23          	sw	a1,340(ra)

000016c0 <inst_109>:

inst_109:
// rs1_val==1431655765 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x2, x1, 344, x4)
    16c0:	55555537          	lui	a0,0x55555
    16c4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16c8:	00252593          	slti	a1,a0,2
    16cc:	14b0ac23          	sw	a1,344(ra)

000016d0 <inst_110>:

inst_110:
// rs1_val==1431655765 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x554, x1, 348, x4)
    16d0:	55555537          	lui	a0,0x55555
    16d4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16d8:	55452593          	slti	a1,a0,1364
    16dc:	14b0ae23          	sw	a1,348(ra)

000016e0 <inst_111>:

inst_111:
// rs1_val==1431655765 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x4, x1, 352, x4)
    16e0:	55555537          	lui	a0,0x55555
    16e4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16e8:	00452593          	slti	a1,a0,4
    16ec:	16b0a023          	sw	a1,352(ra)

000016f0 <inst_112>:

inst_112:
// rs1_val==1431655765 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x332, x1, 356, x4)
    16f0:	55555537          	lui	a0,0x55555
    16f4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16f8:	33252593          	slti	a1,a0,818
    16fc:	16b0a223          	sw	a1,356(ra)

00001700 <inst_113>:

inst_113:
// rs1_val==1431655765 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x665, x1, 360, x4)
    1700:	55555537          	lui	a0,0x55555
    1704:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1708:	66552593          	slti	a1,a0,1637
    170c:	16b0a423          	sw	a1,360(ra)

00001710 <inst_114>:

inst_114:
// rs1_val==1431655765 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x2c, x1, 364, x4)
    1710:	55555537          	lui	a0,0x55555
    1714:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1718:	02c52593          	slti	a1,a0,44
    171c:	16b0a623          	sw	a1,364(ra)

00001720 <inst_115>:

inst_115:
// rs1_val==1431655765 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x556, x1, 368, x4)
    1720:	55555537          	lui	a0,0x55555
    1724:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1728:	55652593          	slti	a1,a0,1366
    172c:	16b0a823          	sw	a1,368(ra)

00001730 <inst_116>:

inst_116:
// rs1_val==1431655765 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, -0x555, x1, 372, x4)
    1730:	55555537          	lui	a0,0x55555
    1734:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1738:	aab52593          	slti	a1,a0,-1365
    173c:	16b0aa23          	sw	a1,372(ra)

00001740 <inst_117>:

inst_117:
// rs1_val==1431655765 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x6, x1, 376, x4)
    1740:	55555537          	lui	a0,0x55555
    1744:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1748:	00652593          	slti	a1,a0,6
    174c:	16b0ac23          	sw	a1,376(ra)

00001750 <inst_118>:

inst_118:
// rs1_val==1431655765 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x334, x1, 380, x4)
    1750:	55555537          	lui	a0,0x55555
    1754:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1758:	33452593          	slti	a1,a0,820
    175c:	16b0ae23          	sw	a1,380(ra)

00001760 <inst_119>:

inst_119:
// rs1_val==1431655765 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x667, x1, 384, x4)
    1760:	55555537          	lui	a0,0x55555
    1764:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1768:	66752593          	slti	a1,a0,1639
    176c:	18b0a023          	sw	a1,384(ra)

00001770 <inst_120>:

inst_120:
// rs1_val==1431655765 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, -0x2c, x1, 388, x4)
    1770:	55555537          	lui	a0,0x55555
    1774:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1778:	fd452593          	slti	a1,a0,-44
    177c:	18b0a223          	sw	a1,388(ra)

00001780 <inst_121>:

inst_121:
// rs1_val==1431655765 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555555, 0x2e, x1, 392, x4)
    1780:	55555537          	lui	a0,0x55555
    1784:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1788:	02e52593          	slti	a1,a0,46
    178c:	18b0a423          	sw	a1,392(ra)

00001790 <inst_122>:

inst_122:
// rs1_val==-1431655766 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x3, x1, 396, x4)
    1790:	aaaab537          	lui	a0,0xaaaab
    1794:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1798:	00352593          	slti	a1,a0,3
    179c:	18b0a623          	sw	a1,396(ra)

000017a0 <inst_123>:

inst_123:
// rs1_val==-1431655766 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x555, x1, 400, x4)
    17a0:	aaaab537          	lui	a0,0xaaaab
    17a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17a8:	55552593          	slti	a1,a0,1365
    17ac:	18b0a823          	sw	a1,400(ra)

000017b0 <inst_124>:

inst_124:
// rs1_val==-1431655766 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, -0x556, x1, 404, x4)
    17b0:	aaaab537          	lui	a0,0xaaaab
    17b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17b8:	aaa52593          	slti	a1,a0,-1366
    17bc:	18b0aa23          	sw	a1,404(ra)

000017c0 <inst_125>:

inst_125:
// rs1_val==-1431655766 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x5, x1, 408, x4)
    17c0:	aaaab537          	lui	a0,0xaaaab
    17c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17c8:	00552593          	slti	a1,a0,5
    17cc:	18b0ac23          	sw	a1,408(ra)

000017d0 <inst_126>:

inst_126:
// rs1_val==-1431655766 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x333, x1, 412, x4)
    17d0:	aaaab537          	lui	a0,0xaaaab
    17d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17d8:	33352593          	slti	a1,a0,819
    17dc:	18b0ae23          	sw	a1,412(ra)

000017e0 <inst_127>:

inst_127:
// rs1_val==-1431655766 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x666, x1, 416, x4)
    17e0:	aaaab537          	lui	a0,0xaaaab
    17e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17e8:	66652593          	slti	a1,a0,1638
    17ec:	1ab0a023          	sw	a1,416(ra)

000017f0 <inst_128>:

inst_128:
// rs1_val==-1431655766 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, -0x2d, x1, 420, x4)
    17f0:	aaaab537          	lui	a0,0xaaaab
    17f4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17f8:	fd352593          	slti	a1,a0,-45
    17fc:	1ab0a223          	sw	a1,420(ra)

00001800 <inst_129>:

inst_129:
// rs1_val==-1431655766 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x2d, x1, 424, x4)
    1800:	aaaab537          	lui	a0,0xaaaab
    1804:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1808:	02d52593          	slti	a1,a0,45
    180c:	1ab0a423          	sw	a1,424(ra)

00001810 <inst_130>:

inst_130:
// rs1_val==-1431655766 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x2, x1, 428, x4)
    1810:	aaaab537          	lui	a0,0xaaaab
    1814:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1818:	00252593          	slti	a1,a0,2
    181c:	1ab0a623          	sw	a1,428(ra)

00001820 <inst_131>:

inst_131:
// rs1_val==-1431655766 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x554, x1, 432, x4)
    1820:	aaaab537          	lui	a0,0xaaaab
    1824:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1828:	55452593          	slti	a1,a0,1364
    182c:	1ab0a823          	sw	a1,432(ra)

00001830 <inst_132>:

inst_132:
// rs1_val==-1431655766 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x0, x1, 436, x4)
    1830:	aaaab537          	lui	a0,0xaaaab
    1834:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1838:	00052593          	slti	a1,a0,0
    183c:	1ab0aa23          	sw	a1,436(ra)

00001840 <inst_133>:

inst_133:
// rs1_val==-1431655766 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x4, x1, 440, x4)
    1840:	aaaab537          	lui	a0,0xaaaab
    1844:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1848:	00452593          	slti	a1,a0,4
    184c:	1ab0ac23          	sw	a1,440(ra)

00001850 <inst_134>:

inst_134:
// rs1_val==-1431655766 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x332, x1, 444, x4)
    1850:	aaaab537          	lui	a0,0xaaaab
    1854:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1858:	33252593          	slti	a1,a0,818
    185c:	1ab0ae23          	sw	a1,444(ra)

00001860 <inst_135>:

inst_135:
// rs1_val==-1431655766 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x665, x1, 448, x4)
    1860:	aaaab537          	lui	a0,0xaaaab
    1864:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1868:	66552593          	slti	a1,a0,1637
    186c:	1cb0a023          	sw	a1,448(ra)

00001870 <inst_136>:

inst_136:
// rs1_val==-1431655766 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x2c, x1, 452, x4)
    1870:	aaaab537          	lui	a0,0xaaaab
    1874:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1878:	02c52593          	slti	a1,a0,44
    187c:	1cb0a223          	sw	a1,452(ra)

00001880 <inst_137>:

inst_137:
// rs1_val==-1431655766 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x556, x1, 456, x4)
    1880:	aaaab537          	lui	a0,0xaaaab
    1884:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1888:	55652593          	slti	a1,a0,1366
    188c:	1cb0a423          	sw	a1,456(ra)

00001890 <inst_138>:

inst_138:
// rs1_val==-1431655766 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, -0x555, x1, 460, x4)
    1890:	aaaab537          	lui	a0,0xaaaab
    1894:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1898:	aab52593          	slti	a1,a0,-1365
    189c:	1cb0a623          	sw	a1,460(ra)

000018a0 <inst_139>:

inst_139:
// rs1_val==-1431655766 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x6, x1, 464, x4)
    18a0:	aaaab537          	lui	a0,0xaaaab
    18a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18a8:	00652593          	slti	a1,a0,6
    18ac:	1cb0a823          	sw	a1,464(ra)

000018b0 <inst_140>:

inst_140:
// rs1_val==-1431655766 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x334, x1, 468, x4)
    18b0:	aaaab537          	lui	a0,0xaaaab
    18b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18b8:	33452593          	slti	a1,a0,820
    18bc:	1cb0aa23          	sw	a1,468(ra)

000018c0 <inst_141>:

inst_141:
// rs1_val==-1431655766 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x667, x1, 472, x4)
    18c0:	aaaab537          	lui	a0,0xaaaab
    18c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18c8:	66752593          	slti	a1,a0,1639
    18cc:	1cb0ac23          	sw	a1,472(ra)

000018d0 <inst_142>:

inst_142:
// rs1_val==-1431655766 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, -0x2c, x1, 476, x4)
    18d0:	aaaab537          	lui	a0,0xaaaab
    18d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18d8:	fd452593          	slti	a1,a0,-44
    18dc:	1cb0ae23          	sw	a1,476(ra)

000018e0 <inst_143>:

inst_143:
// rs1_val==-1431655766 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555556, 0x2e, x1, 480, x4)
    18e0:	aaaab537          	lui	a0,0xaaaab
    18e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18e8:	02e52593          	slti	a1,a0,46
    18ec:	1eb0a023          	sw	a1,480(ra)

000018f0 <inst_144>:

inst_144:
// rs1_val==5 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, 0x3, x1, 484, x4)
    18f0:	00500513          	li	a0,5
    18f4:	00352593          	slti	a1,a0,3
    18f8:	1eb0a223          	sw	a1,484(ra)

000018fc <inst_145>:

inst_145:
// rs1_val==5 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x555, x1, 488, x4)
    18fc:	00500513          	li	a0,5
    1900:	55552593          	slti	a1,a0,1365
    1904:	1eb0a423          	sw	a1,488(ra)

00001908 <inst_146>:

inst_146:
// rs1_val==5 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, -0x556, x1, 492, x4)
    1908:	00500513          	li	a0,5
    190c:	aaa52593          	slti	a1,a0,-1366
    1910:	1eb0a623          	sw	a1,492(ra)

00001914 <inst_147>:

inst_147:
// rs1_val==5 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, 0x5, x1, 496, x4)
    1914:	00500513          	li	a0,5
    1918:	00552593          	slti	a1,a0,5
    191c:	1eb0a823          	sw	a1,496(ra)

00001920 <inst_148>:

inst_148:
// rs1_val==5 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x333, x1, 500, x4)
    1920:	00500513          	li	a0,5
    1924:	33352593          	slti	a1,a0,819
    1928:	1eb0aa23          	sw	a1,500(ra)

0000192c <inst_149>:

inst_149:
// rs1_val==5 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x666, x1, 504, x4)
    192c:	00500513          	li	a0,5
    1930:	66652593          	slti	a1,a0,1638
    1934:	1eb0ac23          	sw	a1,504(ra)

00001938 <inst_150>:

inst_150:
// rs1_val==5 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, -0x2d, x1, 508, x4)
    1938:	00500513          	li	a0,5
    193c:	fd352593          	slti	a1,a0,-45
    1940:	1eb0ae23          	sw	a1,508(ra)

00001944 <inst_151>:

inst_151:
// rs1_val==5 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x2d, x1, 512, x4)
    1944:	00500513          	li	a0,5
    1948:	02d52593          	slti	a1,a0,45
    194c:	20b0a023          	sw	a1,512(ra)

00001950 <inst_152>:

inst_152:
// rs1_val==5 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, 0x2, x1, 516, x4)
    1950:	00500513          	li	a0,5
    1954:	00252593          	slti	a1,a0,2
    1958:	20b0a223          	sw	a1,516(ra)

0000195c <inst_153>:

inst_153:
// rs1_val==5 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x554, x1, 520, x4)
    195c:	00500513          	li	a0,5
    1960:	55452593          	slti	a1,a0,1364
    1964:	20b0a423          	sw	a1,520(ra)

00001968 <inst_154>:

inst_154:
// rs1_val==5 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, 0x0, x1, 524, x4)
    1968:	00500513          	li	a0,5
    196c:	00052593          	slti	a1,a0,0
    1970:	20b0a623          	sw	a1,524(ra)

00001974 <inst_155>:

inst_155:
// rs1_val==5 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, 0x4, x1, 528, x4)
    1974:	00500513          	li	a0,5
    1978:	00452593          	slti	a1,a0,4
    197c:	20b0a823          	sw	a1,528(ra)

00001980 <inst_156>:

inst_156:
// rs1_val==5 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x332, x1, 532, x4)
    1980:	00500513          	li	a0,5
    1984:	33252593          	slti	a1,a0,818
    1988:	20b0aa23          	sw	a1,532(ra)

0000198c <inst_157>:

inst_157:
// rs1_val==5 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x665, x1, 536, x4)
    198c:	00500513          	li	a0,5
    1990:	66552593          	slti	a1,a0,1637
    1994:	20b0ac23          	sw	a1,536(ra)

00001998 <inst_158>:

inst_158:
// rs1_val==5 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x2c, x1, 540, x4)
    1998:	00500513          	li	a0,5
    199c:	02c52593          	slti	a1,a0,44
    19a0:	20b0ae23          	sw	a1,540(ra)

000019a4 <inst_159>:

inst_159:
// rs1_val==5 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x556, x1, 544, x4)
    19a4:	00500513          	li	a0,5
    19a8:	55652593          	slti	a1,a0,1366
    19ac:	22b0a023          	sw	a1,544(ra)

000019b0 <inst_160>:

inst_160:
// rs1_val==5 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, -0x555, x1, 548, x4)
    19b0:	00500513          	li	a0,5
    19b4:	aab52593          	slti	a1,a0,-1365
    19b8:	22b0a223          	sw	a1,548(ra)

000019bc <inst_161>:

inst_161:
// rs1_val==5 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x6, x1, 552, x4)
    19bc:	00500513          	li	a0,5
    19c0:	00652593          	slti	a1,a0,6
    19c4:	22b0a423          	sw	a1,552(ra)

000019c8 <inst_162>:

inst_162:
// rs1_val==5 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x334, x1, 556, x4)
    19c8:	00500513          	li	a0,5
    19cc:	33452593          	slti	a1,a0,820
    19d0:	22b0a623          	sw	a1,556(ra)

000019d4 <inst_163>:

inst_163:
// rs1_val==5 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x667, x1, 560, x4)
    19d4:	00500513          	li	a0,5
    19d8:	66752593          	slti	a1,a0,1639
    19dc:	22b0a823          	sw	a1,560(ra)

000019e0 <inst_164>:

inst_164:
// rs1_val==5 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x5, -0x2c, x1, 564, x4)
    19e0:	00500513          	li	a0,5
    19e4:	fd452593          	slti	a1,a0,-44
    19e8:	22b0aa23          	sw	a1,564(ra)

000019ec <inst_165>:

inst_165:
// rs1_val==5 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x5;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, 0x5, 0x2e, x1, 568, x4)
    19ec:	00500513          	li	a0,5
    19f0:	02e52593          	slti	a1,a0,46
    19f4:	22b0ac23          	sw	a1,568(ra)

000019f8 <inst_166>:

inst_166:
// rs1_val==858993459 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x3, x1, 572, x4)
    19f8:	33333537          	lui	a0,0x33333
    19fc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a00:	00352593          	slti	a1,a0,3
    1a04:	22b0ae23          	sw	a1,572(ra)

00001a08 <inst_167>:

inst_167:
// rs1_val==858993459 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x555, x1, 576, x4)
    1a08:	33333537          	lui	a0,0x33333
    1a0c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a10:	55552593          	slti	a1,a0,1365
    1a14:	24b0a023          	sw	a1,576(ra)

00001a18 <inst_168>:

inst_168:
// rs1_val==858993459 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, -0x556, x1, 580, x4)
    1a18:	33333537          	lui	a0,0x33333
    1a1c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a20:	aaa52593          	slti	a1,a0,-1366
    1a24:	24b0a223          	sw	a1,580(ra)

00001a28 <inst_169>:

inst_169:
// rs1_val==858993459 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x5, x1, 584, x4)
    1a28:	33333537          	lui	a0,0x33333
    1a2c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a30:	00552593          	slti	a1,a0,5
    1a34:	24b0a423          	sw	a1,584(ra)

00001a38 <inst_170>:

inst_170:
// rs1_val==858993459 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x333, x1, 588, x4)
    1a38:	33333537          	lui	a0,0x33333
    1a3c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a40:	33352593          	slti	a1,a0,819
    1a44:	24b0a623          	sw	a1,588(ra)

00001a48 <inst_171>:

inst_171:
// rs1_val==858993459 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x666, x1, 592, x4)
    1a48:	33333537          	lui	a0,0x33333
    1a4c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a50:	66652593          	slti	a1,a0,1638
    1a54:	24b0a823          	sw	a1,592(ra)

00001a58 <inst_172>:

inst_172:
// rs1_val==858993459 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, -0x2d, x1, 596, x4)
    1a58:	33333537          	lui	a0,0x33333
    1a5c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a60:	fd352593          	slti	a1,a0,-45
    1a64:	24b0aa23          	sw	a1,596(ra)

00001a68 <inst_173>:

inst_173:
// rs1_val==858993459 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x2d, x1, 600, x4)
    1a68:	33333537          	lui	a0,0x33333
    1a6c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a70:	02d52593          	slti	a1,a0,45
    1a74:	24b0ac23          	sw	a1,600(ra)

00001a78 <inst_174>:

inst_174:
// rs1_val==858993459 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x2, x1, 604, x4)
    1a78:	33333537          	lui	a0,0x33333
    1a7c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a80:	00252593          	slti	a1,a0,2
    1a84:	24b0ae23          	sw	a1,604(ra)

00001a88 <inst_175>:

inst_175:
// rs1_val==858993459 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x554, x1, 608, x4)
    1a88:	33333537          	lui	a0,0x33333
    1a8c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a90:	55452593          	slti	a1,a0,1364
    1a94:	26b0a023          	sw	a1,608(ra)

00001a98 <inst_176>:

inst_176:
// rs1_val==858993459 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x0, x1, 612, x4)
    1a98:	33333537          	lui	a0,0x33333
    1a9c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1aa0:	00052593          	slti	a1,a0,0
    1aa4:	26b0a223          	sw	a1,612(ra)

00001aa8 <inst_177>:

inst_177:
// rs1_val==858993459 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x4, x1, 616, x4)
    1aa8:	33333537          	lui	a0,0x33333
    1aac:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ab0:	00452593          	slti	a1,a0,4
    1ab4:	26b0a423          	sw	a1,616(ra)

00001ab8 <inst_178>:

inst_178:
// rs1_val==858993459 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x332, x1, 620, x4)
    1ab8:	33333537          	lui	a0,0x33333
    1abc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ac0:	33252593          	slti	a1,a0,818
    1ac4:	26b0a623          	sw	a1,620(ra)

00001ac8 <inst_179>:

inst_179:
// rs1_val==858993459 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x665, x1, 624, x4)
    1ac8:	33333537          	lui	a0,0x33333
    1acc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ad0:	66552593          	slti	a1,a0,1637
    1ad4:	26b0a823          	sw	a1,624(ra)

00001ad8 <inst_180>:

inst_180:
// rs1_val==858993459 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x2c, x1, 628, x4)
    1ad8:	33333537          	lui	a0,0x33333
    1adc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ae0:	02c52593          	slti	a1,a0,44
    1ae4:	26b0aa23          	sw	a1,628(ra)

00001ae8 <inst_181>:

inst_181:
// rs1_val==858993459 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x556, x1, 632, x4)
    1ae8:	33333537          	lui	a0,0x33333
    1aec:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1af0:	55652593          	slti	a1,a0,1366
    1af4:	26b0ac23          	sw	a1,632(ra)

00001af8 <inst_182>:

inst_182:
// rs1_val==858993459 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, -0x555, x1, 636, x4)
    1af8:	33333537          	lui	a0,0x33333
    1afc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b00:	aab52593          	slti	a1,a0,-1365
    1b04:	26b0ae23          	sw	a1,636(ra)

00001b08 <inst_183>:

inst_183:
// rs1_val==858993459 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x6, x1, 640, x4)
    1b08:	33333537          	lui	a0,0x33333
    1b0c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b10:	00652593          	slti	a1,a0,6
    1b14:	28b0a023          	sw	a1,640(ra)

00001b18 <inst_184>:

inst_184:
// rs1_val==858993459 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x334, x1, 644, x4)
    1b18:	33333537          	lui	a0,0x33333
    1b1c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b20:	33452593          	slti	a1,a0,820
    1b24:	28b0a223          	sw	a1,644(ra)

00001b28 <inst_185>:

inst_185:
// rs1_val==858993459 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x667, x1, 648, x4)
    1b28:	33333537          	lui	a0,0x33333
    1b2c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b30:	66752593          	slti	a1,a0,1639
    1b34:	28b0a423          	sw	a1,648(ra)

00001b38 <inst_186>:

inst_186:
// rs1_val==858993459 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, -0x2c, x1, 652, x4)
    1b38:	33333537          	lui	a0,0x33333
    1b3c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b40:	fd452593          	slti	a1,a0,-44
    1b44:	28b0a623          	sw	a1,652(ra)

00001b48 <inst_187>:

inst_187:
// rs1_val==858993459 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333333, 0x2e, x1, 656, x4)
    1b48:	33333537          	lui	a0,0x33333
    1b4c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b50:	02e52593          	slti	a1,a0,46
    1b54:	28b0a823          	sw	a1,656(ra)

00001b58 <inst_188>:

inst_188:
// rs1_val==1717986918 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x3, x1, 660, x4)
    1b58:	66666537          	lui	a0,0x66666
    1b5c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b60:	00352593          	slti	a1,a0,3
    1b64:	28b0aa23          	sw	a1,660(ra)

00001b68 <inst_189>:

inst_189:
// rs1_val==1717986918 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x555, x1, 664, x4)
    1b68:	66666537          	lui	a0,0x66666
    1b6c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b70:	55552593          	slti	a1,a0,1365
    1b74:	28b0ac23          	sw	a1,664(ra)

00001b78 <inst_190>:

inst_190:
// rs1_val==1717986918 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, -0x556, x1, 668, x4)
    1b78:	66666537          	lui	a0,0x66666
    1b7c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b80:	aaa52593          	slti	a1,a0,-1366
    1b84:	28b0ae23          	sw	a1,668(ra)

00001b88 <inst_191>:

inst_191:
// rs1_val==1717986918 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x5, x1, 672, x4)
    1b88:	66666537          	lui	a0,0x66666
    1b8c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b90:	00552593          	slti	a1,a0,5
    1b94:	2ab0a023          	sw	a1,672(ra)

00001b98 <inst_192>:

inst_192:
// rs1_val==1717986918 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x333, x1, 676, x4)
    1b98:	66666537          	lui	a0,0x66666
    1b9c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1ba0:	33352593          	slti	a1,a0,819
    1ba4:	2ab0a223          	sw	a1,676(ra)

00001ba8 <inst_193>:

inst_193:
// rs1_val==1717986918 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x666, x1, 680, x4)
    1ba8:	66666537          	lui	a0,0x66666
    1bac:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bb0:	66652593          	slti	a1,a0,1638
    1bb4:	2ab0a423          	sw	a1,680(ra)

00001bb8 <inst_194>:

inst_194:
// rs1_val==1717986918 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, -0x2d, x1, 684, x4)
    1bb8:	66666537          	lui	a0,0x66666
    1bbc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bc0:	fd352593          	slti	a1,a0,-45
    1bc4:	2ab0a623          	sw	a1,684(ra)

00001bc8 <inst_195>:

inst_195:
// rs1_val==1717986918 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x2d, x1, 688, x4)
    1bc8:	66666537          	lui	a0,0x66666
    1bcc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bd0:	02d52593          	slti	a1,a0,45
    1bd4:	2ab0a823          	sw	a1,688(ra)

00001bd8 <inst_196>:

inst_196:
// rs1_val==1717986918 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x2, x1, 692, x4)
    1bd8:	66666537          	lui	a0,0x66666
    1bdc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1be0:	00252593          	slti	a1,a0,2
    1be4:	2ab0aa23          	sw	a1,692(ra)

00001be8 <inst_197>:

inst_197:
// rs1_val==1717986918 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x554, x1, 696, x4)
    1be8:	66666537          	lui	a0,0x66666
    1bec:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bf0:	55452593          	slti	a1,a0,1364
    1bf4:	2ab0ac23          	sw	a1,696(ra)

00001bf8 <inst_198>:

inst_198:
// rs1_val==1717986918 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x0, x1, 700, x4)
    1bf8:	66666537          	lui	a0,0x66666
    1bfc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c00:	00052593          	slti	a1,a0,0
    1c04:	2ab0ae23          	sw	a1,700(ra)

00001c08 <inst_199>:

inst_199:
// rs1_val==1717986918 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x4, x1, 704, x4)
    1c08:	66666537          	lui	a0,0x66666
    1c0c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c10:	00452593          	slti	a1,a0,4
    1c14:	2cb0a023          	sw	a1,704(ra)

00001c18 <inst_200>:

inst_200:
// rs1_val==1717986918 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x332, x1, 708, x4)
    1c18:	66666537          	lui	a0,0x66666
    1c1c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c20:	33252593          	slti	a1,a0,818
    1c24:	2cb0a223          	sw	a1,708(ra)

00001c28 <inst_201>:

inst_201:
// rs1_val==1717986918 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x665, x1, 712, x4)
    1c28:	66666537          	lui	a0,0x66666
    1c2c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c30:	66552593          	slti	a1,a0,1637
    1c34:	2cb0a423          	sw	a1,712(ra)

00001c38 <inst_202>:

inst_202:
// rs1_val==1717986918 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x2c, x1, 716, x4)
    1c38:	66666537          	lui	a0,0x66666
    1c3c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c40:	02c52593          	slti	a1,a0,44
    1c44:	2cb0a623          	sw	a1,716(ra)

00001c48 <inst_203>:

inst_203:
// rs1_val==1717986918 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x556, x1, 720, x4)
    1c48:	66666537          	lui	a0,0x66666
    1c4c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c50:	55652593          	slti	a1,a0,1366
    1c54:	2cb0a823          	sw	a1,720(ra)

00001c58 <inst_204>:

inst_204:
// rs1_val==1717986918 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, -0x555, x1, 724, x4)
    1c58:	66666537          	lui	a0,0x66666
    1c5c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c60:	aab52593          	slti	a1,a0,-1365
    1c64:	2cb0aa23          	sw	a1,724(ra)

00001c68 <inst_205>:

inst_205:
// rs1_val==1717986918 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x6, x1, 728, x4)
    1c68:	66666537          	lui	a0,0x66666
    1c6c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c70:	00652593          	slti	a1,a0,6
    1c74:	2cb0ac23          	sw	a1,728(ra)

00001c78 <inst_206>:

inst_206:
// rs1_val==1717986918 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x334, x1, 732, x4)
    1c78:	66666537          	lui	a0,0x66666
    1c7c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c80:	33452593          	slti	a1,a0,820
    1c84:	2cb0ae23          	sw	a1,732(ra)

00001c88 <inst_207>:

inst_207:
// rs1_val==1717986918 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x667, x1, 736, x4)
    1c88:	66666537          	lui	a0,0x66666
    1c8c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c90:	66752593          	slti	a1,a0,1639
    1c94:	2eb0a023          	sw	a1,736(ra)

00001c98 <inst_208>:

inst_208:
// rs1_val==1717986918 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, -0x2c, x1, 740, x4)
    1c98:	66666537          	lui	a0,0x66666
    1c9c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1ca0:	fd452593          	slti	a1,a0,-44
    1ca4:	2eb0a223          	sw	a1,740(ra)

00001ca8 <inst_209>:

inst_209:
// rs1_val==1717986918 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666666, 0x2e, x1, 744, x4)
    1ca8:	66666537          	lui	a0,0x66666
    1cac:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1cb0:	02e52593          	slti	a1,a0,46
    1cb4:	2eb0a423          	sw	a1,744(ra)

00001cb8 <inst_210>:

inst_210:
// rs1_val==-46340 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x3, x1, 748, x4)
    1cb8:	ffff5537          	lui	a0,0xffff5
    1cbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1cc0:	00352593          	slti	a1,a0,3
    1cc4:	2eb0a623          	sw	a1,748(ra)

00001cc8 <inst_211>:

inst_211:
// rs1_val==-46340 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x555, x1, 752, x4)
    1cc8:	ffff5537          	lui	a0,0xffff5
    1ccc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1cd0:	55552593          	slti	a1,a0,1365
    1cd4:	2eb0a823          	sw	a1,752(ra)

00001cd8 <inst_212>:

inst_212:
// rs1_val==-46340 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, -0x556, x1, 756, x4)
    1cd8:	ffff5537          	lui	a0,0xffff5
    1cdc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1ce0:	aaa52593          	slti	a1,a0,-1366
    1ce4:	2eb0aa23          	sw	a1,756(ra)

00001ce8 <inst_213>:

inst_213:
// rs1_val==-46340 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x5, x1, 760, x4)
    1ce8:	ffff5537          	lui	a0,0xffff5
    1cec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1cf0:	00552593          	slti	a1,a0,5
    1cf4:	2eb0ac23          	sw	a1,760(ra)

00001cf8 <inst_214>:

inst_214:
// rs1_val==-46340 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x333, x1, 764, x4)
    1cf8:	ffff5537          	lui	a0,0xffff5
    1cfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d00:	33352593          	slti	a1,a0,819
    1d04:	2eb0ae23          	sw	a1,764(ra)

00001d08 <inst_215>:

inst_215:
// rs1_val==-46340 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x666, x1, 768, x4)
    1d08:	ffff5537          	lui	a0,0xffff5
    1d0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d10:	66652593          	slti	a1,a0,1638
    1d14:	30b0a023          	sw	a1,768(ra)

00001d18 <inst_216>:

inst_216:
// rs1_val==-46340 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, -0x2d, x1, 772, x4)
    1d18:	ffff5537          	lui	a0,0xffff5
    1d1c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d20:	fd352593          	slti	a1,a0,-45
    1d24:	30b0a223          	sw	a1,772(ra)

00001d28 <inst_217>:

inst_217:
// rs1_val==-46340 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x2d, x1, 776, x4)
    1d28:	ffff5537          	lui	a0,0xffff5
    1d2c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d30:	02d52593          	slti	a1,a0,45
    1d34:	30b0a423          	sw	a1,776(ra)

00001d38 <inst_218>:

inst_218:
// rs1_val==-46340 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x2, x1, 780, x4)
    1d38:	ffff5537          	lui	a0,0xffff5
    1d3c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d40:	00252593          	slti	a1,a0,2
    1d44:	30b0a623          	sw	a1,780(ra)

00001d48 <inst_219>:

inst_219:
// rs1_val==-46340 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x554, x1, 784, x4)
    1d48:	ffff5537          	lui	a0,0xffff5
    1d4c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d50:	55452593          	slti	a1,a0,1364
    1d54:	30b0a823          	sw	a1,784(ra)

00001d58 <inst_220>:

inst_220:
// rs1_val==-46340 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x0, x1, 788, x4)
    1d58:	ffff5537          	lui	a0,0xffff5
    1d5c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d60:	00052593          	slti	a1,a0,0
    1d64:	30b0aa23          	sw	a1,788(ra)

00001d68 <inst_221>:

inst_221:
// rs1_val==-46340 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x4, x1, 792, x4)
    1d68:	ffff5537          	lui	a0,0xffff5
    1d6c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d70:	00452593          	slti	a1,a0,4
    1d74:	30b0ac23          	sw	a1,792(ra)

00001d78 <inst_222>:

inst_222:
// rs1_val==-46340 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x332, x1, 796, x4)
    1d78:	ffff5537          	lui	a0,0xffff5
    1d7c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d80:	33252593          	slti	a1,a0,818
    1d84:	30b0ae23          	sw	a1,796(ra)

00001d88 <inst_223>:

inst_223:
// rs1_val==-46340 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x665, x1, 800, x4)
    1d88:	ffff5537          	lui	a0,0xffff5
    1d8c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d90:	66552593          	slti	a1,a0,1637
    1d94:	32b0a023          	sw	a1,800(ra)

00001d98 <inst_224>:

inst_224:
// rs1_val==-46340 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x2c, x1, 804, x4)
    1d98:	ffff5537          	lui	a0,0xffff5
    1d9c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1da0:	02c52593          	slti	a1,a0,44
    1da4:	32b0a223          	sw	a1,804(ra)

00001da8 <inst_225>:

inst_225:
// rs1_val==-46340 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x556, x1, 808, x4)
    1da8:	ffff5537          	lui	a0,0xffff5
    1dac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1db0:	55652593          	slti	a1,a0,1366
    1db4:	32b0a423          	sw	a1,808(ra)

00001db8 <inst_226>:

inst_226:
// rs1_val==-46340 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, -0x555, x1, 812, x4)
    1db8:	ffff5537          	lui	a0,0xffff5
    1dbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1dc0:	aab52593          	slti	a1,a0,-1365
    1dc4:	32b0a623          	sw	a1,812(ra)

00001dc8 <inst_227>:

inst_227:
// rs1_val==-46340 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x6, x1, 816, x4)
    1dc8:	ffff5537          	lui	a0,0xffff5
    1dcc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1dd0:	00652593          	slti	a1,a0,6
    1dd4:	32b0a823          	sw	a1,816(ra)

00001dd8 <inst_228>:

inst_228:
// rs1_val==-46340 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x334, x1, 820, x4)
    1dd8:	ffff5537          	lui	a0,0xffff5
    1ddc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1de0:	33452593          	slti	a1,a0,820
    1de4:	32b0aa23          	sw	a1,820(ra)

00001de8 <inst_229>:

inst_229:
// rs1_val==-46340 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x667, x1, 824, x4)
    1de8:	ffff5537          	lui	a0,0xffff5
    1dec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1df0:	66752593          	slti	a1,a0,1639
    1df4:	32b0ac23          	sw	a1,824(ra)

00001df8 <inst_230>:

inst_230:
// rs1_val==-46340 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, -0x2c, x1, 828, x4)
    1df8:	ffff5537          	lui	a0,0xffff5
    1dfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e00:	fd452593          	slti	a1,a0,-44
    1e04:	32b0ae23          	sw	a1,828(ra)

00001e08 <inst_231>:

inst_231:
// rs1_val==-46340 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb504, 0x2e, x1, 832, x4)
    1e08:	ffff5537          	lui	a0,0xffff5
    1e0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e10:	02e52593          	slti	a1,a0,46
    1e14:	34b0a023          	sw	a1,832(ra)

00001e18 <inst_232>:

inst_232:
// rs1_val==46340 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x3, x1, 836, x4)
    1e18:	0000b537          	lui	a0,0xb
    1e1c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e20:	00352593          	slti	a1,a0,3
    1e24:	34b0a223          	sw	a1,836(ra)

00001e28 <inst_233>:

inst_233:
// rs1_val==46340 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x555, x1, 840, x4)
    1e28:	0000b537          	lui	a0,0xb
    1e2c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e30:	55552593          	slti	a1,a0,1365
    1e34:	34b0a423          	sw	a1,840(ra)

00001e38 <inst_234>:

inst_234:
// rs1_val==46340 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, -0x556, x1, 844, x4)
    1e38:	0000b537          	lui	a0,0xb
    1e3c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e40:	aaa52593          	slti	a1,a0,-1366
    1e44:	34b0a623          	sw	a1,844(ra)

00001e48 <inst_235>:

inst_235:
// rs1_val==46340 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x5, x1, 848, x4)
    1e48:	0000b537          	lui	a0,0xb
    1e4c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e50:	00552593          	slti	a1,a0,5
    1e54:	34b0a823          	sw	a1,848(ra)

00001e58 <inst_236>:

inst_236:
// rs1_val==46340 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x333, x1, 852, x4)
    1e58:	0000b537          	lui	a0,0xb
    1e5c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e60:	33352593          	slti	a1,a0,819
    1e64:	34b0aa23          	sw	a1,852(ra)

00001e68 <inst_237>:

inst_237:
// rs1_val==46340 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x666, x1, 856, x4)
    1e68:	0000b537          	lui	a0,0xb
    1e6c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e70:	66652593          	slti	a1,a0,1638
    1e74:	34b0ac23          	sw	a1,856(ra)

00001e78 <inst_238>:

inst_238:
// rs1_val==46340 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, -0x2d, x1, 860, x4)
    1e78:	0000b537          	lui	a0,0xb
    1e7c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e80:	fd352593          	slti	a1,a0,-45
    1e84:	34b0ae23          	sw	a1,860(ra)

00001e88 <inst_239>:

inst_239:
// rs1_val==46340 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x2d, x1, 864, x4)
    1e88:	0000b537          	lui	a0,0xb
    1e8c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e90:	02d52593          	slti	a1,a0,45
    1e94:	36b0a023          	sw	a1,864(ra)

00001e98 <inst_240>:

inst_240:
// rs1_val==46340 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x2, x1, 868, x4)
    1e98:	0000b537          	lui	a0,0xb
    1e9c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ea0:	00252593          	slti	a1,a0,2
    1ea4:	36b0a223          	sw	a1,868(ra)

00001ea8 <inst_241>:

inst_241:
// rs1_val==46340 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x554, x1, 872, x4)
    1ea8:	0000b537          	lui	a0,0xb
    1eac:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1eb0:	55452593          	slti	a1,a0,1364
    1eb4:	36b0a423          	sw	a1,872(ra)

00001eb8 <inst_242>:

inst_242:
// rs1_val==46340 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x0, x1, 876, x4)
    1eb8:	0000b537          	lui	a0,0xb
    1ebc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ec0:	00052593          	slti	a1,a0,0
    1ec4:	36b0a623          	sw	a1,876(ra)

00001ec8 <inst_243>:

inst_243:
// rs1_val==46340 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x4, x1, 880, x4)
    1ec8:	0000b537          	lui	a0,0xb
    1ecc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ed0:	00452593          	slti	a1,a0,4
    1ed4:	36b0a823          	sw	a1,880(ra)

00001ed8 <inst_244>:

inst_244:
// rs1_val==46340 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x332, x1, 884, x4)
    1ed8:	0000b537          	lui	a0,0xb
    1edc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ee0:	33252593          	slti	a1,a0,818
    1ee4:	36b0aa23          	sw	a1,884(ra)

00001ee8 <inst_245>:

inst_245:
// rs1_val==46340 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x665, x1, 888, x4)
    1ee8:	0000b537          	lui	a0,0xb
    1eec:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ef0:	66552593          	slti	a1,a0,1637
    1ef4:	36b0ac23          	sw	a1,888(ra)

00001ef8 <inst_246>:

inst_246:
// rs1_val==46340 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x2c, x1, 892, x4)
    1ef8:	0000b537          	lui	a0,0xb
    1efc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f00:	02c52593          	slti	a1,a0,44
    1f04:	36b0ae23          	sw	a1,892(ra)

00001f08 <inst_247>:

inst_247:
// rs1_val==46340 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x556, x1, 896, x4)
    1f08:	0000b537          	lui	a0,0xb
    1f0c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f10:	55652593          	slti	a1,a0,1366
    1f14:	38b0a023          	sw	a1,896(ra)

00001f18 <inst_248>:

inst_248:
// rs1_val==46340 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, -0x555, x1, 900, x4)
    1f18:	0000b537          	lui	a0,0xb
    1f1c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f20:	aab52593          	slti	a1,a0,-1365
    1f24:	38b0a223          	sw	a1,900(ra)

00001f28 <inst_249>:

inst_249:
// rs1_val==46340 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x6, x1, 904, x4)
    1f28:	0000b537          	lui	a0,0xb
    1f2c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f30:	00652593          	slti	a1,a0,6
    1f34:	38b0a423          	sw	a1,904(ra)

00001f38 <inst_250>:

inst_250:
// rs1_val==46340 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x334, x1, 908, x4)
    1f38:	0000b537          	lui	a0,0xb
    1f3c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f40:	33452593          	slti	a1,a0,820
    1f44:	38b0a623          	sw	a1,908(ra)

00001f48 <inst_251>:

inst_251:
// rs1_val==46340 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x667, x1, 912, x4)
    1f48:	0000b537          	lui	a0,0xb
    1f4c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f50:	66752593          	slti	a1,a0,1639
    1f54:	38b0a823          	sw	a1,912(ra)

00001f58 <inst_252>:

inst_252:
// rs1_val==46340 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, -0x2c, x1, 916, x4)
    1f58:	0000b537          	lui	a0,0xb
    1f5c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f60:	fd452593          	slti	a1,a0,-44
    1f64:	38b0aa23          	sw	a1,916(ra)

00001f68 <inst_253>:

inst_253:
// rs1_val==46340 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb504, 0x2e, x1, 920, x4)
    1f68:	0000b537          	lui	a0,0xb
    1f6c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f70:	02e52593          	slti	a1,a0,46
    1f74:	38b0ac23          	sw	a1,920(ra)

00001f78 <inst_254>:

inst_254:
// rs1_val==2 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x3, x1, 924, x4)
    1f78:	00200513          	li	a0,2
    1f7c:	00352593          	slti	a1,a0,3
    1f80:	38b0ae23          	sw	a1,924(ra)

00001f84 <inst_255>:

inst_255:
// rs1_val==2 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x555, x1, 928, x4)
    1f84:	00200513          	li	a0,2
    1f88:	55552593          	slti	a1,a0,1365
    1f8c:	3ab0a023          	sw	a1,928(ra)

00001f90 <inst_256>:

inst_256:
// rs1_val==2 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2, -0x556, x1, 932, x4)
    1f90:	00200513          	li	a0,2
    1f94:	aaa52593          	slti	a1,a0,-1366
    1f98:	3ab0a223          	sw	a1,932(ra)

00001f9c <inst_257>:

inst_257:
// rs1_val==2 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x5, x1, 936, x4)
    1f9c:	00200513          	li	a0,2
    1fa0:	00552593          	slti	a1,a0,5
    1fa4:	3ab0a423          	sw	a1,936(ra)

00001fa8 <inst_258>:

inst_258:
// rs1_val==2 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x333, x1, 940, x4)
    1fa8:	00200513          	li	a0,2
    1fac:	33352593          	slti	a1,a0,819
    1fb0:	3ab0a623          	sw	a1,940(ra)

00001fb4 <inst_259>:

inst_259:
// rs1_val==2 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x666, x1, 944, x4)
    1fb4:	00200513          	li	a0,2
    1fb8:	66652593          	slti	a1,a0,1638
    1fbc:	3ab0a823          	sw	a1,944(ra)

00001fc0 <inst_260>:

inst_260:
// rs1_val==2 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2, -0x2d, x1, 948, x4)
    1fc0:	00200513          	li	a0,2
    1fc4:	fd352593          	slti	a1,a0,-45
    1fc8:	3ab0aa23          	sw	a1,948(ra)

00001fcc <inst_261>:

inst_261:
// rs1_val==2 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x2d, x1, 952, x4)
    1fcc:	00200513          	li	a0,2
    1fd0:	02d52593          	slti	a1,a0,45
    1fd4:	3ab0ac23          	sw	a1,952(ra)

00001fd8 <inst_262>:

inst_262:
// rs1_val==2 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2, 0x2, x1, 956, x4)
    1fd8:	00200513          	li	a0,2
    1fdc:	00252593          	slti	a1,a0,2
    1fe0:	3ab0ae23          	sw	a1,956(ra)

00001fe4 <inst_263>:

inst_263:
// rs1_val==2 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x554, x1, 960, x4)
    1fe4:	00200513          	li	a0,2
    1fe8:	55452593          	slti	a1,a0,1364
    1fec:	3cb0a023          	sw	a1,960(ra)

00001ff0 <inst_264>:

inst_264:
// rs1_val==2 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2, 0x0, x1, 964, x4)
    1ff0:	00200513          	li	a0,2
    1ff4:	00052593          	slti	a1,a0,0
    1ff8:	3cb0a223          	sw	a1,964(ra)

00001ffc <inst_265>:

inst_265:
// rs1_val==2 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x4, x1, 968, x4)
    1ffc:	00200513          	li	a0,2
    2000:	00452593          	slti	a1,a0,4
    2004:	3cb0a423          	sw	a1,968(ra)

00002008 <inst_266>:

inst_266:
// rs1_val==2 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x332, x1, 972, x4)
    2008:	00200513          	li	a0,2
    200c:	33252593          	slti	a1,a0,818
    2010:	3cb0a623          	sw	a1,972(ra)

00002014 <inst_267>:

inst_267:
// rs1_val==2 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x665, x1, 976, x4)
    2014:	00200513          	li	a0,2
    2018:	66552593          	slti	a1,a0,1637
    201c:	3cb0a823          	sw	a1,976(ra)

00002020 <inst_268>:

inst_268:
// rs1_val==2 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x2c, x1, 980, x4)
    2020:	00200513          	li	a0,2
    2024:	02c52593          	slti	a1,a0,44
    2028:	3cb0aa23          	sw	a1,980(ra)

0000202c <inst_269>:

inst_269:
// rs1_val==2 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x556, x1, 984, x4)
    202c:	00200513          	li	a0,2
    2030:	55652593          	slti	a1,a0,1366
    2034:	3cb0ac23          	sw	a1,984(ra)

00002038 <inst_270>:

inst_270:
// rs1_val==2 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2, -0x555, x1, 988, x4)
    2038:	00200513          	li	a0,2
    203c:	aab52593          	slti	a1,a0,-1365
    2040:	3cb0ae23          	sw	a1,988(ra)

00002044 <inst_271>:

inst_271:
// rs1_val==2 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x6, x1, 992, x4)
    2044:	00200513          	li	a0,2
    2048:	00652593          	slti	a1,a0,6
    204c:	3eb0a023          	sw	a1,992(ra)

00002050 <inst_272>:

inst_272:
// rs1_val==2 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x334, x1, 996, x4)
    2050:	00200513          	li	a0,2
    2054:	33452593          	slti	a1,a0,820
    2058:	3eb0a223          	sw	a1,996(ra)

0000205c <inst_273>:

inst_273:
// rs1_val==2 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x667, x1, 1000, x4)
    205c:	00200513          	li	a0,2
    2060:	66752593          	slti	a1,a0,1639
    2064:	3eb0a423          	sw	a1,1000(ra)

00002068 <inst_274>:

inst_274:
// rs1_val==2 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x2, -0x2c, x1, 1004, x4)
    2068:	00200513          	li	a0,2
    206c:	fd452593          	slti	a1,a0,-44
    2070:	3eb0a623          	sw	a1,1004(ra)

00002074 <inst_275>:

inst_275:
// rs1_val==2 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x2;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, 0x2, 0x2e, x1, 1008, x4)
    2074:	00200513          	li	a0,2
    2078:	02e52593          	slti	a1,a0,46
    207c:	3eb0a823          	sw	a1,1008(ra)

00002080 <inst_276>:

inst_276:
// rs1_val==1431655764 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x3, x1, 1012, x4)
    2080:	55555537          	lui	a0,0x55555
    2084:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2088:	00352593          	slti	a1,a0,3
    208c:	3eb0aa23          	sw	a1,1012(ra)

00002090 <inst_277>:

inst_277:
// rs1_val==1431655764 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x555, x1, 1016, x4)
    2090:	55555537          	lui	a0,0x55555
    2094:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2098:	55552593          	slti	a1,a0,1365
    209c:	3eb0ac23          	sw	a1,1016(ra)

000020a0 <inst_278>:

inst_278:
// rs1_val==1431655764 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, -0x556, x1, 1020, x4)
    20a0:	55555537          	lui	a0,0x55555
    20a4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20a8:	aaa52593          	slti	a1,a0,-1366
    20ac:	3eb0ae23          	sw	a1,1020(ra)

000020b0 <inst_279>:

inst_279:
// rs1_val==1431655764 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x5, x1, 1024, x4)
    20b0:	55555537          	lui	a0,0x55555
    20b4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20b8:	00552593          	slti	a1,a0,5
    20bc:	40b0a023          	sw	a1,1024(ra)

000020c0 <inst_280>:

inst_280:
// rs1_val==1431655764 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x333, x1, 1028, x4)
    20c0:	55555537          	lui	a0,0x55555
    20c4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20c8:	33352593          	slti	a1,a0,819
    20cc:	40b0a223          	sw	a1,1028(ra)

000020d0 <inst_281>:

inst_281:
// rs1_val==1431655764 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x666, x1, 1032, x4)
    20d0:	55555537          	lui	a0,0x55555
    20d4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20d8:	66652593          	slti	a1,a0,1638
    20dc:	40b0a423          	sw	a1,1032(ra)

000020e0 <inst_282>:

inst_282:
// rs1_val==1431655764 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, -0x2d, x1, 1036, x4)
    20e0:	55555537          	lui	a0,0x55555
    20e4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20e8:	fd352593          	slti	a1,a0,-45
    20ec:	40b0a623          	sw	a1,1036(ra)

000020f0 <inst_283>:

inst_283:
// rs1_val==1431655764 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x2d, x1, 1040, x4)
    20f0:	55555537          	lui	a0,0x55555
    20f4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20f8:	02d52593          	slti	a1,a0,45
    20fc:	40b0a823          	sw	a1,1040(ra)

00002100 <inst_284>:

inst_284:
// rs1_val==1431655764 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x2, x1, 1044, x4)
    2100:	55555537          	lui	a0,0x55555
    2104:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2108:	00252593          	slti	a1,a0,2
    210c:	40b0aa23          	sw	a1,1044(ra)

00002110 <inst_285>:

inst_285:
// rs1_val==1431655764 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x554, x1, 1048, x4)
    2110:	55555537          	lui	a0,0x55555
    2114:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2118:	55452593          	slti	a1,a0,1364
    211c:	40b0ac23          	sw	a1,1048(ra)

00002120 <inst_286>:

inst_286:
// rs1_val==1431655764 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x0, x1, 1052, x4)
    2120:	55555537          	lui	a0,0x55555
    2124:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2128:	00052593          	slti	a1,a0,0
    212c:	40b0ae23          	sw	a1,1052(ra)

00002130 <inst_287>:

inst_287:
// rs1_val==1431655764 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x4, x1, 1056, x4)
    2130:	55555537          	lui	a0,0x55555
    2134:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2138:	00452593          	slti	a1,a0,4
    213c:	42b0a023          	sw	a1,1056(ra)

00002140 <inst_288>:

inst_288:
// rs1_val==1431655764 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x332, x1, 1060, x4)
    2140:	55555537          	lui	a0,0x55555
    2144:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2148:	33252593          	slti	a1,a0,818
    214c:	42b0a223          	sw	a1,1060(ra)

00002150 <inst_289>:

inst_289:
// rs1_val==1431655764 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x665, x1, 1064, x4)
    2150:	55555537          	lui	a0,0x55555
    2154:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2158:	66552593          	slti	a1,a0,1637
    215c:	42b0a423          	sw	a1,1064(ra)

00002160 <inst_290>:

inst_290:
// rs1_val==1431655764 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x2c, x1, 1068, x4)
    2160:	55555537          	lui	a0,0x55555
    2164:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2168:	02c52593          	slti	a1,a0,44
    216c:	42b0a623          	sw	a1,1068(ra)

00002170 <inst_291>:

inst_291:
// rs1_val==1431655764 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x556, x1, 1072, x4)
    2170:	55555537          	lui	a0,0x55555
    2174:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2178:	55652593          	slti	a1,a0,1366
    217c:	42b0a823          	sw	a1,1072(ra)

00002180 <inst_292>:

inst_292:
// rs1_val==1431655764 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, -0x555, x1, 1076, x4)
    2180:	55555537          	lui	a0,0x55555
    2184:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2188:	aab52593          	slti	a1,a0,-1365
    218c:	42b0aa23          	sw	a1,1076(ra)

00002190 <inst_293>:

inst_293:
// rs1_val==1431655764 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x6, x1, 1080, x4)
    2190:	55555537          	lui	a0,0x55555
    2194:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2198:	00652593          	slti	a1,a0,6
    219c:	42b0ac23          	sw	a1,1080(ra)

000021a0 <inst_294>:

inst_294:
// rs1_val==1431655764 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x334, x1, 1084, x4)
    21a0:	55555537          	lui	a0,0x55555
    21a4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21a8:	33452593          	slti	a1,a0,820
    21ac:	42b0ae23          	sw	a1,1084(ra)

000021b0 <inst_295>:

inst_295:
// rs1_val==1431655764 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x667, x1, 1088, x4)
    21b0:	55555537          	lui	a0,0x55555
    21b4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21b8:	66752593          	slti	a1,a0,1639
    21bc:	44b0a023          	sw	a1,1088(ra)

000021c0 <inst_296>:

inst_296:
// rs1_val==1431655764 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, -0x2c, x1, 1092, x4)
    21c0:	55555537          	lui	a0,0x55555
    21c4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21c8:	fd452593          	slti	a1,a0,-44
    21cc:	44b0a223          	sw	a1,1092(ra)

000021d0 <inst_297>:

inst_297:
// rs1_val==1431655764 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555554, 0x2e, x1, 1096, x4)
    21d0:	55555537          	lui	a0,0x55555
    21d4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21d8:	02e52593          	slti	a1,a0,46
    21dc:	44b0a423          	sw	a1,1096(ra)

000021e0 <inst_298>:

inst_298:
// rs1_val==0 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x3, x1, 1100, x4)
    21e0:	00000513          	li	a0,0
    21e4:	00352593          	slti	a1,a0,3
    21e8:	44b0a623          	sw	a1,1100(ra)

000021ec <inst_299>:

inst_299:
// rs1_val==0 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x555, x1, 1104, x4)
    21ec:	00000513          	li	a0,0
    21f0:	55552593          	slti	a1,a0,1365
    21f4:	44b0a823          	sw	a1,1104(ra)

000021f8 <inst_300>:

inst_300:
// rs1_val==0 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x0, -0x556, x1, 1108, x4)
    21f8:	00000513          	li	a0,0
    21fc:	aaa52593          	slti	a1,a0,-1366
    2200:	44b0aa23          	sw	a1,1108(ra)

00002204 <inst_301>:

inst_301:
// rs1_val==0 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x5, x1, 1112, x4)
    2204:	00000513          	li	a0,0
    2208:	00552593          	slti	a1,a0,5
    220c:	44b0ac23          	sw	a1,1112(ra)

00002210 <inst_302>:

inst_302:
// rs1_val==0 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x333, x1, 1116, x4)
    2210:	00000513          	li	a0,0
    2214:	33352593          	slti	a1,a0,819
    2218:	44b0ae23          	sw	a1,1116(ra)

0000221c <inst_303>:

inst_303:
// rs1_val==0 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x666, x1, 1120, x4)
    221c:	00000513          	li	a0,0
    2220:	66652593          	slti	a1,a0,1638
    2224:	46b0a023          	sw	a1,1120(ra)

00002228 <inst_304>:

inst_304:
// rs1_val==858993460 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x332, x1, 1124, x4)
    2228:	33333537          	lui	a0,0x33333
    222c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2230:	33252593          	slti	a1,a0,818
    2234:	46b0a223          	sw	a1,1124(ra)

00002238 <inst_305>:

inst_305:
// rs1_val==858993460 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x665, x1, 1128, x4)
    2238:	33333537          	lui	a0,0x33333
    223c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2240:	66552593          	slti	a1,a0,1637
    2244:	46b0a423          	sw	a1,1128(ra)

00002248 <inst_306>:

inst_306:
// rs1_val==858993460 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x2c, x1, 1132, x4)
    2248:	33333537          	lui	a0,0x33333
    224c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2250:	02c52593          	slti	a1,a0,44
    2254:	46b0a623          	sw	a1,1132(ra)

00002258 <inst_307>:

inst_307:
// rs1_val==858993460 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x556, x1, 1136, x4)
    2258:	33333537          	lui	a0,0x33333
    225c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2260:	55652593          	slti	a1,a0,1366
    2264:	46b0a823          	sw	a1,1136(ra)

00002268 <inst_308>:

inst_308:
// rs1_val==858993460 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, -0x555, x1, 1140, x4)
    2268:	33333537          	lui	a0,0x33333
    226c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2270:	aab52593          	slti	a1,a0,-1365
    2274:	46b0aa23          	sw	a1,1140(ra)

00002278 <inst_309>:

inst_309:
// rs1_val==858993460 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x6, x1, 1144, x4)
    2278:	33333537          	lui	a0,0x33333
    227c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2280:	00652593          	slti	a1,a0,6
    2284:	46b0ac23          	sw	a1,1144(ra)

00002288 <inst_310>:

inst_310:
// rs1_val==858993460 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x334, x1, 1148, x4)
    2288:	33333537          	lui	a0,0x33333
    228c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2290:	33452593          	slti	a1,a0,820
    2294:	46b0ae23          	sw	a1,1148(ra)

00002298 <inst_311>:

inst_311:
// rs1_val==858993460 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x667, x1, 1152, x4)
    2298:	33333537          	lui	a0,0x33333
    229c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22a0:	66752593          	slti	a1,a0,1639
    22a4:	48b0a023          	sw	a1,1152(ra)

000022a8 <inst_312>:

inst_312:
// rs1_val==858993460 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, -0x2c, x1, 1156, x4)
    22a8:	33333537          	lui	a0,0x33333
    22ac:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22b0:	fd452593          	slti	a1,a0,-44
    22b4:	48b0a223          	sw	a1,1156(ra)

000022b8 <inst_313>:

inst_313:
// rs1_val==858993460 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x2e, x1, 1160, x4)
    22b8:	33333537          	lui	a0,0x33333
    22bc:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22c0:	02e52593          	slti	a1,a0,46
    22c4:	48b0a423          	sw	a1,1160(ra)

000022c8 <inst_314>:

inst_314:
// rs1_val==1717986919 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x3, x1, 1164, x4)
    22c8:	66666537          	lui	a0,0x66666
    22cc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    22d0:	00352593          	slti	a1,a0,3
    22d4:	48b0a623          	sw	a1,1164(ra)

000022d8 <inst_315>:

inst_315:
// rs1_val==1717986919 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x555, x1, 1168, x4)
    22d8:	66666537          	lui	a0,0x66666
    22dc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    22e0:	55552593          	slti	a1,a0,1365
    22e4:	48b0a823          	sw	a1,1168(ra)

000022e8 <inst_316>:

inst_316:
// rs1_val==1717986919 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, -0x556, x1, 1172, x4)
    22e8:	66666537          	lui	a0,0x66666
    22ec:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    22f0:	aaa52593          	slti	a1,a0,-1366
    22f4:	48b0aa23          	sw	a1,1172(ra)

000022f8 <inst_317>:

inst_317:
// rs1_val==1717986919 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x5, x1, 1176, x4)
    22f8:	66666537          	lui	a0,0x66666
    22fc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2300:	00552593          	slti	a1,a0,5
    2304:	48b0ac23          	sw	a1,1176(ra)

00002308 <inst_318>:

inst_318:
// rs1_val==1717986919 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x333, x1, 1180, x4)
    2308:	66666537          	lui	a0,0x66666
    230c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2310:	33352593          	slti	a1,a0,819
    2314:	48b0ae23          	sw	a1,1180(ra)

00002318 <inst_319>:

inst_319:
// rs1_val==1717986919 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x666, x1, 1184, x4)
    2318:	66666537          	lui	a0,0x66666
    231c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2320:	66652593          	slti	a1,a0,1638
    2324:	4ab0a023          	sw	a1,1184(ra)

00002328 <inst_320>:

inst_320:
// rs1_val==1717986919 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, -0x2d, x1, 1188, x4)
    2328:	66666537          	lui	a0,0x66666
    232c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2330:	fd352593          	slti	a1,a0,-45
    2334:	4ab0a223          	sw	a1,1188(ra)

00002338 <inst_321>:

inst_321:
// rs1_val==1717986919 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x2d, x1, 1192, x4)
    2338:	66666537          	lui	a0,0x66666
    233c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2340:	02d52593          	slti	a1,a0,45
    2344:	4ab0a423          	sw	a1,1192(ra)

00002348 <inst_322>:

inst_322:
// rs1_val==1717986919 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x2, x1, 1196, x4)
    2348:	66666537          	lui	a0,0x66666
    234c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2350:	00252593          	slti	a1,a0,2
    2354:	4ab0a623          	sw	a1,1196(ra)

00002358 <inst_323>:

inst_323:
// rs1_val==1717986919 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x554, x1, 1200, x4)
    2358:	66666537          	lui	a0,0x66666
    235c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2360:	55452593          	slti	a1,a0,1364
    2364:	4ab0a823          	sw	a1,1200(ra)

00002368 <inst_324>:

inst_324:
// rs1_val==1717986919 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x0, x1, 1204, x4)
    2368:	66666537          	lui	a0,0x66666
    236c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2370:	00052593          	slti	a1,a0,0
    2374:	4ab0aa23          	sw	a1,1204(ra)

00002378 <inst_325>:

inst_325:
// rs1_val==1717986919 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x4, x1, 1208, x4)
    2378:	66666537          	lui	a0,0x66666
    237c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2380:	00452593          	slti	a1,a0,4
    2384:	4ab0ac23          	sw	a1,1208(ra)

00002388 <inst_326>:

inst_326:
// rs1_val==1717986919 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x332, x1, 1212, x4)
    2388:	66666537          	lui	a0,0x66666
    238c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2390:	33252593          	slti	a1,a0,818
    2394:	4ab0ae23          	sw	a1,1212(ra)

00002398 <inst_327>:

inst_327:
// rs1_val==1717986919 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x665, x1, 1216, x4)
    2398:	66666537          	lui	a0,0x66666
    239c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23a0:	66552593          	slti	a1,a0,1637
    23a4:	4cb0a023          	sw	a1,1216(ra)

000023a8 <inst_328>:

inst_328:
// rs1_val==1717986919 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x2c, x1, 1220, x4)
    23a8:	66666537          	lui	a0,0x66666
    23ac:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23b0:	02c52593          	slti	a1,a0,44
    23b4:	4cb0a223          	sw	a1,1220(ra)

000023b8 <inst_329>:

inst_329:
// rs1_val==1717986919 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x556, x1, 1224, x4)
    23b8:	66666537          	lui	a0,0x66666
    23bc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23c0:	55652593          	slti	a1,a0,1366
    23c4:	4cb0a423          	sw	a1,1224(ra)

000023c8 <inst_330>:

inst_330:
// rs1_val==1717986919 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, -0x555, x1, 1228, x4)
    23c8:	66666537          	lui	a0,0x66666
    23cc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23d0:	aab52593          	slti	a1,a0,-1365
    23d4:	4cb0a623          	sw	a1,1228(ra)

000023d8 <inst_331>:

inst_331:
// rs1_val==1717986919 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x6, x1, 1232, x4)
    23d8:	66666537          	lui	a0,0x66666
    23dc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23e0:	00652593          	slti	a1,a0,6
    23e4:	4cb0a823          	sw	a1,1232(ra)

000023e8 <inst_332>:

inst_332:
// rs1_val==1717986919 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x334, x1, 1236, x4)
    23e8:	66666537          	lui	a0,0x66666
    23ec:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23f0:	33452593          	slti	a1,a0,820
    23f4:	4cb0aa23          	sw	a1,1236(ra)

000023f8 <inst_333>:

inst_333:
// rs1_val==1717986919 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x667, x1, 1240, x4)
    23f8:	66666537          	lui	a0,0x66666
    23fc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2400:	66752593          	slti	a1,a0,1639
    2404:	4cb0ac23          	sw	a1,1240(ra)

00002408 <inst_334>:

inst_334:
// rs1_val==1717986919 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, -0x2c, x1, 1244, x4)
    2408:	66666537          	lui	a0,0x66666
    240c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2410:	fd452593          	slti	a1,a0,-44
    2414:	4cb0ae23          	sw	a1,1244(ra)

00002418 <inst_335>:

inst_335:
// rs1_val==1717986919 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666667, 0x2e, x1, 1248, x4)
    2418:	66666537          	lui	a0,0x66666
    241c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2420:	02e52593          	slti	a1,a0,46
    2424:	4eb0a023          	sw	a1,1248(ra)

00002428 <inst_336>:

inst_336:
// rs1_val==-46339 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x3, x1, 1252, x4)
    2428:	ffff5537          	lui	a0,0xffff5
    242c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2430:	00352593          	slti	a1,a0,3
    2434:	4eb0a223          	sw	a1,1252(ra)

00002438 <inst_337>:

inst_337:
// rs1_val==-46339 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x555, x1, 1256, x4)
    2438:	ffff5537          	lui	a0,0xffff5
    243c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2440:	55552593          	slti	a1,a0,1365
    2444:	4eb0a423          	sw	a1,1256(ra)

00002448 <inst_338>:

inst_338:
// rs1_val==-46339 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, -0x556, x1, 1260, x4)
    2448:	ffff5537          	lui	a0,0xffff5
    244c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2450:	aaa52593          	slti	a1,a0,-1366
    2454:	4eb0a623          	sw	a1,1260(ra)

00002458 <inst_339>:

inst_339:
// rs1_val==-46339 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x5, x1, 1264, x4)
    2458:	ffff5537          	lui	a0,0xffff5
    245c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2460:	00552593          	slti	a1,a0,5
    2464:	4eb0a823          	sw	a1,1264(ra)

00002468 <inst_340>:

inst_340:
// rs1_val==-46339 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x333, x1, 1268, x4)
    2468:	ffff5537          	lui	a0,0xffff5
    246c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2470:	33352593          	slti	a1,a0,819
    2474:	4eb0aa23          	sw	a1,1268(ra)

00002478 <inst_341>:

inst_341:
// rs1_val==-46339 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x666, x1, 1272, x4)
    2478:	ffff5537          	lui	a0,0xffff5
    247c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2480:	66652593          	slti	a1,a0,1638
    2484:	4eb0ac23          	sw	a1,1272(ra)

00002488 <inst_342>:

inst_342:
// rs1_val==-46339 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, -0x2d, x1, 1276, x4)
    2488:	ffff5537          	lui	a0,0xffff5
    248c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2490:	fd352593          	slti	a1,a0,-45
    2494:	4eb0ae23          	sw	a1,1276(ra)

00002498 <inst_343>:

inst_343:
// rs1_val==-46339 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x2d, x1, 1280, x4)
    2498:	ffff5537          	lui	a0,0xffff5
    249c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24a0:	02d52593          	slti	a1,a0,45
    24a4:	50b0a023          	sw	a1,1280(ra)

000024a8 <inst_344>:

inst_344:
// rs1_val==-46339 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x2, x1, 1284, x4)
    24a8:	ffff5537          	lui	a0,0xffff5
    24ac:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24b0:	00252593          	slti	a1,a0,2
    24b4:	50b0a223          	sw	a1,1284(ra)

000024b8 <inst_345>:

inst_345:
// rs1_val==-46339 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x554, x1, 1288, x4)
    24b8:	ffff5537          	lui	a0,0xffff5
    24bc:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24c0:	55452593          	slti	a1,a0,1364
    24c4:	50b0a423          	sw	a1,1288(ra)

000024c8 <inst_346>:

inst_346:
// rs1_val==-46339 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x0, x1, 1292, x4)
    24c8:	ffff5537          	lui	a0,0xffff5
    24cc:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24d0:	00052593          	slti	a1,a0,0
    24d4:	50b0a623          	sw	a1,1292(ra)

000024d8 <inst_347>:

inst_347:
// rs1_val==-46339 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x4, x1, 1296, x4)
    24d8:	ffff5537          	lui	a0,0xffff5
    24dc:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24e0:	00452593          	slti	a1,a0,4
    24e4:	50b0a823          	sw	a1,1296(ra)

000024e8 <inst_348>:

inst_348:
// rs1_val==-46339 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x332, x1, 1300, x4)
    24e8:	ffff5537          	lui	a0,0xffff5
    24ec:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24f0:	33252593          	slti	a1,a0,818
    24f4:	50b0aa23          	sw	a1,1300(ra)

000024f8 <inst_349>:

inst_349:
// rs1_val==-46339 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x665, x1, 1304, x4)
    24f8:	ffff5537          	lui	a0,0xffff5
    24fc:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2500:	66552593          	slti	a1,a0,1637
    2504:	50b0ac23          	sw	a1,1304(ra)

00002508 <inst_350>:

inst_350:
// rs1_val==-46339 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x2c, x1, 1308, x4)
    2508:	ffff5537          	lui	a0,0xffff5
    250c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2510:	02c52593          	slti	a1,a0,44
    2514:	50b0ae23          	sw	a1,1308(ra)

00002518 <inst_351>:

inst_351:
// rs1_val==-46339 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x556, x1, 1312, x4)
    2518:	ffff5537          	lui	a0,0xffff5
    251c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2520:	55652593          	slti	a1,a0,1366
    2524:	52b0a023          	sw	a1,1312(ra)

00002528 <inst_352>:

inst_352:
// rs1_val==-46339 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, -0x555, x1, 1316, x4)
    2528:	ffff5537          	lui	a0,0xffff5
    252c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2530:	aab52593          	slti	a1,a0,-1365
    2534:	52b0a223          	sw	a1,1316(ra)

00002538 <inst_353>:

inst_353:
// rs1_val==-46339 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x6, x1, 1320, x4)
    2538:	ffff5537          	lui	a0,0xffff5
    253c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2540:	00652593          	slti	a1,a0,6
    2544:	52b0a423          	sw	a1,1320(ra)

00002548 <inst_354>:

inst_354:
// rs1_val==-46339 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x334, x1, 1324, x4)
    2548:	ffff5537          	lui	a0,0xffff5
    254c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2550:	33452593          	slti	a1,a0,820
    2554:	52b0a623          	sw	a1,1324(ra)

00002558 <inst_355>:

inst_355:
// rs1_val==-46339 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x667, x1, 1328, x4)
    2558:	ffff5537          	lui	a0,0xffff5
    255c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2560:	66752593          	slti	a1,a0,1639
    2564:	52b0a823          	sw	a1,1328(ra)

00002568 <inst_356>:

inst_356:
// rs1_val==-46339 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, -0x2c, x1, 1332, x4)
    2568:	ffff5537          	lui	a0,0xffff5
    256c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2570:	fd452593          	slti	a1,a0,-44
    2574:	52b0aa23          	sw	a1,1332(ra)

00002578 <inst_357>:

inst_357:
// rs1_val==-46339 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, -0xb503, 0x2e, x1, 1336, x4)
    2578:	ffff5537          	lui	a0,0xffff5
    257c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2580:	02e52593          	slti	a1,a0,46
    2584:	52b0ac23          	sw	a1,1336(ra)

00002588 <inst_358>:

inst_358:
// rs1_val==46341 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x3, x1, 1340, x4)
    2588:	0000b537          	lui	a0,0xb
    258c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2590:	00352593          	slti	a1,a0,3
    2594:	52b0ae23          	sw	a1,1340(ra)

00002598 <inst_359>:

inst_359:
// rs1_val==46341 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x555, x1, 1344, x4)
    2598:	0000b537          	lui	a0,0xb
    259c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25a0:	55552593          	slti	a1,a0,1365
    25a4:	54b0a023          	sw	a1,1344(ra)

000025a8 <inst_360>:

inst_360:
// rs1_val==46341 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, -0x556, x1, 1348, x4)
    25a8:	0000b537          	lui	a0,0xb
    25ac:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25b0:	aaa52593          	slti	a1,a0,-1366
    25b4:	54b0a223          	sw	a1,1348(ra)

000025b8 <inst_361>:

inst_361:
// rs1_val==46341 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x5, x1, 1352, x4)
    25b8:	0000b537          	lui	a0,0xb
    25bc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25c0:	00552593          	slti	a1,a0,5
    25c4:	54b0a423          	sw	a1,1352(ra)

000025c8 <inst_362>:

inst_362:
// rs1_val==46341 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x333, x1, 1356, x4)
    25c8:	0000b537          	lui	a0,0xb
    25cc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25d0:	33352593          	slti	a1,a0,819
    25d4:	54b0a623          	sw	a1,1356(ra)

000025d8 <inst_363>:

inst_363:
// rs1_val==46341 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x666, x1, 1360, x4)
    25d8:	0000b537          	lui	a0,0xb
    25dc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25e0:	66652593          	slti	a1,a0,1638
    25e4:	54b0a823          	sw	a1,1360(ra)

000025e8 <inst_364>:

inst_364:
// rs1_val==46341 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, -0x2d, x1, 1364, x4)
    25e8:	0000b537          	lui	a0,0xb
    25ec:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25f0:	fd352593          	slti	a1,a0,-45
    25f4:	54b0aa23          	sw	a1,1364(ra)

000025f8 <inst_365>:

inst_365:
// rs1_val==46341 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x2d, x1, 1368, x4)
    25f8:	0000b537          	lui	a0,0xb
    25fc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2600:	02d52593          	slti	a1,a0,45
    2604:	54b0ac23          	sw	a1,1368(ra)

00002608 <inst_366>:

inst_366:
// rs1_val==46341 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x2, x1, 1372, x4)
    2608:	0000b537          	lui	a0,0xb
    260c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2610:	00252593          	slti	a1,a0,2
    2614:	54b0ae23          	sw	a1,1372(ra)

00002618 <inst_367>:

inst_367:
// rs1_val==46341 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x554, x1, 1376, x4)
    2618:	0000b537          	lui	a0,0xb
    261c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2620:	55452593          	slti	a1,a0,1364
    2624:	56b0a023          	sw	a1,1376(ra)

00002628 <inst_368>:

inst_368:
// rs1_val==46341 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x0, x1, 1380, x4)
    2628:	0000b537          	lui	a0,0xb
    262c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2630:	00052593          	slti	a1,a0,0
    2634:	56b0a223          	sw	a1,1380(ra)

00002638 <inst_369>:

inst_369:
// rs1_val==46341 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x4, x1, 1384, x4)
    2638:	0000b537          	lui	a0,0xb
    263c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2640:	00452593          	slti	a1,a0,4
    2644:	56b0a423          	sw	a1,1384(ra)

00002648 <inst_370>:

inst_370:
// rs1_val==46341 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x332, x1, 1388, x4)
    2648:	0000b537          	lui	a0,0xb
    264c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2650:	33252593          	slti	a1,a0,818
    2654:	56b0a623          	sw	a1,1388(ra)

00002658 <inst_371>:

inst_371:
// rs1_val==46341 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x665, x1, 1392, x4)
    2658:	0000b537          	lui	a0,0xb
    265c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2660:	66552593          	slti	a1,a0,1637
    2664:	56b0a823          	sw	a1,1392(ra)

00002668 <inst_372>:

inst_372:
// rs1_val==46341 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x2c, x1, 1396, x4)
    2668:	0000b537          	lui	a0,0xb
    266c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2670:	02c52593          	slti	a1,a0,44
    2674:	56b0aa23          	sw	a1,1396(ra)

00002678 <inst_373>:

inst_373:
// rs1_val==46341 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x556, x1, 1400, x4)
    2678:	0000b537          	lui	a0,0xb
    267c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2680:	55652593          	slti	a1,a0,1366
    2684:	56b0ac23          	sw	a1,1400(ra)

00002688 <inst_374>:

inst_374:
// rs1_val==46341 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, -0x555, x1, 1404, x4)
    2688:	0000b537          	lui	a0,0xb
    268c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2690:	aab52593          	slti	a1,a0,-1365
    2694:	56b0ae23          	sw	a1,1404(ra)

00002698 <inst_375>:

inst_375:
// rs1_val==46341 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x6, x1, 1408, x4)
    2698:	0000b537          	lui	a0,0xb
    269c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26a0:	00652593          	slti	a1,a0,6
    26a4:	58b0a023          	sw	a1,1408(ra)

000026a8 <inst_376>:

inst_376:
// rs1_val==46341 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x334, x1, 1412, x4)
    26a8:	0000b537          	lui	a0,0xb
    26ac:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26b0:	33452593          	slti	a1,a0,820
    26b4:	58b0a223          	sw	a1,1412(ra)

000026b8 <inst_377>:

inst_377:
// rs1_val==46341 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x667, x1, 1416, x4)
    26b8:	0000b537          	lui	a0,0xb
    26bc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26c0:	66752593          	slti	a1,a0,1639
    26c4:	58b0a423          	sw	a1,1416(ra)

000026c8 <inst_378>:

inst_378:
// rs1_val==46341 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, -0x2c, x1, 1420, x4)
    26c8:	0000b537          	lui	a0,0xb
    26cc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26d0:	fd452593          	slti	a1,a0,-44
    26d4:	58b0a623          	sw	a1,1420(ra)

000026d8 <inst_379>:

inst_379:
// rs1_val==46341 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb505, 0x2e, x1, 1424, x4)
    26d8:	0000b537          	lui	a0,0xb
    26dc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26e0:	02e52593          	slti	a1,a0,46
    26e4:	58b0a823          	sw	a1,1424(ra)

000026e8 <inst_380>:

inst_380:
// rs1_val==0 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x0, -0x2d, x1, 1428, x4)
    26e8:	00000513          	li	a0,0
    26ec:	fd352593          	slti	a1,a0,-45
    26f0:	58b0aa23          	sw	a1,1428(ra)

000026f4 <inst_381>:

inst_381:
// rs1_val==0 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x2d, x1, 1432, x4)
    26f4:	00000513          	li	a0,0
    26f8:	02d52593          	slti	a1,a0,45
    26fc:	58b0ac23          	sw	a1,1432(ra)

00002700 <inst_382>:

inst_382:
// rs1_val==0 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x554, x1, 1436, x4)
    2700:	00000513          	li	a0,0
    2704:	55452593          	slti	a1,a0,1364
    2708:	58b0ae23          	sw	a1,1436(ra)

0000270c <inst_383>:

inst_383:
// rs1_val==0 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x0, 0x0, x1, 1440, x4)
    270c:	00000513          	li	a0,0
    2710:	00052593          	slti	a1,a0,0
    2714:	5ab0a023          	sw	a1,1440(ra)

00002718 <inst_384>:

inst_384:
// rs1_val==0 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x4, x1, 1444, x4)
    2718:	00000513          	li	a0,0
    271c:	00452593          	slti	a1,a0,4
    2720:	5ab0a223          	sw	a1,1444(ra)

00002724 <inst_385>:

inst_385:
// rs1_val==0 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x332, x1, 1448, x4)
    2724:	00000513          	li	a0,0
    2728:	33252593          	slti	a1,a0,818
    272c:	5ab0a423          	sw	a1,1448(ra)

00002730 <inst_386>:

inst_386:
// rs1_val==0 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x665, x1, 1452, x4)
    2730:	00000513          	li	a0,0
    2734:	66552593          	slti	a1,a0,1637
    2738:	5ab0a623          	sw	a1,1452(ra)

0000273c <inst_387>:

inst_387:
// rs1_val==0 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x2c, x1, 1456, x4)
    273c:	00000513          	li	a0,0
    2740:	02c52593          	slti	a1,a0,44
    2744:	5ab0a823          	sw	a1,1456(ra)

00002748 <inst_388>:

inst_388:
// rs1_val==0 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x556, x1, 1460, x4)
    2748:	00000513          	li	a0,0
    274c:	55652593          	slti	a1,a0,1366
    2750:	5ab0aa23          	sw	a1,1460(ra)

00002754 <inst_389>:

inst_389:
// rs1_val==0 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x0, -0x555, x1, 1464, x4)
    2754:	00000513          	li	a0,0
    2758:	aab52593          	slti	a1,a0,-1365
    275c:	5ab0ac23          	sw	a1,1464(ra)

00002760 <inst_390>:

inst_390:
// rs1_val==0 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x6, x1, 1468, x4)
    2760:	00000513          	li	a0,0
    2764:	00652593          	slti	a1,a0,6
    2768:	5ab0ae23          	sw	a1,1468(ra)

0000276c <inst_391>:

inst_391:
// rs1_val==0 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x334, x1, 1472, x4)
    276c:	00000513          	li	a0,0
    2770:	33452593          	slti	a1,a0,820
    2774:	5cb0a023          	sw	a1,1472(ra)

00002778 <inst_392>:

inst_392:
// rs1_val==0 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x667, x1, 1476, x4)
    2778:	00000513          	li	a0,0
    277c:	66752593          	slti	a1,a0,1639
    2780:	5cb0a223          	sw	a1,1476(ra)

00002784 <inst_393>:

inst_393:
// rs1_val==0 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x0, -0x2c, x1, 1480, x4)
    2784:	00000513          	li	a0,0
    2788:	fd452593          	slti	a1,a0,-44
    278c:	5cb0a423          	sw	a1,1480(ra)

00002790 <inst_394>:

inst_394:
// rs1_val==0 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x0;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, 0x0, 0x2e, x1, 1484, x4)
    2790:	00000513          	li	a0,0
    2794:	02e52593          	slti	a1,a0,46
    2798:	5cb0a623          	sw	a1,1484(ra)

0000279c <inst_395>:

inst_395:
// rs1_val==4 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, 0x3, x1, 1488, x4)
    279c:	00400513          	li	a0,4
    27a0:	00352593          	slti	a1,a0,3
    27a4:	5cb0a823          	sw	a1,1488(ra)

000027a8 <inst_396>:

inst_396:
// rs1_val==4 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, -0x556, x1, 1492, x4)
    27a8:	00400513          	li	a0,4
    27ac:	aaa52593          	slti	a1,a0,-1366
    27b0:	5cb0aa23          	sw	a1,1492(ra)

000027b4 <inst_397>:

inst_397:
// rs1_val==4 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x5, x1, 1496, x4)
    27b4:	00400513          	li	a0,4
    27b8:	00552593          	slti	a1,a0,5
    27bc:	5cb0ac23          	sw	a1,1496(ra)

000027c0 <inst_398>:

inst_398:
// rs1_val==4 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x333, x1, 1500, x4)
    27c0:	00400513          	li	a0,4
    27c4:	33352593          	slti	a1,a0,819
    27c8:	5cb0ae23          	sw	a1,1500(ra)

000027cc <inst_399>:

inst_399:
// rs1_val==4 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x666, x1, 1504, x4)
    27cc:	00400513          	li	a0,4
    27d0:	66652593          	slti	a1,a0,1638
    27d4:	5eb0a023          	sw	a1,1504(ra)

000027d8 <inst_400>:

inst_400:
// rs1_val==4 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, -0x2d, x1, 1508, x4)
    27d8:	00400513          	li	a0,4
    27dc:	fd352593          	slti	a1,a0,-45
    27e0:	5eb0a223          	sw	a1,1508(ra)

000027e4 <inst_401>:

inst_401:
// rs1_val==4 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x2d, x1, 1512, x4)
    27e4:	00400513          	li	a0,4
    27e8:	02d52593          	slti	a1,a0,45
    27ec:	5eb0a423          	sw	a1,1512(ra)

000027f0 <inst_402>:

inst_402:
// rs1_val==4 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, 0x2, x1, 1516, x4)
    27f0:	00400513          	li	a0,4
    27f4:	00252593          	slti	a1,a0,2
    27f8:	5eb0a623          	sw	a1,1516(ra)

000027fc <inst_403>:

inst_403:
// rs1_val==4 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x554, x1, 1520, x4)
    27fc:	00400513          	li	a0,4
    2800:	55452593          	slti	a1,a0,1364
    2804:	5eb0a823          	sw	a1,1520(ra)

00002808 <inst_404>:

inst_404:
// rs1_val==4 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, 0x0, x1, 1524, x4)
    2808:	00400513          	li	a0,4
    280c:	00052593          	slti	a1,a0,0
    2810:	5eb0aa23          	sw	a1,1524(ra)

00002814 <inst_405>:

inst_405:
// rs1_val==4 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, 0x4, x1, 1528, x4)
    2814:	00400513          	li	a0,4
    2818:	00452593          	slti	a1,a0,4
    281c:	5eb0ac23          	sw	a1,1528(ra)

00002820 <inst_406>:

inst_406:
// rs1_val==4 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x332, x1, 1532, x4)
    2820:	00400513          	li	a0,4
    2824:	33252593          	slti	a1,a0,818
    2828:	5eb0ae23          	sw	a1,1532(ra)

0000282c <inst_407>:

inst_407:
// rs1_val==4 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x665, x1, 1536, x4)
    282c:	00400513          	li	a0,4
    2830:	66552593          	slti	a1,a0,1637
    2834:	60b0a023          	sw	a1,1536(ra)

00002838 <inst_408>:

inst_408:
// rs1_val==4 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x2c, x1, 1540, x4)
    2838:	00400513          	li	a0,4
    283c:	02c52593          	slti	a1,a0,44
    2840:	60b0a223          	sw	a1,1540(ra)

00002844 <inst_409>:

inst_409:
// rs1_val==4 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x556, x1, 1544, x4)
    2844:	00400513          	li	a0,4
    2848:	55652593          	slti	a1,a0,1366
    284c:	60b0a423          	sw	a1,1544(ra)

00002850 <inst_410>:

inst_410:
// rs1_val==4 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, -0x555, x1, 1548, x4)
    2850:	00400513          	li	a0,4
    2854:	aab52593          	slti	a1,a0,-1365
    2858:	60b0a623          	sw	a1,1548(ra)

0000285c <inst_411>:

inst_411:
// rs1_val==4 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x6, x1, 1552, x4)
    285c:	00400513          	li	a0,4
    2860:	00652593          	slti	a1,a0,6
    2864:	60b0a823          	sw	a1,1552(ra)

00002868 <inst_412>:

inst_412:
// rs1_val==4 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x334, x1, 1556, x4)
    2868:	00400513          	li	a0,4
    286c:	33452593          	slti	a1,a0,820
    2870:	60b0aa23          	sw	a1,1556(ra)

00002874 <inst_413>:

inst_413:
// rs1_val==4 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x667, x1, 1560, x4)
    2874:	00400513          	li	a0,4
    2878:	66752593          	slti	a1,a0,1639
    287c:	60b0ac23          	sw	a1,1560(ra)

00002880 <inst_414>:

inst_414:
// rs1_val==4 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x4, -0x2c, x1, 1564, x4)
    2880:	00400513          	li	a0,4
    2884:	fd452593          	slti	a1,a0,-44
    2888:	60b0ae23          	sw	a1,1564(ra)

0000288c <inst_415>:

inst_415:
// rs1_val==4 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x4;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, 0x4, 0x2e, x1, 1568, x4)
    288c:	00400513          	li	a0,4
    2890:	02e52593          	slti	a1,a0,46
    2894:	62b0a023          	sw	a1,1568(ra)

00002898 <inst_416>:

inst_416:
// rs1_val==858993458 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x3, x1, 1572, x4)
    2898:	33333537          	lui	a0,0x33333
    289c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28a0:	00352593          	slti	a1,a0,3
    28a4:	62b0a223          	sw	a1,1572(ra)

000028a8 <inst_417>:

inst_417:
// rs1_val==858993458 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x555, x1, 1576, x4)
    28a8:	33333537          	lui	a0,0x33333
    28ac:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28b0:	55552593          	slti	a1,a0,1365
    28b4:	62b0a423          	sw	a1,1576(ra)

000028b8 <inst_418>:

inst_418:
// rs1_val==858993458 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, -0x556, x1, 1580, x4)
    28b8:	33333537          	lui	a0,0x33333
    28bc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28c0:	aaa52593          	slti	a1,a0,-1366
    28c4:	62b0a623          	sw	a1,1580(ra)

000028c8 <inst_419>:

inst_419:
// rs1_val==858993458 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x5, x1, 1584, x4)
    28c8:	33333537          	lui	a0,0x33333
    28cc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28d0:	00552593          	slti	a1,a0,5
    28d4:	62b0a823          	sw	a1,1584(ra)

000028d8 <inst_420>:

inst_420:
// rs1_val==858993458 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x333, x1, 1588, x4)
    28d8:	33333537          	lui	a0,0x33333
    28dc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28e0:	33352593          	slti	a1,a0,819
    28e4:	62b0aa23          	sw	a1,1588(ra)

000028e8 <inst_421>:

inst_421:
// rs1_val==858993458 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x666, x1, 1592, x4)
    28e8:	33333537          	lui	a0,0x33333
    28ec:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28f0:	66652593          	slti	a1,a0,1638
    28f4:	62b0ac23          	sw	a1,1592(ra)

000028f8 <inst_422>:

inst_422:
// rs1_val==858993458 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, -0x2d, x1, 1596, x4)
    28f8:	33333537          	lui	a0,0x33333
    28fc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2900:	fd352593          	slti	a1,a0,-45
    2904:	62b0ae23          	sw	a1,1596(ra)

00002908 <inst_423>:

inst_423:
// rs1_val==858993458 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x2d, x1, 1600, x4)
    2908:	33333537          	lui	a0,0x33333
    290c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2910:	02d52593          	slti	a1,a0,45
    2914:	64b0a023          	sw	a1,1600(ra)

00002918 <inst_424>:

inst_424:
// rs1_val==858993458 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x2, x1, 1604, x4)
    2918:	33333537          	lui	a0,0x33333
    291c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2920:	00252593          	slti	a1,a0,2
    2924:	64b0a223          	sw	a1,1604(ra)

00002928 <inst_425>:

inst_425:
// rs1_val==858993458 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x554, x1, 1608, x4)
    2928:	33333537          	lui	a0,0x33333
    292c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2930:	55452593          	slti	a1,a0,1364
    2934:	64b0a423          	sw	a1,1608(ra)

00002938 <inst_426>:

inst_426:
// rs1_val==858993458 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x0, x1, 1612, x4)
    2938:	33333537          	lui	a0,0x33333
    293c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2940:	00052593          	slti	a1,a0,0
    2944:	64b0a623          	sw	a1,1612(ra)

00002948 <inst_427>:

inst_427:
// rs1_val==858993458 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x4, x1, 1616, x4)
    2948:	33333537          	lui	a0,0x33333
    294c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2950:	00452593          	slti	a1,a0,4
    2954:	64b0a823          	sw	a1,1616(ra)

00002958 <inst_428>:

inst_428:
// rs1_val==858993458 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x332, x1, 1620, x4)
    2958:	33333537          	lui	a0,0x33333
    295c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2960:	33252593          	slti	a1,a0,818
    2964:	64b0aa23          	sw	a1,1620(ra)

00002968 <inst_429>:

inst_429:
// rs1_val==858993458 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x665, x1, 1624, x4)
    2968:	33333537          	lui	a0,0x33333
    296c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2970:	66552593          	slti	a1,a0,1637
    2974:	64b0ac23          	sw	a1,1624(ra)

00002978 <inst_430>:

inst_430:
// rs1_val==858993458 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x2c, x1, 1628, x4)
    2978:	33333537          	lui	a0,0x33333
    297c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2980:	02c52593          	slti	a1,a0,44
    2984:	64b0ae23          	sw	a1,1628(ra)

00002988 <inst_431>:

inst_431:
// rs1_val==858993458 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x556, x1, 1632, x4)
    2988:	33333537          	lui	a0,0x33333
    298c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2990:	55652593          	slti	a1,a0,1366
    2994:	66b0a023          	sw	a1,1632(ra)

00002998 <inst_432>:

inst_432:
// rs1_val==858993458 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, -0x555, x1, 1636, x4)
    2998:	33333537          	lui	a0,0x33333
    299c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29a0:	aab52593          	slti	a1,a0,-1365
    29a4:	66b0a223          	sw	a1,1636(ra)

000029a8 <inst_433>:

inst_433:
// rs1_val==858993458 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x6, x1, 1640, x4)
    29a8:	33333537          	lui	a0,0x33333
    29ac:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29b0:	00652593          	slti	a1,a0,6
    29b4:	66b0a423          	sw	a1,1640(ra)

000029b8 <inst_434>:

inst_434:
// rs1_val==858993458 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x334, x1, 1644, x4)
    29b8:	33333537          	lui	a0,0x33333
    29bc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29c0:	33452593          	slti	a1,a0,820
    29c4:	66b0a623          	sw	a1,1644(ra)

000029c8 <inst_435>:

inst_435:
// rs1_val==858993458 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x667, x1, 1648, x4)
    29c8:	33333537          	lui	a0,0x33333
    29cc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29d0:	66752593          	slti	a1,a0,1639
    29d4:	66b0a823          	sw	a1,1648(ra)

000029d8 <inst_436>:

inst_436:
// rs1_val==858993458 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, -0x2c, x1, 1652, x4)
    29d8:	33333537          	lui	a0,0x33333
    29dc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29e0:	fd452593          	slti	a1,a0,-44
    29e4:	66b0aa23          	sw	a1,1652(ra)

000029e8 <inst_437>:

inst_437:
// rs1_val==858993458 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333332, 0x2e, x1, 1656, x4)
    29e8:	33333537          	lui	a0,0x33333
    29ec:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29f0:	02e52593          	slti	a1,a0,46
    29f4:	66b0ac23          	sw	a1,1656(ra)

000029f8 <inst_438>:

inst_438:
// rs1_val==1717986917 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x3, x1, 1660, x4)
    29f8:	66666537          	lui	a0,0x66666
    29fc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a00:	00352593          	slti	a1,a0,3
    2a04:	66b0ae23          	sw	a1,1660(ra)

00002a08 <inst_439>:

inst_439:
// rs1_val==1717986917 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x555, x1, 1664, x4)
    2a08:	66666537          	lui	a0,0x66666
    2a0c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a10:	55552593          	slti	a1,a0,1365
    2a14:	68b0a023          	sw	a1,1664(ra)

00002a18 <inst_440>:

inst_440:
// rs1_val==1717986917 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, -0x556, x1, 1668, x4)
    2a18:	66666537          	lui	a0,0x66666
    2a1c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a20:	aaa52593          	slti	a1,a0,-1366
    2a24:	68b0a223          	sw	a1,1668(ra)

00002a28 <inst_441>:

inst_441:
// rs1_val==1717986917 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x5, x1, 1672, x4)
    2a28:	66666537          	lui	a0,0x66666
    2a2c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a30:	00552593          	slti	a1,a0,5
    2a34:	68b0a423          	sw	a1,1672(ra)

00002a38 <inst_442>:

inst_442:
// rs1_val==1717986917 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x333, x1, 1676, x4)
    2a38:	66666537          	lui	a0,0x66666
    2a3c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a40:	33352593          	slti	a1,a0,819
    2a44:	68b0a623          	sw	a1,1676(ra)

00002a48 <inst_443>:

inst_443:
// rs1_val==1717986917 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x666, x1, 1680, x4)
    2a48:	66666537          	lui	a0,0x66666
    2a4c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a50:	66652593          	slti	a1,a0,1638
    2a54:	68b0a823          	sw	a1,1680(ra)

00002a58 <inst_444>:

inst_444:
// rs1_val==1717986917 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, -0x2d, x1, 1684, x4)
    2a58:	66666537          	lui	a0,0x66666
    2a5c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a60:	fd352593          	slti	a1,a0,-45
    2a64:	68b0aa23          	sw	a1,1684(ra)

00002a68 <inst_445>:

inst_445:
// rs1_val==1717986917 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x2d, x1, 1688, x4)
    2a68:	66666537          	lui	a0,0x66666
    2a6c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a70:	02d52593          	slti	a1,a0,45
    2a74:	68b0ac23          	sw	a1,1688(ra)

00002a78 <inst_446>:

inst_446:
// rs1_val==1717986917 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x2, x1, 1692, x4)
    2a78:	66666537          	lui	a0,0x66666
    2a7c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a80:	00252593          	slti	a1,a0,2
    2a84:	68b0ae23          	sw	a1,1692(ra)

00002a88 <inst_447>:

inst_447:
// rs1_val==1717986917 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x554, x1, 1696, x4)
    2a88:	66666537          	lui	a0,0x66666
    2a8c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a90:	55452593          	slti	a1,a0,1364
    2a94:	6ab0a023          	sw	a1,1696(ra)

00002a98 <inst_448>:

inst_448:
// rs1_val==1717986917 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x0, x1, 1700, x4)
    2a98:	66666537          	lui	a0,0x66666
    2a9c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2aa0:	00052593          	slti	a1,a0,0
    2aa4:	6ab0a223          	sw	a1,1700(ra)

00002aa8 <inst_449>:

inst_449:
// rs1_val==1717986917 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x4, x1, 1704, x4)
    2aa8:	66666537          	lui	a0,0x66666
    2aac:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2ab0:	00452593          	slti	a1,a0,4
    2ab4:	6ab0a423          	sw	a1,1704(ra)

00002ab8 <inst_450>:

inst_450:
// rs1_val==1717986917 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x332, x1, 1708, x4)
    2ab8:	66666537          	lui	a0,0x66666
    2abc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2ac0:	33252593          	slti	a1,a0,818
    2ac4:	6ab0a623          	sw	a1,1708(ra)

00002ac8 <inst_451>:

inst_451:
// rs1_val==1717986917 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x665, x1, 1712, x4)
    2ac8:	66666537          	lui	a0,0x66666
    2acc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2ad0:	66552593          	slti	a1,a0,1637
    2ad4:	6ab0a823          	sw	a1,1712(ra)

00002ad8 <inst_452>:

inst_452:
// rs1_val==1717986917 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x2c, x1, 1716, x4)
    2ad8:	66666537          	lui	a0,0x66666
    2adc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2ae0:	02c52593          	slti	a1,a0,44
    2ae4:	6ab0aa23          	sw	a1,1716(ra)

00002ae8 <inst_453>:

inst_453:
// rs1_val==1717986917 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x556, x1, 1720, x4)
    2ae8:	66666537          	lui	a0,0x66666
    2aec:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2af0:	55652593          	slti	a1,a0,1366
    2af4:	6ab0ac23          	sw	a1,1720(ra)

00002af8 <inst_454>:

inst_454:
// rs1_val==1717986917 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, -0x555, x1, 1724, x4)
    2af8:	66666537          	lui	a0,0x66666
    2afc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b00:	aab52593          	slti	a1,a0,-1365
    2b04:	6ab0ae23          	sw	a1,1724(ra)

00002b08 <inst_455>:

inst_455:
// rs1_val==1717986917 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x6, x1, 1728, x4)
    2b08:	66666537          	lui	a0,0x66666
    2b0c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b10:	00652593          	slti	a1,a0,6
    2b14:	6cb0a023          	sw	a1,1728(ra)

00002b18 <inst_456>:

inst_456:
// rs1_val==1717986917 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x334, x1, 1732, x4)
    2b18:	66666537          	lui	a0,0x66666
    2b1c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b20:	33452593          	slti	a1,a0,820
    2b24:	6cb0a223          	sw	a1,1732(ra)

00002b28 <inst_457>:

inst_457:
// rs1_val==1717986917 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x667, x1, 1736, x4)
    2b28:	66666537          	lui	a0,0x66666
    2b2c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b30:	66752593          	slti	a1,a0,1639
    2b34:	6cb0a423          	sw	a1,1736(ra)

00002b38 <inst_458>:

inst_458:
// rs1_val==1717986917 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, -0x2c, x1, 1740, x4)
    2b38:	66666537          	lui	a0,0x66666
    2b3c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b40:	fd452593          	slti	a1,a0,-44
    2b44:	6cb0a623          	sw	a1,1740(ra)

00002b48 <inst_459>:

inst_459:
// rs1_val==1717986917 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x66666665, 0x2e, x1, 1744, x4)
    2b48:	66666537          	lui	a0,0x66666
    2b4c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b50:	02e52593          	slti	a1,a0,46
    2b54:	6cb0a823          	sw	a1,1744(ra)

00002b58 <inst_460>:

inst_460:
// rs1_val==46339 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x3, x1, 1748, x4)
    2b58:	0000b537          	lui	a0,0xb
    2b5c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b60:	00352593          	slti	a1,a0,3
    2b64:	6cb0aa23          	sw	a1,1748(ra)

00002b68 <inst_461>:

inst_461:
// rs1_val==46339 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x555, x1, 1752, x4)
    2b68:	0000b537          	lui	a0,0xb
    2b6c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b70:	55552593          	slti	a1,a0,1365
    2b74:	6cb0ac23          	sw	a1,1752(ra)

00002b78 <inst_462>:

inst_462:
// rs1_val==46339 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, -0x556, x1, 1756, x4)
    2b78:	0000b537          	lui	a0,0xb
    2b7c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b80:	aaa52593          	slti	a1,a0,-1366
    2b84:	6cb0ae23          	sw	a1,1756(ra)

00002b88 <inst_463>:

inst_463:
// rs1_val==46339 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x5, x1, 1760, x4)
    2b88:	0000b537          	lui	a0,0xb
    2b8c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b90:	00552593          	slti	a1,a0,5
    2b94:	6eb0a023          	sw	a1,1760(ra)

00002b98 <inst_464>:

inst_464:
// rs1_val==46339 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x333, x1, 1764, x4)
    2b98:	0000b537          	lui	a0,0xb
    2b9c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2ba0:	33352593          	slti	a1,a0,819
    2ba4:	6eb0a223          	sw	a1,1764(ra)

00002ba8 <inst_465>:

inst_465:
// rs1_val==46339 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x666, x1, 1768, x4)
    2ba8:	0000b537          	lui	a0,0xb
    2bac:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bb0:	66652593          	slti	a1,a0,1638
    2bb4:	6eb0a423          	sw	a1,1768(ra)

00002bb8 <inst_466>:

inst_466:
// rs1_val==46339 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, -0x2d, x1, 1772, x4)
    2bb8:	0000b537          	lui	a0,0xb
    2bbc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bc0:	fd352593          	slti	a1,a0,-45
    2bc4:	6eb0a623          	sw	a1,1772(ra)

00002bc8 <inst_467>:

inst_467:
// rs1_val==46339 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x2d, x1, 1776, x4)
    2bc8:	0000b537          	lui	a0,0xb
    2bcc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bd0:	02d52593          	slti	a1,a0,45
    2bd4:	6eb0a823          	sw	a1,1776(ra)

00002bd8 <inst_468>:

inst_468:
// rs1_val==46339 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x2, x1, 1780, x4)
    2bd8:	0000b537          	lui	a0,0xb
    2bdc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2be0:	00252593          	slti	a1,a0,2
    2be4:	6eb0aa23          	sw	a1,1780(ra)

00002be8 <inst_469>:

inst_469:
// rs1_val==46339 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x554, x1, 1784, x4)
    2be8:	0000b537          	lui	a0,0xb
    2bec:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bf0:	55452593          	slti	a1,a0,1364
    2bf4:	6eb0ac23          	sw	a1,1784(ra)

00002bf8 <inst_470>:

inst_470:
// rs1_val==46339 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x0, x1, 1788, x4)
    2bf8:	0000b537          	lui	a0,0xb
    2bfc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c00:	00052593          	slti	a1,a0,0
    2c04:	6eb0ae23          	sw	a1,1788(ra)

00002c08 <inst_471>:

inst_471:
// rs1_val==46339 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x4, x1, 1792, x4)
    2c08:	0000b537          	lui	a0,0xb
    2c0c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c10:	00452593          	slti	a1,a0,4
    2c14:	70b0a023          	sw	a1,1792(ra)

00002c18 <inst_472>:

inst_472:
// rs1_val==46339 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x332, x1, 1796, x4)
    2c18:	0000b537          	lui	a0,0xb
    2c1c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c20:	33252593          	slti	a1,a0,818
    2c24:	70b0a223          	sw	a1,1796(ra)

00002c28 <inst_473>:

inst_473:
// rs1_val==46339 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x665, x1, 1800, x4)
    2c28:	0000b537          	lui	a0,0xb
    2c2c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c30:	66552593          	slti	a1,a0,1637
    2c34:	70b0a423          	sw	a1,1800(ra)

00002c38 <inst_474>:

inst_474:
// rs1_val==46339 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x2c, x1, 1804, x4)
    2c38:	0000b537          	lui	a0,0xb
    2c3c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c40:	02c52593          	slti	a1,a0,44
    2c44:	70b0a623          	sw	a1,1804(ra)

00002c48 <inst_475>:

inst_475:
// rs1_val==46339 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x556, x1, 1808, x4)
    2c48:	0000b537          	lui	a0,0xb
    2c4c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c50:	55652593          	slti	a1,a0,1366
    2c54:	70b0a823          	sw	a1,1808(ra)

00002c58 <inst_476>:

inst_476:
// rs1_val==46339 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, -0x555, x1, 1812, x4)
    2c58:	0000b537          	lui	a0,0xb
    2c5c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c60:	aab52593          	slti	a1,a0,-1365
    2c64:	70b0aa23          	sw	a1,1812(ra)

00002c68 <inst_477>:

inst_477:
// rs1_val==46339 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x6, x1, 1816, x4)
    2c68:	0000b537          	lui	a0,0xb
    2c6c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c70:	00652593          	slti	a1,a0,6
    2c74:	70b0ac23          	sw	a1,1816(ra)

00002c78 <inst_478>:

inst_478:
// rs1_val==46339 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x334, x1, 1820, x4)
    2c78:	0000b537          	lui	a0,0xb
    2c7c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c80:	33452593          	slti	a1,a0,820
    2c84:	70b0ae23          	sw	a1,1820(ra)

00002c88 <inst_479>:

inst_479:
// rs1_val==46339 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x667, x1, 1824, x4)
    2c88:	0000b537          	lui	a0,0xb
    2c8c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c90:	66752593          	slti	a1,a0,1639
    2c94:	72b0a023          	sw	a1,1824(ra)

00002c98 <inst_480>:

inst_480:
// rs1_val==46339 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, -0x2c, x1, 1828, x4)
    2c98:	0000b537          	lui	a0,0xb
    2c9c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2ca0:	fd452593          	slti	a1,a0,-44
    2ca4:	72b0a223          	sw	a1,1828(ra)

00002ca8 <inst_481>:

inst_481:
// rs1_val==46339 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0xb503, 0x2e, x1, 1832, x4)
    2ca8:	0000b537          	lui	a0,0xb
    2cac:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2cb0:	02e52593          	slti	a1,a0,46
    2cb4:	72b0a423          	sw	a1,1832(ra)

00002cb8 <inst_482>:

inst_482:
// rs1_val==1431655766 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x3, x1, 1836, x4)
    2cb8:	55555537          	lui	a0,0x55555
    2cbc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2cc0:	00352593          	slti	a1,a0,3
    2cc4:	72b0a623          	sw	a1,1836(ra)

00002cc8 <inst_483>:

inst_483:
// rs1_val==1431655766 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x555, x1, 1840, x4)
    2cc8:	55555537          	lui	a0,0x55555
    2ccc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2cd0:	55552593          	slti	a1,a0,1365
    2cd4:	72b0a823          	sw	a1,1840(ra)

00002cd8 <inst_484>:

inst_484:
// rs1_val==1431655766 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, -0x556, x1, 1844, x4)
    2cd8:	55555537          	lui	a0,0x55555
    2cdc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2ce0:	aaa52593          	slti	a1,a0,-1366
    2ce4:	72b0aa23          	sw	a1,1844(ra)

00002ce8 <inst_485>:

inst_485:
// rs1_val==1431655766 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x5, x1, 1848, x4)
    2ce8:	55555537          	lui	a0,0x55555
    2cec:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2cf0:	00552593          	slti	a1,a0,5
    2cf4:	72b0ac23          	sw	a1,1848(ra)

00002cf8 <inst_486>:

inst_486:
// rs1_val==1431655766 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x333, x1, 1852, x4)
    2cf8:	55555537          	lui	a0,0x55555
    2cfc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d00:	33352593          	slti	a1,a0,819
    2d04:	72b0ae23          	sw	a1,1852(ra)

00002d08 <inst_487>:

inst_487:
// rs1_val==1431655766 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x666, x1, 1856, x4)
    2d08:	55555537          	lui	a0,0x55555
    2d0c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d10:	66652593          	slti	a1,a0,1638
    2d14:	74b0a023          	sw	a1,1856(ra)

00002d18 <inst_488>:

inst_488:
// rs1_val==1431655766 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, -0x2d, x1, 1860, x4)
    2d18:	55555537          	lui	a0,0x55555
    2d1c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d20:	fd352593          	slti	a1,a0,-45
    2d24:	74b0a223          	sw	a1,1860(ra)

00002d28 <inst_489>:

inst_489:
// rs1_val==1431655766 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x2d, x1, 1864, x4)
    2d28:	55555537          	lui	a0,0x55555
    2d2c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d30:	02d52593          	slti	a1,a0,45
    2d34:	74b0a423          	sw	a1,1864(ra)

00002d38 <inst_490>:

inst_490:
// rs1_val==1431655766 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x2, x1, 1868, x4)
    2d38:	55555537          	lui	a0,0x55555
    2d3c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d40:	00252593          	slti	a1,a0,2
    2d44:	74b0a623          	sw	a1,1868(ra)

00002d48 <inst_491>:

inst_491:
// rs1_val==1431655766 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x554, x1, 1872, x4)
    2d48:	55555537          	lui	a0,0x55555
    2d4c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d50:	55452593          	slti	a1,a0,1364
    2d54:	74b0a823          	sw	a1,1872(ra)

00002d58 <inst_492>:

inst_492:
// rs1_val==1431655766 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x0, x1, 1876, x4)
    2d58:	55555537          	lui	a0,0x55555
    2d5c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d60:	00052593          	slti	a1,a0,0
    2d64:	74b0aa23          	sw	a1,1876(ra)

00002d68 <inst_493>:

inst_493:
// rs1_val==1431655766 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x4, x1, 1880, x4)
    2d68:	55555537          	lui	a0,0x55555
    2d6c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d70:	00452593          	slti	a1,a0,4
    2d74:	74b0ac23          	sw	a1,1880(ra)

00002d78 <inst_494>:

inst_494:
// rs1_val==1431655766 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x332, x1, 1884, x4)
    2d78:	55555537          	lui	a0,0x55555
    2d7c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d80:	33252593          	slti	a1,a0,818
    2d84:	74b0ae23          	sw	a1,1884(ra)

00002d88 <inst_495>:

inst_495:
// rs1_val==1431655766 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x665, x1, 1888, x4)
    2d88:	55555537          	lui	a0,0x55555
    2d8c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d90:	66552593          	slti	a1,a0,1637
    2d94:	76b0a023          	sw	a1,1888(ra)

00002d98 <inst_496>:

inst_496:
// rs1_val==1431655766 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x2c, x1, 1892, x4)
    2d98:	55555537          	lui	a0,0x55555
    2d9c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2da0:	02c52593          	slti	a1,a0,44
    2da4:	76b0a223          	sw	a1,1892(ra)

00002da8 <inst_497>:

inst_497:
// rs1_val==1431655766 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x556, x1, 1896, x4)
    2da8:	55555537          	lui	a0,0x55555
    2dac:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2db0:	55652593          	slti	a1,a0,1366
    2db4:	76b0a423          	sw	a1,1896(ra)

00002db8 <inst_498>:

inst_498:
// rs1_val==1431655766 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, -0x555, x1, 1900, x4)
    2db8:	55555537          	lui	a0,0x55555
    2dbc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dc0:	aab52593          	slti	a1,a0,-1365
    2dc4:	76b0a623          	sw	a1,1900(ra)

00002dc8 <inst_499>:

inst_499:
// rs1_val==1431655766 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x6, x1, 1904, x4)
    2dc8:	55555537          	lui	a0,0x55555
    2dcc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dd0:	00652593          	slti	a1,a0,6
    2dd4:	76b0a823          	sw	a1,1904(ra)

00002dd8 <inst_500>:

inst_500:
// rs1_val==1431655766 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x334, x1, 1908, x4)
    2dd8:	55555537          	lui	a0,0x55555
    2ddc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2de0:	33452593          	slti	a1,a0,820
    2de4:	76b0aa23          	sw	a1,1908(ra)

00002de8 <inst_501>:

inst_501:
// rs1_val==1431655766 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x667, x1, 1912, x4)
    2de8:	55555537          	lui	a0,0x55555
    2dec:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2df0:	66752593          	slti	a1,a0,1639
    2df4:	76b0ac23          	sw	a1,1912(ra)

00002df8 <inst_502>:

inst_502:
// rs1_val==1431655766 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, -0x2c, x1, 1916, x4)
    2df8:	55555537          	lui	a0,0x55555
    2dfc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e00:	fd452593          	slti	a1,a0,-44
    2e04:	76b0ae23          	sw	a1,1916(ra)

00002e08 <inst_503>:

inst_503:
// rs1_val==1431655766 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x0, 0x55555556, 0x2e, x1, 1920, x4)
    2e08:	55555537          	lui	a0,0x55555
    2e0c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e10:	02e52593          	slti	a1,a0,46
    2e14:	78b0a023          	sw	a1,1920(ra)

00002e18 <inst_504>:

inst_504:
// rs1_val==-1431655765 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x3, x1, 1924, x4)
    2e18:	aaaab537          	lui	a0,0xaaaab
    2e1c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e20:	00352593          	slti	a1,a0,3
    2e24:	78b0a223          	sw	a1,1924(ra)

00002e28 <inst_505>:

inst_505:
// rs1_val==-1431655765 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x555, x1, 1928, x4)
    2e28:	aaaab537          	lui	a0,0xaaaab
    2e2c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e30:	55552593          	slti	a1,a0,1365
    2e34:	78b0a423          	sw	a1,1928(ra)

00002e38 <inst_506>:

inst_506:
// rs1_val==-1431655765 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, -0x556, x1, 1932, x4)
    2e38:	aaaab537          	lui	a0,0xaaaab
    2e3c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e40:	aaa52593          	slti	a1,a0,-1366
    2e44:	78b0a623          	sw	a1,1932(ra)

00002e48 <inst_507>:

inst_507:
// rs1_val==-1431655765 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x5, x1, 1936, x4)
    2e48:	aaaab537          	lui	a0,0xaaaab
    2e4c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e50:	00552593          	slti	a1,a0,5
    2e54:	78b0a823          	sw	a1,1936(ra)

00002e58 <inst_508>:

inst_508:
// rs1_val==-1431655765 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x333, x1, 1940, x4)
    2e58:	aaaab537          	lui	a0,0xaaaab
    2e5c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e60:	33352593          	slti	a1,a0,819
    2e64:	78b0aa23          	sw	a1,1940(ra)

00002e68 <inst_509>:

inst_509:
// rs1_val==-1431655765 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x666, x1, 1944, x4)
    2e68:	aaaab537          	lui	a0,0xaaaab
    2e6c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e70:	66652593          	slti	a1,a0,1638
    2e74:	78b0ac23          	sw	a1,1944(ra)

00002e78 <inst_510>:

inst_510:
// rs1_val==-1431655765 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, -0x2d, x1, 1948, x4)
    2e78:	aaaab537          	lui	a0,0xaaaab
    2e7c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e80:	fd352593          	slti	a1,a0,-45
    2e84:	78b0ae23          	sw	a1,1948(ra)

00002e88 <inst_511>:

inst_511:
// rs1_val==-1431655765 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x2d, x1, 1952, x4)
    2e88:	aaaab537          	lui	a0,0xaaaab
    2e8c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e90:	02d52593          	slti	a1,a0,45
    2e94:	7ab0a023          	sw	a1,1952(ra)

00002e98 <inst_512>:

inst_512:
// rs1_val==-1431655765 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x2, x1, 1956, x4)
    2e98:	aaaab537          	lui	a0,0xaaaab
    2e9c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ea0:	00252593          	slti	a1,a0,2
    2ea4:	7ab0a223          	sw	a1,1956(ra)

00002ea8 <inst_513>:

inst_513:
// rs1_val==-1431655765 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x554, x1, 1960, x4)
    2ea8:	aaaab537          	lui	a0,0xaaaab
    2eac:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2eb0:	55452593          	slti	a1,a0,1364
    2eb4:	7ab0a423          	sw	a1,1960(ra)

00002eb8 <inst_514>:

inst_514:
// rs1_val==-1431655765 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x0, x1, 1964, x4)
    2eb8:	aaaab537          	lui	a0,0xaaaab
    2ebc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ec0:	00052593          	slti	a1,a0,0
    2ec4:	7ab0a623          	sw	a1,1964(ra)

00002ec8 <inst_515>:

inst_515:
// rs1_val==-1431655765 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x4, x1, 1968, x4)
    2ec8:	aaaab537          	lui	a0,0xaaaab
    2ecc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ed0:	00452593          	slti	a1,a0,4
    2ed4:	7ab0a823          	sw	a1,1968(ra)

00002ed8 <inst_516>:

inst_516:
// rs1_val==-1431655765 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x332, x1, 1972, x4)
    2ed8:	aaaab537          	lui	a0,0xaaaab
    2edc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ee0:	33252593          	slti	a1,a0,818
    2ee4:	7ab0aa23          	sw	a1,1972(ra)

00002ee8 <inst_517>:

inst_517:
// rs1_val==-1431655765 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x665, x1, 1976, x4)
    2ee8:	aaaab537          	lui	a0,0xaaaab
    2eec:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ef0:	66552593          	slti	a1,a0,1637
    2ef4:	7ab0ac23          	sw	a1,1976(ra)

00002ef8 <inst_518>:

inst_518:
// rs1_val==-1431655765 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x2c, x1, 1980, x4)
    2ef8:	aaaab537          	lui	a0,0xaaaab
    2efc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f00:	02c52593          	slti	a1,a0,44
    2f04:	7ab0ae23          	sw	a1,1980(ra)

00002f08 <inst_519>:

inst_519:
// rs1_val==-1431655765 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x556, x1, 1984, x4)
    2f08:	aaaab537          	lui	a0,0xaaaab
    2f0c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f10:	55652593          	slti	a1,a0,1366
    2f14:	7cb0a023          	sw	a1,1984(ra)

00002f18 <inst_520>:

inst_520:
// rs1_val==-1431655765 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, -0x555, x1, 1988, x4)
    2f18:	aaaab537          	lui	a0,0xaaaab
    2f1c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f20:	aab52593          	slti	a1,a0,-1365
    2f24:	7cb0a223          	sw	a1,1988(ra)

00002f28 <inst_521>:

inst_521:
// rs1_val==-1431655765 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x6, x1, 1992, x4)
    2f28:	aaaab537          	lui	a0,0xaaaab
    2f2c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f30:	00652593          	slti	a1,a0,6
    2f34:	7cb0a423          	sw	a1,1992(ra)

00002f38 <inst_522>:

inst_522:
// rs1_val==-1431655765 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x334, x1, 1996, x4)
    2f38:	aaaab537          	lui	a0,0xaaaab
    2f3c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f40:	33452593          	slti	a1,a0,820
    2f44:	7cb0a623          	sw	a1,1996(ra)

00002f48 <inst_523>:

inst_523:
// rs1_val==-1431655765 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x667, x1, 2000, x4)
    2f48:	aaaab537          	lui	a0,0xaaaab
    2f4c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f50:	66752593          	slti	a1,a0,1639
    2f54:	7cb0a823          	sw	a1,2000(ra)

00002f58 <inst_524>:

inst_524:
// rs1_val==-1431655765 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, -0x2c, x1, 2004, x4)
    2f58:	aaaab537          	lui	a0,0xaaaab
    2f5c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f60:	fd452593          	slti	a1,a0,-44
    2f64:	7cb0aa23          	sw	a1,2004(ra)

00002f68 <inst_525>:

inst_525:
// rs1_val==-1431655765 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, -0x55555555, 0x2e, x1, 2008, x4)
    2f68:	aaaab537          	lui	a0,0xaaaab
    2f6c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f70:	02e52593          	slti	a1,a0,46
    2f74:	7cb0ac23          	sw	a1,2008(ra)

00002f78 <inst_526>:

inst_526:
// rs1_val==6 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, 0x3, x1, 2012, x4)
    2f78:	00600513          	li	a0,6
    2f7c:	00352593          	slti	a1,a0,3
    2f80:	7cb0ae23          	sw	a1,2012(ra)

00002f84 <inst_527>:

inst_527:
// rs1_val==6 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x555, x1, 2016, x4)
    2f84:	00600513          	li	a0,6
    2f88:	55552593          	slti	a1,a0,1365
    2f8c:	7eb0a023          	sw	a1,2016(ra)

00002f90 <inst_528>:

inst_528:
// rs1_val==6 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, -0x556, x1, 2020, x4)
    2f90:	00600513          	li	a0,6
    2f94:	aaa52593          	slti	a1,a0,-1366
    2f98:	7eb0a223          	sw	a1,2020(ra)

00002f9c <inst_529>:

inst_529:
// rs1_val==6 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, 0x5, x1, 2024, x4)
    2f9c:	00600513          	li	a0,6
    2fa0:	00552593          	slti	a1,a0,5
    2fa4:	7eb0a423          	sw	a1,2024(ra)

00002fa8 <inst_530>:

inst_530:
// rs1_val==6 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x333, x1, 2028, x4)
    2fa8:	00600513          	li	a0,6
    2fac:	33352593          	slti	a1,a0,819
    2fb0:	7eb0a623          	sw	a1,2028(ra)

00002fb4 <inst_531>:

inst_531:
// rs1_val==6 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x666, x1, 2032, x4)
    2fb4:	00600513          	li	a0,6
    2fb8:	66652593          	slti	a1,a0,1638
    2fbc:	7eb0a823          	sw	a1,2032(ra)

00002fc0 <inst_532>:

inst_532:
// rs1_val==6 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, -0x2d, x1, 2036, x4)
    2fc0:	00600513          	li	a0,6
    2fc4:	fd352593          	slti	a1,a0,-45
    2fc8:	7eb0aa23          	sw	a1,2036(ra)

00002fcc <inst_533>:

inst_533:
// rs1_val==6 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x2d, x1, 2040, x4)
    2fcc:	00600513          	li	a0,6
    2fd0:	02d52593          	slti	a1,a0,45
    2fd4:	7eb0ac23          	sw	a1,2040(ra)

00002fd8 <inst_534>:

inst_534:
// rs1_val==6 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, 0x2, x1, 2044, x4)
    2fd8:	00600513          	li	a0,6
    2fdc:	00252593          	slti	a1,a0,2
    2fe0:	7eb0ae23          	sw	a1,2044(ra)
RVTEST_SIGBASE( x1,signature_x1_1)
    2fe4:	00002097          	auipc	ra,0x2
    2fe8:	88808093          	addi	ra,ra,-1912 # 486c <signature_x1_1>

00002fec <inst_535>:

inst_535:
// rs1_val==6 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x554, x1, 0, x4)
    2fec:	00600513          	li	a0,6
    2ff0:	55452593          	slti	a1,a0,1364
    2ff4:	00b0a023          	sw	a1,0(ra)

00002ff8 <inst_536>:

inst_536:
// rs1_val==6 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, 0x0, x1, 4, x4)
    2ff8:	00600513          	li	a0,6
    2ffc:	00052593          	slti	a1,a0,0
    3000:	00b0a223          	sw	a1,4(ra)

00003004 <inst_537>:

inst_537:
// rs1_val==6 and imm_val==4, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x4
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, 0x4, x1, 8, x4)
    3004:	00600513          	li	a0,6
    3008:	00452593          	slti	a1,a0,4
    300c:	00b0a423          	sw	a1,8(ra)

00003010 <inst_538>:

inst_538:
// rs1_val==6 and imm_val==818, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x332
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x332, x1, 12, x4)
    3010:	00600513          	li	a0,6
    3014:	33252593          	slti	a1,a0,818
    3018:	00b0a623          	sw	a1,12(ra)

0000301c <inst_539>:

inst_539:
// rs1_val==6 and imm_val==1637, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x665
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x665, x1, 16, x4)
    301c:	00600513          	li	a0,6
    3020:	66552593          	slti	a1,a0,1637
    3024:	00b0a823          	sw	a1,16(ra)

00003028 <inst_540>:

inst_540:
// rs1_val==6 and imm_val==44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x2c
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x2c, x1, 20, x4)
    3028:	00600513          	li	a0,6
    302c:	02c52593          	slti	a1,a0,44
    3030:	00b0aa23          	sw	a1,20(ra)

00003034 <inst_541>:

inst_541:
// rs1_val==6 and imm_val==1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x556
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x556, x1, 24, x4)
    3034:	00600513          	li	a0,6
    3038:	55652593          	slti	a1,a0,1366
    303c:	00b0ac23          	sw	a1,24(ra)

00003040 <inst_542>:

inst_542:
// rs1_val==6 and imm_val==-1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:-0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, -0x555, x1, 28, x4)
    3040:	00600513          	li	a0,6
    3044:	aab52593          	slti	a1,a0,-1365
    3048:	00b0ae23          	sw	a1,28(ra)

0000304c <inst_543>:

inst_543:
// rs1_val==6 and imm_val==6, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, 0x6, x1, 32, x4)
    304c:	00600513          	li	a0,6
    3050:	00652593          	slti	a1,a0,6
    3054:	02b0a023          	sw	a1,32(ra)

00003058 <inst_544>:

inst_544:
// rs1_val==6 and imm_val==820, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x334
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x334, x1, 36, x4)
    3058:	00600513          	li	a0,6
    305c:	33452593          	slti	a1,a0,820
    3060:	02b0a223          	sw	a1,36(ra)

00003064 <inst_545>:

inst_545:
// rs1_val==6 and imm_val==1639, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x667
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x667, x1, 40, x4)
    3064:	00600513          	li	a0,6
    3068:	66752593          	slti	a1,a0,1639
    306c:	02b0a423          	sw	a1,40(ra)

00003070 <inst_546>:

inst_546:
// rs1_val==6 and imm_val==-44, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( slti, x11, x10, 0x0, 0x6, -0x2c, x1, 44, x4)
    3070:	00600513          	li	a0,6
    3074:	fd452593          	slti	a1,a0,-44
    3078:	02b0a623          	sw	a1,44(ra)

0000307c <inst_547>:

inst_547:
// rs1_val==6 and imm_val==46, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x6;  immval:0x2e
TEST_IMM_OP( slti, x11, x10, 0x1, 0x6, 0x2e, x1, 48, x4)
    307c:	00600513          	li	a0,6
    3080:	02e52593          	slti	a1,a0,46
    3084:	02b0a823          	sw	a1,48(ra)

00003088 <inst_548>:

inst_548:
// rs1_val==858993460 and imm_val==3, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x3
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x3, x1, 52, x4)
    3088:	33333537          	lui	a0,0x33333
    308c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    3090:	00352593          	slti	a1,a0,3
    3094:	02b0aa23          	sw	a1,52(ra)

00003098 <inst_549>:

inst_549:
// rs1_val==858993460 and imm_val==1365, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x555
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x555, x1, 56, x4)
    3098:	33333537          	lui	a0,0x33333
    309c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30a0:	55552593          	slti	a1,a0,1365
    30a4:	02b0ac23          	sw	a1,56(ra)

000030a8 <inst_550>:

inst_550:
// rs1_val==858993460 and imm_val==-1366, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x556
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, -0x556, x1, 60, x4)
    30a8:	33333537          	lui	a0,0x33333
    30ac:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30b0:	aaa52593          	slti	a1,a0,-1366
    30b4:	02b0ae23          	sw	a1,60(ra)

000030b8 <inst_551>:

inst_551:
// rs1_val==858993460 and imm_val==5, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x5
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x5, x1, 64, x4)
    30b8:	33333537          	lui	a0,0x33333
    30bc:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30c0:	00552593          	slti	a1,a0,5
    30c4:	04b0a023          	sw	a1,64(ra)

000030c8 <inst_552>:

inst_552:
// rs1_val==858993460 and imm_val==819, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x333
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x333, x1, 68, x4)
    30c8:	33333537          	lui	a0,0x33333
    30cc:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30d0:	33352593          	slti	a1,a0,819
    30d4:	04b0a223          	sw	a1,68(ra)

000030d8 <inst_553>:

inst_553:
// rs1_val==858993460 and imm_val==1638, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x666
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x666, x1, 72, x4)
    30d8:	33333537          	lui	a0,0x33333
    30dc:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30e0:	66652593          	slti	a1,a0,1638
    30e4:	04b0a423          	sw	a1,72(ra)

000030e8 <inst_554>:

inst_554:
// rs1_val==858993460 and imm_val==-45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, -0x2d, x1, 76, x4)
    30e8:	33333537          	lui	a0,0x33333
    30ec:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30f0:	fd352593          	slti	a1,a0,-45
    30f4:	04b0a623          	sw	a1,76(ra)

000030f8 <inst_555>:

inst_555:
// rs1_val==858993460 and imm_val==45, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2d
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x2d, x1, 80, x4)
    30f8:	33333537          	lui	a0,0x33333
    30fc:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    3100:	02d52593          	slti	a1,a0,45
    3104:	04b0a823          	sw	a1,80(ra)

00003108 <inst_556>:

inst_556:
// rs1_val==858993460 and imm_val==2, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x2, x1, 84, x4)
    3108:	33333537          	lui	a0,0x33333
    310c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    3110:	00252593          	slti	a1,a0,2
    3114:	04b0aa23          	sw	a1,84(ra)

00003118 <inst_557>:

inst_557:
// rs1_val==858993460 and imm_val==1364, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x554
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x554, x1, 88, x4)
    3118:	33333537          	lui	a0,0x33333
    311c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    3120:	55452593          	slti	a1,a0,1364
    3124:	04b0ac23          	sw	a1,88(ra)

00003128 <inst_558>:

inst_558:
// rs1_val==858993460 and imm_val==0, 
// opcode: slti ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x0
TEST_IMM_OP( slti, x11, x10, 0x0, 0x33333334, 0x0, x1, 92, x4)
    3128:	33333537          	lui	a0,0x33333
    312c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    3130:	00052593          	slti	a1,a0,0
    3134:	04b0ae23          	sw	a1,92(ra)

00003138 <inst_559>:

inst_559:
// imm_val == -5, rs1_val == -1048577
// opcode: slti ; op1:x10; dest:x11; op1val:-0x100001;  immval:-0x5
TEST_IMM_OP( slti, x11, x10, 0x1, -0x100001, -0x5, x1, 96, x4)
    3138:	fff00537          	lui	a0,0xfff00
    313c:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0xffefaffb>
    3140:	ffb52593          	slti	a1,a0,-5
    3144:	06b0a023          	sw	a1,96(ra)
    3148:	00000013          	nop
    314c:	00000013          	nop

00003150 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    3150:	babed0b7          	lui	ra,0xbabed
    3154:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe7afa>

00003158 <write_tohost>:
    3158:	00002017          	auipc	zero,0x2
    315c:	ea102423          	sw	ra,-344(zero) # fffffea8 <_end+0xffffaea4>

00003160 <loop>:
    3160:	0000006f          	j	3160 <loop>
	...
