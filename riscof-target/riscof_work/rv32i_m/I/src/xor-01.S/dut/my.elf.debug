
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed5ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff767f52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb0fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd57d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00004317          	auipc	t1,0x4
    102c:	fd830313          	addi	t1,t1,-40 # 5000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb56f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfd7b79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfe8dba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff16db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f5b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bf7db3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadf8ed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56f9769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab79bb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5b9dd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbead9ee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf569f72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab1fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d55fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbea7fea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df50ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa57f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7cfbf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe4dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76def6fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f4b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb775bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedb8adb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76d956b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb69ab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xor)

RVTEST_SIGBASE( x7,signature_x7_1)
    10f8:	00004397          	auipc	t2,0x4
    10fc:	f1838393          	addi	t2,t2,-232 # 5010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs2 == rd != rs1, rs1==x27, rs2==x24, rd==x24, rs1_val > 0 and rs2_val > 0, rs1_val != rs2_val, rs1_val==1717986917 and rs2_val==3
// opcode: xor ; op1:x27; op2:x24; dest:x24; op1val:0x66666665;  op2val:0x3
TEST_RR_OP(xor, x24, x27, x24, 0x66666666, 0x66666665, 0x3, x7, 0, x20)
    1100:	66666db7          	lui	s11,0x66666
    1104:	665d8d93          	addi	s11,s11,1637 # 66666665 <_end+0x66660661>
    1108:	00300c13          	li	s8,3
    110c:	018dcc33          	xor	s8,s11,s8
    1110:	0183a023          	sw	s8,0(t2)

00001114 <inst_1>:

inst_1:
// rs1 == rs2 != rd, rs1==x13, rs2==x13, rd==x10, rs1_val > 0 and rs2_val < 0, 
// opcode: xor ; op1:x13; op2:x13; dest:x10; op1val:0x5;  op2val:0x5
TEST_RR_OP(xor, x10, x13, x13, 0x0, 0x5, 0x5, x7, 4, x20)
    1114:	00500693          	li	a3,5
    1118:	00500693          	li	a3,5
    111c:	00d6c533          	xor	a0,a3,a3
    1120:	00a3a223          	sw	a0,4(t2)

00001124 <inst_2>:

inst_2:
// rs1 == rs2 == rd, rs1==x23, rs2==x23, rd==x23, rs1_val < 0 and rs2_val < 0, rs1_val == -16385, rs2_val == -65537
// opcode: xor ; op1:x23; op2:x23; dest:x23; op1val:-0x4001;  op2val:-0x4001
TEST_RR_OP(xor, x23, x23, x23, 0x0, -0x4001, -0x4001, x7, 8, x20)
    1124:	ffffcbb7          	lui	s7,0xffffc
    1128:	fffb8b93          	addi	s7,s7,-1 # ffffbfff <_end+0xffff5ffb>
    112c:	ffffcbb7          	lui	s7,0xffffc
    1130:	fffb8b93          	addi	s7,s7,-1 # ffffbfff <_end+0xffff5ffb>
    1134:	017bcbb3          	xor	s7,s7,s7
    1138:	0173a423          	sw	s7,8(t2)

0000113c <inst_3>:

inst_3:
// rs1 == rd != rs2, rs1==x28, rs2==x14, rd==x28, rs1_val < 0 and rs2_val > 0, rs2_val == 8, rs1_val == -65
// opcode: xor ; op1:x28; op2:x14; dest:x28; op1val:-0x41;  op2val:0x8
TEST_RR_OP(xor, x28, x28, x14, 0xffffffb7, -0x41, 0x8, x7, 12, x20)
    113c:	fbf00e13          	li	t3,-65
    1140:	00800713          	li	a4,8
    1144:	00ee4e33          	xor	t3,t3,a4
    1148:	01c3a623          	sw	t3,12(t2)

0000114c <inst_4>:

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x1, rs2==x2, rd==x18, rs1_val == rs2_val, 
// opcode: xor ; op1:x1; op2:x2; dest:x18; op1val:-0x1;  op2val:-0x1
TEST_RR_OP(xor, x18, x1, x2, 0x0, -0x1, -0x1, x7, 16, x20)
    114c:	fff00093          	li	ra,-1
    1150:	fff00113          	li	sp,-1
    1154:	0020c933          	xor	s2,ra,sp
    1158:	0123a823          	sw	s2,16(t2)

0000115c <inst_5>:

inst_5:
// rs1==x5, rs2==x22, rd==x19, rs2_val == (-2**(xlen-1)), rs1_val == 4194304, rs2_val == -2147483648
// opcode: xor ; op1:x5; op2:x22; dest:x19; op1val:0x400000;  op2val:-0x80000000
TEST_RR_OP(xor, x19, x5, x22, 0x80400000, 0x400000, -0x80000000, x7, 20, x20)
    115c:	004002b7          	lui	t0,0x400
    1160:	80000b37          	lui	s6,0x80000
    1164:	0162c9b3          	xor	s3,t0,s6
    1168:	0133aa23          	sw	s3,20(t2)

0000116c <inst_6>:

inst_6:
// rs1==x26, rs2==x12, rd==x13, rs2_val == 0, rs1_val == -17
// opcode: xor ; op1:x26; op2:x12; dest:x13; op1val:-0x11;  op2val:0x0
TEST_RR_OP(xor, x13, x26, x12, 0xffffffef, -0x11, 0x0, x7, 24, x20)
    116c:	fef00d13          	li	s10,-17
    1170:	00000613          	li	a2,0
    1174:	00cd46b3          	xor	a3,s10,a2
    1178:	00d3ac23          	sw	a3,24(t2)

0000117c <inst_7>:

inst_7:
// rs1==x12, rs2==x11, rd==x4, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647, rs1_val == -1431655766
// opcode: xor ; op1:x12; op2:x11; dest:x4; op1val:-0x55555556;  op2val:0x7fffffff
TEST_RR_OP(xor, x4, x12, x11, 0xd5555555, -0x55555556, 0x7fffffff, x7, 28, x20)
    117c:	aaaab637          	lui	a2,0xaaaab
    1180:	aaa60613          	addi	a2,a2,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1184:	800005b7          	lui	a1,0x80000
    1188:	fff58593          	addi	a1,a1,-1 # 7fffffff <_end+0x7fff9ffb>
    118c:	00b64233          	xor	tp,a2,a1
    1190:	0043ae23          	sw	tp,28(t2)

00001194 <inst_8>:

inst_8:
// rs1==x19, rs2==x30, rd==x17, rs2_val == 1, rs1_val == 1
// opcode: xor ; op1:x19; op2:x30; dest:x17; op1val:0x1;  op2val:0x1
TEST_RR_OP(xor, x17, x19, x30, 0x0, 0x1, 0x1, x7, 32, x20)
    1194:	00100993          	li	s3,1
    1198:	00100f13          	li	t5,1
    119c:	01e9c8b3          	xor	a7,s3,t5
    11a0:	0313a023          	sw	a7,32(t2)

000011a4 <inst_9>:

inst_9:
// rs1==x11, rs2==x1, rd==x3, rs1_val == (-2**(xlen-1)), rs2_val == -268435457, rs1_val == -2147483648
// opcode: xor ; op1:x11; op2:x1; dest:x3; op1val:-0x80000000;  op2val:-0x10000001
TEST_RR_OP(xor, x3, x11, x1, 0x6fffffff, -0x80000000, -0x10000001, x7, 36, x20)
    11a4:	800005b7          	lui	a1,0x80000
    11a8:	f00000b7          	lui	ra,0xf0000
    11ac:	fff08093          	addi	ra,ra,-1 # efffffff <_end+0xefff9ffb>
    11b0:	0015c1b3          	xor	gp,a1,ra
    11b4:	0233a223          	sw	gp,36(t2)

000011b8 <inst_10>:

inst_10:
// rs1==x24, rs2==x29, rd==x8, rs1_val == 0, rs1_val==0 and rs2_val==-46340
// opcode: xor ; op1:x24; op2:x29; dest:x8; op1val:0x0;  op2val:-0xb504
TEST_RR_OP(xor, x8, x24, x29, 0xffff4afc, 0x0, -0xb504, x7, 40, x20)
    11b8:	00000c13          	li	s8,0
    11bc:	ffff5eb7          	lui	t4,0xffff5
    11c0:	afce8e93          	addi	t4,t4,-1284 # ffff4afc <_end+0xfffeeaf8>
    11c4:	01dc4433          	xor	s0,s8,t4
    11c8:	0283a423          	sw	s0,40(t2)

000011cc <inst_11>:

inst_11:
// rs1==x0, rs2==x18, rd==x9, rs1_val == (2**(xlen-1)-1), rs2_val == 4096, rs1_val == 2147483647
// opcode: xor ; op1:x0; op2:x18; dest:x9; op1val:0x0;  op2val:0x1000
TEST_RR_OP(xor, x9, x0, x18, 0x1000, 0x0, 0x1000, x7, 44, x20)
    11cc:	00000013          	nop
    11d0:	00001937          	lui	s2,0x1
    11d4:	012044b3          	xor	s1,zero,s2
    11d8:	0293a623          	sw	s1,44(t2)

000011dc <inst_12>:

inst_12:
// rs1==x10, rs2==x6, rd==x26, rs2_val == 2, rs1_val == 524288
// opcode: xor ; op1:x10; op2:x6; dest:x26; op1val:0x80000;  op2val:0x2
TEST_RR_OP(xor, x26, x10, x6, 0x80002, 0x80000, 0x2, x7, 48, x20)
    11dc:	00080537          	lui	a0,0x80
    11e0:	00200313          	li	t1,2
    11e4:	00654d33          	xor	s10,a0,t1
    11e8:	03a3a823          	sw	s10,48(t2)

000011ec <inst_13>:

inst_13:
// rs1==x22, rs2==x31, rd==x30, rs2_val == 4, rs1_val == -33
// opcode: xor ; op1:x22; op2:x31; dest:x30; op1val:-0x21;  op2val:0x4
TEST_RR_OP(xor, x30, x22, x31, 0xffffffdb, -0x21, 0x4, x7, 52, x20)
    11ec:	fdf00b13          	li	s6,-33
    11f0:	00400f93          	li	t6,4
    11f4:	01fb4f33          	xor	t5,s6,t6
    11f8:	03e3aa23          	sw	t5,52(t2)

000011fc <inst_14>:

inst_14:
// rs1==x8, rs2==x0, rd==x16, rs2_val == 16, 
// opcode: xor ; op1:x8; op2:x0; dest:x16; op1val:0x6;  op2val:0x0
TEST_RR_OP(xor, x16, x8, x0, 0x6, 0x6, 0x0, x7, 56, x20)
    11fc:	00600413          	li	s0,6
    1200:	00000013          	nop
    1204:	00044833          	xor	a6,s0,zero
    1208:	0303ac23          	sw	a6,56(t2)

0000120c <inst_15>:

inst_15:
// rs1==x16, rs2==x27, rd==x15, rs2_val == 32, 
// opcode: xor ; op1:x16; op2:x27; dest:x15; op1val:0x5;  op2val:0x20
TEST_RR_OP(xor, x15, x16, x27, 0x25, 0x5, 0x20, x7, 60, x20)
    120c:	00500813          	li	a6,5
    1210:	02000d93          	li	s11,32
    1214:	01b847b3          	xor	a5,a6,s11
    1218:	02f3ae23          	sw	a5,60(t2)

0000121c <inst_16>:

inst_16:
// rs1==x3, rs2==x26, rd==x31, rs2_val == 64, rs1_val == -2097153
// opcode: xor ; op1:x3; op2:x26; dest:x31; op1val:-0x200001;  op2val:0x40
TEST_RR_OP(xor, x31, x3, x26, 0xffdfffbf, -0x200001, 0x40, x7, 64, x19)
    121c:	ffe001b7          	lui	gp,0xffe00
    1220:	fff18193          	addi	gp,gp,-1 # ffdfffff <_end+0xffdf9ffb>
    1224:	04000d13          	li	s10,64
    1228:	01a1cfb3          	xor	t6,gp,s10
    122c:	05f3a023          	sw	t6,64(t2)

00001230 <inst_17>:

inst_17:
// rs1==x9, rs2==x25, rd==x14, rs2_val == 128, rs1_val == -32769
// opcode: xor ; op1:x9; op2:x25; dest:x14; op1val:-0x8001;  op2val:0x80
TEST_RR_OP(xor, x14, x9, x25, 0xffff7f7f, -0x8001, 0x80, x7, 68, x19)
    1230:	ffff84b7          	lui	s1,0xffff8
    1234:	fff48493          	addi	s1,s1,-1 # ffff7fff <_end+0xffff1ffb>
    1238:	08000c93          	li	s9,128
    123c:	0194c733          	xor	a4,s1,s9
    1240:	04e3a223          	sw	a4,68(t2)
RVTEST_SIGBASE( x13,signature_x13_0)
    1244:	00004697          	auipc	a3,0x4
    1248:	e1468693          	addi	a3,a3,-492 # 5058 <signature_x13_0>

0000124c <inst_18>:

inst_18:
// rs1==x30, rs2==x10, rd==x6, rs2_val == 256, 
// opcode: xor ; op1:x30; op2:x10; dest:x6; op1val:0x55555556;  op2val:0x100
TEST_RR_OP(xor, x6, x30, x10, 0x55555456, 0x55555556, 0x100, x13, 0, x19)
    124c:	55555f37          	lui	t5,0x55555
    1250:	556f0f13          	addi	t5,t5,1366 # 55555556 <_end+0x5554f552>
    1254:	10000513          	li	a0,256
    1258:	00af4333          	xor	t1,t5,a0
    125c:	0066a023          	sw	t1,0(a3)

00001260 <inst_19>:

inst_19:
// rs1==x2, rs2==x9, rd==x7, rs2_val == 512, 
// opcode: xor ; op1:x2; op2:x9; dest:x7; op1val:-0x4001;  op2val:0x200
TEST_RR_OP(xor, x7, x2, x9, 0xffffbdff, -0x4001, 0x200, x13, 4, x19)
    1260:	ffffc137          	lui	sp,0xffffc
    1264:	fff10113          	addi	sp,sp,-1 # ffffbfff <_end+0xffff5ffb>
    1268:	20000493          	li	s1,512
    126c:	009143b3          	xor	t2,sp,s1
    1270:	0076a223          	sw	t2,4(a3)

00001274 <inst_20>:

inst_20:
// rs1==x6, rs2==x17, rd==x0, rs2_val == 1024, rs1_val == 128
// opcode: xor ; op1:x6; op2:x17; dest:x0; op1val:0x80;  op2val:0x400
TEST_RR_OP(xor, x0, x6, x17, 0, 0x80, 0x400, x13, 8, x19)
    1274:	08000313          	li	t1,128
    1278:	40000893          	li	a7,1024
    127c:	01134033          	xor	zero,t1,a7
    1280:	0006a423          	sw	zero,8(a3)

00001284 <inst_21>:

inst_21:
// rs1==x15, rs2==x5, rd==x2, rs2_val == 2048, 
// opcode: xor ; op1:x15; op2:x5; dest:x2; op1val:-0x8001;  op2val:0x800
TEST_RR_OP(xor, x2, x15, x5, 0xffff77ff, -0x8001, 0x800, x13, 12, x19)
    1284:	ffff87b7          	lui	a5,0xffff8
    1288:	fff78793          	addi	a5,a5,-1 # ffff7fff <_end+0xffff1ffb>
    128c:	000012b7          	lui	t0,0x1
    1290:	80028293          	addi	t0,t0,-2048 # 800 <offset+0x718>
    1294:	0057c133          	xor	sp,a5,t0
    1298:	0026a623          	sw	sp,12(a3)

0000129c <inst_22>:

inst_22:
// rs1==x7, rs2==x15, rd==x22, rs2_val == 8192, 
// opcode: xor ; op1:x7; op2:x15; dest:x22; op1val:0x6;  op2val:0x2000
TEST_RR_OP(xor, x22, x7, x15, 0x2006, 0x6, 0x2000, x13, 16, x19)
    129c:	00600393          	li	t2,6
    12a0:	000027b7          	lui	a5,0x2
    12a4:	00f3cb33          	xor	s6,t2,a5
    12a8:	0166a823          	sw	s6,16(a3)

000012ac <inst_23>:

inst_23:
// rs1==x14, rs2==x16, rd==x20, rs2_val == 16384, rs1_val == -9
// opcode: xor ; op1:x14; op2:x16; dest:x20; op1val:-0x9;  op2val:0x4000
TEST_RR_OP(xor, x20, x14, x16, 0xffffbff7, -0x9, 0x4000, x13, 20, x19)
    12ac:	ff700713          	li	a4,-9
    12b0:	00004837          	lui	a6,0x4
    12b4:	01074a33          	xor	s4,a4,a6
    12b8:	0146aa23          	sw	s4,20(a3)

000012bc <inst_24>:

inst_24:
// rs1==x29, rs2==x20, rd==x1, rs2_val == 32768, rs1_val == 32768
// opcode: xor ; op1:x29; op2:x20; dest:x1; op1val:0x8000;  op2val:0x8000
TEST_RR_OP(xor, x1, x29, x20, 0x0, 0x8000, 0x8000, x13, 24, x19)
    12bc:	00008eb7          	lui	t4,0x8
    12c0:	00008a37          	lui	s4,0x8
    12c4:	014ec0b3          	xor	ra,t4,s4
    12c8:	0016ac23          	sw	ra,24(a3)

000012cc <inst_25>:

inst_25:
// rs1==x18, rs2==x8, rd==x12, rs2_val == 65536, rs1_val == 4
// opcode: xor ; op1:x18; op2:x8; dest:x12; op1val:0x4;  op2val:0x10000
TEST_RR_OP(xor, x12, x18, x8, 0x10004, 0x4, 0x10000, x13, 28, x19)
    12cc:	00400913          	li	s2,4
    12d0:	00010437          	lui	s0,0x10
    12d4:	00894633          	xor	a2,s2,s0
    12d8:	00c6ae23          	sw	a2,28(a3)

000012dc <inst_26>:

inst_26:
// rs1==x21, rs2==x28, rd==x5, rs2_val == 131072, 
// opcode: xor ; op1:x21; op2:x28; dest:x5; op1val:0x33333332;  op2val:0x20000
TEST_RR_OP(xor, x5, x21, x28, 0x33313332, 0x33333332, 0x20000, x13, 32, x19)
    12dc:	33333ab7          	lui	s5,0x33333
    12e0:	332a8a93          	addi	s5,s5,818 # 33333332 <_end+0x3332d32e>
    12e4:	00020e37          	lui	t3,0x20
    12e8:	01cac2b3          	xor	t0,s5,t3
    12ec:	0256a023          	sw	t0,32(a3)

000012f0 <inst_27>:

inst_27:
// rs1==x17, rs2==x4, rd==x11, rs2_val == 262144, rs1_val == -67108865
// opcode: xor ; op1:x17; op2:x4; dest:x11; op1val:-0x4000001;  op2val:0x40000
TEST_RR_OP(xor, x11, x17, x4, 0xfbfbffff, -0x4000001, 0x40000, x13, 36, x19)
    12f0:	fc0008b7          	lui	a7,0xfc000
    12f4:	fff88893          	addi	a7,a7,-1 # fbffffff <_end+0xfbff9ffb>
    12f8:	00040237          	lui	tp,0x40
    12fc:	0048c5b3          	xor	a1,a7,tp
    1300:	02b6a223          	sw	a1,36(a3)

00001304 <inst_28>:

inst_28:
// rs1==x4, rs2==x21, rd==x27, rs2_val == 524288, 
// opcode: xor ; op1:x4; op2:x21; dest:x27; op1val:0x7;  op2val:0x80000
TEST_RR_OP(xor, x27, x4, x21, 0x80007, 0x7, 0x80000, x13, 40, x19)
    1304:	00700213          	li	tp,7
    1308:	00080ab7          	lui	s5,0x80
    130c:	01524db3          	xor	s11,tp,s5
    1310:	03b6a423          	sw	s11,40(a3)

00001314 <inst_29>:

inst_29:
// rs1==x31, rs2==x3, rd==x29, rs2_val == 1048576, 
// opcode: xor ; op1:x31; op2:x3; dest:x29; op1val:-0x1;  op2val:0x100000
TEST_RR_OP(xor, x29, x31, x3, 0xffefffff, -0x1, 0x100000, x13, 44, x1)
    1314:	fff00f93          	li	t6,-1
    1318:	001001b7          	lui	gp,0x100
    131c:	003fceb3          	xor	t4,t6,gp
    1320:	03d6a623          	sw	t4,44(a3)

00001324 <inst_30>:

inst_30:
// rs1==x25, rs2==x7, rd==x21, rs2_val == 2097152, 
// opcode: xor ; op1:x25; op2:x7; dest:x21; op1val:0xb505;  op2val:0x200000
TEST_RR_OP(xor, x21, x25, x7, 0x20b505, 0xb505, 0x200000, x13, 48, x1)
    1324:	0000bcb7          	lui	s9,0xb
    1328:	505c8c93          	addi	s9,s9,1285 # b505 <_end+0x5501>
    132c:	002003b7          	lui	t2,0x200
    1330:	007ccab3          	xor	s5,s9,t2
    1334:	0356a823          	sw	s5,48(a3)

00001338 <inst_31>:

inst_31:
// rs1==x20, rs2==x19, rd==x25, rs2_val == 4194304, 
// opcode: xor ; op1:x20; op2:x19; dest:x25; op1val:0xb505;  op2val:0x400000
TEST_RR_OP(xor, x25, x20, x19, 0x40b505, 0xb505, 0x400000, x13, 52, x1)
    1338:	0000ba37          	lui	s4,0xb
    133c:	505a0a13          	addi	s4,s4,1285 # b505 <_end+0x5501>
    1340:	004009b7          	lui	s3,0x400
    1344:	013a4cb3          	xor	s9,s4,s3
    1348:	0396aa23          	sw	s9,52(a3)

0000134c <inst_32>:

inst_32:
// rs2_val == 8388608, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:0x800000
TEST_RR_OP(xor, x12, x10, x11, 0x800001, 0x1, 0x800000, x13, 56, x1)
    134c:	00100513          	li	a0,1
    1350:	008005b7          	lui	a1,0x800
    1354:	00b54633          	xor	a2,a0,a1
    1358:	02c6ac23          	sw	a2,56(a3)

0000135c <inst_33>:

inst_33:
// rs2_val == 16777216, rs1_val == -268435457
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:0x1000000
TEST_RR_OP(xor, x12, x10, x11, 0xeeffffff, -0x10000001, 0x1000000, x13, 60, x1)
    135c:	f0000537          	lui	a0,0xf0000
    1360:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefff9ffb>
    1364:	010005b7          	lui	a1,0x1000
    1368:	00b54633          	xor	a2,a0,a1
    136c:	02c6ae23          	sw	a2,60(a3)

00001370 <inst_34>:

inst_34:
// rs2_val == 33554432, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x2000000
TEST_RR_OP(xor, x12, x10, x11, 0x200b505, 0xb505, 0x2000000, x13, 64, x1)
    1370:	0000b537          	lui	a0,0xb
    1374:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    1378:	020005b7          	lui	a1,0x2000
    137c:	00b54633          	xor	a2,a0,a1
    1380:	04c6a023          	sw	a2,64(a3)

00001384 <inst_35>:

inst_35:
// rs2_val == 67108864, rs1_val == -8388609
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x800001;  op2val:0x4000000
TEST_RR_OP(xor, x12, x10, x11, 0xfb7fffff, -0x800001, 0x4000000, x13, 68, x1)
    1384:	ff800537          	lui	a0,0xff800
    1388:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7f9ffb>
    138c:	040005b7          	lui	a1,0x4000
    1390:	00b54633          	xor	a2,a0,a1
    1394:	04c6a223          	sw	a2,68(a3)

00001398 <inst_36>:

inst_36:
// rs2_val == 134217728, rs1_val == 4096
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1000;  op2val:0x8000000
TEST_RR_OP(xor, x12, x10, x11, 0x8001000, 0x1000, 0x8000000, x13, 72, x1)
    1398:	00001537          	lui	a0,0x1
    139c:	080005b7          	lui	a1,0x8000
    13a0:	00b54633          	xor	a2,a0,a1
    13a4:	04c6a423          	sw	a2,72(a3)

000013a8 <inst_37>:

inst_37:
// rs2_val == 268435456, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x9;  op2val:0x10000000
TEST_RR_OP(xor, x12, x10, x11, 0xeffffff7, -0x9, 0x10000000, x13, 76, x1)
    13a8:	ff700513          	li	a0,-9
    13ac:	100005b7          	lui	a1,0x10000
    13b0:	00b54633          	xor	a2,a0,a1
    13b4:	04c6a623          	sw	a2,76(a3)

000013b8 <inst_38>:

inst_38:
// rs2_val == 536870912, rs1_val == -33554433
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2000001;  op2val:0x20000000
TEST_RR_OP(xor, x12, x10, x11, 0xddffffff, -0x2000001, 0x20000000, x13, 80, x1)
    13b8:	fe000537          	lui	a0,0xfe000
    13bc:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdff9ffb>
    13c0:	200005b7          	lui	a1,0x20000
    13c4:	00b54633          	xor	a2,a0,a1
    13c8:	04c6a823          	sw	a2,80(a3)

000013cc <inst_39>:

inst_39:
// rs2_val == 1073741824, rs1_val == -131073
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x20001;  op2val:0x40000000
TEST_RR_OP(xor, x12, x10, x11, 0xbffdffff, -0x20001, 0x40000000, x13, 84, x1)
    13cc:	fffe0537          	lui	a0,0xfffe0
    13d0:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0xfffd9ffb>
    13d4:	400005b7          	lui	a1,0x40000
    13d8:	00b54633          	xor	a2,a0,a1
    13dc:	04c6aa23          	sw	a2,84(a3)

000013e0 <inst_40>:

inst_40:
// rs2_val == -2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2000001;  op2val:-0x2
TEST_RR_OP(xor, x12, x10, x11, 0x2000001, -0x2000001, -0x2, x13, 88, x1)
    13e0:	fe000537          	lui	a0,0xfe000
    13e4:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdff9ffb>
    13e8:	ffe00593          	li	a1,-2
    13ec:	00b54633          	xor	a2,a0,a1
    13f0:	04c6ac23          	sw	a2,88(a3)

000013f4 <inst_41>:

inst_41:
// rs2_val == -3, rs1_val == 1073741824
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:-0x3
TEST_RR_OP(xor, x12, x10, x11, 0xbffffffd, 0x40000000, -0x3, x13, 92, x1)
    13f4:	40000537          	lui	a0,0x40000
    13f8:	ffd00593          	li	a1,-3
    13fc:	00b54633          	xor	a2,a0,a1
    1400:	04c6ae23          	sw	a2,92(a3)

00001404 <inst_42>:

inst_42:
// rs2_val == -5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x5
TEST_RR_OP(xor, x12, x10, x11, 0x9999999d, 0x66666666, -0x5, x13, 96, x1)
    1404:	66666537          	lui	a0,0x66666
    1408:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    140c:	ffb00593          	li	a1,-5
    1410:	00b54633          	xor	a2,a0,a1
    1414:	06c6a023          	sw	a2,96(a3)

00001418 <inst_43>:

inst_43:
// rs2_val == -9, rs1_val == 33554432
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:-0x9
TEST_RR_OP(xor, x12, x10, x11, 0xfdfffff7, 0x2000000, -0x9, x13, 100, x1)
    1418:	02000537          	lui	a0,0x2000
    141c:	ff700593          	li	a1,-9
    1420:	00b54633          	xor	a2,a0,a1
    1424:	06c6a223          	sw	a2,100(a3)

00001428 <inst_44>:

inst_44:
// rs2_val == -17, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x21;  op2val:-0x11
TEST_RR_OP(xor, x12, x10, x11, 0x30, -0x21, -0x11, x13, 104, x1)
    1428:	fdf00513          	li	a0,-33
    142c:	fef00593          	li	a1,-17
    1430:	00b54633          	xor	a2,a0,a1
    1434:	06c6a423          	sw	a2,104(a3)

00001438 <inst_45>:

inst_45:
// rs2_val == -33, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x21
TEST_RR_OP(xor, x12, x10, x11, 0xffffffdb, 0x4, -0x21, x13, 108, x1)
    1438:	00400513          	li	a0,4
    143c:	fdf00593          	li	a1,-33
    1440:	00b54633          	xor	a2,a0,a1
    1444:	06c6a623          	sw	a2,108(a3)

00001448 <inst_46>:

inst_46:
// rs2_val == -65, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x41
TEST_RR_OP(xor, x12, x10, x11, 0xffffffbc, 0x3, -0x41, x13, 112, x1)
    1448:	00300513          	li	a0,3
    144c:	fbf00593          	li	a1,-65
    1450:	00b54633          	xor	a2,a0,a1
    1454:	06c6a823          	sw	a2,112(a3)

00001458 <inst_47>:

inst_47:
// rs2_val == -129, rs1_val == 131072
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:-0x81
TEST_RR_OP(xor, x12, x10, x11, 0xfffdff7f, 0x20000, -0x81, x13, 116, x1)
    1458:	00020537          	lui	a0,0x20
    145c:	f7f00593          	li	a1,-129
    1460:	00b54633          	xor	a2,a0,a1
    1464:	06c6aa23          	sw	a2,116(a3)

00001468 <inst_48>:

inst_48:
// rs2_val == -257, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:-0x101
TEST_RR_OP(xor, x12, x10, x11, 0x10000100, -0x10000001, -0x101, x13, 120, x1)
    1468:	f0000537          	lui	a0,0xf0000
    146c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefff9ffb>
    1470:	eff00593          	li	a1,-257
    1474:	00b54633          	xor	a2,a0,a1
    1478:	06c6ac23          	sw	a2,120(a3)

0000147c <inst_49>:

inst_49:
// rs2_val == -513, rs1_val == -5
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:-0x201
TEST_RR_OP(xor, x12, x10, x11, 0x204, -0x5, -0x201, x13, 124, x1)
    147c:	ffb00513          	li	a0,-5
    1480:	dff00593          	li	a1,-513
    1484:	00b54633          	xor	a2,a0,a1
    1488:	06c6ae23          	sw	a2,124(a3)

0000148c <inst_50>:

inst_50:
// rs2_val == -1025, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:-0x401
TEST_RR_OP(xor, x12, x10, x11, 0x410, -0x11, -0x401, x13, 128, x1)
    148c:	fef00513          	li	a0,-17
    1490:	bff00593          	li	a1,-1025
    1494:	00b54633          	xor	a2,a0,a1
    1498:	08c6a023          	sw	a2,128(a3)

0000149c <inst_51>:

inst_51:
// rs2_val == -2049, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x801
TEST_RR_OP(xor, x12, x10, x11, 0xbd03, -0xb504, -0x801, x13, 132, x1)
    149c:	ffff5537          	lui	a0,0xffff5
    14a0:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    14a4:	fffff5b7          	lui	a1,0xfffff
    14a8:	7ff58593          	addi	a1,a1,2047 # fffff7ff <_end+0xffff97fb>
    14ac:	00b54633          	xor	a2,a0,a1
    14b0:	08c6a223          	sw	a2,132(a3)

000014b4 <inst_52>:

inst_52:
// rs2_val == -4097, rs1_val == 2
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x1001
TEST_RR_OP(xor, x12, x10, x11, 0xffffeffd, 0x2, -0x1001, x13, 136, x1)
    14b4:	00200513          	li	a0,2
    14b8:	fffff5b7          	lui	a1,0xfffff
    14bc:	fff58593          	addi	a1,a1,-1 # ffffefff <_end+0xffff8ffb>
    14c0:	00b54633          	xor	a2,a0,a1
    14c4:	08c6a423          	sw	a2,136(a3)

000014c8 <inst_53>:

inst_53:
// rs2_val == -8193, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x7;  op2val:-0x2001
TEST_RR_OP(xor, x12, x10, x11, 0x2006, -0x7, -0x2001, x13, 140, x1)
    14c8:	ff900513          	li	a0,-7
    14cc:	ffffe5b7          	lui	a1,0xffffe
    14d0:	fff58593          	addi	a1,a1,-1 # ffffdfff <_end+0xffff7ffb>
    14d4:	00b54633          	xor	a2,a0,a1
    14d8:	08c6a623          	sw	a2,140(a3)

000014dc <inst_54>:

inst_54:
// rs2_val == -16385, rs1_val == -16777217
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:-0x4001
TEST_RR_OP(xor, x12, x10, x11, 0x1004000, -0x1000001, -0x4001, x13, 144, x1)
    14dc:	ff000537          	lui	a0,0xff000
    14e0:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeff9ffb>
    14e4:	ffffc5b7          	lui	a1,0xffffc
    14e8:	fff58593          	addi	a1,a1,-1 # ffffbfff <_end+0xffff5ffb>
    14ec:	00b54633          	xor	a2,a0,a1
    14f0:	08c6a823          	sw	a2,144(a3)

000014f4 <inst_55>:

inst_55:
// rs2_val == -32769, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x8001
TEST_RR_OP(xor, x12, x10, x11, 0xffff7ffc, 0x3, -0x8001, x13, 148, x1)
    14f4:	00300513          	li	a0,3
    14f8:	ffff85b7          	lui	a1,0xffff8
    14fc:	fff58593          	addi	a1,a1,-1 # ffff7fff <_end+0xffff1ffb>
    1500:	00b54633          	xor	a2,a0,a1
    1504:	08c6aa23          	sw	a2,148(a3)

00001508 <inst_56>:

inst_56:
// rs2_val == -131073, rs1_val == 16384
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000;  op2val:-0x20001
TEST_RR_OP(xor, x12, x10, x11, 0xfffdbfff, 0x4000, -0x20001, x13, 152, x1)
    1508:	00004537          	lui	a0,0x4
    150c:	fffe05b7          	lui	a1,0xfffe0
    1510:	fff58593          	addi	a1,a1,-1 # fffdffff <_end+0xfffd9ffb>
    1514:	00b54633          	xor	a2,a0,a1
    1518:	08c6ac23          	sw	a2,152(a3)

0000151c <inst_57>:

inst_57:
// rs2_val == -262145, rs1_val == 262144
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40000;  op2val:-0x40001
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, 0x40000, -0x40001, x13, 156, x1)
    151c:	00040537          	lui	a0,0x40
    1520:	fffc05b7          	lui	a1,0xfffc0
    1524:	fff58593          	addi	a1,a1,-1 # fffbffff <_end+0xfffb9ffb>
    1528:	00b54633          	xor	a2,a0,a1
    152c:	08c6ae23          	sw	a2,156(a3)

00001530 <inst_58>:

inst_58:
// rs2_val == -524289, rs1_val == 268435456
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:-0x80001
TEST_RR_OP(xor, x12, x10, x11, 0xeff7ffff, 0x10000000, -0x80001, x13, 160, x1)
    1530:	10000537          	lui	a0,0x10000
    1534:	fff805b7          	lui	a1,0xfff80
    1538:	fff58593          	addi	a1,a1,-1 # fff7ffff <_end+0xfff79ffb>
    153c:	00b54633          	xor	a2,a0,a1
    1540:	0ac6a023          	sw	a2,160(a3)

00001544 <inst_59>:

inst_59:
// rs2_val == -1048577, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000;  op2val:-0x100001
TEST_RR_OP(xor, x12, x10, x11, 0x7fefffff, -0x80000000, -0x100001, x13, 164, x1)
    1544:	80000537          	lui	a0,0x80000
    1548:	fff005b7          	lui	a1,0xfff00
    154c:	fff58593          	addi	a1,a1,-1 # ffefffff <_end+0xffef9ffb>
    1550:	00b54633          	xor	a2,a0,a1
    1554:	0ac6a223          	sw	a2,164(a3)

00001558 <inst_60>:

inst_60:
// rs2_val == -2097153, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8000;  op2val:-0x200001
TEST_RR_OP(xor, x12, x10, x11, 0xffdf7fff, 0x8000, -0x200001, x13, 168, x1)
    1558:	00008537          	lui	a0,0x8
    155c:	ffe005b7          	lui	a1,0xffe00
    1560:	fff58593          	addi	a1,a1,-1 # ffdfffff <_end+0xffdf9ffb>
    1564:	00b54633          	xor	a2,a0,a1
    1568:	0ac6a423          	sw	a2,168(a3)

0000156c <inst_61>:

inst_61:
// rs2_val == -4194305, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000;  op2val:-0x400001
TEST_RR_OP(xor, x12, x10, x11, 0x7fbfffff, -0x80000000, -0x400001, x13, 172, x1)
    156c:	80000537          	lui	a0,0x80000
    1570:	ffc005b7          	lui	a1,0xffc00
    1574:	fff58593          	addi	a1,a1,-1 # ffbfffff <_end+0xffbf9ffb>
    1578:	00b54633          	xor	a2,a0,a1
    157c:	0ac6a623          	sw	a2,172(a3)

00001580 <inst_62>:

inst_62:
// rs2_val == -8388609, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0x800001
TEST_RR_OP(xor, x12, x10, x11, 0xcc4ccccb, 0x33333334, -0x800001, x13, 176, x1)
    1580:	33333537          	lui	a0,0x33333
    1584:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    1588:	ff8005b7          	lui	a1,0xff800
    158c:	fff58593          	addi	a1,a1,-1 # ff7fffff <_end+0xff7f9ffb>
    1590:	00b54633          	xor	a2,a0,a1
    1594:	0ac6a823          	sw	a2,176(a3)

00001598 <inst_63>:

inst_63:
// rs2_val == -16777217, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x40000000;  op2val:-0x1000001
TEST_RR_OP(xor, x12, x10, x11, 0x3effffff, -0x40000000, -0x1000001, x13, 180, x1)
    1598:	c0000537          	lui	a0,0xc0000
    159c:	ff0005b7          	lui	a1,0xff000
    15a0:	fff58593          	addi	a1,a1,-1 # feffffff <_end+0xfeff9ffb>
    15a4:	00b54633          	xor	a2,a0,a1
    15a8:	0ac6aa23          	sw	a2,180(a3)

000015ac <inst_64>:

inst_64:
// rs2_val == -33554433, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2000001;  op2val:-0x2000001
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0x2000001, -0x2000001, x13, 184, x1)
    15ac:	fe000537          	lui	a0,0xfe000
    15b0:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdff9ffb>
    15b4:	fe0005b7          	lui	a1,0xfe000
    15b8:	fff58593          	addi	a1,a1,-1 # fdffffff <_end+0xfdff9ffb>
    15bc:	00b54633          	xor	a2,a0,a1
    15c0:	0ac6ac23          	sw	a2,184(a3)

000015c4 <inst_65>:

inst_65:
// rs2_val == -67108865, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1;  op2val:-0x4000001
TEST_RR_OP(xor, x12, x10, x11, 0xfbfffffe, 0x1, -0x4000001, x13, 188, x1)
    15c4:	00100513          	li	a0,1
    15c8:	fc0005b7          	lui	a1,0xfc000
    15cc:	fff58593          	addi	a1,a1,-1 # fbffffff <_end+0xfbff9ffb>
    15d0:	00b54633          	xor	a2,a0,a1
    15d4:	0ac6ae23          	sw	a2,188(a3)

000015d8 <inst_66>:

inst_66:
// rs2_val == -134217729, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x8000001
TEST_RR_OP(xor, x12, x10, x11, 0x91999999, 0x66666666, -0x8000001, x13, 192, x1)
    15d8:	66666537          	lui	a0,0x66666
    15dc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    15e0:	f80005b7          	lui	a1,0xf8000
    15e4:	fff58593          	addi	a1,a1,-1 # f7ffffff <_end+0xf7ff9ffb>
    15e8:	00b54633          	xor	a2,a0,a1
    15ec:	0cc6a023          	sw	a2,192(a3)

000015f0 <inst_67>:

inst_67:
// rs2_val == -536870913, rs1_val == -524289
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x80001;  op2val:-0x20000001
TEST_RR_OP(xor, x12, x10, x11, 0x20080000, -0x80001, -0x20000001, x13, 196, x1)
    15f0:	fff80537          	lui	a0,0xfff80
    15f4:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0xfff79ffb>
    15f8:	e00005b7          	lui	a1,0xe0000
    15fc:	fff58593          	addi	a1,a1,-1 # dfffffff <_end+0xdfff9ffb>
    1600:	00b54633          	xor	a2,a0,a1
    1604:	0cc6a223          	sw	a2,196(a3)

00001608 <inst_68>:

inst_68:
// rs2_val == -1073741825, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x40000001
TEST_RR_OP(xor, x12, x10, x11, 0x4000b503, -0xb504, -0x40000001, x13, 200, x1)
    1608:	ffff5537          	lui	a0,0xffff5
    160c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    1610:	c00005b7          	lui	a1,0xc0000
    1614:	fff58593          	addi	a1,a1,-1 # bfffffff <_end+0xbfff9ffb>
    1618:	00b54633          	xor	a2,a0,a1
    161c:	0cc6a423          	sw	a2,200(a3)

00001620 <inst_69>:

inst_69:
// rs2_val == 1431655765, rs1_val==1431655764 and rs2_val==1431655765
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x55555554, 0x55555555, x13, 204, x1)
    1620:	55555537          	lui	a0,0x55555
    1624:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    1628:	555555b7          	lui	a1,0x55555
    162c:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1630:	00b54633          	xor	a2,a0,a1
    1634:	0cc6a623          	sw	a2,204(a3)

00001638 <inst_70>:

inst_70:
// rs2_val == -1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xa8aaaaaa, 0x2000000, -0x55555556, x13, 208, x1)
    1638:	02000537          	lui	a0,0x2000
    163c:	aaaab5b7          	lui	a1,0xaaaab
    1640:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1644:	00b54633          	xor	a2,a0,a1
    1648:	0cc6a823          	sw	a2,208(a3)

0000164c <inst_71>:

inst_71:
// rs1_val == 8, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8;  op2val:-0x4
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff4, 0x8, -0x4, x13, 212, x1)
    164c:	00800513          	li	a0,8
    1650:	ffc00593          	li	a1,-4
    1654:	00b54633          	xor	a2,a0,a1
    1658:	0cc6aa23          	sw	a2,212(a3)

0000165c <inst_72>:

inst_72:
// rs1_val == 16, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10;  op2val:0x10
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x10, 0x10, x13, 216, x1)
    165c:	01000513          	li	a0,16
    1660:	01000593          	li	a1,16
    1664:	00b54633          	xor	a2,a0,a1
    1668:	0cc6ac23          	sw	a2,216(a3)

0000166c <inst_73>:

inst_73:
// rs1_val == 32, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20;  op2val:0x40
TEST_RR_OP(xor, x12, x10, x11, 0x60, 0x20, 0x40, x13, 220, x1)
    166c:	02000513          	li	a0,32
    1670:	04000593          	li	a1,64
    1674:	00b54633          	xor	a2,a0,a1
    1678:	0cc6ae23          	sw	a2,220(a3)

0000167c <inst_74>:

inst_74:
// rs1_val == 64, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x40;  op2val:-0x21
TEST_RR_OP(xor, x12, x10, x11, 0xffffff9f, 0x40, -0x21, x13, 224, x1)
    167c:	04000513          	li	a0,64
    1680:	fdf00593          	li	a1,-33
    1684:	00b54633          	xor	a2,a0,a1
    1688:	0ec6a023          	sw	a2,224(a3)

0000168c <inst_75>:

inst_75:
// rs1_val == 256, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x100;  op2val:-0x400001
TEST_RR_OP(xor, x12, x10, x11, 0xffbffeff, 0x100, -0x400001, x13, 228, x1)
    168c:	10000513          	li	a0,256
    1690:	ffc005b7          	lui	a1,0xffc00
    1694:	fff58593          	addi	a1,a1,-1 # ffbfffff <_end+0xffbf9ffb>
    1698:	00b54633          	xor	a2,a0,a1
    169c:	0ec6a223          	sw	a2,228(a3)

000016a0 <inst_76>:

inst_76:
// rs1_val == 512, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaa8aa, 0x200, -0x55555556, x13, 232, x1)
    16a0:	20000513          	li	a0,512
    16a4:	aaaab5b7          	lui	a1,0xaaaab
    16a8:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    16ac:	00b54633          	xor	a2,a0,a1
    16b0:	0ec6a423          	sw	a2,232(a3)

000016b4 <inst_77>:

inst_77:
// rs1_val == 1024, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaeaa, 0x400, -0x55555556, x13, 236, x1)
    16b4:	40000513          	li	a0,1024
    16b8:	aaaab5b7          	lui	a1,0xaaaab
    16bc:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    16c0:	00b54633          	xor	a2,a0,a1
    16c4:	0ec6a623          	sw	a2,236(a3)

000016c8 <inst_78>:

inst_78:
// rs1_val == 2048, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666e65, 0x800, 0x66666665, x13, 240, x1)
    16c8:	00001537          	lui	a0,0x1
    16cc:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x718>
    16d0:	666665b7          	lui	a1,0x66666
    16d4:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    16d8:	00b54633          	xor	a2,a0,a1
    16dc:	0ec6a823          	sw	a2,240(a3)

000016e0 <inst_79>:

inst_79:
// rs1_val == 8192, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2000;  op2val:-0x100001
TEST_RR_OP(xor, x12, x10, x11, 0xffefdfff, 0x2000, -0x100001, x13, 244, x1)
    16e0:	00002537          	lui	a0,0x2
    16e4:	fff005b7          	lui	a1,0xfff00
    16e8:	fff58593          	addi	a1,a1,-1 # ffefffff <_end+0xffef9ffb>
    16ec:	00b54633          	xor	a2,a0,a1
    16f0:	0ec6aa23          	sw	a2,244(a3)

000016f4 <inst_80>:

inst_80:
// rs1_val == 65536, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x10000;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xfffe4afd, 0x10000, -0xb503, x13, 248, x1)
    16f4:	00010537          	lui	a0,0x10
    16f8:	ffff55b7          	lui	a1,0xffff5
    16fc:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1700:	00b54633          	xor	a2,a0,a1
    1704:	0ec6ac23          	sw	a2,248(a3)

00001708 <inst_81>:

inst_81:
// rs1_val == 1048576, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x100000;  op2val:-0x9
TEST_RR_OP(xor, x12, x10, x11, 0xffeffff7, 0x100000, -0x9, x13, 252, x1)
    1708:	00100537          	lui	a0,0x100
    170c:	ff700593          	li	a1,-9
    1710:	00b54633          	xor	a2,a0,a1
    1714:	0ec6ae23          	sw	a2,252(a3)

00001718 <inst_82>:

inst_82:
// rs1_val == 2097152, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x200000;  op2val:-0x4001
TEST_RR_OP(xor, x12, x10, x11, 0xffdfbfff, 0x200000, -0x4001, x13, 256, x1)
    1718:	00200537          	lui	a0,0x200
    171c:	ffffc5b7          	lui	a1,0xffffc
    1720:	fff58593          	addi	a1,a1,-1 # ffffbfff <_end+0xffff5ffb>
    1724:	00b54633          	xor	a2,a0,a1
    1728:	10c6a023          	sw	a2,256(a3)

0000172c <inst_83>:

inst_83:
// rs1_val == 8388608, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x800000;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66e66665, 0x800000, 0x66666665, x13, 260, x1)
    172c:	00800537          	lui	a0,0x800
    1730:	666665b7          	lui	a1,0x66666
    1734:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1738:	00b54633          	xor	a2,a0,a1
    173c:	10c6a223          	sw	a2,260(a3)

00001740 <inst_84>:

inst_84:
// rs1_val == 16777216, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x1000000;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xabaaaaab, 0x1000000, -0x55555555, x13, 264, x1)
    1740:	01000537          	lui	a0,0x1000
    1744:	aaaab5b7          	lui	a1,0xaaaab
    1748:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    174c:	00b54633          	xor	a2,a0,a1
    1750:	10c6a423          	sw	a2,264(a3)

00001754 <inst_85>:

inst_85:
// rs1_val == 67108864, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0x400000
TEST_RR_OP(xor, x12, x10, x11, 0x4400000, 0x4000000, 0x400000, x13, 268, x1)
    1754:	04000537          	lui	a0,0x4000
    1758:	004005b7          	lui	a1,0x400
    175c:	00b54633          	xor	a2,a0,a1
    1760:	10c6a623          	sw	a2,268(a3)

00001764 <inst_86>:

inst_86:
// rs1_val == 134217728, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x5d555554, 0x8000000, 0x55555554, x13, 272, x1)
    1764:	08000537          	lui	a0,0x8000
    1768:	555555b7          	lui	a1,0x55555
    176c:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1770:	00b54633          	xor	a2,a0,a1
    1774:	10c6a823          	sw	a2,272(a3)

00001778 <inst_87>:

inst_87:
// rs1_val == 536870912, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x400
TEST_RR_OP(xor, x12, x10, x11, 0x20000400, 0x20000000, 0x400, x13, 276, x1)
    1778:	20000537          	lui	a0,0x20000
    177c:	40000593          	li	a1,1024
    1780:	00b54633          	xor	a2,a0,a1
    1784:	10c6aa23          	sw	a2,276(a3)

00001788 <inst_88>:

inst_88:
// rs1_val == -2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xb502, -0x2, -0xb504, x13, 280, x1)
    1788:	ffe00513          	li	a0,-2
    178c:	ffff55b7          	lui	a1,0xffff5
    1790:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    1794:	00b54633          	xor	a2,a0,a1
    1798:	10c6ac23          	sw	a2,280(a3)

0000179c <inst_89>:

inst_89:
// rs1_val == -3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x3;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff9, -0x3, 0x4, x13, 284, x1)
    179c:	ffd00513          	li	a0,-3
    17a0:	00400593          	li	a1,4
    17a4:	00b54633          	xor	a2,a0,a1
    17a8:	10c6ae23          	sw	a2,284(a3)

000017ac <inst_90>:

inst_90:
// rs1_val == -129, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x81;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffff4a7c, -0x81, 0xb503, x13, 288, x1)
    17ac:	f7f00513          	li	a0,-129
    17b0:	0000b5b7          	lui	a1,0xb
    17b4:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    17b8:	00b54633          	xor	a2,a0,a1
    17bc:	12c6a023          	sw	a2,288(a3)

000017c0 <inst_91>:

inst_91:
// rs1_val == -257, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x101;  op2val:0x1000
TEST_RR_OP(xor, x12, x10, x11, 0xffffeeff, -0x101, 0x1000, x13, 292, x1)
    17c0:	eff00513          	li	a0,-257
    17c4:	000015b7          	lui	a1,0x1
    17c8:	00b54633          	xor	a2,a0,a1
    17cc:	12c6a223          	sw	a2,292(a3)

000017d0 <inst_92>:

inst_92:
// rs1_val == -513, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xfffffdff, -0x201, 0x0, x13, 296, x1)
    17d0:	dff00513          	li	a0,-513
    17d4:	00000593          	li	a1,0
    17d8:	00b54633          	xor	a2,a0,a1
    17dc:	12c6a423          	sw	a2,296(a3)

000017e0 <inst_93>:

inst_93:
// rs1_val == -1025, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x401;  op2val:-0x10000001
TEST_RR_OP(xor, x12, x10, x11, 0x10000400, -0x401, -0x10000001, x13, 300, x1)
    17e0:	bff00513          	li	a0,-1025
    17e4:	f00005b7          	lui	a1,0xf0000
    17e8:	fff58593          	addi	a1,a1,-1 # efffffff <_end+0xefff9ffb>
    17ec:	00b54633          	xor	a2,a0,a1
    17f0:	12c6a623          	sw	a2,300(a3)

000017f4 <inst_94>:

inst_94:
// rs1_val == -2049, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x801;  op2val:0x2000000
TEST_RR_OP(xor, x12, x10, x11, 0xfdfff7ff, -0x801, 0x2000000, x13, 304, x1)
    17f4:	fffff537          	lui	a0,0xfffff
    17f8:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffff97fb>
    17fc:	020005b7          	lui	a1,0x2000
    1800:	00b54633          	xor	a2,a0,a1
    1804:	12c6a823          	sw	a2,304(a3)

00001808 <inst_95>:

inst_95:
// rs1_val == -4097, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x1001;  op2val:-0x2
TEST_RR_OP(xor, x12, x10, x11, 0x1001, -0x1001, -0x2, x13, 308, x1)
    1808:	fffff537          	lui	a0,0xfffff
    180c:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0xffff8ffb>
    1810:	ffe00593          	li	a1,-2
    1814:	00b54633          	xor	a2,a0,a1
    1818:	12c6aa23          	sw	a2,308(a3)

0000181c <inst_96>:

inst_96:
// rs1_val == -8193, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xffffdffb, -0x2001, 0x4, x13, 312, x1)
    181c:	ffffe537          	lui	a0,0xffffe
    1820:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffff7ffb>
    1824:	00400593          	li	a1,4
    1828:	00b54633          	xor	a2,a0,a1
    182c:	12c6ac23          	sw	a2,312(a3)

00001830 <inst_97>:

inst_97:
// rs1_val == -65537, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x10001;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xfffefffd, -0x10001, 0x2, x13, 316, x1)
    1830:	ffff0537          	lui	a0,0xffff0
    1834:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffe9ffb>
    1838:	00200593          	li	a1,2
    183c:	00b54633          	xor	a2,a0,a1
    1840:	12c6ae23          	sw	a2,316(a3)

00001844 <inst_98>:

inst_98:
// rs1_val == -262145, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:-0x80001
TEST_RR_OP(xor, x12, x10, x11, 0xc0000, -0x40001, -0x80001, x13, 320, x1)
    1844:	fffc0537          	lui	a0,0xfffc0
    1848:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffb9ffb>
    184c:	fff805b7          	lui	a1,0xfff80
    1850:	fff58593          	addi	a1,a1,-1 # fff7ffff <_end+0xfff79ffb>
    1854:	00b54633          	xor	a2,a0,a1
    1858:	14c6a023          	sw	a2,320(a3)

0000185c <inst_99>:

inst_99:
// rs1_val == -1048577, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x100001;  op2val:0x20
TEST_RR_OP(xor, x12, x10, x11, 0xffefffdf, -0x100001, 0x20, x13, 324, x1)
    185c:	fff00537          	lui	a0,0xfff00
    1860:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0xffef9ffb>
    1864:	02000593          	li	a1,32
    1868:	00b54633          	xor	a2,a0,a1
    186c:	14c6a223          	sw	a2,324(a3)

00001870 <inst_100>:

inst_100:
// rs1_val == -4194305, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x400001;  op2val:-0xa
TEST_RR_OP(xor, x12, x10, x11, 0x400009, -0x400001, -0xa, x13, 328, x1)
    1870:	ffc00537          	lui	a0,0xffc00
    1874:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbf9ffb>
    1878:	ff600593          	li	a1,-10
    187c:	00b54633          	xor	a2,a0,a1
    1880:	14c6a423          	sw	a2,328(a3)

00001884 <inst_101>:

inst_101:
// rs1_val == -134217729, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x8000001;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0xc4cccccc, -0x8000001, 0x33333333, x13, 332, x1)
    1884:	f8000537          	lui	a0,0xf8000
    1888:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ff9ffb>
    188c:	333335b7          	lui	a1,0x33333
    1890:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1894:	00b54633          	xor	a2,a0,a1
    1898:	14c6a623          	sw	a2,332(a3)

0000189c <inst_102>:

inst_102:
// rs1_val == -536870913, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x20000001;  op2val:0x1000000
TEST_RR_OP(xor, x12, x10, x11, 0xdeffffff, -0x20000001, 0x1000000, x13, 336, x1)
    189c:	e0000537          	lui	a0,0xe0000
    18a0:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfff9ffb>
    18a4:	010005b7          	lui	a1,0x1000
    18a8:	00b54633          	xor	a2,a0,a1
    18ac:	14c6a823          	sw	a2,336(a3)

000018b0 <inst_103>:

inst_103:
// rs1_val == -1073741825, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x40000001;  op2val:-0x10000001
TEST_RR_OP(xor, x12, x10, x11, 0x50000000, -0x40000001, -0x10000001, x13, 340, x1)
    18b0:	c0000537          	lui	a0,0xc0000
    18b4:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0xbfff9ffb>
    18b8:	f00005b7          	lui	a1,0xf0000
    18bc:	fff58593          	addi	a1,a1,-1 # efffffff <_end+0xefff9ffb>
    18c0:	00b54633          	xor	a2,a0,a1
    18c4:	14c6aa23          	sw	a2,340(a3)

000018c8 <inst_104>:

inst_104:
// rs1_val == 1431655765, rs1_val==1431655765 and rs2_val==858993460
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x66666661, 0x55555555, 0x33333334, x13, 344, x1)
    18c8:	55555537          	lui	a0,0x55555
    18cc:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    18d0:	333335b7          	lui	a1,0x33333
    18d4:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    18d8:	00b54633          	xor	a2,a0,a1
    18dc:	14c6ac23          	sw	a2,344(a3)

000018e0 <inst_105>:

inst_105:
// rs1_val==3 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x3, 0x3, x13, 348, x1)
    18e0:	00300513          	li	a0,3
    18e4:	00300593          	li	a1,3
    18e8:	00b54633          	xor	a2,a0,a1
    18ec:	14c6ae23          	sw	a2,348(a3)

000018f0 <inst_106>:

inst_106:
// rs1_val==3 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x3, 0x55555555, x13, 352, x1)
    18f0:	00300513          	li	a0,3
    18f4:	555555b7          	lui	a1,0x55555
    18f8:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    18fc:	00b54633          	xor	a2,a0,a1
    1900:	16c6a023          	sw	a2,352(a3)

00001904 <inst_107>:

inst_107:
// rs1_val==3 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa9, 0x3, -0x55555556, x13, 356, x1)
    1904:	00300513          	li	a0,3
    1908:	aaaab5b7          	lui	a1,0xaaaab
    190c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1910:	00b54633          	xor	a2,a0,a1
    1914:	16c6a223          	sw	a2,356(a3)

00001918 <inst_108>:

inst_108:
// rs1_val==3 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x3, 0x5, x13, 360, x1)
    1918:	00300513          	li	a0,3
    191c:	00500593          	li	a1,5
    1920:	00b54633          	xor	a2,a0,a1
    1924:	16c6a423          	sw	a2,360(a3)

00001928 <inst_109>:

inst_109:
// rs1_val==3 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x3, 0x33333333, x13, 364, x1)
    1928:	00300513          	li	a0,3
    192c:	333335b7          	lui	a1,0x33333
    1930:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1934:	00b54633          	xor	a2,a0,a1
    1938:	16c6a623          	sw	a2,364(a3)

0000193c <inst_110>:

inst_110:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x3, 0x66666666, x13, 368, x1)
    193c:	00300513          	li	a0,3
    1940:	666665b7          	lui	a1,0x66666
    1944:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    1948:	00b54633          	xor	a2,a0,a1
    194c:	16c6a823          	sw	a2,368(a3)

00001950 <inst_111>:

inst_111:
// rs1_val==3 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xffff4aff, 0x3, -0xb504, x13, 372, x1)
    1950:	00300513          	li	a0,3
    1954:	ffff55b7          	lui	a1,0xffff5
    1958:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    195c:	00b54633          	xor	a2,a0,a1
    1960:	16c6aa23          	sw	a2,372(a3)

00001964 <inst_112>:

inst_112:
// rs1_val==3 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xb507, 0x3, 0xb504, x13, 376, x1)
    1964:	00300513          	li	a0,3
    1968:	0000b5b7          	lui	a1,0xb
    196c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1970:	00b54633          	xor	a2,a0,a1
    1974:	16c6ac23          	sw	a2,376(a3)

00001978 <inst_113>:

inst_113:
// rs1_val==3 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x3, 0x2, x13, 380, x1)
    1978:	00300513          	li	a0,3
    197c:	00200593          	li	a1,2
    1980:	00b54633          	xor	a2,a0,a1
    1984:	16c6ae23          	sw	a2,380(a3)

00001988 <inst_114>:

inst_114:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555557, 0x3, 0x55555554, x13, 384, x1)
    1988:	00300513          	li	a0,3
    198c:	555555b7          	lui	a1,0x55555
    1990:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1994:	00b54633          	xor	a2,a0,a1
    1998:	18c6a023          	sw	a2,384(a3)

0000199c <inst_115>:

inst_115:
// rs1_val==3 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x3, 0x0, x13, 388, x1)
    199c:	00300513          	li	a0,3
    19a0:	00000593          	li	a1,0
    19a4:	00b54633          	xor	a2,a0,a1
    19a8:	18c6a223          	sw	a2,388(a3)

000019ac <inst_116>:

inst_116:
// rs1_val==3 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x3, 0x4, x13, 392, x1)
    19ac:	00300513          	li	a0,3
    19b0:	00400593          	li	a1,4
    19b4:	00b54633          	xor	a2,a0,a1
    19b8:	18c6a423          	sw	a2,392(a3)

000019bc <inst_117>:

inst_117:
// rs1_val==3 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x3, 0x33333332, x13, 396, x1)
    19bc:	00300513          	li	a0,3
    19c0:	333335b7          	lui	a1,0x33333
    19c4:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    19c8:	00b54633          	xor	a2,a0,a1
    19cc:	18c6a623          	sw	a2,396(a3)

000019d0 <inst_118>:

inst_118:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666666, 0x3, 0x66666665, x13, 400, x1)
    19d0:	00300513          	li	a0,3
    19d4:	666665b7          	lui	a1,0x66666
    19d8:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    19dc:	00b54633          	xor	a2,a0,a1
    19e0:	18c6a823          	sw	a2,400(a3)

000019e4 <inst_119>:

inst_119:
// rs1_val==3 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xb500, 0x3, 0xb503, x13, 404, x1)
    19e4:	00300513          	li	a0,3
    19e8:	0000b5b7          	lui	a1,0xb
    19ec:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    19f0:	00b54633          	xor	a2,a0,a1
    19f4:	18c6aa23          	sw	a2,404(a3)

000019f8 <inst_120>:

inst_120:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x3, 0x55555556, x13, 408, x1)
    19f8:	00300513          	li	a0,3
    19fc:	555555b7          	lui	a1,0x55555
    1a00:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1a04:	00b54633          	xor	a2,a0,a1
    1a08:	18c6ac23          	sw	a2,408(a3)

00001a0c <inst_121>:

inst_121:
// rs1_val==3 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa8, 0x3, -0x55555555, x13, 412, x1)
    1a0c:	00300513          	li	a0,3
    1a10:	aaaab5b7          	lui	a1,0xaaaab
    1a14:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1a18:	00b54633          	xor	a2,a0,a1
    1a1c:	18c6ae23          	sw	a2,412(a3)

00001a20 <inst_122>:

inst_122:
// rs1_val==3 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x3, 0x6, x13, 416, x1)
    1a20:	00300513          	li	a0,3
    1a24:	00600593          	li	a1,6
    1a28:	00b54633          	xor	a2,a0,a1
    1a2c:	1ac6a023          	sw	a2,416(a3)

00001a30 <inst_123>:

inst_123:
// rs1_val==3 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33333337, 0x3, 0x33333334, x13, 420, x1)
    1a30:	00300513          	li	a0,3
    1a34:	333335b7          	lui	a1,0x33333
    1a38:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    1a3c:	00b54633          	xor	a2,a0,a1
    1a40:	1ac6a223          	sw	a2,420(a3)

00001a44 <inst_124>:

inst_124:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666664, 0x3, 0x66666667, x13, 424, x1)
    1a44:	00300513          	li	a0,3
    1a48:	666665b7          	lui	a1,0x66666
    1a4c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    1a50:	00b54633          	xor	a2,a0,a1
    1a54:	1ac6a423          	sw	a2,424(a3)

00001a58 <inst_125>:

inst_125:
// rs1_val==3 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afe, 0x3, -0xb503, x13, 428, x1)
    1a58:	00300513          	li	a0,3
    1a5c:	ffff55b7          	lui	a1,0xffff5
    1a60:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1a64:	00b54633          	xor	a2,a0,a1
    1a68:	1ac6a623          	sw	a2,428(a3)

00001a6c <inst_126>:

inst_126:
// rs1_val==3 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xb506, 0x3, 0xb505, x13, 432, x1)
    1a6c:	00300513          	li	a0,3
    1a70:	0000b5b7          	lui	a1,0xb
    1a74:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1a78:	00b54633          	xor	a2,a0,a1
    1a7c:	1ac6a823          	sw	a2,432(a3)

00001a80 <inst_127>:

inst_127:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x55555555, 0x3, x13, 436, x1)
    1a80:	55555537          	lui	a0,0x55555
    1a84:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a88:	00300593          	li	a1,3
    1a8c:	00b54633          	xor	a2,a0,a1
    1a90:	1ac6aa23          	sw	a2,436(a3)

00001a94 <inst_128>:

inst_128:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x55555555, 0x55555555, x13, 440, x1)
    1a94:	55555537          	lui	a0,0x55555
    1a98:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a9c:	555555b7          	lui	a1,0x55555
    1aa0:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1aa4:	00b54633          	xor	a2,a0,a1
    1aa8:	1ac6ac23          	sw	a2,440(a3)

00001aac <inst_129>:

inst_129:
// rs1_val==1431655765 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, 0x55555555, -0x55555556, x13, 444, x1)
    1aac:	55555537          	lui	a0,0x55555
    1ab0:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1ab4:	aaaab5b7          	lui	a1,0xaaaab
    1ab8:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1abc:	00b54633          	xor	a2,a0,a1
    1ac0:	1ac6ae23          	sw	a2,444(a3)

00001ac4 <inst_130>:

inst_130:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x55555550, 0x55555555, 0x5, x13, 448, x1)
    1ac4:	55555537          	lui	a0,0x55555
    1ac8:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1acc:	00500593          	li	a1,5
    1ad0:	00b54633          	xor	a2,a0,a1
    1ad4:	1cc6a023          	sw	a2,448(a3)

00001ad8 <inst_131>:

inst_131:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x66666666, 0x55555555, 0x33333333, x13, 452, x1)
    1ad8:	55555537          	lui	a0,0x55555
    1adc:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1ae0:	333335b7          	lui	a1,0x33333
    1ae4:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1ae8:	00b54633          	xor	a2,a0,a1
    1aec:	1cc6a223          	sw	a2,452(a3)

00001af0 <inst_132>:

inst_132:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x55555555, 0x66666666, x13, 456, x1)
    1af0:	55555537          	lui	a0,0x55555
    1af4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1af8:	666665b7          	lui	a1,0x66666
    1afc:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    1b00:	00b54633          	xor	a2,a0,a1
    1b04:	1cc6a423          	sw	a2,456(a3)

00001b08 <inst_133>:

inst_133:
// rs1_val==1431655765 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa9, 0x55555555, -0xb504, x13, 460, x1)
    1b08:	55555537          	lui	a0,0x55555
    1b0c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b10:	ffff55b7          	lui	a1,0xffff5
    1b14:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    1b18:	00b54633          	xor	a2,a0,a1
    1b1c:	1cc6a623          	sw	a2,460(a3)

00001b20 <inst_134>:

inst_134:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x5555e051, 0x55555555, 0xb504, x13, 464, x1)
    1b20:	55555537          	lui	a0,0x55555
    1b24:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b28:	0000b5b7          	lui	a1,0xb
    1b2c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1b30:	00b54633          	xor	a2,a0,a1
    1b34:	1cc6a823          	sw	a2,464(a3)

00001b38 <inst_135>:

inst_135:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x55555557, 0x55555555, 0x2, x13, 468, x1)
    1b38:	55555537          	lui	a0,0x55555
    1b3c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b40:	00200593          	li	a1,2
    1b44:	00b54633          	xor	a2,a0,a1
    1b48:	1cc6aa23          	sw	a2,468(a3)

00001b4c <inst_136>:

inst_136:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x55555555, 0x55555554, x13, 472, x1)
    1b4c:	55555537          	lui	a0,0x55555
    1b50:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b54:	555555b7          	lui	a1,0x55555
    1b58:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1b5c:	00b54633          	xor	a2,a0,a1
    1b60:	1cc6ac23          	sw	a2,472(a3)

00001b64 <inst_137>:

inst_137:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x55555555, 0x0, x13, 476, x1)
    1b64:	55555537          	lui	a0,0x55555
    1b68:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b6c:	00000593          	li	a1,0
    1b70:	00b54633          	xor	a2,a0,a1
    1b74:	1cc6ae23          	sw	a2,476(a3)

00001b78 <inst_138>:

inst_138:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x55555551, 0x55555555, 0x4, x13, 480, x1)
    1b78:	55555537          	lui	a0,0x55555
    1b7c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b80:	00400593          	li	a1,4
    1b84:	00b54633          	xor	a2,a0,a1
    1b88:	1ec6a023          	sw	a2,480(a3)

00001b8c <inst_139>:

inst_139:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x55555555, 0x33333332, x13, 484, x1)
    1b8c:	55555537          	lui	a0,0x55555
    1b90:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b94:	333335b7          	lui	a1,0x33333
    1b98:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1b9c:	00b54633          	xor	a2,a0,a1
    1ba0:	1ec6a223          	sw	a2,484(a3)

00001ba4 <inst_140>:

inst_140:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x55555555, 0x66666665, x13, 488, x1)
    1ba4:	55555537          	lui	a0,0x55555
    1ba8:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1bac:	666665b7          	lui	a1,0x66666
    1bb0:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1bb4:	00b54633          	xor	a2,a0,a1
    1bb8:	1ec6a423          	sw	a2,488(a3)

00001bbc <inst_141>:

inst_141:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x5555e056, 0x55555555, 0xb503, x13, 492, x1)
    1bbc:	55555537          	lui	a0,0x55555
    1bc0:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1bc4:	0000b5b7          	lui	a1,0xb
    1bc8:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    1bcc:	00b54633          	xor	a2,a0,a1
    1bd0:	1ec6a623          	sw	a2,492(a3)

00001bd4 <inst_142>:

inst_142:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x55555555, 0x55555556, x13, 496, x1)
    1bd4:	55555537          	lui	a0,0x55555
    1bd8:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1bdc:	555555b7          	lui	a1,0x55555
    1be0:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1be4:	00b54633          	xor	a2,a0,a1
    1be8:	1ec6a823          	sw	a2,496(a3)

00001bec <inst_143>:

inst_143:
// rs1_val==1431655765 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffe, 0x55555555, -0x55555555, x13, 500, x1)
    1bec:	55555537          	lui	a0,0x55555
    1bf0:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1bf4:	aaaab5b7          	lui	a1,0xaaaab
    1bf8:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1bfc:	00b54633          	xor	a2,a0,a1
    1c00:	1ec6aa23          	sw	a2,500(a3)

00001c04 <inst_144>:

inst_144:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x55555553, 0x55555555, 0x6, x13, 504, x1)
    1c04:	55555537          	lui	a0,0x55555
    1c08:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1c0c:	00600593          	li	a1,6
    1c10:	00b54633          	xor	a2,a0,a1
    1c14:	1ec6ac23          	sw	a2,504(a3)

00001c18 <inst_145>:

inst_145:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x55555555, 0x66666667, x13, 508, x1)
    1c18:	55555537          	lui	a0,0x55555
    1c1c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1c20:	666665b7          	lui	a1,0x66666
    1c24:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    1c28:	00b54633          	xor	a2,a0,a1
    1c2c:	1ec6ae23          	sw	a2,508(a3)

00001c30 <inst_146>:

inst_146:
// rs1_val==1431655765 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa8, 0x55555555, -0xb503, x13, 512, x1)
    1c30:	55555537          	lui	a0,0x55555
    1c34:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1c38:	ffff55b7          	lui	a1,0xffff5
    1c3c:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1c40:	00b54633          	xor	a2,a0,a1
    1c44:	20c6a023          	sw	a2,512(a3)

00001c48 <inst_147>:

inst_147:
// rs1_val==1431655765 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x5555e050, 0x55555555, 0xb505, x13, 516, x1)
    1c48:	55555537          	lui	a0,0x55555
    1c4c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1c50:	0000b5b7          	lui	a1,0xb
    1c54:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1c58:	00b54633          	xor	a2,a0,a1
    1c5c:	20c6a223          	sw	a2,516(a3)

00001c60 <inst_148>:

inst_148:
// rs1_val==-1431655766 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa9, -0x55555556, 0x3, x13, 520, x1)
    1c60:	aaaab537          	lui	a0,0xaaaab
    1c64:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c68:	00300593          	li	a1,3
    1c6c:	00b54633          	xor	a2,a0,a1
    1c70:	20c6a423          	sw	a2,520(a3)

00001c74 <inst_149>:

inst_149:
// rs1_val==-1431655766 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, -0x55555556, 0x55555555, x13, 524, x1)
    1c74:	aaaab537          	lui	a0,0xaaaab
    1c78:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c7c:	555555b7          	lui	a1,0x55555
    1c80:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1c84:	00b54633          	xor	a2,a0,a1
    1c88:	20c6a623          	sw	a2,524(a3)

00001c8c <inst_150>:

inst_150:
// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0x55555556, -0x55555556, x13, 528, x1)
    1c8c:	aaaab537          	lui	a0,0xaaaab
    1c90:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c94:	aaaab5b7          	lui	a1,0xaaaab
    1c98:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c9c:	00b54633          	xor	a2,a0,a1
    1ca0:	20c6a823          	sw	a2,528(a3)

00001ca4 <inst_151>:

inst_151:
// rs1_val==-1431655766 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaf, -0x55555556, 0x5, x13, 532, x1)
    1ca4:	aaaab537          	lui	a0,0xaaaab
    1ca8:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cac:	00500593          	li	a1,5
    1cb0:	00b54633          	xor	a2,a0,a1
    1cb4:	20c6aa23          	sw	a2,532(a3)

00001cb8 <inst_152>:

inst_152:
// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x99999999, -0x55555556, 0x33333333, x13, 536, x1)
    1cb8:	aaaab537          	lui	a0,0xaaaab
    1cbc:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cc0:	333335b7          	lui	a1,0x33333
    1cc4:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1cc8:	00b54633          	xor	a2,a0,a1
    1ccc:	20c6ac23          	sw	a2,536(a3)

00001cd0 <inst_153>:

inst_153:
// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc, -0x55555556, 0x66666666, x13, 540, x1)
    1cd0:	aaaab537          	lui	a0,0xaaaab
    1cd4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cd8:	666665b7          	lui	a1,0x66666
    1cdc:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    1ce0:	00b54633          	xor	a2,a0,a1
    1ce4:	20c6ae23          	sw	a2,540(a3)

00001ce8 <inst_154>:

inst_154:
// rs1_val==-1431655766 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x5555e056, -0x55555556, -0xb504, x13, 544, x1)
    1ce8:	aaaab537          	lui	a0,0xaaaab
    1cec:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cf0:	ffff55b7          	lui	a1,0xffff5
    1cf4:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    1cf8:	00b54633          	xor	a2,a0,a1
    1cfc:	22c6a023          	sw	a2,544(a3)

00001d00 <inst_155>:

inst_155:
// rs1_val==-1431655766 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fae, -0x55555556, 0xb504, x13, 548, x1)
    1d00:	aaaab537          	lui	a0,0xaaaab
    1d04:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d08:	0000b5b7          	lui	a1,0xb
    1d0c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1d10:	00b54633          	xor	a2,a0,a1
    1d14:	22c6a223          	sw	a2,548(a3)

00001d18 <inst_156>:

inst_156:
// rs1_val==-1431655766 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa8, -0x55555556, 0x2, x13, 552, x1)
    1d18:	aaaab537          	lui	a0,0xaaaab
    1d1c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d20:	00200593          	li	a1,2
    1d24:	00b54633          	xor	a2,a0,a1
    1d28:	22c6a423          	sw	a2,552(a3)

00001d2c <inst_157>:

inst_157:
// rs1_val==-1431655766 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffe, -0x55555556, 0x55555554, x13, 556, x1)
    1d2c:	aaaab537          	lui	a0,0xaaaab
    1d30:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d34:	555555b7          	lui	a1,0x55555
    1d38:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1d3c:	00b54633          	xor	a2,a0,a1
    1d40:	22c6a623          	sw	a2,556(a3)

00001d44 <inst_158>:

inst_158:
// rs1_val==-1431655766 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa, -0x55555556, 0x0, x13, 560, x1)
    1d44:	aaaab537          	lui	a0,0xaaaab
    1d48:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d4c:	00000593          	li	a1,0
    1d50:	00b54633          	xor	a2,a0,a1
    1d54:	22c6a823          	sw	a2,560(a3)

00001d58 <inst_159>:

inst_159:
// rs1_val==-1431655766 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaae, -0x55555556, 0x4, x13, 564, x1)
    1d58:	aaaab537          	lui	a0,0xaaaab
    1d5c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d60:	00400593          	li	a1,4
    1d64:	00b54633          	xor	a2,a0,a1
    1d68:	22c6aa23          	sw	a2,564(a3)

00001d6c <inst_160>:

inst_160:
// rs1_val==-1431655766 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x99999998, -0x55555556, 0x33333332, x13, 568, x1)
    1d6c:	aaaab537          	lui	a0,0xaaaab
    1d70:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d74:	333335b7          	lui	a1,0x33333
    1d78:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1d7c:	00b54633          	xor	a2,a0,a1
    1d80:	22c6ac23          	sw	a2,568(a3)

00001d84 <inst_161>:

inst_161:
// rs1_val==-1431655766 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccf, -0x55555556, 0x66666665, x13, 572, x1)
    1d84:	aaaab537          	lui	a0,0xaaaab
    1d88:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d8c:	666665b7          	lui	a1,0x66666
    1d90:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1d94:	00b54633          	xor	a2,a0,a1
    1d98:	22c6ae23          	sw	a2,572(a3)

00001d9c <inst_162>:

inst_162:
// rs1_val==-1431655766 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa9, -0x55555556, 0xb503, x13, 576, x1)
    1d9c:	aaaab537          	lui	a0,0xaaaab
    1da0:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1da4:	0000b5b7          	lui	a1,0xb
    1da8:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    1dac:	00b54633          	xor	a2,a0,a1
    1db0:	24c6a023          	sw	a2,576(a3)

00001db4 <inst_163>:

inst_163:
// rs1_val==-1431655766 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffc, -0x55555556, 0x55555556, x13, 580, x1)
    1db4:	aaaab537          	lui	a0,0xaaaab
    1db8:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1dbc:	555555b7          	lui	a1,0x55555
    1dc0:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1dc4:	00b54633          	xor	a2,a0,a1
    1dc8:	24c6a223          	sw	a2,580(a3)

00001dcc <inst_164>:

inst_164:
// rs1_val==-1431655766 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x1, -0x55555556, -0x55555555, x13, 584, x1)
    1dcc:	aaaab537          	lui	a0,0xaaaab
    1dd0:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1dd4:	aaaab5b7          	lui	a1,0xaaaab
    1dd8:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1ddc:	00b54633          	xor	a2,a0,a1
    1de0:	24c6a423          	sw	a2,584(a3)

00001de4 <inst_165>:

inst_165:
// rs1_val==-1431655766 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaac, -0x55555556, 0x6, x13, 588, x1)
    1de4:	aaaab537          	lui	a0,0xaaaab
    1de8:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1dec:	00600593          	li	a1,6
    1df0:	00b54633          	xor	a2,a0,a1
    1df4:	24c6a623          	sw	a2,588(a3)

00001df8 <inst_166>:

inst_166:
// rs1_val==-1431655766 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x9999999e, -0x55555556, 0x33333334, x13, 592, x1)
    1df8:	aaaab537          	lui	a0,0xaaaab
    1dfc:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1e00:	333335b7          	lui	a1,0x33333
    1e04:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    1e08:	00b54633          	xor	a2,a0,a1
    1e0c:	24c6a823          	sw	a2,592(a3)

00001e10 <inst_167>:

inst_167:
// rs1_val==-1431655766 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccd, -0x55555556, 0x66666667, x13, 596, x1)
    1e10:	aaaab537          	lui	a0,0xaaaab
    1e14:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1e18:	666665b7          	lui	a1,0x66666
    1e1c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    1e20:	00b54633          	xor	a2,a0,a1
    1e24:	24c6aa23          	sw	a2,596(a3)

00001e28 <inst_168>:

inst_168:
// rs1_val==-1431655766 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x5555e057, -0x55555556, -0xb503, x13, 600, x1)
    1e28:	aaaab537          	lui	a0,0xaaaab
    1e2c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1e30:	ffff55b7          	lui	a1,0xffff5
    1e34:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1e38:	00b54633          	xor	a2,a0,a1
    1e3c:	24c6ac23          	sw	a2,600(a3)

00001e40 <inst_169>:

inst_169:
// rs1_val==-1431655766 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1faf, -0x55555556, 0xb505, x13, 604, x1)
    1e40:	aaaab537          	lui	a0,0xaaaab
    1e44:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1e48:	0000b5b7          	lui	a1,0xb
    1e4c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1e50:	00b54633          	xor	a2,a0,a1
    1e54:	24c6ae23          	sw	a2,604(a3)

00001e58 <inst_170>:

inst_170:
// rs1_val==5 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x5, 0x3, x13, 608, x1)
    1e58:	00500513          	li	a0,5
    1e5c:	00300593          	li	a1,3
    1e60:	00b54633          	xor	a2,a0,a1
    1e64:	26c6a023          	sw	a2,608(a3)

00001e68 <inst_171>:

inst_171:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555550, 0x5, 0x55555555, x13, 612, x1)
    1e68:	00500513          	li	a0,5
    1e6c:	555555b7          	lui	a1,0x55555
    1e70:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1e74:	00b54633          	xor	a2,a0,a1
    1e78:	26c6a223          	sw	a2,612(a3)

00001e7c <inst_172>:

inst_172:
// rs1_val==5 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaf, 0x5, -0x55555556, x13, 616, x1)
    1e7c:	00500513          	li	a0,5
    1e80:	aaaab5b7          	lui	a1,0xaaaab
    1e84:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1e88:	00b54633          	xor	a2,a0,a1
    1e8c:	26c6a423          	sw	a2,616(a3)

00001e90 <inst_173>:

inst_173:
// rs1_val==5 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x5, 0x5, x13, 620, x1)
    1e90:	00500513          	li	a0,5
    1e94:	00500593          	li	a1,5
    1e98:	00b54633          	xor	a2,a0,a1
    1e9c:	26c6a623          	sw	a2,620(a3)

00001ea0 <inst_174>:

inst_174:
// rs1_val==5 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33333336, 0x5, 0x33333333, x13, 624, x1)
    1ea0:	00500513          	li	a0,5
    1ea4:	333335b7          	lui	a1,0x33333
    1ea8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1eac:	00b54633          	xor	a2,a0,a1
    1eb0:	26c6a823          	sw	a2,624(a3)

00001eb4 <inst_175>:

inst_175:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666663, 0x5, 0x66666666, x13, 628, x1)
    1eb4:	00500513          	li	a0,5
    1eb8:	666665b7          	lui	a1,0x66666
    1ebc:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    1ec0:	00b54633          	xor	a2,a0,a1
    1ec4:	26c6aa23          	sw	a2,628(a3)

00001ec8 <inst_176>:

inst_176:
// rs1_val==5 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af9, 0x5, -0xb504, x13, 632, x1)
    1ec8:	00500513          	li	a0,5
    1ecc:	ffff55b7          	lui	a1,0xffff5
    1ed0:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    1ed4:	00b54633          	xor	a2,a0,a1
    1ed8:	26c6ac23          	sw	a2,632(a3)

00001edc <inst_177>:

inst_177:
// rs1_val==5 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xb501, 0x5, 0xb504, x13, 636, x1)
    1edc:	00500513          	li	a0,5
    1ee0:	0000b5b7          	lui	a1,0xb
    1ee4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1ee8:	00b54633          	xor	a2,a0,a1
    1eec:	26c6ae23          	sw	a2,636(a3)

00001ef0 <inst_178>:

inst_178:
// rs1_val==5 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x5, 0x2, x13, 640, x1)
    1ef0:	00500513          	li	a0,5
    1ef4:	00200593          	li	a1,2
    1ef8:	00b54633          	xor	a2,a0,a1
    1efc:	28c6a023          	sw	a2,640(a3)

00001f00 <inst_179>:

inst_179:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555551, 0x5, 0x55555554, x13, 644, x1)
    1f00:	00500513          	li	a0,5
    1f04:	555555b7          	lui	a1,0x55555
    1f08:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1f0c:	00b54633          	xor	a2,a0,a1
    1f10:	28c6a223          	sw	a2,644(a3)

00001f14 <inst_180>:

inst_180:
// rs1_val==5 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x5, 0x0, x13, 648, x1)
    1f14:	00500513          	li	a0,5
    1f18:	00000593          	li	a1,0
    1f1c:	00b54633          	xor	a2,a0,a1
    1f20:	28c6a423          	sw	a2,648(a3)

00001f24 <inst_181>:

inst_181:
// rs1_val==5 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x5, 0x4, x13, 652, x1)
    1f24:	00500513          	li	a0,5
    1f28:	00400593          	li	a1,4
    1f2c:	00b54633          	xor	a2,a0,a1
    1f30:	28c6a623          	sw	a2,652(a3)

00001f34 <inst_182>:

inst_182:
// rs1_val==5 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33333337, 0x5, 0x33333332, x13, 656, x1)
    1f34:	00500513          	li	a0,5
    1f38:	333335b7          	lui	a1,0x33333
    1f3c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1f40:	00b54633          	xor	a2,a0,a1
    1f44:	28c6a823          	sw	a2,656(a3)

00001f48 <inst_183>:

inst_183:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666660, 0x5, 0x66666665, x13, 660, x1)
    1f48:	00500513          	li	a0,5
    1f4c:	666665b7          	lui	a1,0x66666
    1f50:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1f54:	00b54633          	xor	a2,a0,a1
    1f58:	28c6aa23          	sw	a2,660(a3)

00001f5c <inst_184>:

inst_184:
// rs1_val==5 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xb506, 0x5, 0xb503, x13, 664, x1)
    1f5c:	00500513          	li	a0,5
    1f60:	0000b5b7          	lui	a1,0xb
    1f64:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    1f68:	00b54633          	xor	a2,a0,a1
    1f6c:	28c6ac23          	sw	a2,664(a3)

00001f70 <inst_185>:

inst_185:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555553, 0x5, 0x55555556, x13, 668, x1)
    1f70:	00500513          	li	a0,5
    1f74:	555555b7          	lui	a1,0x55555
    1f78:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1f7c:	00b54633          	xor	a2,a0,a1
    1f80:	28c6ae23          	sw	a2,668(a3)

00001f84 <inst_186>:

inst_186:
// rs1_val==5 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaae, 0x5, -0x55555555, x13, 672, x1)
    1f84:	00500513          	li	a0,5
    1f88:	aaaab5b7          	lui	a1,0xaaaab
    1f8c:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1f90:	00b54633          	xor	a2,a0,a1
    1f94:	2ac6a023          	sw	a2,672(a3)

00001f98 <inst_187>:

inst_187:
// rs1_val==5 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x5, 0x6, x13, 676, x1)
    1f98:	00500513          	li	a0,5
    1f9c:	00600593          	li	a1,6
    1fa0:	00b54633          	xor	a2,a0,a1
    1fa4:	2ac6a223          	sw	a2,676(a3)

00001fa8 <inst_188>:

inst_188:
// rs1_val==5 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x5, 0x33333334, x13, 680, x1)
    1fa8:	00500513          	li	a0,5
    1fac:	333335b7          	lui	a1,0x33333
    1fb0:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    1fb4:	00b54633          	xor	a2,a0,a1
    1fb8:	2ac6a423          	sw	a2,680(a3)

00001fbc <inst_189>:

inst_189:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666662, 0x5, 0x66666667, x13, 684, x1)
    1fbc:	00500513          	li	a0,5
    1fc0:	666665b7          	lui	a1,0x66666
    1fc4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    1fc8:	00b54633          	xor	a2,a0,a1
    1fcc:	2ac6a623          	sw	a2,684(a3)

00001fd0 <inst_190>:

inst_190:
// rs1_val==5 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af8, 0x5, -0xb503, x13, 688, x1)
    1fd0:	00500513          	li	a0,5
    1fd4:	ffff55b7          	lui	a1,0xffff5
    1fd8:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1fdc:	00b54633          	xor	a2,a0,a1
    1fe0:	2ac6a823          	sw	a2,688(a3)

00001fe4 <inst_191>:

inst_191:
// rs1_val==5 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xb500, 0x5, 0xb505, x13, 692, x1)
    1fe4:	00500513          	li	a0,5
    1fe8:	0000b5b7          	lui	a1,0xb
    1fec:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1ff0:	00b54633          	xor	a2,a0,a1
    1ff4:	2ac6aa23          	sw	a2,692(a3)

00001ff8 <inst_192>:

inst_192:
// rs1_val==858993459 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x33333333, 0x3, x13, 696, x1)
    1ff8:	33333537          	lui	a0,0x33333
    1ffc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2000:	00300593          	li	a1,3
    2004:	00b54633          	xor	a2,a0,a1
    2008:	2ac6ac23          	sw	a2,696(a3)

0000200c <inst_193>:

inst_193:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x66666666, 0x33333333, 0x55555555, x13, 700, x1)
    200c:	33333537          	lui	a0,0x33333
    2010:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2014:	555555b7          	lui	a1,0x55555
    2018:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    201c:	00b54633          	xor	a2,a0,a1
    2020:	2ac6ae23          	sw	a2,700(a3)

00002024 <inst_194>:

inst_194:
// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x99999999, 0x33333333, -0x55555556, x13, 704, x1)
    2024:	33333537          	lui	a0,0x33333
    2028:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    202c:	aaaab5b7          	lui	a1,0xaaaab
    2030:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2034:	00b54633          	xor	a2,a0,a1
    2038:	2cc6a023          	sw	a2,704(a3)

0000203c <inst_195>:

inst_195:
// rs1_val==858993459 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x33333336, 0x33333333, 0x5, x13, 708, x1)
    203c:	33333537          	lui	a0,0x33333
    2040:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2044:	00500593          	li	a1,5
    2048:	00b54633          	xor	a2,a0,a1
    204c:	2cc6a223          	sw	a2,708(a3)

00002050 <inst_196>:

inst_196:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x33333333, 0x33333333, x13, 712, x1)
    2050:	33333537          	lui	a0,0x33333
    2054:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2058:	333335b7          	lui	a1,0x33333
    205c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2060:	00b54633          	xor	a2,a0,a1
    2064:	2cc6a423          	sw	a2,712(a3)

00002068 <inst_197>:

inst_197:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x33333333, 0x66666666, x13, 716, x1)
    2068:	33333537          	lui	a0,0x33333
    206c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2070:	666665b7          	lui	a1,0x66666
    2074:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2078:	00b54633          	xor	a2,a0,a1
    207c:	2cc6a623          	sw	a2,716(a3)

00002080 <inst_198>:

inst_198:
// rs1_val==858993459 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79cf, 0x33333333, -0xb504, x13, 720, x1)
    2080:	33333537          	lui	a0,0x33333
    2084:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2088:	ffff55b7          	lui	a1,0xffff5
    208c:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2090:	00b54633          	xor	a2,a0,a1
    2094:	2cc6a823          	sw	a2,720(a3)

00002098 <inst_199>:

inst_199:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x33338637, 0x33333333, 0xb504, x13, 724, x1)
    2098:	33333537          	lui	a0,0x33333
    209c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20a0:	0000b5b7          	lui	a1,0xb
    20a4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    20a8:	00b54633          	xor	a2,a0,a1
    20ac:	2cc6aa23          	sw	a2,724(a3)

000020b0 <inst_200>:

inst_200:
// rs1_val==858993459 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x33333333, 0x2, x13, 728, x1)
    20b0:	33333537          	lui	a0,0x33333
    20b4:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20b8:	00200593          	li	a1,2
    20bc:	00b54633          	xor	a2,a0,a1
    20c0:	2cc6ac23          	sw	a2,728(a3)

000020c4 <inst_201>:

inst_201:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x33333333, 0x55555554, x13, 732, x1)
    20c4:	33333537          	lui	a0,0x33333
    20c8:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20cc:	555555b7          	lui	a1,0x55555
    20d0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    20d4:	00b54633          	xor	a2,a0,a1
    20d8:	2cc6ae23          	sw	a2,732(a3)

000020dc <inst_202>:

inst_202:
// rs1_val==858993459 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x33333333, 0x0, x13, 736, x1)
    20dc:	33333537          	lui	a0,0x33333
    20e0:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20e4:	00000593          	li	a1,0
    20e8:	00b54633          	xor	a2,a0,a1
    20ec:	2ec6a023          	sw	a2,736(a3)

000020f0 <inst_203>:

inst_203:
// rs1_val==858993459 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x33333337, 0x33333333, 0x4, x13, 740, x1)
    20f0:	33333537          	lui	a0,0x33333
    20f4:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20f8:	00400593          	li	a1,4
    20fc:	00b54633          	xor	a2,a0,a1
    2100:	2ec6a223          	sw	a2,740(a3)

00002104 <inst_204>:

inst_204:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x33333333, 0x33333332, x13, 744, x1)
    2104:	33333537          	lui	a0,0x33333
    2108:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    210c:	333335b7          	lui	a1,0x33333
    2110:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2114:	00b54633          	xor	a2,a0,a1
    2118:	2ec6a423          	sw	a2,744(a3)

0000211c <inst_205>:

inst_205:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x33333333, 0x66666665, x13, 748, x1)
    211c:	33333537          	lui	a0,0x33333
    2120:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2124:	666665b7          	lui	a1,0x66666
    2128:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    212c:	00b54633          	xor	a2,a0,a1
    2130:	2ec6a623          	sw	a2,748(a3)

00002134 <inst_206>:

inst_206:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x33338630, 0x33333333, 0xb503, x13, 752, x1)
    2134:	33333537          	lui	a0,0x33333
    2138:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    213c:	0000b5b7          	lui	a1,0xb
    2140:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2144:	00b54633          	xor	a2,a0,a1
    2148:	2ec6a823          	sw	a2,752(a3)

0000214c <inst_207>:

inst_207:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x33333333, 0x55555556, x13, 756, x1)
    214c:	33333537          	lui	a0,0x33333
    2150:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2154:	555555b7          	lui	a1,0x55555
    2158:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    215c:	00b54633          	xor	a2,a0,a1
    2160:	2ec6aa23          	sw	a2,756(a3)

00002164 <inst_208>:

inst_208:
// rs1_val==858993459 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x99999998, 0x33333333, -0x55555555, x13, 760, x1)
    2164:	33333537          	lui	a0,0x33333
    2168:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    216c:	aaaab5b7          	lui	a1,0xaaaab
    2170:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2174:	00b54633          	xor	a2,a0,a1
    2178:	2ec6ac23          	sw	a2,760(a3)

0000217c <inst_209>:

inst_209:
// rs1_val==858993459 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x33333335, 0x33333333, 0x6, x13, 764, x1)
    217c:	33333537          	lui	a0,0x33333
    2180:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2184:	00600593          	li	a1,6
    2188:	00b54633          	xor	a2,a0,a1
    218c:	2ec6ae23          	sw	a2,764(a3)

00002190 <inst_210>:

inst_210:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x33333333, 0x33333334, x13, 768, x1)
    2190:	33333537          	lui	a0,0x33333
    2194:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2198:	333335b7          	lui	a1,0x33333
    219c:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    21a0:	00b54633          	xor	a2,a0,a1
    21a4:	30c6a023          	sw	a2,768(a3)

000021a8 <inst_211>:

inst_211:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x33333333, 0x66666667, x13, 772, x1)
    21a8:	33333537          	lui	a0,0x33333
    21ac:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    21b0:	666665b7          	lui	a1,0x66666
    21b4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    21b8:	00b54633          	xor	a2,a0,a1
    21bc:	30c6a223          	sw	a2,772(a3)

000021c0 <inst_212>:

inst_212:
// rs1_val==858993459 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79ce, 0x33333333, -0xb503, x13, 776, x1)
    21c0:	33333537          	lui	a0,0x33333
    21c4:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    21c8:	ffff55b7          	lui	a1,0xffff5
    21cc:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    21d0:	00b54633          	xor	a2,a0,a1
    21d4:	30c6a423          	sw	a2,776(a3)

000021d8 <inst_213>:

inst_213:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x33338636, 0x33333333, 0xb505, x13, 780, x1)
    21d8:	33333537          	lui	a0,0x33333
    21dc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    21e0:	0000b5b7          	lui	a1,0xb
    21e4:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    21e8:	00b54633          	xor	a2,a0,a1
    21ec:	30c6a623          	sw	a2,780(a3)

000021f0 <inst_214>:

inst_214:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x66666666, 0x3, x13, 784, x1)
    21f0:	66666537          	lui	a0,0x66666
    21f4:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    21f8:	00300593          	li	a1,3
    21fc:	00b54633          	xor	a2,a0,a1
    2200:	30c6a823          	sw	a2,784(a3)

00002204 <inst_215>:

inst_215:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x66666666, 0x55555555, x13, 788, x1)
    2204:	66666537          	lui	a0,0x66666
    2208:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    220c:	555555b7          	lui	a1,0x55555
    2210:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2214:	00b54633          	xor	a2,a0,a1
    2218:	30c6aa23          	sw	a2,788(a3)

0000221c <inst_216>:

inst_216:
// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc, 0x66666666, -0x55555556, x13, 792, x1)
    221c:	66666537          	lui	a0,0x66666
    2220:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2224:	aaaab5b7          	lui	a1,0xaaaab
    2228:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    222c:	00b54633          	xor	a2,a0,a1
    2230:	30c6ac23          	sw	a2,792(a3)

00002234 <inst_217>:

inst_217:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x66666663, 0x66666666, 0x5, x13, 796, x1)
    2234:	66666537          	lui	a0,0x66666
    2238:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    223c:	00500593          	li	a1,5
    2240:	00b54633          	xor	a2,a0,a1
    2244:	30c6ae23          	sw	a2,796(a3)

00002248 <inst_218>:

inst_218:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x66666666, 0x33333333, x13, 800, x1)
    2248:	66666537          	lui	a0,0x66666
    224c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2250:	333335b7          	lui	a1,0x33333
    2254:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2258:	00b54633          	xor	a2,a0,a1
    225c:	32c6a023          	sw	a2,800(a3)

00002260 <inst_219>:

inst_219:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x66666666, 0x66666666, x13, 804, x1)
    2260:	66666537          	lui	a0,0x66666
    2264:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2268:	666665b7          	lui	a1,0x66666
    226c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2270:	00b54633          	xor	a2,a0,a1
    2274:	32c6a223          	sw	a2,804(a3)

00002278 <inst_220>:

inst_220:
// rs1_val==1717986918 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9a, 0x66666666, -0xb504, x13, 808, x1)
    2278:	66666537          	lui	a0,0x66666
    227c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2280:	ffff55b7          	lui	a1,0xffff5
    2284:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2288:	00b54633          	xor	a2,a0,a1
    228c:	32c6a423          	sw	a2,808(a3)

00002290 <inst_221>:

inst_221:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x6666d362, 0x66666666, 0xb504, x13, 812, x1)
    2290:	66666537          	lui	a0,0x66666
    2294:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2298:	0000b5b7          	lui	a1,0xb
    229c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    22a0:	00b54633          	xor	a2,a0,a1
    22a4:	32c6a623          	sw	a2,812(a3)

000022a8 <inst_222>:

inst_222:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x66666664, 0x66666666, 0x2, x13, 816, x1)
    22a8:	66666537          	lui	a0,0x66666
    22ac:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22b0:	00200593          	li	a1,2
    22b4:	00b54633          	xor	a2,a0,a1
    22b8:	32c6a823          	sw	a2,816(a3)

000022bc <inst_223>:

inst_223:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x66666666, 0x55555554, x13, 820, x1)
    22bc:	66666537          	lui	a0,0x66666
    22c0:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22c4:	555555b7          	lui	a1,0x55555
    22c8:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    22cc:	00b54633          	xor	a2,a0,a1
    22d0:	32c6aa23          	sw	a2,820(a3)

000022d4 <inst_224>:

inst_224:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x66666666, 0x66666666, 0x0, x13, 824, x1)
    22d4:	66666537          	lui	a0,0x66666
    22d8:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22dc:	00000593          	li	a1,0
    22e0:	00b54633          	xor	a2,a0,a1
    22e4:	32c6ac23          	sw	a2,824(a3)

000022e8 <inst_225>:

inst_225:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x66666662, 0x66666666, 0x4, x13, 828, x1)
    22e8:	66666537          	lui	a0,0x66666
    22ec:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22f0:	00400593          	li	a1,4
    22f4:	00b54633          	xor	a2,a0,a1
    22f8:	32c6ae23          	sw	a2,828(a3)

000022fc <inst_226>:

inst_226:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x66666666, 0x33333332, x13, 832, x1)
    22fc:	66666537          	lui	a0,0x66666
    2300:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2304:	333335b7          	lui	a1,0x33333
    2308:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    230c:	00b54633          	xor	a2,a0,a1
    2310:	34c6a023          	sw	a2,832(a3)

00002314 <inst_227>:

inst_227:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x66666666, 0x66666665, x13, 836, x1)
    2314:	66666537          	lui	a0,0x66666
    2318:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    231c:	666665b7          	lui	a1,0x66666
    2320:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2324:	00b54633          	xor	a2,a0,a1
    2328:	34c6a223          	sw	a2,836(a3)

0000232c <inst_228>:

inst_228:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x6666d365, 0x66666666, 0xb503, x13, 840, x1)
    232c:	66666537          	lui	a0,0x66666
    2330:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2334:	0000b5b7          	lui	a1,0xb
    2338:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    233c:	00b54633          	xor	a2,a0,a1
    2340:	34c6a423          	sw	a2,840(a3)

00002344 <inst_229>:

inst_229:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x66666666, 0x55555556, x13, 844, x1)
    2344:	66666537          	lui	a0,0x66666
    2348:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    234c:	555555b7          	lui	a1,0x55555
    2350:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2354:	00b54633          	xor	a2,a0,a1
    2358:	34c6a623          	sw	a2,844(a3)

0000235c <inst_230>:

inst_230:
// rs1_val==1717986918 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccd, 0x66666666, -0x55555555, x13, 848, x1)
    235c:	66666537          	lui	a0,0x66666
    2360:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2364:	aaaab5b7          	lui	a1,0xaaaab
    2368:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    236c:	00b54633          	xor	a2,a0,a1
    2370:	34c6a823          	sw	a2,848(a3)

00002374 <inst_231>:

inst_231:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x66666660, 0x66666666, 0x6, x13, 852, x1)
    2374:	66666537          	lui	a0,0x66666
    2378:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    237c:	00600593          	li	a1,6
    2380:	00b54633          	xor	a2,a0,a1
    2384:	34c6aa23          	sw	a2,852(a3)

00002388 <inst_232>:

inst_232:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x55555552, 0x66666666, 0x33333334, x13, 856, x1)
    2388:	66666537          	lui	a0,0x66666
    238c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2390:	333335b7          	lui	a1,0x33333
    2394:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2398:	00b54633          	xor	a2,a0,a1
    239c:	34c6ac23          	sw	a2,856(a3)

000023a0 <inst_233>:

inst_233:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x66666666, 0x66666667, x13, 860, x1)
    23a0:	66666537          	lui	a0,0x66666
    23a4:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    23a8:	666665b7          	lui	a1,0x66666
    23ac:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    23b0:	00b54633          	xor	a2,a0,a1
    23b4:	34c6ae23          	sw	a2,860(a3)

000023b8 <inst_234>:

inst_234:
// rs1_val==1717986918 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9b, 0x66666666, -0xb503, x13, 864, x1)
    23b8:	66666537          	lui	a0,0x66666
    23bc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    23c0:	ffff55b7          	lui	a1,0xffff5
    23c4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    23c8:	00b54633          	xor	a2,a0,a1
    23cc:	36c6a023          	sw	a2,864(a3)

000023d0 <inst_235>:

inst_235:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x6666d363, 0x66666666, 0xb505, x13, 868, x1)
    23d0:	66666537          	lui	a0,0x66666
    23d4:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    23d8:	0000b5b7          	lui	a1,0xb
    23dc:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    23e0:	00b54633          	xor	a2,a0,a1
    23e4:	36c6a223          	sw	a2,868(a3)

000023e8 <inst_236>:

inst_236:
// rs1_val==-46340 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xffff4aff, -0xb504, 0x3, x13, 872, x1)
    23e8:	ffff5537          	lui	a0,0xffff5
    23ec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    23f0:	00300593          	li	a1,3
    23f4:	00b54633          	xor	a2,a0,a1
    23f8:	36c6a423          	sw	a2,872(a3)

000023fc <inst_237>:

inst_237:
// rs1_val==-46340 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa9, -0xb504, 0x55555555, x13, 876, x1)
    23fc:	ffff5537          	lui	a0,0xffff5
    2400:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2404:	555555b7          	lui	a1,0x55555
    2408:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    240c:	00b54633          	xor	a2,a0,a1
    2410:	36c6a623          	sw	a2,876(a3)

00002414 <inst_238>:

inst_238:
// rs1_val==-46340 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555e056, -0xb504, -0x55555556, x13, 880, x1)
    2414:	ffff5537          	lui	a0,0xffff5
    2418:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    241c:	aaaab5b7          	lui	a1,0xaaaab
    2420:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2424:	00b54633          	xor	a2,a0,a1
    2428:	36c6a823          	sw	a2,880(a3)

0000242c <inst_239>:

inst_239:
// rs1_val==-46340 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af9, -0xb504, 0x5, x13, 884, x1)
    242c:	ffff5537          	lui	a0,0xffff5
    2430:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2434:	00500593          	li	a1,5
    2438:	00b54633          	xor	a2,a0,a1
    243c:	36c6aa23          	sw	a2,884(a3)

00002440 <inst_240>:

inst_240:
// rs1_val==-46340 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79cf, -0xb504, 0x33333333, x13, 888, x1)
    2440:	ffff5537          	lui	a0,0xffff5
    2444:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2448:	333335b7          	lui	a1,0x33333
    244c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2450:	00b54633          	xor	a2,a0,a1
    2454:	36c6ac23          	sw	a2,888(a3)

00002458 <inst_241>:

inst_241:
// rs1_val==-46340 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9a, -0xb504, 0x66666666, x13, 892, x1)
    2458:	ffff5537          	lui	a0,0xffff5
    245c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2460:	666665b7          	lui	a1,0x66666
    2464:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2468:	00b54633          	xor	a2,a0,a1
    246c:	36c6ae23          	sw	a2,892(a3)

00002470 <inst_242>:

inst_242:
// rs1_val==-46340 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0xb504, -0xb504, x13, 896, x1)
    2470:	ffff5537          	lui	a0,0xffff5
    2474:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2478:	ffff55b7          	lui	a1,0xffff5
    247c:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2480:	00b54633          	xor	a2,a0,a1
    2484:	38c6a023          	sw	a2,896(a3)

00002488 <inst_243>:

inst_243:
// rs1_val==-46340 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff8, -0xb504, 0xb504, x13, 900, x1)
    2488:	ffff5537          	lui	a0,0xffff5
    248c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2490:	0000b5b7          	lui	a1,0xb
    2494:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2498:	00b54633          	xor	a2,a0,a1
    249c:	38c6a223          	sw	a2,900(a3)

000024a0 <inst_244>:

inst_244:
// rs1_val==-46340 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afe, -0xb504, 0x2, x13, 904, x1)
    24a0:	ffff5537          	lui	a0,0xffff5
    24a4:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24a8:	00200593          	li	a1,2
    24ac:	00b54633          	xor	a2,a0,a1
    24b0:	38c6a423          	sw	a2,904(a3)

000024b4 <inst_245>:

inst_245:
// rs1_val==-46340 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa8, -0xb504, 0x55555554, x13, 908, x1)
    24b4:	ffff5537          	lui	a0,0xffff5
    24b8:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24bc:	555555b7          	lui	a1,0x55555
    24c0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    24c4:	00b54633          	xor	a2,a0,a1
    24c8:	38c6a623          	sw	a2,908(a3)

000024cc <inst_246>:

inst_246:
// rs1_val==-46340 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afc, -0xb504, 0x0, x13, 912, x1)
    24cc:	ffff5537          	lui	a0,0xffff5
    24d0:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24d4:	00000593          	li	a1,0
    24d8:	00b54633          	xor	a2,a0,a1
    24dc:	38c6a823          	sw	a2,912(a3)

000024e0 <inst_247>:

inst_247:
// rs1_val==-46340 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af8, -0xb504, 0x4, x13, 916, x1)
    24e0:	ffff5537          	lui	a0,0xffff5
    24e4:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24e8:	00400593          	li	a1,4
    24ec:	00b54633          	xor	a2,a0,a1
    24f0:	38c6aa23          	sw	a2,916(a3)

000024f4 <inst_248>:

inst_248:
// rs1_val==-46340 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79ce, -0xb504, 0x33333332, x13, 920, x1)
    24f4:	ffff5537          	lui	a0,0xffff5
    24f8:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24fc:	333335b7          	lui	a1,0x33333
    2500:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2504:	00b54633          	xor	a2,a0,a1
    2508:	38c6ac23          	sw	a2,920(a3)

0000250c <inst_249>:

inst_249:
// rs1_val==-46340 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x99992c99, -0xb504, 0x66666665, x13, 924, x1)
    250c:	ffff5537          	lui	a0,0xffff5
    2510:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2514:	666665b7          	lui	a1,0x66666
    2518:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    251c:	00b54633          	xor	a2,a0,a1
    2520:	38c6ae23          	sw	a2,924(a3)

00002524 <inst_250>:

inst_250:
// rs1_val==-46340 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, -0xb504, 0xb503, x13, 928, x1)
    2524:	ffff5537          	lui	a0,0xffff5
    2528:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    252c:	0000b5b7          	lui	a1,0xb
    2530:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2534:	00b54633          	xor	a2,a0,a1
    2538:	3ac6a023          	sw	a2,928(a3)

0000253c <inst_251>:

inst_251:
// rs1_val==-46340 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1faa, -0xb504, 0x55555556, x13, 932, x1)
    253c:	ffff5537          	lui	a0,0xffff5
    2540:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2544:	555555b7          	lui	a1,0x55555
    2548:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    254c:	00b54633          	xor	a2,a0,a1
    2550:	3ac6a223          	sw	a2,932(a3)

00002554 <inst_252>:

inst_252:
// rs1_val==-46340 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555e057, -0xb504, -0x55555555, x13, 936, x1)
    2554:	ffff5537          	lui	a0,0xffff5
    2558:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    255c:	aaaab5b7          	lui	a1,0xaaaab
    2560:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2564:	00b54633          	xor	a2,a0,a1
    2568:	3ac6a423          	sw	a2,936(a3)

0000256c <inst_253>:

inst_253:
// rs1_val==-46340 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afa, -0xb504, 0x6, x13, 940, x1)
    256c:	ffff5537          	lui	a0,0xffff5
    2570:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2574:	00600593          	li	a1,6
    2578:	00b54633          	xor	a2,a0,a1
    257c:	3ac6a623          	sw	a2,940(a3)

00002580 <inst_254>:

inst_254:
// rs1_val==-46340 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79c8, -0xb504, 0x33333334, x13, 944, x1)
    2580:	ffff5537          	lui	a0,0xffff5
    2584:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2588:	333335b7          	lui	a1,0x33333
    258c:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2590:	00b54633          	xor	a2,a0,a1
    2594:	3ac6a823          	sw	a2,944(a3)

00002598 <inst_255>:

inst_255:
// rs1_val==-46340 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9b, -0xb504, 0x66666667, x13, 948, x1)
    2598:	ffff5537          	lui	a0,0xffff5
    259c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    25a0:	666665b7          	lui	a1,0x66666
    25a4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    25a8:	00b54633          	xor	a2,a0,a1
    25ac:	3ac6aa23          	sw	a2,948(a3)

000025b0 <inst_256>:

inst_256:
// rs1_val==-46340 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x1, -0xb504, -0xb503, x13, 952, x1)
    25b0:	ffff5537          	lui	a0,0xffff5
    25b4:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    25b8:	ffff55b7          	lui	a1,0xffff5
    25bc:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    25c0:	00b54633          	xor	a2,a0,a1
    25c4:	3ac6ac23          	sw	a2,952(a3)

000025c8 <inst_257>:

inst_257:
// rs1_val==-46340 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff9, -0xb504, 0xb505, x13, 956, x1)
    25c8:	ffff5537          	lui	a0,0xffff5
    25cc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    25d0:	0000b5b7          	lui	a1,0xb
    25d4:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    25d8:	00b54633          	xor	a2,a0,a1
    25dc:	3ac6ae23          	sw	a2,956(a3)

000025e0 <inst_258>:

inst_258:
// rs1_val==46340 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xb507, 0xb504, 0x3, x13, 960, x1)
    25e0:	0000b537          	lui	a0,0xb
    25e4:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    25e8:	00300593          	li	a1,3
    25ec:	00b54633          	xor	a2,a0,a1
    25f0:	3cc6a023          	sw	a2,960(a3)

000025f4 <inst_259>:

inst_259:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555e051, 0xb504, 0x55555555, x13, 964, x1)
    25f4:	0000b537          	lui	a0,0xb
    25f8:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    25fc:	555555b7          	lui	a1,0x55555
    2600:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2604:	00b54633          	xor	a2,a0,a1
    2608:	3cc6a223          	sw	a2,964(a3)

0000260c <inst_260>:

inst_260:
// rs1_val==46340 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fae, 0xb504, -0x55555556, x13, 968, x1)
    260c:	0000b537          	lui	a0,0xb
    2610:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2614:	aaaab5b7          	lui	a1,0xaaaab
    2618:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    261c:	00b54633          	xor	a2,a0,a1
    2620:	3cc6a423          	sw	a2,968(a3)

00002624 <inst_261>:

inst_261:
// rs1_val==46340 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xb501, 0xb504, 0x5, x13, 972, x1)
    2624:	0000b537          	lui	a0,0xb
    2628:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    262c:	00500593          	li	a1,5
    2630:	00b54633          	xor	a2,a0,a1
    2634:	3cc6a623          	sw	a2,972(a3)

00002638 <inst_262>:

inst_262:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33338637, 0xb504, 0x33333333, x13, 976, x1)
    2638:	0000b537          	lui	a0,0xb
    263c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2640:	333335b7          	lui	a1,0x33333
    2644:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2648:	00b54633          	xor	a2,a0,a1
    264c:	3cc6a823          	sw	a2,976(a3)

00002650 <inst_263>:

inst_263:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666d362, 0xb504, 0x66666666, x13, 980, x1)
    2650:	0000b537          	lui	a0,0xb
    2654:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2658:	666665b7          	lui	a1,0x66666
    265c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2660:	00b54633          	xor	a2,a0,a1
    2664:	3cc6aa23          	sw	a2,980(a3)

00002668 <inst_264>:

inst_264:
// rs1_val==46340 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff8, 0xb504, -0xb504, x13, 984, x1)
    2668:	0000b537          	lui	a0,0xb
    266c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2670:	ffff55b7          	lui	a1,0xffff5
    2674:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2678:	00b54633          	xor	a2,a0,a1
    267c:	3cc6ac23          	sw	a2,984(a3)

00002680 <inst_265>:

inst_265:
// rs1_val==46340 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0xb504, 0xb504, x13, 988, x1)
    2680:	0000b537          	lui	a0,0xb
    2684:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2688:	0000b5b7          	lui	a1,0xb
    268c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2690:	00b54633          	xor	a2,a0,a1
    2694:	3cc6ae23          	sw	a2,988(a3)

00002698 <inst_266>:

inst_266:
// rs1_val==46340 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xb506, 0xb504, 0x2, x13, 992, x1)
    2698:	0000b537          	lui	a0,0xb
    269c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26a0:	00200593          	li	a1,2
    26a4:	00b54633          	xor	a2,a0,a1
    26a8:	3ec6a023          	sw	a2,992(a3)

000026ac <inst_267>:

inst_267:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555e050, 0xb504, 0x55555554, x13, 996, x1)
    26ac:	0000b537          	lui	a0,0xb
    26b0:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26b4:	555555b7          	lui	a1,0x55555
    26b8:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    26bc:	00b54633          	xor	a2,a0,a1
    26c0:	3ec6a223          	sw	a2,996(a3)

000026c4 <inst_268>:

inst_268:
// rs1_val==46340 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xb504, 0xb504, 0x0, x13, 1000, x1)
    26c4:	0000b537          	lui	a0,0xb
    26c8:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26cc:	00000593          	li	a1,0
    26d0:	00b54633          	xor	a2,a0,a1
    26d4:	3ec6a423          	sw	a2,1000(a3)

000026d8 <inst_269>:

inst_269:
// rs1_val==46340 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xb500, 0xb504, 0x4, x13, 1004, x1)
    26d8:	0000b537          	lui	a0,0xb
    26dc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26e0:	00400593          	li	a1,4
    26e4:	00b54633          	xor	a2,a0,a1
    26e8:	3ec6a623          	sw	a2,1004(a3)

000026ec <inst_270>:

inst_270:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33338636, 0xb504, 0x33333332, x13, 1008, x1)
    26ec:	0000b537          	lui	a0,0xb
    26f0:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26f4:	333335b7          	lui	a1,0x33333
    26f8:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    26fc:	00b54633          	xor	a2,a0,a1
    2700:	3ec6a823          	sw	a2,1008(a3)

00002704 <inst_271>:

inst_271:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666d361, 0xb504, 0x66666665, x13, 1012, x1)
    2704:	0000b537          	lui	a0,0xb
    2708:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    270c:	666665b7          	lui	a1,0x66666
    2710:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2714:	00b54633          	xor	a2,a0,a1
    2718:	3ec6aa23          	sw	a2,1012(a3)

0000271c <inst_272>:

inst_272:
// rs1_val==46340 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0xb504, 0xb503, x13, 1016, x1)
    271c:	0000b537          	lui	a0,0xb
    2720:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2724:	0000b5b7          	lui	a1,0xb
    2728:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    272c:	00b54633          	xor	a2,a0,a1
    2730:	3ec6ac23          	sw	a2,1016(a3)

00002734 <inst_273>:

inst_273:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555e052, 0xb504, 0x55555556, x13, 1020, x1)
    2734:	0000b537          	lui	a0,0xb
    2738:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    273c:	555555b7          	lui	a1,0x55555
    2740:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2744:	00b54633          	xor	a2,a0,a1
    2748:	3ec6ae23          	sw	a2,1020(a3)

0000274c <inst_274>:

inst_274:
// rs1_val==46340 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1faf, 0xb504, -0x55555555, x13, 1024, x1)
    274c:	0000b537          	lui	a0,0xb
    2750:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2754:	aaaab5b7          	lui	a1,0xaaaab
    2758:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    275c:	00b54633          	xor	a2,a0,a1
    2760:	40c6a023          	sw	a2,1024(a3)

00002764 <inst_275>:

inst_275:
// rs1_val==46340 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xb502, 0xb504, 0x6, x13, 1028, x1)
    2764:	0000b537          	lui	a0,0xb
    2768:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    276c:	00600593          	li	a1,6
    2770:	00b54633          	xor	a2,a0,a1
    2774:	40c6a223          	sw	a2,1028(a3)

00002778 <inst_276>:

inst_276:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33338630, 0xb504, 0x33333334, x13, 1032, x1)
    2778:	0000b537          	lui	a0,0xb
    277c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2780:	333335b7          	lui	a1,0x33333
    2784:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2788:	00b54633          	xor	a2,a0,a1
    278c:	40c6a423          	sw	a2,1032(a3)

00002790 <inst_277>:

inst_277:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666d363, 0xb504, 0x66666667, x13, 1036, x1)
    2790:	0000b537          	lui	a0,0xb
    2794:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2798:	666665b7          	lui	a1,0x66666
    279c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    27a0:	00b54633          	xor	a2,a0,a1
    27a4:	40c6a623          	sw	a2,1036(a3)

000027a8 <inst_278>:

inst_278:
// rs1_val==46340 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff9, 0xb504, -0xb503, x13, 1040, x1)
    27a8:	0000b537          	lui	a0,0xb
    27ac:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    27b0:	ffff55b7          	lui	a1,0xffff5
    27b4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    27b8:	00b54633          	xor	a2,a0,a1
    27bc:	40c6a823          	sw	a2,1040(a3)

000027c0 <inst_279>:

inst_279:
// rs1_val==46340 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0xb504, 0xb505, x13, 1044, x1)
    27c0:	0000b537          	lui	a0,0xb
    27c4:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    27c8:	0000b5b7          	lui	a1,0xb
    27cc:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    27d0:	00b54633          	xor	a2,a0,a1
    27d4:	40c6aa23          	sw	a2,1044(a3)

000027d8 <inst_280>:

inst_280:
// rs1_val==2 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x2, 0x3, x13, 1048, x1)
    27d8:	00200513          	li	a0,2
    27dc:	00300593          	li	a1,3
    27e0:	00b54633          	xor	a2,a0,a1
    27e4:	40c6ac23          	sw	a2,1048(a3)

000027e8 <inst_281>:

inst_281:
// rs1_val==2 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555557, 0x2, 0x55555555, x13, 1052, x1)
    27e8:	00200513          	li	a0,2
    27ec:	555555b7          	lui	a1,0x55555
    27f0:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    27f4:	00b54633          	xor	a2,a0,a1
    27f8:	40c6ae23          	sw	a2,1052(a3)

000027fc <inst_282>:

inst_282:
// rs1_val==2 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa8, 0x2, -0x55555556, x13, 1056, x1)
    27fc:	00200513          	li	a0,2
    2800:	aaaab5b7          	lui	a1,0xaaaab
    2804:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2808:	00b54633          	xor	a2,a0,a1
    280c:	42c6a023          	sw	a2,1056(a3)

00002810 <inst_283>:

inst_283:
// rs1_val==2 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x2, 0x5, x13, 1060, x1)
    2810:	00200513          	li	a0,2
    2814:	00500593          	li	a1,5
    2818:	00b54633          	xor	a2,a0,a1
    281c:	42c6a223          	sw	a2,1060(a3)

00002820 <inst_284>:

inst_284:
// rs1_val==2 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x2, 0x33333333, x13, 1064, x1)
    2820:	00200513          	li	a0,2
    2824:	333335b7          	lui	a1,0x33333
    2828:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    282c:	00b54633          	xor	a2,a0,a1
    2830:	42c6a423          	sw	a2,1064(a3)

00002834 <inst_285>:

inst_285:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666664, 0x2, 0x66666666, x13, 1068, x1)
    2834:	00200513          	li	a0,2
    2838:	666665b7          	lui	a1,0x66666
    283c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2840:	00b54633          	xor	a2,a0,a1
    2844:	42c6a623          	sw	a2,1068(a3)

00002848 <inst_286>:

inst_286:
// rs1_val==2 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afe, 0x2, -0xb504, x13, 1072, x1)
    2848:	00200513          	li	a0,2
    284c:	ffff55b7          	lui	a1,0xffff5
    2850:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2854:	00b54633          	xor	a2,a0,a1
    2858:	42c6a823          	sw	a2,1072(a3)

0000285c <inst_287>:

inst_287:
// rs1_val==2 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xb506, 0x2, 0xb504, x13, 1076, x1)
    285c:	00200513          	li	a0,2
    2860:	0000b5b7          	lui	a1,0xb
    2864:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2868:	00b54633          	xor	a2,a0,a1
    286c:	42c6aa23          	sw	a2,1076(a3)

00002870 <inst_288>:

inst_288:
// rs1_val==2 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x2, 0x2, x13, 1080, x1)
    2870:	00200513          	li	a0,2
    2874:	00200593          	li	a1,2
    2878:	00b54633          	xor	a2,a0,a1
    287c:	42c6ac23          	sw	a2,1080(a3)

00002880 <inst_289>:

inst_289:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x2, 0x55555554, x13, 1084, x1)
    2880:	00200513          	li	a0,2
    2884:	555555b7          	lui	a1,0x55555
    2888:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    288c:	00b54633          	xor	a2,a0,a1
    2890:	42c6ae23          	sw	a2,1084(a3)

00002894 <inst_290>:

inst_290:
// rs1_val==2 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x2, 0x0, x13, 1088, x1)
    2894:	00200513          	li	a0,2
    2898:	00000593          	li	a1,0
    289c:	00b54633          	xor	a2,a0,a1
    28a0:	44c6a023          	sw	a2,1088(a3)

000028a4 <inst_291>:

inst_291:
// rs1_val==2 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x2, 0x4, x13, 1092, x1)
    28a4:	00200513          	li	a0,2
    28a8:	00400593          	li	a1,4
    28ac:	00b54633          	xor	a2,a0,a1
    28b0:	44c6a223          	sw	a2,1092(a3)

000028b4 <inst_292>:

inst_292:
// rs1_val==2 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x2, 0x33333332, x13, 1096, x1)
    28b4:	00200513          	li	a0,2
    28b8:	333335b7          	lui	a1,0x33333
    28bc:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    28c0:	00b54633          	xor	a2,a0,a1
    28c4:	44c6a423          	sw	a2,1096(a3)

000028c8 <inst_293>:

inst_293:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x2, 0x66666665, x13, 1100, x1)
    28c8:	00200513          	li	a0,2
    28cc:	666665b7          	lui	a1,0x66666
    28d0:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    28d4:	00b54633          	xor	a2,a0,a1
    28d8:	44c6a623          	sw	a2,1100(a3)

000028dc <inst_294>:

inst_294:
// rs1_val==2 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xb501, 0x2, 0xb503, x13, 1104, x1)
    28dc:	00200513          	li	a0,2
    28e0:	0000b5b7          	lui	a1,0xb
    28e4:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    28e8:	00b54633          	xor	a2,a0,a1
    28ec:	44c6a823          	sw	a2,1104(a3)

000028f0 <inst_295>:

inst_295:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x2, 0x55555556, x13, 1108, x1)
    28f0:	00200513          	li	a0,2
    28f4:	555555b7          	lui	a1,0x55555
    28f8:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    28fc:	00b54633          	xor	a2,a0,a1
    2900:	44c6aa23          	sw	a2,1108(a3)

00002904 <inst_296>:

inst_296:
// rs1_val==2 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa9, 0x2, -0x55555555, x13, 1112, x1)
    2904:	00200513          	li	a0,2
    2908:	aaaab5b7          	lui	a1,0xaaaab
    290c:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2910:	00b54633          	xor	a2,a0,a1
    2914:	44c6ac23          	sw	a2,1112(a3)

00002918 <inst_297>:

inst_297:
// rs1_val==2 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x2, 0x6, x13, 1116, x1)
    2918:	00200513          	li	a0,2
    291c:	00600593          	li	a1,6
    2920:	00b54633          	xor	a2,a0,a1
    2924:	44c6ae23          	sw	a2,1116(a3)

00002928 <inst_298>:

inst_298:
// rs1_val==2 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33333336, 0x2, 0x33333334, x13, 1120, x1)
    2928:	00200513          	li	a0,2
    292c:	333335b7          	lui	a1,0x33333
    2930:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2934:	00b54633          	xor	a2,a0,a1
    2938:	46c6a023          	sw	a2,1120(a3)

0000293c <inst_299>:

inst_299:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x2, 0x66666667, x13, 1124, x1)
    293c:	00200513          	li	a0,2
    2940:	666665b7          	lui	a1,0x66666
    2944:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2948:	00b54633          	xor	a2,a0,a1
    294c:	46c6a223          	sw	a2,1124(a3)

00002950 <inst_300>:

inst_300:
// rs1_val==2 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffff4aff, 0x2, -0xb503, x13, 1128, x1)
    2950:	00200513          	li	a0,2
    2954:	ffff55b7          	lui	a1,0xffff5
    2958:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    295c:	00b54633          	xor	a2,a0,a1
    2960:	46c6a423          	sw	a2,1128(a3)

00002964 <inst_301>:

inst_301:
// rs1_val==2 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xb507, 0x2, 0xb505, x13, 1132, x1)
    2964:	00200513          	li	a0,2
    2968:	0000b5b7          	lui	a1,0xb
    296c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2970:	00b54633          	xor	a2,a0,a1
    2974:	46c6a623          	sw	a2,1132(a3)

00002978 <inst_302>:

inst_302:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x55555557, 0x55555554, 0x3, x13, 1136, x1)
    2978:	55555537          	lui	a0,0x55555
    297c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2980:	00300593          	li	a1,3
    2984:	00b54633          	xor	a2,a0,a1
    2988:	46c6a823          	sw	a2,1136(a3)

0000298c <inst_303>:

inst_303:
// rs1_val==1431655764 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffe, 0x55555554, -0x55555556, x13, 1140, x1)
    298c:	55555537          	lui	a0,0x55555
    2990:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2994:	aaaab5b7          	lui	a1,0xaaaab
    2998:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    299c:	00b54633          	xor	a2,a0,a1
    29a0:	46c6aa23          	sw	a2,1140(a3)

000029a4 <inst_304>:

inst_304:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x55555551, 0x55555554, 0x5, x13, 1144, x1)
    29a4:	55555537          	lui	a0,0x55555
    29a8:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29ac:	00500593          	li	a1,5
    29b0:	00b54633          	xor	a2,a0,a1
    29b4:	46c6ac23          	sw	a2,1144(a3)

000029b8 <inst_305>:

inst_305:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x55555554, 0x33333333, x13, 1148, x1)
    29b8:	55555537          	lui	a0,0x55555
    29bc:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29c0:	333335b7          	lui	a1,0x33333
    29c4:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    29c8:	00b54633          	xor	a2,a0,a1
    29cc:	46c6ae23          	sw	a2,1148(a3)

000029d0 <inst_306>:

inst_306:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x55555554, 0x66666666, x13, 1152, x1)
    29d0:	55555537          	lui	a0,0x55555
    29d4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29d8:	666665b7          	lui	a1,0x66666
    29dc:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    29e0:	00b54633          	xor	a2,a0,a1
    29e4:	48c6a023          	sw	a2,1152(a3)

000029e8 <inst_307>:

inst_307:
// rs1_val==1431655764 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa8, 0x55555554, -0xb504, x13, 1156, x1)
    29e8:	55555537          	lui	a0,0x55555
    29ec:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29f0:	ffff55b7          	lui	a1,0xffff5
    29f4:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    29f8:	00b54633          	xor	a2,a0,a1
    29fc:	48c6a223          	sw	a2,1156(a3)

00002a00 <inst_308>:

inst_308:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x5555e050, 0x55555554, 0xb504, x13, 1160, x1)
    2a00:	55555537          	lui	a0,0x55555
    2a04:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a08:	0000b5b7          	lui	a1,0xb
    2a0c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2a10:	00b54633          	xor	a2,a0,a1
    2a14:	48c6a423          	sw	a2,1160(a3)

00002a18 <inst_309>:

inst_309:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x55555554, 0x2, x13, 1164, x1)
    2a18:	55555537          	lui	a0,0x55555
    2a1c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a20:	00200593          	li	a1,2
    2a24:	00b54633          	xor	a2,a0,a1
    2a28:	48c6a623          	sw	a2,1164(a3)

00002a2c <inst_310>:

inst_310:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x55555554, 0x55555554, x13, 1168, x1)
    2a2c:	55555537          	lui	a0,0x55555
    2a30:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a34:	555555b7          	lui	a1,0x55555
    2a38:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2a3c:	00b54633          	xor	a2,a0,a1
    2a40:	48c6a823          	sw	a2,1168(a3)

00002a44 <inst_311>:

inst_311:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x55555554, 0x0, x13, 1172, x1)
    2a44:	55555537          	lui	a0,0x55555
    2a48:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a4c:	00000593          	li	a1,0
    2a50:	00b54633          	xor	a2,a0,a1
    2a54:	48c6aa23          	sw	a2,1172(a3)

00002a58 <inst_312>:

inst_312:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x55555550, 0x55555554, 0x4, x13, 1176, x1)
    2a58:	55555537          	lui	a0,0x55555
    2a5c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a60:	00400593          	li	a1,4
    2a64:	00b54633          	xor	a2,a0,a1
    2a68:	48c6ac23          	sw	a2,1176(a3)

00002a6c <inst_313>:

inst_313:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x66666666, 0x55555554, 0x33333332, x13, 1180, x1)
    2a6c:	55555537          	lui	a0,0x55555
    2a70:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a74:	333335b7          	lui	a1,0x33333
    2a78:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2a7c:	00b54633          	xor	a2,a0,a1
    2a80:	48c6ae23          	sw	a2,1180(a3)

00002a84 <inst_314>:

inst_314:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x55555554, 0x66666665, x13, 1184, x1)
    2a84:	55555537          	lui	a0,0x55555
    2a88:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a8c:	666665b7          	lui	a1,0x66666
    2a90:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2a94:	00b54633          	xor	a2,a0,a1
    2a98:	4ac6a023          	sw	a2,1184(a3)

00002a9c <inst_315>:

inst_315:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x5555e057, 0x55555554, 0xb503, x13, 1188, x1)
    2a9c:	55555537          	lui	a0,0x55555
    2aa0:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2aa4:	0000b5b7          	lui	a1,0xb
    2aa8:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2aac:	00b54633          	xor	a2,a0,a1
    2ab0:	4ac6a223          	sw	a2,1188(a3)

00002ab4 <inst_316>:

inst_316:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x55555554, 0x55555556, x13, 1192, x1)
    2ab4:	55555537          	lui	a0,0x55555
    2ab8:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2abc:	555555b7          	lui	a1,0x55555
    2ac0:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2ac4:	00b54633          	xor	a2,a0,a1
    2ac8:	4ac6a423          	sw	a2,1192(a3)

00002acc <inst_317>:

inst_317:
// rs1_val==1431655764 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, 0x55555554, -0x55555555, x13, 1196, x1)
    2acc:	55555537          	lui	a0,0x55555
    2ad0:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2ad4:	aaaab5b7          	lui	a1,0xaaaab
    2ad8:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2adc:	00b54633          	xor	a2,a0,a1
    2ae0:	4ac6a623          	sw	a2,1196(a3)

00002ae4 <inst_318>:

inst_318:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x55555552, 0x55555554, 0x6, x13, 1200, x1)
    2ae4:	55555537          	lui	a0,0x55555
    2ae8:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2aec:	00600593          	li	a1,6
    2af0:	00b54633          	xor	a2,a0,a1
    2af4:	4ac6a823          	sw	a2,1200(a3)

00002af8 <inst_319>:

inst_319:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x66666660, 0x55555554, 0x33333334, x13, 1204, x1)
    2af8:	55555537          	lui	a0,0x55555
    2afc:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2b00:	333335b7          	lui	a1,0x33333
    2b04:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2b08:	00b54633          	xor	a2,a0,a1
    2b0c:	4ac6aa23          	sw	a2,1204(a3)

00002b10 <inst_320>:

inst_320:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x55555554, 0x66666667, x13, 1208, x1)
    2b10:	55555537          	lui	a0,0x55555
    2b14:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2b18:	666665b7          	lui	a1,0x66666
    2b1c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2b20:	00b54633          	xor	a2,a0,a1
    2b24:	4ac6ac23          	sw	a2,1208(a3)

00002b28 <inst_321>:

inst_321:
// rs1_val==1431655764 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa9, 0x55555554, -0xb503, x13, 1212, x1)
    2b28:	55555537          	lui	a0,0x55555
    2b2c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2b30:	ffff55b7          	lui	a1,0xffff5
    2b34:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2b38:	00b54633          	xor	a2,a0,a1
    2b3c:	4ac6ae23          	sw	a2,1212(a3)

00002b40 <inst_322>:

inst_322:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x5555e051, 0x55555554, 0xb505, x13, 1216, x1)
    2b40:	55555537          	lui	a0,0x55555
    2b44:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2b48:	0000b5b7          	lui	a1,0xb
    2b4c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2b50:	00b54633          	xor	a2,a0,a1
    2b54:	4cc6a023          	sw	a2,1216(a3)

00002b58 <inst_323>:

inst_323:
// rs1_val==0 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x0, 0x3, x13, 1220, x1)
    2b58:	00000513          	li	a0,0
    2b5c:	00300593          	li	a1,3
    2b60:	00b54633          	xor	a2,a0,a1
    2b64:	4cc6a223          	sw	a2,1220(a3)

00002b68 <inst_324>:

inst_324:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x0, 0x55555555, x13, 1224, x1)
    2b68:	00000513          	li	a0,0
    2b6c:	555555b7          	lui	a1,0x55555
    2b70:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2b74:	00b54633          	xor	a2,a0,a1
    2b78:	4cc6a423          	sw	a2,1224(a3)

00002b7c <inst_325>:

inst_325:
// rs1_val==0 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaa, 0x0, -0x55555556, x13, 1228, x1)
    2b7c:	00000513          	li	a0,0
    2b80:	aaaab5b7          	lui	a1,0xaaaab
    2b84:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2b88:	00b54633          	xor	a2,a0,a1
    2b8c:	4cc6a623          	sw	a2,1228(a3)

00002b90 <inst_326>:

inst_326:
// rs1_val==0 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x0, 0x5, x13, 1232, x1)
    2b90:	00000513          	li	a0,0
    2b94:	00500593          	li	a1,5
    2b98:	00b54633          	xor	a2,a0,a1
    2b9c:	4cc6a823          	sw	a2,1232(a3)

00002ba0 <inst_327>:

inst_327:
// rs1_val==0 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x0, 0x33333333, x13, 1236, x1)
    2ba0:	00000513          	li	a0,0
    2ba4:	333335b7          	lui	a1,0x33333
    2ba8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2bac:	00b54633          	xor	a2,a0,a1
    2bb0:	4cc6aa23          	sw	a2,1236(a3)

00002bb4 <inst_328>:

inst_328:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666666, 0x0, 0x66666666, x13, 1240, x1)
    2bb4:	00000513          	li	a0,0
    2bb8:	666665b7          	lui	a1,0x66666
    2bbc:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2bc0:	00b54633          	xor	a2,a0,a1
    2bc4:	4cc6ac23          	sw	a2,1240(a3)

00002bc8 <inst_329>:

inst_329:
// rs1_val==0 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xb504, 0x0, 0xb504, x13, 1244, x1)
    2bc8:	00000513          	li	a0,0
    2bcc:	0000b5b7          	lui	a1,0xb
    2bd0:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2bd4:	00b54633          	xor	a2,a0,a1
    2bd8:	4cc6ae23          	sw	a2,1244(a3)

00002bdc <inst_330>:

inst_330:
// rs1_val==-1431655765 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0x55555555, -0x55555555, x13, 1248, x1)
    2bdc:	aaaab537          	lui	a0,0xaaaab
    2be0:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2be4:	aaaab5b7          	lui	a1,0xaaaab
    2be8:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2bec:	00b54633          	xor	a2,a0,a1
    2bf0:	4ec6a023          	sw	a2,1248(a3)

00002bf4 <inst_331>:

inst_331:
// rs1_val==-1431655765 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaad, -0x55555555, 0x6, x13, 1252, x1)
    2bf4:	aaaab537          	lui	a0,0xaaaab
    2bf8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2bfc:	00600593          	li	a1,6
    2c00:	00b54633          	xor	a2,a0,a1
    2c04:	4ec6a223          	sw	a2,1252(a3)

00002c08 <inst_332>:

inst_332:
// rs1_val==-1431655765 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x9999999f, -0x55555555, 0x33333334, x13, 1256, x1)
    2c08:	aaaab537          	lui	a0,0xaaaab
    2c0c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2c10:	333335b7          	lui	a1,0x33333
    2c14:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2c18:	00b54633          	xor	a2,a0,a1
    2c1c:	4ec6a423          	sw	a2,1256(a3)

00002c20 <inst_333>:

inst_333:
// rs1_val==-1431655765 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc, -0x55555555, 0x66666667, x13, 1260, x1)
    2c20:	aaaab537          	lui	a0,0xaaaab
    2c24:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2c28:	666665b7          	lui	a1,0x66666
    2c2c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2c30:	00b54633          	xor	a2,a0,a1
    2c34:	4ec6a623          	sw	a2,1260(a3)

00002c38 <inst_334>:

inst_334:
// rs1_val==-1431655765 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x5555e056, -0x55555555, -0xb503, x13, 1264, x1)
    2c38:	aaaab537          	lui	a0,0xaaaab
    2c3c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2c40:	ffff55b7          	lui	a1,0xffff5
    2c44:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2c48:	00b54633          	xor	a2,a0,a1
    2c4c:	4ec6a823          	sw	a2,1264(a3)

00002c50 <inst_335>:

inst_335:
// rs1_val==-1431655765 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fae, -0x55555555, 0xb505, x13, 1268, x1)
    2c50:	aaaab537          	lui	a0,0xaaaab
    2c54:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2c58:	0000b5b7          	lui	a1,0xb
    2c5c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2c60:	00b54633          	xor	a2,a0,a1
    2c64:	4ec6aa23          	sw	a2,1268(a3)

00002c68 <inst_336>:

inst_336:
// rs1_val==6 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x5, 0x6, 0x3, x13, 1272, x1)
    2c68:	00600513          	li	a0,6
    2c6c:	00300593          	li	a1,3
    2c70:	00b54633          	xor	a2,a0,a1
    2c74:	4ec6ac23          	sw	a2,1272(a3)

00002c78 <inst_337>:

inst_337:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555553, 0x6, 0x55555555, x13, 1276, x1)
    2c78:	00600513          	li	a0,6
    2c7c:	555555b7          	lui	a1,0x55555
    2c80:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2c84:	00b54633          	xor	a2,a0,a1
    2c88:	4ec6ae23          	sw	a2,1276(a3)

00002c8c <inst_338>:

inst_338:
// rs1_val==6 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaac, 0x6, -0x55555556, x13, 1280, x1)
    2c8c:	00600513          	li	a0,6
    2c90:	aaaab5b7          	lui	a1,0xaaaab
    2c94:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2c98:	00b54633          	xor	a2,a0,a1
    2c9c:	50c6a023          	sw	a2,1280(a3)

00002ca0 <inst_339>:

inst_339:
// rs1_val==6 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x6, 0x5, x13, 1284, x1)
    2ca0:	00600513          	li	a0,6
    2ca4:	00500593          	li	a1,5
    2ca8:	00b54633          	xor	a2,a0,a1
    2cac:	50c6a223          	sw	a2,1284(a3)

00002cb0 <inst_340>:

inst_340:
// rs1_val==6 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33333335, 0x6, 0x33333333, x13, 1288, x1)
    2cb0:	00600513          	li	a0,6
    2cb4:	333335b7          	lui	a1,0x33333
    2cb8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2cbc:	00b54633          	xor	a2,a0,a1
    2cc0:	50c6a423          	sw	a2,1288(a3)

00002cc4 <inst_341>:

inst_341:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666660, 0x6, 0x66666666, x13, 1292, x1)
    2cc4:	00600513          	li	a0,6
    2cc8:	666665b7          	lui	a1,0x66666
    2ccc:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2cd0:	00b54633          	xor	a2,a0,a1
    2cd4:	50c6a623          	sw	a2,1292(a3)

00002cd8 <inst_342>:

inst_342:
// rs1_val==6 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afa, 0x6, -0xb504, x13, 1296, x1)
    2cd8:	00600513          	li	a0,6
    2cdc:	ffff55b7          	lui	a1,0xffff5
    2ce0:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2ce4:	00b54633          	xor	a2,a0,a1
    2ce8:	50c6a823          	sw	a2,1296(a3)

00002cec <inst_343>:

inst_343:
// rs1_val==6 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xb502, 0x6, 0xb504, x13, 1300, x1)
    2cec:	00600513          	li	a0,6
    2cf0:	0000b5b7          	lui	a1,0xb
    2cf4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2cf8:	00b54633          	xor	a2,a0,a1
    2cfc:	50c6aa23          	sw	a2,1300(a3)

00002d00 <inst_344>:

inst_344:
// rs1_val==6 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x6, 0x2, x13, 1304, x1)
    2d00:	00600513          	li	a0,6
    2d04:	00200593          	li	a1,2
    2d08:	00b54633          	xor	a2,a0,a1
    2d0c:	50c6ac23          	sw	a2,1304(a3)

00002d10 <inst_345>:

inst_345:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555552, 0x6, 0x55555554, x13, 1308, x1)
    2d10:	00600513          	li	a0,6
    2d14:	555555b7          	lui	a1,0x55555
    2d18:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2d1c:	00b54633          	xor	a2,a0,a1
    2d20:	50c6ae23          	sw	a2,1308(a3)

00002d24 <inst_346>:

inst_346:
// rs1_val==6 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x6, 0x0, x13, 1312, x1)
    2d24:	00600513          	li	a0,6
    2d28:	00000593          	li	a1,0
    2d2c:	00b54633          	xor	a2,a0,a1
    2d30:	52c6a023          	sw	a2,1312(a3)

00002d34 <inst_347>:

inst_347:
// rs1_val==6 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x6, 0x4, x13, 1316, x1)
    2d34:	00600513          	li	a0,6
    2d38:	00400593          	li	a1,4
    2d3c:	00b54633          	xor	a2,a0,a1
    2d40:	52c6a223          	sw	a2,1316(a3)

00002d44 <inst_348>:

inst_348:
// rs1_val==6 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33333334, 0x6, 0x33333332, x13, 1320, x1)
    2d44:	00600513          	li	a0,6
    2d48:	333335b7          	lui	a1,0x33333
    2d4c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2d50:	00b54633          	xor	a2,a0,a1
    2d54:	52c6a423          	sw	a2,1320(a3)

00002d58 <inst_349>:

inst_349:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666663, 0x6, 0x66666665, x13, 1324, x1)
    2d58:	00600513          	li	a0,6
    2d5c:	666665b7          	lui	a1,0x66666
    2d60:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2d64:	00b54633          	xor	a2,a0,a1
    2d68:	52c6a623          	sw	a2,1324(a3)

00002d6c <inst_350>:

inst_350:
// rs1_val==6 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xb505, 0x6, 0xb503, x13, 1328, x1)
    2d6c:	00600513          	li	a0,6
    2d70:	0000b5b7          	lui	a1,0xb
    2d74:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2d78:	00b54633          	xor	a2,a0,a1
    2d7c:	52c6a823          	sw	a2,1328(a3)

00002d80 <inst_351>:

inst_351:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555550, 0x6, 0x55555556, x13, 1332, x1)
    2d80:	00600513          	li	a0,6
    2d84:	555555b7          	lui	a1,0x55555
    2d88:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2d8c:	00b54633          	xor	a2,a0,a1
    2d90:	52c6aa23          	sw	a2,1332(a3)

00002d94 <inst_352>:

inst_352:
// rs1_val==6 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaad, 0x6, -0x55555555, x13, 1336, x1)
    2d94:	00600513          	li	a0,6
    2d98:	aaaab5b7          	lui	a1,0xaaaab
    2d9c:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2da0:	00b54633          	xor	a2,a0,a1
    2da4:	52c6ac23          	sw	a2,1336(a3)

00002da8 <inst_353>:

inst_353:
// rs1_val==6 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x6, 0x6, x13, 1340, x1)
    2da8:	00600513          	li	a0,6
    2dac:	00600593          	li	a1,6
    2db0:	00b54633          	xor	a2,a0,a1
    2db4:	52c6ae23          	sw	a2,1340(a3)

00002db8 <inst_354>:

inst_354:
// rs1_val==6 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x6, 0x33333334, x13, 1344, x1)
    2db8:	00600513          	li	a0,6
    2dbc:	333335b7          	lui	a1,0x33333
    2dc0:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2dc4:	00b54633          	xor	a2,a0,a1
    2dc8:	54c6a023          	sw	a2,1344(a3)

00002dcc <inst_355>:

inst_355:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666661, 0x6, 0x66666667, x13, 1348, x1)
    2dcc:	00600513          	li	a0,6
    2dd0:	666665b7          	lui	a1,0x66666
    2dd4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2dd8:	00b54633          	xor	a2,a0,a1
    2ddc:	54c6a223          	sw	a2,1348(a3)

00002de0 <inst_356>:

inst_356:
// rs1_val==6 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afb, 0x6, -0xb503, x13, 1352, x1)
    2de0:	00600513          	li	a0,6
    2de4:	ffff55b7          	lui	a1,0xffff5
    2de8:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2dec:	00b54633          	xor	a2,a0,a1
    2df0:	54c6a423          	sw	a2,1352(a3)

00002df4 <inst_357>:

inst_357:
// rs1_val==6 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xb503, 0x6, 0xb505, x13, 1356, x1)
    2df4:	00600513          	li	a0,6
    2df8:	0000b5b7          	lui	a1,0xb
    2dfc:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2e00:	00b54633          	xor	a2,a0,a1
    2e04:	54c6a623          	sw	a2,1356(a3)

00002e08 <inst_358>:

inst_358:
// rs1_val==858993460 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x33333337, 0x33333334, 0x3, x13, 1360, x1)
    2e08:	33333537          	lui	a0,0x33333
    2e0c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e10:	00300593          	li	a1,3
    2e14:	00b54633          	xor	a2,a0,a1
    2e18:	54c6a823          	sw	a2,1360(a3)

00002e1c <inst_359>:

inst_359:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x66666661, 0x33333334, 0x55555555, x13, 1364, x1)
    2e1c:	33333537          	lui	a0,0x33333
    2e20:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e24:	555555b7          	lui	a1,0x55555
    2e28:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2e2c:	00b54633          	xor	a2,a0,a1
    2e30:	54c6aa23          	sw	a2,1364(a3)

00002e34 <inst_360>:

inst_360:
// rs1_val==858993460 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x9999999e, 0x33333334, -0x55555556, x13, 1368, x1)
    2e34:	33333537          	lui	a0,0x33333
    2e38:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e3c:	aaaab5b7          	lui	a1,0xaaaab
    2e40:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2e44:	00b54633          	xor	a2,a0,a1
    2e48:	54c6ac23          	sw	a2,1368(a3)

00002e4c <inst_361>:

inst_361:
// rs1_val==858993460 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x33333334, 0x5, x13, 1372, x1)
    2e4c:	33333537          	lui	a0,0x33333
    2e50:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e54:	00500593          	li	a1,5
    2e58:	00b54633          	xor	a2,a0,a1
    2e5c:	54c6ae23          	sw	a2,1372(a3)

00002e60 <inst_362>:

inst_362:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x33333334, 0x33333333, x13, 1376, x1)
    2e60:	33333537          	lui	a0,0x33333
    2e64:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e68:	333335b7          	lui	a1,0x33333
    2e6c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2e70:	00b54633          	xor	a2,a0,a1
    2e74:	56c6a023          	sw	a2,1376(a3)

00002e78 <inst_363>:

inst_363:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x55555552, 0x33333334, 0x66666666, x13, 1380, x1)
    2e78:	33333537          	lui	a0,0x33333
    2e7c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e80:	666665b7          	lui	a1,0x66666
    2e84:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2e88:	00b54633          	xor	a2,a0,a1
    2e8c:	56c6a223          	sw	a2,1380(a3)

00002e90 <inst_364>:

inst_364:
// rs1_val==858993460 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79c8, 0x33333334, -0xb504, x13, 1384, x1)
    2e90:	33333537          	lui	a0,0x33333
    2e94:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e98:	ffff55b7          	lui	a1,0xffff5
    2e9c:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2ea0:	00b54633          	xor	a2,a0,a1
    2ea4:	56c6a423          	sw	a2,1384(a3)

00002ea8 <inst_365>:

inst_365:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x33338630, 0x33333334, 0xb504, x13, 1388, x1)
    2ea8:	33333537          	lui	a0,0x33333
    2eac:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2eb0:	0000b5b7          	lui	a1,0xb
    2eb4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2eb8:	00b54633          	xor	a2,a0,a1
    2ebc:	56c6a623          	sw	a2,1388(a3)

00002ec0 <inst_366>:

inst_366:
// rs1_val==858993460 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x33333336, 0x33333334, 0x2, x13, 1392, x1)
    2ec0:	33333537          	lui	a0,0x33333
    2ec4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2ec8:	00200593          	li	a1,2
    2ecc:	00b54633          	xor	a2,a0,a1
    2ed0:	56c6a823          	sw	a2,1392(a3)

00002ed4 <inst_367>:

inst_367:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x66666660, 0x33333334, 0x55555554, x13, 1396, x1)
    2ed4:	33333537          	lui	a0,0x33333
    2ed8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2edc:	555555b7          	lui	a1,0x55555
    2ee0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2ee4:	00b54633          	xor	a2,a0,a1
    2ee8:	56c6aa23          	sw	a2,1396(a3)

00002eec <inst_368>:

inst_368:
// rs1_val==858993460 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x33333334, 0x33333334, 0x0, x13, 1400, x1)
    2eec:	33333537          	lui	a0,0x33333
    2ef0:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2ef4:	00000593          	li	a1,0
    2ef8:	00b54633          	xor	a2,a0,a1
    2efc:	56c6ac23          	sw	a2,1400(a3)

00002f00 <inst_369>:

inst_369:
// rs1_val==858993460 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x33333334, 0x4, x13, 1404, x1)
    2f00:	33333537          	lui	a0,0x33333
    2f04:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f08:	00400593          	li	a1,4
    2f0c:	00b54633          	xor	a2,a0,a1
    2f10:	56c6ae23          	sw	a2,1404(a3)

00002f14 <inst_370>:

inst_370:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x33333334, 0x33333332, x13, 1408, x1)
    2f14:	33333537          	lui	a0,0x33333
    2f18:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f1c:	333335b7          	lui	a1,0x33333
    2f20:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2f24:	00b54633          	xor	a2,a0,a1
    2f28:	58c6a023          	sw	a2,1408(a3)

00002f2c <inst_371>:

inst_371:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x55555551, 0x33333334, 0x66666665, x13, 1412, x1)
    2f2c:	33333537          	lui	a0,0x33333
    2f30:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f34:	666665b7          	lui	a1,0x66666
    2f38:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2f3c:	00b54633          	xor	a2,a0,a1
    2f40:	58c6a223          	sw	a2,1412(a3)

00002f44 <inst_372>:

inst_372:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x33338637, 0x33333334, 0xb503, x13, 1416, x1)
    2f44:	33333537          	lui	a0,0x33333
    2f48:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f4c:	0000b5b7          	lui	a1,0xb
    2f50:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2f54:	00b54633          	xor	a2,a0,a1
    2f58:	58c6a423          	sw	a2,1416(a3)

00002f5c <inst_373>:

inst_373:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x66666662, 0x33333334, 0x55555556, x13, 1420, x1)
    2f5c:	33333537          	lui	a0,0x33333
    2f60:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f64:	555555b7          	lui	a1,0x55555
    2f68:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2f6c:	00b54633          	xor	a2,a0,a1
    2f70:	58c6a623          	sw	a2,1420(a3)

00002f74 <inst_374>:

inst_374:
// rs1_val==858993460 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x9999999f, 0x33333334, -0x55555555, x13, 1424, x1)
    2f74:	33333537          	lui	a0,0x33333
    2f78:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f7c:	aaaab5b7          	lui	a1,0xaaaab
    2f80:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2f84:	00b54633          	xor	a2,a0,a1
    2f88:	58c6a823          	sw	a2,1424(a3)

00002f8c <inst_375>:

inst_375:
// rs1_val==858993460 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x33333334, 0x6, x13, 1428, x1)
    2f8c:	33333537          	lui	a0,0x33333
    2f90:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f94:	00600593          	li	a1,6
    2f98:	00b54633          	xor	a2,a0,a1
    2f9c:	58c6aa23          	sw	a2,1428(a3)

00002fa0 <inst_376>:

inst_376:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x33333334, 0x33333334, x13, 1432, x1)
    2fa0:	33333537          	lui	a0,0x33333
    2fa4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2fa8:	333335b7          	lui	a1,0x33333
    2fac:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2fb0:	00b54633          	xor	a2,a0,a1
    2fb4:	58c6ac23          	sw	a2,1432(a3)

00002fb8 <inst_377>:

inst_377:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x55555553, 0x33333334, 0x66666667, x13, 1436, x1)
    2fb8:	33333537          	lui	a0,0x33333
    2fbc:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2fc0:	666665b7          	lui	a1,0x66666
    2fc4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2fc8:	00b54633          	xor	a2,a0,a1
    2fcc:	58c6ae23          	sw	a2,1436(a3)

00002fd0 <inst_378>:

inst_378:
// rs1_val==858993460 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79c9, 0x33333334, -0xb503, x13, 1440, x1)
    2fd0:	33333537          	lui	a0,0x33333
    2fd4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2fd8:	ffff55b7          	lui	a1,0xffff5
    2fdc:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2fe0:	00b54633          	xor	a2,a0,a1
    2fe4:	5ac6a023          	sw	a2,1440(a3)

00002fe8 <inst_379>:

inst_379:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x33338631, 0x33333334, 0xb505, x13, 1444, x1)
    2fe8:	33333537          	lui	a0,0x33333
    2fec:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2ff0:	0000b5b7          	lui	a1,0xb
    2ff4:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2ff8:	00b54633          	xor	a2,a0,a1
    2ffc:	5ac6a223          	sw	a2,1444(a3)

00003000 <inst_380>:

inst_380:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x66666664, 0x66666667, 0x3, x13, 1448, x1)
    3000:	66666537          	lui	a0,0x66666
    3004:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3008:	00300593          	li	a1,3
    300c:	00b54633          	xor	a2,a0,a1
    3010:	5ac6a423          	sw	a2,1448(a3)

00003014 <inst_381>:

inst_381:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x66666667, 0x55555555, x13, 1452, x1)
    3014:	66666537          	lui	a0,0x66666
    3018:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    301c:	555555b7          	lui	a1,0x55555
    3020:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3024:	00b54633          	xor	a2,a0,a1
    3028:	5ac6a623          	sw	a2,1452(a3)

0000302c <inst_382>:

inst_382:
// rs1_val==1717986919 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccd, 0x66666667, -0x55555556, x13, 1456, x1)
    302c:	66666537          	lui	a0,0x66666
    3030:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3034:	aaaab5b7          	lui	a1,0xaaaab
    3038:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    303c:	00b54633          	xor	a2,a0,a1
    3040:	5ac6a823          	sw	a2,1456(a3)

00003044 <inst_383>:

inst_383:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x66666662, 0x66666667, 0x5, x13, 1460, x1)
    3044:	66666537          	lui	a0,0x66666
    3048:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    304c:	00500593          	li	a1,5
    3050:	00b54633          	xor	a2,a0,a1
    3054:	5ac6aa23          	sw	a2,1460(a3)

00003058 <inst_384>:

inst_384:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x66666667, 0x33333333, x13, 1464, x1)
    3058:	66666537          	lui	a0,0x66666
    305c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3060:	333335b7          	lui	a1,0x33333
    3064:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3068:	00b54633          	xor	a2,a0,a1
    306c:	5ac6ac23          	sw	a2,1464(a3)

00003070 <inst_385>:

inst_385:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x66666667, 0x66666666, x13, 1468, x1)
    3070:	66666537          	lui	a0,0x66666
    3074:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3078:	666665b7          	lui	a1,0x66666
    307c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3080:	00b54633          	xor	a2,a0,a1
    3084:	5ac6ae23          	sw	a2,1468(a3)

00003088 <inst_386>:

inst_386:
// rs1_val==1717986919 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9b, 0x66666667, -0xb504, x13, 1472, x1)
    3088:	66666537          	lui	a0,0x66666
    308c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3090:	ffff55b7          	lui	a1,0xffff5
    3094:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3098:	00b54633          	xor	a2,a0,a1
    309c:	5cc6a023          	sw	a2,1472(a3)

000030a0 <inst_387>:

inst_387:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x6666d363, 0x66666667, 0xb504, x13, 1476, x1)
    30a0:	66666537          	lui	a0,0x66666
    30a4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30a8:	0000b5b7          	lui	a1,0xb
    30ac:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    30b0:	00b54633          	xor	a2,a0,a1
    30b4:	5cc6a223          	sw	a2,1476(a3)

000030b8 <inst_388>:

inst_388:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x66666667, 0x2, x13, 1480, x1)
    30b8:	66666537          	lui	a0,0x66666
    30bc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30c0:	00200593          	li	a1,2
    30c4:	00b54633          	xor	a2,a0,a1
    30c8:	5cc6a423          	sw	a2,1480(a3)

000030cc <inst_389>:

inst_389:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x66666667, 0x55555554, x13, 1484, x1)
    30cc:	66666537          	lui	a0,0x66666
    30d0:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30d4:	555555b7          	lui	a1,0x55555
    30d8:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    30dc:	00b54633          	xor	a2,a0,a1
    30e0:	5cc6a623          	sw	a2,1484(a3)

000030e4 <inst_390>:

inst_390:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x66666667, 0x0, x13, 1488, x1)
    30e4:	66666537          	lui	a0,0x66666
    30e8:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30ec:	00000593          	li	a1,0
    30f0:	00b54633          	xor	a2,a0,a1
    30f4:	5cc6a823          	sw	a2,1488(a3)

000030f8 <inst_391>:

inst_391:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x66666663, 0x66666667, 0x4, x13, 1492, x1)
    30f8:	66666537          	lui	a0,0x66666
    30fc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3100:	00400593          	li	a1,4
    3104:	00b54633          	xor	a2,a0,a1
    3108:	5cc6aa23          	sw	a2,1492(a3)

0000310c <inst_392>:

inst_392:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x66666667, 0x33333332, x13, 1496, x1)
    310c:	66666537          	lui	a0,0x66666
    3110:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3114:	333335b7          	lui	a1,0x33333
    3118:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    311c:	00b54633          	xor	a2,a0,a1
    3120:	5cc6ac23          	sw	a2,1496(a3)

00003124 <inst_393>:

inst_393:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x66666667, 0x66666665, x13, 1500, x1)
    3124:	66666537          	lui	a0,0x66666
    3128:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    312c:	666665b7          	lui	a1,0x66666
    3130:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3134:	00b54633          	xor	a2,a0,a1
    3138:	5cc6ae23          	sw	a2,1500(a3)

0000313c <inst_394>:

inst_394:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x6666d364, 0x66666667, 0xb503, x13, 1504, x1)
    313c:	66666537          	lui	a0,0x66666
    3140:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3144:	0000b5b7          	lui	a1,0xb
    3148:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    314c:	00b54633          	xor	a2,a0,a1
    3150:	5ec6a023          	sw	a2,1504(a3)

00003154 <inst_395>:

inst_395:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x66666667, 0x55555556, x13, 1508, x1)
    3154:	66666537          	lui	a0,0x66666
    3158:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    315c:	555555b7          	lui	a1,0x55555
    3160:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3164:	00b54633          	xor	a2,a0,a1
    3168:	5ec6a223          	sw	a2,1508(a3)

0000316c <inst_396>:

inst_396:
// rs1_val==1717986919 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccc, 0x66666667, -0x55555555, x13, 1512, x1)
    316c:	66666537          	lui	a0,0x66666
    3170:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3174:	aaaab5b7          	lui	a1,0xaaaab
    3178:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    317c:	00b54633          	xor	a2,a0,a1
    3180:	5ec6a423          	sw	a2,1512(a3)

00003184 <inst_397>:

inst_397:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x66666661, 0x66666667, 0x6, x13, 1516, x1)
    3184:	66666537          	lui	a0,0x66666
    3188:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    318c:	00600593          	li	a1,6
    3190:	00b54633          	xor	a2,a0,a1
    3194:	5ec6a623          	sw	a2,1516(a3)

00003198 <inst_398>:

inst_398:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x55555553, 0x66666667, 0x33333334, x13, 1520, x1)
    3198:	66666537          	lui	a0,0x66666
    319c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    31a0:	333335b7          	lui	a1,0x33333
    31a4:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    31a8:	00b54633          	xor	a2,a0,a1
    31ac:	5ec6a823          	sw	a2,1520(a3)

000031b0 <inst_399>:

inst_399:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x66666667, 0x66666667, x13, 1524, x1)
    31b0:	66666537          	lui	a0,0x66666
    31b4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    31b8:	666665b7          	lui	a1,0x66666
    31bc:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    31c0:	00b54633          	xor	a2,a0,a1
    31c4:	5ec6aa23          	sw	a2,1524(a3)

000031c8 <inst_400>:

inst_400:
// rs1_val==1717986919 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9a, 0x66666667, -0xb503, x13, 1528, x1)
    31c8:	66666537          	lui	a0,0x66666
    31cc:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    31d0:	ffff55b7          	lui	a1,0xffff5
    31d4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    31d8:	00b54633          	xor	a2,a0,a1
    31dc:	5ec6ac23          	sw	a2,1528(a3)

000031e0 <inst_401>:

inst_401:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x6666d362, 0x66666667, 0xb505, x13, 1532, x1)
    31e0:	66666537          	lui	a0,0x66666
    31e4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    31e8:	0000b5b7          	lui	a1,0xb
    31ec:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    31f0:	00b54633          	xor	a2,a0,a1
    31f4:	5ec6ae23          	sw	a2,1532(a3)

000031f8 <inst_402>:

inst_402:
// rs1_val==-46339 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afe, -0xb503, 0x3, x13, 1536, x1)
    31f8:	ffff5537          	lui	a0,0xffff5
    31fc:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3200:	00300593          	li	a1,3
    3204:	00b54633          	xor	a2,a0,a1
    3208:	60c6a023          	sw	a2,1536(a3)

0000320c <inst_403>:

inst_403:
// rs1_val==-46339 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa8, -0xb503, 0x55555555, x13, 1540, x1)
    320c:	ffff5537          	lui	a0,0xffff5
    3210:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3214:	555555b7          	lui	a1,0x55555
    3218:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    321c:	00b54633          	xor	a2,a0,a1
    3220:	60c6a223          	sw	a2,1540(a3)

00003224 <inst_404>:

inst_404:
// rs1_val==-46339 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555e057, -0xb503, -0x55555556, x13, 1544, x1)
    3224:	ffff5537          	lui	a0,0xffff5
    3228:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    322c:	aaaab5b7          	lui	a1,0xaaaab
    3230:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3234:	00b54633          	xor	a2,a0,a1
    3238:	60c6a423          	sw	a2,1544(a3)

0000323c <inst_405>:

inst_405:
// rs1_val==-46339 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af8, -0xb503, 0x5, x13, 1548, x1)
    323c:	ffff5537          	lui	a0,0xffff5
    3240:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3244:	00500593          	li	a1,5
    3248:	00b54633          	xor	a2,a0,a1
    324c:	60c6a623          	sw	a2,1548(a3)

00003250 <inst_406>:

inst_406:
// rs1_val==-46339 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79ce, -0xb503, 0x33333333, x13, 1552, x1)
    3250:	ffff5537          	lui	a0,0xffff5
    3254:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3258:	333335b7          	lui	a1,0x33333
    325c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3260:	00b54633          	xor	a2,a0,a1
    3264:	60c6a823          	sw	a2,1552(a3)

00003268 <inst_407>:

inst_407:
// rs1_val==-46339 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9b, -0xb503, 0x66666666, x13, 1556, x1)
    3268:	ffff5537          	lui	a0,0xffff5
    326c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3270:	666665b7          	lui	a1,0x66666
    3274:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3278:	00b54633          	xor	a2,a0,a1
    327c:	60c6aa23          	sw	a2,1556(a3)

00003280 <inst_408>:

inst_408:
// rs1_val==-46339 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x1, -0xb503, -0xb504, x13, 1560, x1)
    3280:	ffff5537          	lui	a0,0xffff5
    3284:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3288:	ffff55b7          	lui	a1,0xffff5
    328c:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3290:	00b54633          	xor	a2,a0,a1
    3294:	60c6ac23          	sw	a2,1560(a3)

00003298 <inst_409>:

inst_409:
// rs1_val==-46339 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff9, -0xb503, 0xb504, x13, 1564, x1)
    3298:	ffff5537          	lui	a0,0xffff5
    329c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32a0:	0000b5b7          	lui	a1,0xb
    32a4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    32a8:	00b54633          	xor	a2,a0,a1
    32ac:	60c6ae23          	sw	a2,1564(a3)

000032b0 <inst_410>:

inst_410:
// rs1_val==-46339 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xffff4aff, -0xb503, 0x2, x13, 1568, x1)
    32b0:	ffff5537          	lui	a0,0xffff5
    32b4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32b8:	00200593          	li	a1,2
    32bc:	00b54633          	xor	a2,a0,a1
    32c0:	62c6a023          	sw	a2,1568(a3)

000032c4 <inst_411>:

inst_411:
// rs1_val==-46339 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa9, -0xb503, 0x55555554, x13, 1572, x1)
    32c4:	ffff5537          	lui	a0,0xffff5
    32c8:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32cc:	555555b7          	lui	a1,0x55555
    32d0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    32d4:	00b54633          	xor	a2,a0,a1
    32d8:	62c6a223          	sw	a2,1572(a3)

000032dc <inst_412>:

inst_412:
// rs1_val==-46339 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afd, -0xb503, 0x0, x13, 1576, x1)
    32dc:	ffff5537          	lui	a0,0xffff5
    32e0:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32e4:	00000593          	li	a1,0
    32e8:	00b54633          	xor	a2,a0,a1
    32ec:	62c6a423          	sw	a2,1576(a3)

000032f0 <inst_413>:

inst_413:
// rs1_val==-46339 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af9, -0xb503, 0x4, x13, 1580, x1)
    32f0:	ffff5537          	lui	a0,0xffff5
    32f4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32f8:	00400593          	li	a1,4
    32fc:	00b54633          	xor	a2,a0,a1
    3300:	62c6a623          	sw	a2,1580(a3)

00003304 <inst_414>:

inst_414:
// rs1_val==-46339 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79cf, -0xb503, 0x33333332, x13, 1584, x1)
    3304:	ffff5537          	lui	a0,0xffff5
    3308:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    330c:	333335b7          	lui	a1,0x33333
    3310:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3314:	00b54633          	xor	a2,a0,a1
    3318:	62c6a823          	sw	a2,1584(a3)

0000331c <inst_415>:

inst_415:
// rs1_val==-46339 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x99992c98, -0xb503, 0x66666665, x13, 1588, x1)
    331c:	ffff5537          	lui	a0,0xffff5
    3320:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3324:	666665b7          	lui	a1,0x66666
    3328:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    332c:	00b54633          	xor	a2,a0,a1
    3330:	62c6aa23          	sw	a2,1588(a3)

00003334 <inst_416>:

inst_416:
// rs1_val==-46339 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffe, -0xb503, 0xb503, x13, 1592, x1)
    3334:	ffff5537          	lui	a0,0xffff5
    3338:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    333c:	0000b5b7          	lui	a1,0xb
    3340:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3344:	00b54633          	xor	a2,a0,a1
    3348:	62c6ac23          	sw	a2,1592(a3)

0000334c <inst_417>:

inst_417:
// rs1_val==-46339 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fab, -0xb503, 0x55555556, x13, 1596, x1)
    334c:	ffff5537          	lui	a0,0xffff5
    3350:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3354:	555555b7          	lui	a1,0x55555
    3358:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    335c:	00b54633          	xor	a2,a0,a1
    3360:	62c6ae23          	sw	a2,1596(a3)

00003364 <inst_418>:

inst_418:
// rs1_val==-46339 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555e056, -0xb503, -0x55555555, x13, 1600, x1)
    3364:	ffff5537          	lui	a0,0xffff5
    3368:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    336c:	aaaab5b7          	lui	a1,0xaaaab
    3370:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3374:	00b54633          	xor	a2,a0,a1
    3378:	64c6a023          	sw	a2,1600(a3)

0000337c <inst_419>:

inst_419:
// rs1_val==-46339 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afb, -0xb503, 0x6, x13, 1604, x1)
    337c:	ffff5537          	lui	a0,0xffff5
    3380:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3384:	00600593          	li	a1,6
    3388:	00b54633          	xor	a2,a0,a1
    338c:	64c6a223          	sw	a2,1604(a3)

00003390 <inst_420>:

inst_420:
// rs1_val==-46339 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79c9, -0xb503, 0x33333334, x13, 1608, x1)
    3390:	ffff5537          	lui	a0,0xffff5
    3394:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3398:	333335b7          	lui	a1,0x33333
    339c:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    33a0:	00b54633          	xor	a2,a0,a1
    33a4:	64c6a423          	sw	a2,1608(a3)

000033a8 <inst_421>:

inst_421:
// rs1_val==-46339 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x99992c9a, -0xb503, 0x66666667, x13, 1612, x1)
    33a8:	ffff5537          	lui	a0,0xffff5
    33ac:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    33b0:	666665b7          	lui	a1,0x66666
    33b4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    33b8:	00b54633          	xor	a2,a0,a1
    33bc:	64c6a623          	sw	a2,1612(a3)

000033c0 <inst_422>:

inst_422:
// rs1_val==-46339 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x0, -0xb503, -0xb503, x13, 1616, x1)
    33c0:	ffff5537          	lui	a0,0xffff5
    33c4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    33c8:	ffff55b7          	lui	a1,0xffff5
    33cc:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    33d0:	00b54633          	xor	a2,a0,a1
    33d4:	64c6a823          	sw	a2,1616(a3)

000033d8 <inst_423>:

inst_423:
// rs1_val==-46339 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff8, -0xb503, 0xb505, x13, 1620, x1)
    33d8:	ffff5537          	lui	a0,0xffff5
    33dc:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    33e0:	0000b5b7          	lui	a1,0xb
    33e4:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    33e8:	00b54633          	xor	a2,a0,a1
    33ec:	64c6aa23          	sw	a2,1620(a3)

000033f0 <inst_424>:

inst_424:
// rs1_val==46341 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xb506, 0xb505, 0x3, x13, 1624, x1)
    33f0:	0000b537          	lui	a0,0xb
    33f4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    33f8:	00300593          	li	a1,3
    33fc:	00b54633          	xor	a2,a0,a1
    3400:	64c6ac23          	sw	a2,1624(a3)

00003404 <inst_425>:

inst_425:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555e050, 0xb505, 0x55555555, x13, 1628, x1)
    3404:	0000b537          	lui	a0,0xb
    3408:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    340c:	555555b7          	lui	a1,0x55555
    3410:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3414:	00b54633          	xor	a2,a0,a1
    3418:	64c6ae23          	sw	a2,1628(a3)

0000341c <inst_426>:

inst_426:
// rs1_val==46341 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1faf, 0xb505, -0x55555556, x13, 1632, x1)
    341c:	0000b537          	lui	a0,0xb
    3420:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3424:	aaaab5b7          	lui	a1,0xaaaab
    3428:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    342c:	00b54633          	xor	a2,a0,a1
    3430:	66c6a023          	sw	a2,1632(a3)

00003434 <inst_427>:

inst_427:
// rs1_val==46341 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xb500, 0xb505, 0x5, x13, 1636, x1)
    3434:	0000b537          	lui	a0,0xb
    3438:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    343c:	00500593          	li	a1,5
    3440:	00b54633          	xor	a2,a0,a1
    3444:	66c6a223          	sw	a2,1636(a3)

00003448 <inst_428>:

inst_428:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33338636, 0xb505, 0x33333333, x13, 1640, x1)
    3448:	0000b537          	lui	a0,0xb
    344c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3450:	333335b7          	lui	a1,0x33333
    3454:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3458:	00b54633          	xor	a2,a0,a1
    345c:	66c6a423          	sw	a2,1640(a3)

00003460 <inst_429>:

inst_429:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666d363, 0xb505, 0x66666666, x13, 1644, x1)
    3460:	0000b537          	lui	a0,0xb
    3464:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3468:	666665b7          	lui	a1,0x66666
    346c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3470:	00b54633          	xor	a2,a0,a1
    3474:	66c6a623          	sw	a2,1644(a3)

00003478 <inst_430>:

inst_430:
// rs1_val==46341 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff9, 0xb505, -0xb504, x13, 1648, x1)
    3478:	0000b537          	lui	a0,0xb
    347c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3480:	ffff55b7          	lui	a1,0xffff5
    3484:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3488:	00b54633          	xor	a2,a0,a1
    348c:	66c6a823          	sw	a2,1648(a3)

00003490 <inst_431>:

inst_431:
// rs1_val==46341 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0xb505, 0xb504, x13, 1652, x1)
    3490:	0000b537          	lui	a0,0xb
    3494:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3498:	0000b5b7          	lui	a1,0xb
    349c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    34a0:	00b54633          	xor	a2,a0,a1
    34a4:	66c6aa23          	sw	a2,1652(a3)

000034a8 <inst_432>:

inst_432:
// rs1_val==46341 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xb507, 0xb505, 0x2, x13, 1656, x1)
    34a8:	0000b537          	lui	a0,0xb
    34ac:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34b0:	00200593          	li	a1,2
    34b4:	00b54633          	xor	a2,a0,a1
    34b8:	66c6ac23          	sw	a2,1656(a3)

000034bc <inst_433>:

inst_433:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555e051, 0xb505, 0x55555554, x13, 1660, x1)
    34bc:	0000b537          	lui	a0,0xb
    34c0:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34c4:	555555b7          	lui	a1,0x55555
    34c8:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    34cc:	00b54633          	xor	a2,a0,a1
    34d0:	66c6ae23          	sw	a2,1660(a3)

000034d4 <inst_434>:

inst_434:
// rs1_val==46341 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xb505, 0xb505, 0x0, x13, 1664, x1)
    34d4:	0000b537          	lui	a0,0xb
    34d8:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34dc:	00000593          	li	a1,0
    34e0:	00b54633          	xor	a2,a0,a1
    34e4:	68c6a023          	sw	a2,1664(a3)

000034e8 <inst_435>:

inst_435:
// rs1_val==46341 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xb501, 0xb505, 0x4, x13, 1668, x1)
    34e8:	0000b537          	lui	a0,0xb
    34ec:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34f0:	00400593          	li	a1,4
    34f4:	00b54633          	xor	a2,a0,a1
    34f8:	68c6a223          	sw	a2,1668(a3)

000034fc <inst_436>:

inst_436:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33338637, 0xb505, 0x33333332, x13, 1672, x1)
    34fc:	0000b537          	lui	a0,0xb
    3500:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3504:	333335b7          	lui	a1,0x33333
    3508:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    350c:	00b54633          	xor	a2,a0,a1
    3510:	68c6a423          	sw	a2,1672(a3)

00003514 <inst_437>:

inst_437:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666d360, 0xb505, 0x66666665, x13, 1676, x1)
    3514:	0000b537          	lui	a0,0xb
    3518:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    351c:	666665b7          	lui	a1,0x66666
    3520:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3524:	00b54633          	xor	a2,a0,a1
    3528:	68c6a623          	sw	a2,1676(a3)

0000352c <inst_438>:

inst_438:
// rs1_val==46341 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0xb505, 0xb503, x13, 1680, x1)
    352c:	0000b537          	lui	a0,0xb
    3530:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3534:	0000b5b7          	lui	a1,0xb
    3538:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    353c:	00b54633          	xor	a2,a0,a1
    3540:	68c6a823          	sw	a2,1680(a3)

00003544 <inst_439>:

inst_439:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555e053, 0xb505, 0x55555556, x13, 1684, x1)
    3544:	0000b537          	lui	a0,0xb
    3548:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    354c:	555555b7          	lui	a1,0x55555
    3550:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3554:	00b54633          	xor	a2,a0,a1
    3558:	68c6aa23          	sw	a2,1684(a3)

0000355c <inst_440>:

inst_440:
// rs1_val==46341 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fae, 0xb505, -0x55555555, x13, 1688, x1)
    355c:	0000b537          	lui	a0,0xb
    3560:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3564:	aaaab5b7          	lui	a1,0xaaaab
    3568:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    356c:	00b54633          	xor	a2,a0,a1
    3570:	68c6ac23          	sw	a2,1688(a3)

00003574 <inst_441>:

inst_441:
// rs1_val==46341 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xb503, 0xb505, 0x6, x13, 1692, x1)
    3574:	0000b537          	lui	a0,0xb
    3578:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    357c:	00600593          	li	a1,6
    3580:	00b54633          	xor	a2,a0,a1
    3584:	68c6ae23          	sw	a2,1692(a3)

00003588 <inst_442>:

inst_442:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33338631, 0xb505, 0x33333334, x13, 1696, x1)
    3588:	0000b537          	lui	a0,0xb
    358c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3590:	333335b7          	lui	a1,0x33333
    3594:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3598:	00b54633          	xor	a2,a0,a1
    359c:	6ac6a023          	sw	a2,1696(a3)

000035a0 <inst_443>:

inst_443:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666d362, 0xb505, 0x66666667, x13, 1700, x1)
    35a0:	0000b537          	lui	a0,0xb
    35a4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    35a8:	666665b7          	lui	a1,0x66666
    35ac:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    35b0:	00b54633          	xor	a2,a0,a1
    35b4:	6ac6a223          	sw	a2,1700(a3)

000035b8 <inst_444>:

inst_444:
// rs1_val==46341 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xfffffff8, 0xb505, -0xb503, x13, 1704, x1)
    35b8:	0000b537          	lui	a0,0xb
    35bc:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    35c0:	ffff55b7          	lui	a1,0xffff5
    35c4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    35c8:	00b54633          	xor	a2,a0,a1
    35cc:	6ac6a423          	sw	a2,1704(a3)

000035d0 <inst_445>:

inst_445:
// rs1_val==46341 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0xb505, 0xb505, x13, 1708, x1)
    35d0:	0000b537          	lui	a0,0xb
    35d4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    35d8:	0000b5b7          	lui	a1,0xb
    35dc:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    35e0:	00b54633          	xor	a2,a0,a1
    35e4:	6ac6a623          	sw	a2,1708(a3)

000035e8 <inst_446>:

inst_446:
// rs1_val==0 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x0, 0x2, x13, 1712, x1)
    35e8:	00000513          	li	a0,0
    35ec:	00200593          	li	a1,2
    35f0:	00b54633          	xor	a2,a0,a1
    35f4:	6ac6a823          	sw	a2,1712(a3)

000035f8 <inst_447>:

inst_447:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x0, 0x55555554, x13, 1716, x1)
    35f8:	00000513          	li	a0,0
    35fc:	555555b7          	lui	a1,0x55555
    3600:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3604:	00b54633          	xor	a2,a0,a1
    3608:	6ac6aa23          	sw	a2,1716(a3)

0000360c <inst_448>:

inst_448:
// rs1_val==0 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x0, 0x0, x13, 1720, x1)
    360c:	00000513          	li	a0,0
    3610:	00000593          	li	a1,0
    3614:	00b54633          	xor	a2,a0,a1
    3618:	6ac6ac23          	sw	a2,1720(a3)

0000361c <inst_449>:

inst_449:
// rs1_val==0 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x0, 0x4, x13, 1724, x1)
    361c:	00000513          	li	a0,0
    3620:	00400593          	li	a1,4
    3624:	00b54633          	xor	a2,a0,a1
    3628:	6ac6ae23          	sw	a2,1724(a3)

0000362c <inst_450>:

inst_450:
// rs1_val==0 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x0, 0x33333332, x13, 1728, x1)
    362c:	00000513          	li	a0,0
    3630:	333335b7          	lui	a1,0x33333
    3634:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3638:	00b54633          	xor	a2,a0,a1
    363c:	6cc6a023          	sw	a2,1728(a3)

00003640 <inst_451>:

inst_451:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x0, 0x66666665, x13, 1732, x1)
    3640:	00000513          	li	a0,0
    3644:	666665b7          	lui	a1,0x66666
    3648:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    364c:	00b54633          	xor	a2,a0,a1
    3650:	6cc6a223          	sw	a2,1732(a3)

00003654 <inst_452>:

inst_452:
// rs1_val==0 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xb503, 0x0, 0xb503, x13, 1736, x1)
    3654:	00000513          	li	a0,0
    3658:	0000b5b7          	lui	a1,0xb
    365c:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3660:	00b54633          	xor	a2,a0,a1
    3664:	6cc6a423          	sw	a2,1736(a3)

00003668 <inst_453>:

inst_453:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x0, 0x55555556, x13, 1740, x1)
    3668:	00000513          	li	a0,0
    366c:	555555b7          	lui	a1,0x55555
    3670:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3674:	00b54633          	xor	a2,a0,a1
    3678:	6cc6a623          	sw	a2,1740(a3)

0000367c <inst_454>:

inst_454:
// rs1_val==0 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaab, 0x0, -0x55555555, x13, 1744, x1)
    367c:	00000513          	li	a0,0
    3680:	aaaab5b7          	lui	a1,0xaaaab
    3684:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3688:	00b54633          	xor	a2,a0,a1
    368c:	6cc6a823          	sw	a2,1744(a3)

00003690 <inst_455>:

inst_455:
// rs1_val==0 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x0, 0x6, x13, 1748, x1)
    3690:	00000513          	li	a0,0
    3694:	00600593          	li	a1,6
    3698:	00b54633          	xor	a2,a0,a1
    369c:	6cc6aa23          	sw	a2,1748(a3)

000036a0 <inst_456>:

inst_456:
// rs1_val==0 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33333334, 0x0, 0x33333334, x13, 1752, x1)
    36a0:	00000513          	li	a0,0
    36a4:	333335b7          	lui	a1,0x33333
    36a8:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    36ac:	00b54633          	xor	a2,a0,a1
    36b0:	6cc6ac23          	sw	a2,1752(a3)

000036b4 <inst_457>:

inst_457:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x0, 0x66666667, x13, 1756, x1)
    36b4:	00000513          	li	a0,0
    36b8:	666665b7          	lui	a1,0x66666
    36bc:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    36c0:	00b54633          	xor	a2,a0,a1
    36c4:	6cc6ae23          	sw	a2,1756(a3)

000036c8 <inst_458>:

inst_458:
// rs1_val==0 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffff4afd, 0x0, -0xb503, x13, 1760, x1)
    36c8:	00000513          	li	a0,0
    36cc:	ffff55b7          	lui	a1,0xffff5
    36d0:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    36d4:	00b54633          	xor	a2,a0,a1
    36d8:	6ec6a023          	sw	a2,1760(a3)

000036dc <inst_459>:

inst_459:
// rs1_val==0 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xb505, 0x0, 0xb505, x13, 1764, x1)
    36dc:	00000513          	li	a0,0
    36e0:	0000b5b7          	lui	a1,0xb
    36e4:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    36e8:	00b54633          	xor	a2,a0,a1
    36ec:	6ec6a223          	sw	a2,1764(a3)

000036f0 <inst_460>:

inst_460:
// rs1_val==4 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0x4, 0x3, x13, 1768, x1)
    36f0:	00400513          	li	a0,4
    36f4:	00300593          	li	a1,3
    36f8:	00b54633          	xor	a2,a0,a1
    36fc:	6ec6a423          	sw	a2,1768(a3)

00003700 <inst_461>:

inst_461:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x55555551, 0x4, 0x55555555, x13, 1772, x1)
    3700:	00400513          	li	a0,4
    3704:	555555b7          	lui	a1,0x55555
    3708:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    370c:	00b54633          	xor	a2,a0,a1
    3710:	6ec6a623          	sw	a2,1772(a3)

00003714 <inst_462>:

inst_462:
// rs1_val==4 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaae, 0x4, -0x55555556, x13, 1776, x1)
    3714:	00400513          	li	a0,4
    3718:	aaaab5b7          	lui	a1,0xaaaab
    371c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3720:	00b54633          	xor	a2,a0,a1
    3724:	6ec6a823          	sw	a2,1776(a3)

00003728 <inst_463>:

inst_463:
// rs1_val==4 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x4, 0x5, x13, 1780, x1)
    3728:	00400513          	li	a0,4
    372c:	00500593          	li	a1,5
    3730:	00b54633          	xor	a2,a0,a1
    3734:	6ec6aa23          	sw	a2,1780(a3)

00003738 <inst_464>:

inst_464:
// rs1_val==4 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33333337, 0x4, 0x33333333, x13, 1784, x1)
    3738:	00400513          	li	a0,4
    373c:	333335b7          	lui	a1,0x33333
    3740:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3744:	00b54633          	xor	a2,a0,a1
    3748:	6ec6ac23          	sw	a2,1784(a3)

0000374c <inst_465>:

inst_465:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x66666662, 0x4, 0x66666666, x13, 1788, x1)
    374c:	00400513          	li	a0,4
    3750:	666665b7          	lui	a1,0x66666
    3754:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3758:	00b54633          	xor	a2,a0,a1
    375c:	6ec6ae23          	sw	a2,1788(a3)

00003760 <inst_466>:

inst_466:
// rs1_val==4 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af8, 0x4, -0xb504, x13, 1792, x1)
    3760:	00400513          	li	a0,4
    3764:	ffff55b7          	lui	a1,0xffff5
    3768:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    376c:	00b54633          	xor	a2,a0,a1
    3770:	70c6a023          	sw	a2,1792(a3)

00003774 <inst_467>:

inst_467:
// rs1_val==4 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xb500, 0x4, 0xb504, x13, 1796, x1)
    3774:	00400513          	li	a0,4
    3778:	0000b5b7          	lui	a1,0xb
    377c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3780:	00b54633          	xor	a2,a0,a1
    3784:	70c6a223          	sw	a2,1796(a3)

00003788 <inst_468>:

inst_468:
// rs1_val==4 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x4, 0x2, x13, 1800, x1)
    3788:	00400513          	li	a0,4
    378c:	00200593          	li	a1,2
    3790:	00b54633          	xor	a2,a0,a1
    3794:	70c6a423          	sw	a2,1800(a3)

00003798 <inst_469>:

inst_469:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x55555550, 0x4, 0x55555554, x13, 1804, x1)
    3798:	00400513          	li	a0,4
    379c:	555555b7          	lui	a1,0x55555
    37a0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    37a4:	00b54633          	xor	a2,a0,a1
    37a8:	70c6a623          	sw	a2,1804(a3)

000037ac <inst_470>:

inst_470:
// rs1_val==4 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x4, 0x4, 0x0, x13, 1808, x1)
    37ac:	00400513          	li	a0,4
    37b0:	00000593          	li	a1,0
    37b4:	00b54633          	xor	a2,a0,a1
    37b8:	70c6a823          	sw	a2,1808(a3)

000037bc <inst_471>:

inst_471:
// rs1_val==4 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x4, 0x4, x13, 1812, x1)
    37bc:	00400513          	li	a0,4
    37c0:	00400593          	li	a1,4
    37c4:	00b54633          	xor	a2,a0,a1
    37c8:	70c6aa23          	sw	a2,1812(a3)

000037cc <inst_472>:

inst_472:
// rs1_val==4 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33333336, 0x4, 0x33333332, x13, 1816, x1)
    37cc:	00400513          	li	a0,4
    37d0:	333335b7          	lui	a1,0x33333
    37d4:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    37d8:	00b54633          	xor	a2,a0,a1
    37dc:	70c6ac23          	sw	a2,1816(a3)

000037e0 <inst_473>:

inst_473:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x66666661, 0x4, 0x66666665, x13, 1820, x1)
    37e0:	00400513          	li	a0,4
    37e4:	666665b7          	lui	a1,0x66666
    37e8:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    37ec:	00b54633          	xor	a2,a0,a1
    37f0:	70c6ae23          	sw	a2,1820(a3)

000037f4 <inst_474>:

inst_474:
// rs1_val==4 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xb507, 0x4, 0xb503, x13, 1824, x1)
    37f4:	00400513          	li	a0,4
    37f8:	0000b5b7          	lui	a1,0xb
    37fc:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3800:	00b54633          	xor	a2,a0,a1
    3804:	72c6a023          	sw	a2,1824(a3)

00003808 <inst_475>:

inst_475:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x55555552, 0x4, 0x55555556, x13, 1828, x1)
    3808:	00400513          	li	a0,4
    380c:	555555b7          	lui	a1,0x55555
    3810:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3814:	00b54633          	xor	a2,a0,a1
    3818:	72c6a223          	sw	a2,1828(a3)

0000381c <inst_476>:

inst_476:
// rs1_val==4 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaf, 0x4, -0x55555555, x13, 1832, x1)
    381c:	00400513          	li	a0,4
    3820:	aaaab5b7          	lui	a1,0xaaaab
    3824:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3828:	00b54633          	xor	a2,a0,a1
    382c:	72c6a423          	sw	a2,1832(a3)

00003830 <inst_477>:

inst_477:
// rs1_val==4 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x4, 0x6, x13, 1836, x1)
    3830:	00400513          	li	a0,4
    3834:	00600593          	li	a1,6
    3838:	00b54633          	xor	a2,a0,a1
    383c:	72c6a623          	sw	a2,1836(a3)

00003840 <inst_478>:

inst_478:
// rs1_val==4 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x4, 0x33333334, x13, 1840, x1)
    3840:	00400513          	li	a0,4
    3844:	333335b7          	lui	a1,0x33333
    3848:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    384c:	00b54633          	xor	a2,a0,a1
    3850:	72c6a823          	sw	a2,1840(a3)

00003854 <inst_479>:

inst_479:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x66666663, 0x4, 0x66666667, x13, 1844, x1)
    3854:	00400513          	li	a0,4
    3858:	666665b7          	lui	a1,0x66666
    385c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3860:	00b54633          	xor	a2,a0,a1
    3864:	72c6aa23          	sw	a2,1844(a3)

00003868 <inst_480>:

inst_480:
// rs1_val==4 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xffff4af9, 0x4, -0xb503, x13, 1848, x1)
    3868:	00400513          	li	a0,4
    386c:	ffff55b7          	lui	a1,0xffff5
    3870:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3874:	00b54633          	xor	a2,a0,a1
    3878:	72c6ac23          	sw	a2,1848(a3)

0000387c <inst_481>:

inst_481:
// rs1_val==4 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0xb501, 0x4, 0xb505, x13, 1852, x1)
    387c:	00400513          	li	a0,4
    3880:	0000b5b7          	lui	a1,0xb
    3884:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3888:	00b54633          	xor	a2,a0,a1
    388c:	72c6ae23          	sw	a2,1852(a3)

00003890 <inst_482>:

inst_482:
// rs1_val==858993458 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x33333332, 0x3, x13, 1856, x1)
    3890:	33333537          	lui	a0,0x33333
    3894:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3898:	00300593          	li	a1,3
    389c:	00b54633          	xor	a2,a0,a1
    38a0:	74c6a023          	sw	a2,1856(a3)

000038a4 <inst_483>:

inst_483:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x33333332, 0x55555555, x13, 1860, x1)
    38a4:	33333537          	lui	a0,0x33333
    38a8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38ac:	555555b7          	lui	a1,0x55555
    38b0:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    38b4:	00b54633          	xor	a2,a0,a1
    38b8:	74c6a223          	sw	a2,1860(a3)

000038bc <inst_484>:

inst_484:
// rs1_val==858993458 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x99999998, 0x33333332, -0x55555556, x13, 1864, x1)
    38bc:	33333537          	lui	a0,0x33333
    38c0:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38c4:	aaaab5b7          	lui	a1,0xaaaab
    38c8:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    38cc:	00b54633          	xor	a2,a0,a1
    38d0:	74c6a423          	sw	a2,1864(a3)

000038d4 <inst_485>:

inst_485:
// rs1_val==858993458 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x33333337, 0x33333332, 0x5, x13, 1868, x1)
    38d4:	33333537          	lui	a0,0x33333
    38d8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38dc:	00500593          	li	a1,5
    38e0:	00b54633          	xor	a2,a0,a1
    38e4:	74c6a623          	sw	a2,1868(a3)

000038e8 <inst_486>:

inst_486:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x1, 0x33333332, 0x33333333, x13, 1872, x1)
    38e8:	33333537          	lui	a0,0x33333
    38ec:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38f0:	333335b7          	lui	a1,0x33333
    38f4:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    38f8:	00b54633          	xor	a2,a0,a1
    38fc:	74c6a823          	sw	a2,1872(a3)

00003900 <inst_487>:

inst_487:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x33333332, 0x66666666, x13, 1876, x1)
    3900:	33333537          	lui	a0,0x33333
    3904:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3908:	666665b7          	lui	a1,0x66666
    390c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3910:	00b54633          	xor	a2,a0,a1
    3914:	74c6aa23          	sw	a2,1876(a3)

00003918 <inst_488>:

inst_488:
// rs1_val==858993458 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79ce, 0x33333332, -0xb504, x13, 1880, x1)
    3918:	33333537          	lui	a0,0x33333
    391c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3920:	ffff55b7          	lui	a1,0xffff5
    3924:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3928:	00b54633          	xor	a2,a0,a1
    392c:	74c6ac23          	sw	a2,1880(a3)

00003930 <inst_489>:

inst_489:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x33338636, 0x33333332, 0xb504, x13, 1884, x1)
    3930:	33333537          	lui	a0,0x33333
    3934:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3938:	0000b5b7          	lui	a1,0xb
    393c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3940:	00b54633          	xor	a2,a0,a1
    3944:	74c6ae23          	sw	a2,1884(a3)

00003948 <inst_490>:

inst_490:
// rs1_val==858993458 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x33333332, 0x2, x13, 1888, x1)
    3948:	33333537          	lui	a0,0x33333
    394c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3950:	00200593          	li	a1,2
    3954:	00b54633          	xor	a2,a0,a1
    3958:	76c6a023          	sw	a2,1888(a3)

0000395c <inst_491>:

inst_491:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x66666666, 0x33333332, 0x55555554, x13, 1892, x1)
    395c:	33333537          	lui	a0,0x33333
    3960:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3964:	555555b7          	lui	a1,0x55555
    3968:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    396c:	00b54633          	xor	a2,a0,a1
    3970:	76c6a223          	sw	a2,1892(a3)

00003974 <inst_492>:

inst_492:
// rs1_val==858993458 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x33333332, 0x33333332, 0x0, x13, 1896, x1)
    3974:	33333537          	lui	a0,0x33333
    3978:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    397c:	00000593          	li	a1,0
    3980:	00b54633          	xor	a2,a0,a1
    3984:	76c6a423          	sw	a2,1896(a3)

00003988 <inst_493>:

inst_493:
// rs1_val==858993458 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x33333336, 0x33333332, 0x4, x13, 1900, x1)
    3988:	33333537          	lui	a0,0x33333
    398c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3990:	00400593          	li	a1,4
    3994:	00b54633          	xor	a2,a0,a1
    3998:	76c6a623          	sw	a2,1900(a3)

0000399c <inst_494>:

inst_494:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x33333332, 0x33333332, x13, 1904, x1)
    399c:	33333537          	lui	a0,0x33333
    39a0:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39a4:	333335b7          	lui	a1,0x33333
    39a8:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    39ac:	00b54633          	xor	a2,a0,a1
    39b0:	76c6a823          	sw	a2,1904(a3)

000039b4 <inst_495>:

inst_495:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x55555557, 0x33333332, 0x66666665, x13, 1908, x1)
    39b4:	33333537          	lui	a0,0x33333
    39b8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39bc:	666665b7          	lui	a1,0x66666
    39c0:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    39c4:	00b54633          	xor	a2,a0,a1
    39c8:	76c6aa23          	sw	a2,1908(a3)

000039cc <inst_496>:

inst_496:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x33338631, 0x33333332, 0xb503, x13, 1912, x1)
    39cc:	33333537          	lui	a0,0x33333
    39d0:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39d4:	0000b5b7          	lui	a1,0xb
    39d8:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    39dc:	00b54633          	xor	a2,a0,a1
    39e0:	76c6ac23          	sw	a2,1912(a3)

000039e4 <inst_497>:

inst_497:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x66666664, 0x33333332, 0x55555556, x13, 1916, x1)
    39e4:	33333537          	lui	a0,0x33333
    39e8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39ec:	555555b7          	lui	a1,0x55555
    39f0:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    39f4:	00b54633          	xor	a2,a0,a1
    39f8:	76c6ae23          	sw	a2,1916(a3)

000039fc <inst_498>:

inst_498:
// rs1_val==858993458 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x99999999, 0x33333332, -0x55555555, x13, 1920, x1)
    39fc:	33333537          	lui	a0,0x33333
    3a00:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3a04:	aaaab5b7          	lui	a1,0xaaaab
    3a08:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3a0c:	00b54633          	xor	a2,a0,a1
    3a10:	78c6a023          	sw	a2,1920(a3)

00003a14 <inst_499>:

inst_499:
// rs1_val==858993458 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x33333334, 0x33333332, 0x6, x13, 1924, x1)
    3a14:	33333537          	lui	a0,0x33333
    3a18:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3a1c:	00600593          	li	a1,6
    3a20:	00b54633          	xor	a2,a0,a1
    3a24:	78c6a223          	sw	a2,1924(a3)

00003a28 <inst_500>:

inst_500:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0x33333332, 0x33333334, x13, 1928, x1)
    3a28:	33333537          	lui	a0,0x33333
    3a2c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3a30:	333335b7          	lui	a1,0x33333
    3a34:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3a38:	00b54633          	xor	a2,a0,a1
    3a3c:	78c6a423          	sw	a2,1928(a3)

00003a40 <inst_501>:

inst_501:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x33333332, 0x66666667, x13, 1932, x1)
    3a40:	33333537          	lui	a0,0x33333
    3a44:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3a48:	666665b7          	lui	a1,0x66666
    3a4c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3a50:	00b54633          	xor	a2,a0,a1
    3a54:	78c6a623          	sw	a2,1932(a3)

00003a58 <inst_502>:

inst_502:
// rs1_val==858993458 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xcccc79cf, 0x33333332, -0xb503, x13, 1936, x1)
    3a58:	33333537          	lui	a0,0x33333
    3a5c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3a60:	ffff55b7          	lui	a1,0xffff5
    3a64:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3a68:	00b54633          	xor	a2,a0,a1
    3a6c:	78c6a823          	sw	a2,1936(a3)

00003a70 <inst_503>:

inst_503:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x33338637, 0x33333332, 0xb505, x13, 1940, x1)
    3a70:	33333537          	lui	a0,0x33333
    3a74:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3a78:	0000b5b7          	lui	a1,0xb
    3a7c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3a80:	00b54633          	xor	a2,a0,a1
    3a84:	78c6aa23          	sw	a2,1940(a3)

00003a88 <inst_504>:

inst_504:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x66666665, 0x55555555, x13, 1944, x1)
    3a88:	66666537          	lui	a0,0x66666
    3a8c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3a90:	555555b7          	lui	a1,0x55555
    3a94:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3a98:	00b54633          	xor	a2,a0,a1
    3a9c:	78c6ac23          	sw	a2,1944(a3)

00003aa0 <inst_505>:

inst_505:
// rs1_val==1717986917 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccf, 0x66666665, -0x55555556, x13, 1948, x1)
    3aa0:	66666537          	lui	a0,0x66666
    3aa4:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3aa8:	aaaab5b7          	lui	a1,0xaaaab
    3aac:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3ab0:	00b54633          	xor	a2,a0,a1
    3ab4:	78c6ae23          	sw	a2,1948(a3)

00003ab8 <inst_506>:

inst_506:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x66666660, 0x66666665, 0x5, x13, 1952, x1)
    3ab8:	66666537          	lui	a0,0x66666
    3abc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3ac0:	00500593          	li	a1,5
    3ac4:	00b54633          	xor	a2,a0,a1
    3ac8:	7ac6a023          	sw	a2,1952(a3)

00003acc <inst_507>:

inst_507:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x66666665, 0x33333333, x13, 1956, x1)
    3acc:	66666537          	lui	a0,0x66666
    3ad0:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3ad4:	333335b7          	lui	a1,0x33333
    3ad8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3adc:	00b54633          	xor	a2,a0,a1
    3ae0:	7ac6a223          	sw	a2,1956(a3)

00003ae4 <inst_508>:

inst_508:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x66666665, 0x66666666, x13, 1960, x1)
    3ae4:	66666537          	lui	a0,0x66666
    3ae8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3aec:	666665b7          	lui	a1,0x66666
    3af0:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3af4:	00b54633          	xor	a2,a0,a1
    3af8:	7ac6a423          	sw	a2,1960(a3)

00003afc <inst_509>:

inst_509:
// rs1_val==1717986917 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x99992c99, 0x66666665, -0xb504, x13, 1964, x1)
    3afc:	66666537          	lui	a0,0x66666
    3b00:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b04:	ffff55b7          	lui	a1,0xffff5
    3b08:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3b0c:	00b54633          	xor	a2,a0,a1
    3b10:	7ac6a623          	sw	a2,1964(a3)

00003b14 <inst_510>:

inst_510:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x6666d361, 0x66666665, 0xb504, x13, 1968, x1)
    3b14:	66666537          	lui	a0,0x66666
    3b18:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b1c:	0000b5b7          	lui	a1,0xb
    3b20:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3b24:	00b54633          	xor	a2,a0,a1
    3b28:	7ac6a823          	sw	a2,1968(a3)

00003b2c <inst_511>:

inst_511:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x66666667, 0x66666665, 0x2, x13, 1972, x1)
    3b2c:	66666537          	lui	a0,0x66666
    3b30:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b34:	00200593          	li	a1,2
    3b38:	00b54633          	xor	a2,a0,a1
    3b3c:	7ac6aa23          	sw	a2,1972(a3)

00003b40 <inst_512>:

inst_512:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x66666665, 0x55555554, x13, 1976, x1)
    3b40:	66666537          	lui	a0,0x66666
    3b44:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b48:	555555b7          	lui	a1,0x55555
    3b4c:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3b50:	00b54633          	xor	a2,a0,a1
    3b54:	7ac6ac23          	sw	a2,1976(a3)

00003b58 <inst_513>:

inst_513:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x66666665, 0x0, x13, 1980, x1)
    3b58:	66666537          	lui	a0,0x66666
    3b5c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b60:	00000593          	li	a1,0
    3b64:	00b54633          	xor	a2,a0,a1
    3b68:	7ac6ae23          	sw	a2,1980(a3)

00003b6c <inst_514>:

inst_514:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x66666661, 0x66666665, 0x4, x13, 1984, x1)
    3b6c:	66666537          	lui	a0,0x66666
    3b70:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b74:	00400593          	li	a1,4
    3b78:	00b54633          	xor	a2,a0,a1
    3b7c:	7cc6a023          	sw	a2,1984(a3)

00003b80 <inst_515>:

inst_515:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x55555557, 0x66666665, 0x33333332, x13, 1988, x1)
    3b80:	66666537          	lui	a0,0x66666
    3b84:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b88:	333335b7          	lui	a1,0x33333
    3b8c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3b90:	00b54633          	xor	a2,a0,a1
    3b94:	7cc6a223          	sw	a2,1988(a3)

00003b98 <inst_516>:

inst_516:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x66666665, 0x66666665, x13, 1992, x1)
    3b98:	66666537          	lui	a0,0x66666
    3b9c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3ba0:	666665b7          	lui	a1,0x66666
    3ba4:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3ba8:	00b54633          	xor	a2,a0,a1
    3bac:	7cc6a423          	sw	a2,1992(a3)

00003bb0 <inst_517>:

inst_517:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x6666d366, 0x66666665, 0xb503, x13, 1996, x1)
    3bb0:	66666537          	lui	a0,0x66666
    3bb4:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3bb8:	0000b5b7          	lui	a1,0xb
    3bbc:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3bc0:	00b54633          	xor	a2,a0,a1
    3bc4:	7cc6a623          	sw	a2,1996(a3)

00003bc8 <inst_518>:

inst_518:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x66666665, 0x55555556, x13, 2000, x1)
    3bc8:	66666537          	lui	a0,0x66666
    3bcc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3bd0:	555555b7          	lui	a1,0x55555
    3bd4:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3bd8:	00b54633          	xor	a2,a0,a1
    3bdc:	7cc6a823          	sw	a2,2000(a3)

00003be0 <inst_519>:

inst_519:
// rs1_val==1717986917 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xccccccce, 0x66666665, -0x55555555, x13, 2004, x1)
    3be0:	66666537          	lui	a0,0x66666
    3be4:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3be8:	aaaab5b7          	lui	a1,0xaaaab
    3bec:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3bf0:	00b54633          	xor	a2,a0,a1
    3bf4:	7cc6aa23          	sw	a2,2004(a3)

00003bf8 <inst_520>:

inst_520:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x66666663, 0x66666665, 0x6, x13, 2008, x1)
    3bf8:	66666537          	lui	a0,0x66666
    3bfc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3c00:	00600593          	li	a1,6
    3c04:	00b54633          	xor	a2,a0,a1
    3c08:	7cc6ac23          	sw	a2,2008(a3)

00003c0c <inst_521>:

inst_521:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x55555551, 0x66666665, 0x33333334, x13, 2012, x1)
    3c0c:	66666537          	lui	a0,0x66666
    3c10:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3c14:	333335b7          	lui	a1,0x33333
    3c18:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3c1c:	00b54633          	xor	a2,a0,a1
    3c20:	7cc6ae23          	sw	a2,2012(a3)

00003c24 <inst_522>:

inst_522:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x66666665, 0x66666667, x13, 2016, x1)
    3c24:	66666537          	lui	a0,0x66666
    3c28:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3c2c:	666665b7          	lui	a1,0x66666
    3c30:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3c34:	00b54633          	xor	a2,a0,a1
    3c38:	7ec6a023          	sw	a2,2016(a3)

00003c3c <inst_523>:

inst_523:
// rs1_val==1717986917 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x99992c98, 0x66666665, -0xb503, x13, 2020, x1)
    3c3c:	66666537          	lui	a0,0x66666
    3c40:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3c44:	ffff55b7          	lui	a1,0xffff5
    3c48:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3c4c:	00b54633          	xor	a2,a0,a1
    3c50:	7ec6a223          	sw	a2,2020(a3)

00003c54 <inst_524>:

inst_524:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x6666d360, 0x66666665, 0xb505, x13, 2024, x1)
    3c54:	66666537          	lui	a0,0x66666
    3c58:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3c5c:	0000b5b7          	lui	a1,0xb
    3c60:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3c64:	00b54633          	xor	a2,a0,a1
    3c68:	7ec6a423          	sw	a2,2024(a3)

00003c6c <inst_525>:

inst_525:
// rs1_val==46339 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xb500, 0xb503, 0x3, x13, 2028, x1)
    3c6c:	0000b537          	lui	a0,0xb
    3c70:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c74:	00300593          	li	a1,3
    3c78:	00b54633          	xor	a2,a0,a1
    3c7c:	7ec6a623          	sw	a2,2028(a3)

00003c80 <inst_526>:

inst_526:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x5555e056, 0xb503, 0x55555555, x13, 2032, x1)
    3c80:	0000b537          	lui	a0,0xb
    3c84:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c88:	555555b7          	lui	a1,0x55555
    3c8c:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3c90:	00b54633          	xor	a2,a0,a1
    3c94:	7ec6a823          	sw	a2,2032(a3)

00003c98 <inst_527>:

inst_527:
// rs1_val==46339 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa9, 0xb503, -0x55555556, x13, 2036, x1)
    3c98:	0000b537          	lui	a0,0xb
    3c9c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3ca0:	aaaab5b7          	lui	a1,0xaaaab
    3ca4:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3ca8:	00b54633          	xor	a2,a0,a1
    3cac:	7ec6aa23          	sw	a2,2036(a3)

00003cb0 <inst_528>:

inst_528:
// rs1_val==46339 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xb506, 0xb503, 0x5, x13, 2040, x1)
    3cb0:	0000b537          	lui	a0,0xb
    3cb4:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3cb8:	00500593          	li	a1,5
    3cbc:	00b54633          	xor	a2,a0,a1
    3cc0:	7ec6ac23          	sw	a2,2040(a3)

00003cc4 <inst_529>:

inst_529:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x33338630, 0xb503, 0x33333333, x13, 2044, x1)
    3cc4:	0000b537          	lui	a0,0xb
    3cc8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3ccc:	333335b7          	lui	a1,0x33333
    3cd0:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3cd4:	00b54633          	xor	a2,a0,a1
    3cd8:	7ec6ae23          	sw	a2,2044(a3)
RVTEST_SIGBASE( x13,signature_x13_1)
    3cdc:	00002697          	auipc	a3,0x2
    3ce0:	b7c68693          	addi	a3,a3,-1156 # 5858 <signature_x13_1>

00003ce4 <inst_530>:

inst_530:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x6666d365, 0xb503, 0x66666666, x13, 0, x1)
    3ce4:	0000b537          	lui	a0,0xb
    3ce8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3cec:	666665b7          	lui	a1,0x66666
    3cf0:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3cf4:	00b54633          	xor	a2,a0,a1
    3cf8:	00c6a023          	sw	a2,0(a3)

00003cfc <inst_531>:

inst_531:
// rs1_val==46339 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, 0xb503, -0xb504, x13, 4, x1)
    3cfc:	0000b537          	lui	a0,0xb
    3d00:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d04:	ffff55b7          	lui	a1,0xffff5
    3d08:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3d0c:	00b54633          	xor	a2,a0,a1
    3d10:	00c6a223          	sw	a2,4(a3)

00003d14 <inst_532>:

inst_532:
// rs1_val==46339 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x7, 0xb503, 0xb504, x13, 8, x1)
    3d14:	0000b537          	lui	a0,0xb
    3d18:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d1c:	0000b5b7          	lui	a1,0xb
    3d20:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3d24:	00b54633          	xor	a2,a0,a1
    3d28:	00c6a423          	sw	a2,8(a3)

00003d2c <inst_533>:

inst_533:
// rs1_val==46339 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xb501, 0xb503, 0x2, x13, 12, x1)
    3d2c:	0000b537          	lui	a0,0xb
    3d30:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d34:	00200593          	li	a1,2
    3d38:	00b54633          	xor	a2,a0,a1
    3d3c:	00c6a623          	sw	a2,12(a3)

00003d40 <inst_534>:

inst_534:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x5555e057, 0xb503, 0x55555554, x13, 16, x1)
    3d40:	0000b537          	lui	a0,0xb
    3d44:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d48:	555555b7          	lui	a1,0x55555
    3d4c:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3d50:	00b54633          	xor	a2,a0,a1
    3d54:	00c6a823          	sw	a2,16(a3)

00003d58 <inst_535>:

inst_535:
// rs1_val==46339 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xb503, 0xb503, 0x0, x13, 20, x1)
    3d58:	0000b537          	lui	a0,0xb
    3d5c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d60:	00000593          	li	a1,0
    3d64:	00b54633          	xor	a2,a0,a1
    3d68:	00c6aa23          	sw	a2,20(a3)

00003d6c <inst_536>:

inst_536:
// rs1_val==46339 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xb507, 0xb503, 0x4, x13, 24, x1)
    3d6c:	0000b537          	lui	a0,0xb
    3d70:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d74:	00400593          	li	a1,4
    3d78:	00b54633          	xor	a2,a0,a1
    3d7c:	00c6ac23          	sw	a2,24(a3)

00003d80 <inst_537>:

inst_537:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x33338631, 0xb503, 0x33333332, x13, 28, x1)
    3d80:	0000b537          	lui	a0,0xb
    3d84:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d88:	333335b7          	lui	a1,0x33333
    3d8c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3d90:	00b54633          	xor	a2,a0,a1
    3d94:	00c6ae23          	sw	a2,28(a3)

00003d98 <inst_538>:

inst_538:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x6666d366, 0xb503, 0x66666665, x13, 32, x1)
    3d98:	0000b537          	lui	a0,0xb
    3d9c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3da0:	666665b7          	lui	a1,0x66666
    3da4:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3da8:	00b54633          	xor	a2,a0,a1
    3dac:	02c6a023          	sw	a2,32(a3)

00003db0 <inst_539>:

inst_539:
// rs1_val==46339 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0xb503, 0xb503, x13, 36, x1)
    3db0:	0000b537          	lui	a0,0xb
    3db4:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3db8:	0000b5b7          	lui	a1,0xb
    3dbc:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3dc0:	00b54633          	xor	a2,a0,a1
    3dc4:	02c6a223          	sw	a2,36(a3)

00003dc8 <inst_540>:

inst_540:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x5555e055, 0xb503, 0x55555556, x13, 40, x1)
    3dc8:	0000b537          	lui	a0,0xb
    3dcc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3dd0:	555555b7          	lui	a1,0x55555
    3dd4:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3dd8:	00b54633          	xor	a2,a0,a1
    3ddc:	02c6a423          	sw	a2,40(a3)

00003de0 <inst_541>:

inst_541:
// rs1_val==46339 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa8, 0xb503, -0x55555555, x13, 44, x1)
    3de0:	0000b537          	lui	a0,0xb
    3de4:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3de8:	aaaab5b7          	lui	a1,0xaaaab
    3dec:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3df0:	00b54633          	xor	a2,a0,a1
    3df4:	02c6a623          	sw	a2,44(a3)

00003df8 <inst_542>:

inst_542:
// rs1_val==46339 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0xb505, 0xb503, 0x6, x13, 48, x1)
    3df8:	0000b537          	lui	a0,0xb
    3dfc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3e00:	00600593          	li	a1,6
    3e04:	00b54633          	xor	a2,a0,a1
    3e08:	02c6a823          	sw	a2,48(a3)

00003e0c <inst_543>:

inst_543:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x33338637, 0xb503, 0x33333334, x13, 52, x1)
    3e0c:	0000b537          	lui	a0,0xb
    3e10:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3e14:	333335b7          	lui	a1,0x33333
    3e18:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3e1c:	00b54633          	xor	a2,a0,a1
    3e20:	02c6aa23          	sw	a2,52(a3)

00003e24 <inst_544>:

inst_544:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x6666d364, 0xb503, 0x66666667, x13, 56, x1)
    3e24:	0000b537          	lui	a0,0xb
    3e28:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3e2c:	666665b7          	lui	a1,0x66666
    3e30:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3e34:	00b54633          	xor	a2,a0,a1
    3e38:	02c6ac23          	sw	a2,56(a3)

00003e3c <inst_545>:

inst_545:
// rs1_val==46339 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffe, 0xb503, -0xb503, x13, 60, x1)
    3e3c:	0000b537          	lui	a0,0xb
    3e40:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3e44:	ffff55b7          	lui	a1,0xffff5
    3e48:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3e4c:	00b54633          	xor	a2,a0,a1
    3e50:	02c6ae23          	sw	a2,60(a3)

00003e54 <inst_546>:

inst_546:
// rs1_val==46339 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x6, 0xb503, 0xb505, x13, 64, x1)
    3e54:	0000b537          	lui	a0,0xb
    3e58:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3e5c:	0000b5b7          	lui	a1,0xb
    3e60:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3e64:	00b54633          	xor	a2,a0,a1
    3e68:	04c6a023          	sw	a2,64(a3)

00003e6c <inst_547>:

inst_547:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0x55555555, 0x55555556, 0x3, x13, 68, x1)
    3e6c:	55555537          	lui	a0,0x55555
    3e70:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e74:	00300593          	li	a1,3
    3e78:	00b54633          	xor	a2,a0,a1
    3e7c:	04c6a223          	sw	a2,68(a3)

00003e80 <inst_548>:

inst_548:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0x3, 0x55555556, 0x55555555, x13, 72, x1)
    3e80:	55555537          	lui	a0,0x55555
    3e84:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e88:	555555b7          	lui	a1,0x55555
    3e8c:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3e90:	00b54633          	xor	a2,a0,a1
    3e94:	04c6a423          	sw	a2,72(a3)

00003e98 <inst_549>:

inst_549:
// rs1_val==1431655766 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffc, 0x55555556, -0x55555556, x13, 76, x1)
    3e98:	55555537          	lui	a0,0x55555
    3e9c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3ea0:	aaaab5b7          	lui	a1,0xaaaab
    3ea4:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3ea8:	00b54633          	xor	a2,a0,a1
    3eac:	04c6a623          	sw	a2,76(a3)

00003eb0 <inst_550>:

inst_550:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0x55555553, 0x55555556, 0x5, x13, 80, x1)
    3eb0:	55555537          	lui	a0,0x55555
    3eb4:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3eb8:	00500593          	li	a1,5
    3ebc:	00b54633          	xor	a2,a0,a1
    3ec0:	04c6a823          	sw	a2,80(a3)

00003ec4 <inst_551>:

inst_551:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x66666665, 0x55555556, 0x33333333, x13, 84, x1)
    3ec4:	55555537          	lui	a0,0x55555
    3ec8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3ecc:	333335b7          	lui	a1,0x33333
    3ed0:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3ed4:	00b54633          	xor	a2,a0,a1
    3ed8:	04c6aa23          	sw	a2,84(a3)

00003edc <inst_552>:

inst_552:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0x33333330, 0x55555556, 0x66666666, x13, 88, x1)
    3edc:	55555537          	lui	a0,0x55555
    3ee0:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3ee4:	666665b7          	lui	a1,0x66666
    3ee8:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3eec:	00b54633          	xor	a2,a0,a1
    3ef0:	04c6ac23          	sw	a2,88(a3)

00003ef4 <inst_553>:

inst_553:
// rs1_val==1431655766 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1faa, 0x55555556, -0xb504, x13, 92, x1)
    3ef4:	55555537          	lui	a0,0x55555
    3ef8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3efc:	ffff55b7          	lui	a1,0xffff5
    3f00:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3f04:	00b54633          	xor	a2,a0,a1
    3f08:	04c6ae23          	sw	a2,92(a3)

00003f0c <inst_554>:

inst_554:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x5555e052, 0x55555556, 0xb504, x13, 96, x1)
    3f0c:	55555537          	lui	a0,0x55555
    3f10:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f14:	0000b5b7          	lui	a1,0xb
    3f18:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3f1c:	00b54633          	xor	a2,a0,a1
    3f20:	06c6a023          	sw	a2,96(a3)

00003f24 <inst_555>:

inst_555:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0x55555554, 0x55555556, 0x2, x13, 100, x1)
    3f24:	55555537          	lui	a0,0x55555
    3f28:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f2c:	00200593          	li	a1,2
    3f30:	00b54633          	xor	a2,a0,a1
    3f34:	06c6a223          	sw	a2,100(a3)

00003f38 <inst_556>:

inst_556:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0x2, 0x55555556, 0x55555554, x13, 104, x1)
    3f38:	55555537          	lui	a0,0x55555
    3f3c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f40:	555555b7          	lui	a1,0x55555
    3f44:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3f48:	00b54633          	xor	a2,a0,a1
    3f4c:	06c6a423          	sw	a2,104(a3)

00003f50 <inst_557>:

inst_557:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0x55555556, 0x55555556, 0x0, x13, 108, x1)
    3f50:	55555537          	lui	a0,0x55555
    3f54:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f58:	00000593          	li	a1,0
    3f5c:	00b54633          	xor	a2,a0,a1
    3f60:	06c6a623          	sw	a2,108(a3)

00003f64 <inst_558>:

inst_558:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0x55555552, 0x55555556, 0x4, x13, 112, x1)
    3f64:	55555537          	lui	a0,0x55555
    3f68:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f6c:	00400593          	li	a1,4
    3f70:	00b54633          	xor	a2,a0,a1
    3f74:	06c6a823          	sw	a2,112(a3)

00003f78 <inst_559>:

inst_559:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x66666664, 0x55555556, 0x33333332, x13, 116, x1)
    3f78:	55555537          	lui	a0,0x55555
    3f7c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f80:	333335b7          	lui	a1,0x33333
    3f84:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3f88:	00b54633          	xor	a2,a0,a1
    3f8c:	06c6aa23          	sw	a2,116(a3)

00003f90 <inst_560>:

inst_560:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0x33333333, 0x55555556, 0x66666665, x13, 120, x1)
    3f90:	55555537          	lui	a0,0x55555
    3f94:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f98:	666665b7          	lui	a1,0x66666
    3f9c:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3fa0:	00b54633          	xor	a2,a0,a1
    3fa4:	06c6ac23          	sw	a2,120(a3)

00003fa8 <inst_561>:

inst_561:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0x5555e055, 0x55555556, 0xb503, x13, 124, x1)
    3fa8:	55555537          	lui	a0,0x55555
    3fac:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3fb0:	0000b5b7          	lui	a1,0xb
    3fb4:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3fb8:	00b54633          	xor	a2,a0,a1
    3fbc:	06c6ae23          	sw	a2,124(a3)

00003fc0 <inst_562>:

inst_562:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x0, 0x55555556, 0x55555556, x13, 128, x1)
    3fc0:	55555537          	lui	a0,0x55555
    3fc4:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3fc8:	555555b7          	lui	a1,0x55555
    3fcc:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3fd0:	00b54633          	xor	a2,a0,a1
    3fd4:	08c6a023          	sw	a2,128(a3)

00003fd8 <inst_563>:

inst_563:
// rs1_val==1431655766 and rs2_val==-1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffd, 0x55555556, -0x55555555, x13, 132, x1)
    3fd8:	55555537          	lui	a0,0x55555
    3fdc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3fe0:	aaaab5b7          	lui	a1,0xaaaab
    3fe4:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3fe8:	00b54633          	xor	a2,a0,a1
    3fec:	08c6a223          	sw	a2,132(a3)

00003ff0 <inst_564>:

inst_564:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x6
TEST_RR_OP(xor, x12, x10, x11, 0x55555550, 0x55555556, 0x6, x13, 136, x1)
    3ff0:	55555537          	lui	a0,0x55555
    3ff4:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3ff8:	00600593          	li	a1,6
    3ffc:	00b54633          	xor	a2,a0,a1
    4000:	08c6a423          	sw	a2,136(a3)

00004004 <inst_565>:

inst_565:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(xor, x12, x10, x11, 0x66666662, 0x55555556, 0x33333334, x13, 140, x1)
    4004:	55555537          	lui	a0,0x55555
    4008:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    400c:	333335b7          	lui	a1,0x33333
    4010:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    4014:	00b54633          	xor	a2,a0,a1
    4018:	08c6a623          	sw	a2,140(a3)

0000401c <inst_566>:

inst_566:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(xor, x12, x10, x11, 0x33333331, 0x55555556, 0x66666667, x13, 144, x1)
    401c:	55555537          	lui	a0,0x55555
    4020:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    4024:	666665b7          	lui	a1,0x66666
    4028:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    402c:	00b54633          	xor	a2,a0,a1
    4030:	08c6a823          	sw	a2,144(a3)

00004034 <inst_567>:

inst_567:
// rs1_val==1431655766 and rs2_val==-46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fab, 0x55555556, -0xb503, x13, 148, x1)
    4034:	55555537          	lui	a0,0x55555
    4038:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    403c:	ffff55b7          	lui	a1,0xffff5
    4040:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    4044:	00b54633          	xor	a2,a0,a1
    4048:	08c6aa23          	sw	a2,148(a3)

0000404c <inst_568>:

inst_568:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb505
TEST_RR_OP(xor, x12, x10, x11, 0x5555e053, 0x55555556, 0xb505, x13, 152, x1)
    404c:	55555537          	lui	a0,0x55555
    4050:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    4054:	0000b5b7          	lui	a1,0xb
    4058:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    405c:	00b54633          	xor	a2,a0,a1
    4060:	08c6ac23          	sw	a2,152(a3)

00004064 <inst_569>:

inst_569:
// rs1_val==-1431655765 and rs2_val==3, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x3
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa8, -0x55555555, 0x3, x13, 156, x1)
    4064:	aaaab537          	lui	a0,0xaaaab
    4068:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    406c:	00300593          	li	a1,3
    4070:	00b54633          	xor	a2,a0,a1
    4074:	08c6ae23          	sw	a2,156(a3)

00004078 <inst_570>:

inst_570:
// rs1_val==-1431655765 and rs2_val==1431655765, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555555
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffe, -0x55555555, 0x55555555, x13, 160, x1)
    4078:	aaaab537          	lui	a0,0xaaaab
    407c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4080:	555555b7          	lui	a1,0x55555
    4084:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    4088:	00b54633          	xor	a2,a0,a1
    408c:	0ac6a023          	sw	a2,160(a3)

00004090 <inst_571>:

inst_571:
// rs1_val==-1431655765 and rs2_val==-1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0x1, -0x55555555, -0x55555556, x13, 164, x1)
    4090:	aaaab537          	lui	a0,0xaaaab
    4094:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4098:	aaaab5b7          	lui	a1,0xaaaab
    409c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    40a0:	00b54633          	xor	a2,a0,a1
    40a4:	0ac6a223          	sw	a2,164(a3)

000040a8 <inst_572>:

inst_572:
// rs1_val==-1431655765 and rs2_val==5, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x5
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaae, -0x55555555, 0x5, x13, 168, x1)
    40a8:	aaaab537          	lui	a0,0xaaaab
    40ac:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40b0:	00500593          	li	a1,5
    40b4:	00b54633          	xor	a2,a0,a1
    40b8:	0ac6a423          	sw	a2,168(a3)

000040bc <inst_573>:

inst_573:
// rs1_val==-1431655765 and rs2_val==858993459, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333333
TEST_RR_OP(xor, x12, x10, x11, 0x99999998, -0x55555555, 0x33333333, x13, 172, x1)
    40bc:	aaaab537          	lui	a0,0xaaaab
    40c0:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40c4:	333335b7          	lui	a1,0x33333
    40c8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    40cc:	00b54633          	xor	a2,a0,a1
    40d0:	0ac6a623          	sw	a2,172(a3)

000040d4 <inst_574>:

inst_574:
// rs1_val==-1431655765 and rs2_val==1717986918, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666666
TEST_RR_OP(xor, x12, x10, x11, 0xcccccccd, -0x55555555, 0x66666666, x13, 176, x1)
    40d4:	aaaab537          	lui	a0,0xaaaab
    40d8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40dc:	666665b7          	lui	a1,0x66666
    40e0:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    40e4:	00b54633          	xor	a2,a0,a1
    40e8:	0ac6a823          	sw	a2,176(a3)

000040ec <inst_575>:

inst_575:
// rs1_val==-1431655765 and rs2_val==-46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0xb504
TEST_RR_OP(xor, x12, x10, x11, 0x5555e057, -0x55555555, -0xb504, x13, 180, x1)
    40ec:	aaaab537          	lui	a0,0xaaaab
    40f0:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40f4:	ffff55b7          	lui	a1,0xffff5
    40f8:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    40fc:	00b54633          	xor	a2,a0,a1
    4100:	0ac6aa23          	sw	a2,180(a3)

00004104 <inst_576>:

inst_576:
// rs1_val==-1431655765 and rs2_val==46340, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb504
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1faf, -0x55555555, 0xb504, x13, 184, x1)
    4104:	aaaab537          	lui	a0,0xaaaab
    4108:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    410c:	0000b5b7          	lui	a1,0xb
    4110:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    4114:	00b54633          	xor	a2,a0,a1
    4118:	0ac6ac23          	sw	a2,184(a3)

0000411c <inst_577>:

inst_577:
// rs1_val==-1431655765 and rs2_val==2, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x2
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaa9, -0x55555555, 0x2, x13, 188, x1)
    411c:	aaaab537          	lui	a0,0xaaaab
    4120:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4124:	00200593          	li	a1,2
    4128:	00b54633          	xor	a2,a0,a1
    412c:	0ac6ae23          	sw	a2,188(a3)

00004130 <inst_578>:

inst_578:
// rs1_val==-1431655765 and rs2_val==1431655764, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555554
TEST_RR_OP(xor, x12, x10, x11, 0xffffffff, -0x55555555, 0x55555554, x13, 192, x1)
    4130:	aaaab537          	lui	a0,0xaaaab
    4134:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4138:	555555b7          	lui	a1,0x55555
    413c:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    4140:	00b54633          	xor	a2,a0,a1
    4144:	0cc6a023          	sw	a2,192(a3)

00004148 <inst_579>:

inst_579:
// rs1_val==-1431655765 and rs2_val==0, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x0
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaab, -0x55555555, 0x0, x13, 196, x1)
    4148:	aaaab537          	lui	a0,0xaaaab
    414c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4150:	00000593          	li	a1,0
    4154:	00b54633          	xor	a2,a0,a1
    4158:	0cc6a223          	sw	a2,196(a3)

0000415c <inst_580>:

inst_580:
// rs1_val==-1431655765 and rs2_val==4, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x4
TEST_RR_OP(xor, x12, x10, x11, 0xaaaaaaaf, -0x55555555, 0x4, x13, 200, x1)
    415c:	aaaab537          	lui	a0,0xaaaab
    4160:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4164:	00400593          	li	a1,4
    4168:	00b54633          	xor	a2,a0,a1
    416c:	0cc6a423          	sw	a2,200(a3)

00004170 <inst_581>:

inst_581:
// rs1_val==-1431655765 and rs2_val==858993458, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333332
TEST_RR_OP(xor, x12, x10, x11, 0x99999999, -0x55555555, 0x33333332, x13, 204, x1)
    4170:	aaaab537          	lui	a0,0xaaaab
    4174:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4178:	333335b7          	lui	a1,0x33333
    417c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    4180:	00b54633          	xor	a2,a0,a1
    4184:	0cc6a623          	sw	a2,204(a3)

00004188 <inst_582>:

inst_582:
// rs1_val==-1431655765 and rs2_val==1717986917, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666665
TEST_RR_OP(xor, x12, x10, x11, 0xccccccce, -0x55555555, 0x66666665, x13, 208, x1)
    4188:	aaaab537          	lui	a0,0xaaaab
    418c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4190:	666665b7          	lui	a1,0x66666
    4194:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    4198:	00b54633          	xor	a2,a0,a1
    419c:	0cc6a823          	sw	a2,208(a3)

000041a0 <inst_583>:

inst_583:
// rs1_val==-1431655765 and rs2_val==46339, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb503
TEST_RR_OP(xor, x12, x10, x11, 0xaaaa1fa8, -0x55555555, 0xb503, x13, 212, x1)
    41a0:	aaaab537          	lui	a0,0xaaaab
    41a4:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    41a8:	0000b5b7          	lui	a1,0xb
    41ac:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    41b0:	00b54633          	xor	a2,a0,a1
    41b4:	0cc6aa23          	sw	a2,212(a3)

000041b8 <inst_584>:

inst_584:
// rs1_val==-1431655765 and rs2_val==1431655766, 
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555556
TEST_RR_OP(xor, x12, x10, x11, 0xfffffffd, -0x55555555, 0x55555556, x13, 216, x1)
    41b8:	aaaab537          	lui	a0,0xaaaab
    41bc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    41c0:	555555b7          	lui	a1,0x55555
    41c4:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    41c8:	00b54633          	xor	a2,a0,a1
    41cc:	0cc6ac23          	sw	a2,216(a3)

000041d0 <inst_585>:

inst_585:
// rs1_val < 0 and rs2_val < 0, rs1_val == -16385, rs2_val == -65537
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:-0x4001;  op2val:-0x10001
TEST_RR_OP(xor, x12, x10, x11, 0x14000, -0x4001, -0x10001, x13, 220, x1)
    41d0:	ffffc537          	lui	a0,0xffffc
    41d4:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff5ffb>
    41d8:	ffff05b7          	lui	a1,0xffff0
    41dc:	fff58593          	addi	a1,a1,-1 # fffeffff <_end+0xfffe9ffb>
    41e0:	00b54633          	xor	a2,a0,a1
    41e4:	0cc6ae23          	sw	a2,220(a3)

000041e8 <inst_586>:

inst_586:
// rs1_val == (2**(xlen-1)-1), rs2_val == 4096, rs1_val == 2147483647
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x7fffffff;  op2val:0x1000
TEST_RR_OP(xor, x12, x10, x11, 0x7fffefff, 0x7fffffff, 0x1000, x13, 224, x1)
    41e8:	80000537          	lui	a0,0x80000
    41ec:	fff50513          	addi	a0,a0,-1 # 7fffffff <_end+0x7fff9ffb>
    41f0:	000015b7          	lui	a1,0x1
    41f4:	00b54633          	xor	a2,a0,a1
    41f8:	0ec6a023          	sw	a2,224(a3)

000041fc <inst_587>:

inst_587:
// rs2_val == 1024, rs1_val == 128
// opcode: xor ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:0x400
TEST_RR_OP(xor, x12, x10, x11, 0x480, 0x80, 0x400, x13, 228, x1)
    41fc:	08000513          	li	a0,128
    4200:	40000593          	li	a1,1024
    4204:	00b54633          	xor	a2,a0,a1
    4208:	0ec6a223          	sw	a2,228(a3)
    420c:	00000013          	nop

00004210 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    4210:	babed0b7          	lui	ra,0xbabed
    4214:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe6afa>

00004218 <write_tohost>:
    4218:	00002017          	auipc	zero,0x2
    421c:	de102423          	sw	ra,-536(zero) # fffffde8 <_end+0xffff9de4>

00004220 <loop>:
    4220:	0000006f          	j	4220 <loop>
	...
