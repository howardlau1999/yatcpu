
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed5ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff767f52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb0fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd57d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00004317          	auipc	t1,0x4
    102c:	fd830313          	addi	t1,t1,-40 # 5000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb56f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfd7b79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfe8dba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff16db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f5b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bf7db3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadf8ed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56f9769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab79bb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5b9dd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbead9ee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf569f72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab1fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d55fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbea7fea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df50ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa57f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7cfbf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe4dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76def6fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f4b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb775bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedb8adb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76d956b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb69ab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",and)

RVTEST_SIGBASE( x6,signature_x6_1)
    10f8:	00004317          	auipc	t1,0x4
    10fc:	f1830313          	addi	t1,t1,-232 # 5010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs2 == rd != rs1, rs1==x24, rs2==x25, rd==x25, rs1_val > 0 and rs2_val > 0, rs1_val == 16384, rs1_val != rs2_val
// opcode: and ; op1:x24; op2:x25; dest:x25; op1val:0x4000;  op2val:0x7
TEST_RR_OP(and, x25, x24, x25, 0x0, 0x4000, 0x7, x6, 0, x8)
    1100:	00004c37          	lui	s8,0x4
    1104:	00700c93          	li	s9,7
    1108:	019c7cb3          	and	s9,s8,s9
    110c:	01932023          	sw	s9,0(t1)

00001110 <inst_1>:

inst_1:
// rs1 == rs2 != rd, rs1==x3, rs2==x3, rd==x18, rs1_val > 0 and rs2_val < 0, rs1_val == 2048, rs2_val == -1048577
// opcode: and ; op1:x3; op2:x3; dest:x18; op1val:0x800;  op2val:0x800
TEST_RR_OP(and, x18, x3, x3, 0x800, 0x800, 0x800, x6, 4, x8)
    1110:	000011b7          	lui	gp,0x1
    1114:	80018193          	addi	gp,gp,-2048 # 800 <offset+0x72c>
    1118:	000011b7          	lui	gp,0x1
    111c:	80018193          	addi	gp,gp,-2048 # 800 <offset+0x72c>
    1120:	0031f933          	and	s2,gp,gp
    1124:	01232223          	sw	s2,4(t1)

00001128 <inst_2>:

inst_2:
// rs1 == rs2 == rd, rs1==x19, rs2==x19, rd==x19, rs1_val < 0 and rs2_val < 0, rs1_val == -3
// opcode: and ; op1:x19; op2:x19; dest:x19; op1val:-0x3;  op2val:-0x3
TEST_RR_OP(and, x19, x19, x19, 0xfffffffd, -0x3, -0x3, x6, 8, x8)
    1128:	ffd00993          	li	s3,-3
    112c:	ffd00993          	li	s3,-3
    1130:	0139f9b3          	and	s3,s3,s3
    1134:	01332423          	sw	s3,8(t1)

00001138 <inst_3>:

inst_3:
// rs1 == rd != rs2, rs1==x5, rs2==x14, rd==x5, rs1_val < 0 and rs2_val > 0, rs2_val == (2**(xlen-1)-1), rs2_val == 2147483647
// opcode: and ; op1:x5; op2:x14; dest:x5; op1val:-0x1;  op2val:0x7fffffff
TEST_RR_OP(and, x5, x5, x14, 0x7fffffff, -0x1, 0x7fffffff, x6, 12, x8)
    1138:	fff00293          	li	t0,-1
    113c:	80000737          	lui	a4,0x80000
    1140:	fff70713          	addi	a4,a4,-1 # 7fffffff <_end+0x7fff9ffb>
    1144:	00e2f2b3          	and	t0,t0,a4
    1148:	00532623          	sw	t0,12(t1)

0000114c <inst_4>:

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x23, rs2==x16, rd==x20, rs1_val == rs2_val, rs1_val==5 and rs2_val==5
// opcode: and ; op1:x23; op2:x16; dest:x20; op1val:0x5;  op2val:0x5
TEST_RR_OP(and, x20, x23, x16, 0x5, 0x5, 0x5, x6, 16, x8)
    114c:	00500b93          	li	s7,5
    1150:	00500813          	li	a6,5
    1154:	010bfa33          	and	s4,s7,a6
    1158:	01432823          	sw	s4,16(t1)

0000115c <inst_5>:

inst_5:
// rs1==x20, rs2==x2, rd==x30, rs2_val == (-2**(xlen-1)), rs2_val == -2147483648, rs1_val == 2
// opcode: and ; op1:x20; op2:x2; dest:x30; op1val:0x2;  op2val:-0x80000000
TEST_RR_OP(and, x30, x20, x2, 0x0, 0x2, -0x80000000, x6, 20, x8)
    115c:	00200a13          	li	s4,2
    1160:	80000137          	lui	sp,0x80000
    1164:	002a7f33          	and	t5,s4,sp
    1168:	01e32a23          	sw	t5,20(t1)

0000116c <inst_6>:

inst_6:
// rs1==x7, rs2==x24, rd==x13, rs2_val == 0, rs1_val==858993459 and rs2_val==0
// opcode: and ; op1:x7; op2:x24; dest:x13; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(and, x13, x7, x24, 0x0, 0x33333333, 0x0, x6, 24, x8)
    116c:	333333b7          	lui	t2,0x33333
    1170:	33338393          	addi	t2,t2,819 # 33333333 <_end+0x3332d32f>
    1174:	00000c13          	li	s8,0
    1178:	0183f6b3          	and	a3,t2,s8
    117c:	00d32c23          	sw	a3,24(t1)

00001180 <inst_7>:

inst_7:
// rs1==x30, rs2==x27, rd==x10, rs2_val == 1, rs1_val == -1073741825
// opcode: and ; op1:x30; op2:x27; dest:x10; op1val:-0x40000001;  op2val:0x1
TEST_RR_OP(and, x10, x30, x27, 0x1, -0x40000001, 0x1, x6, 28, x8)
    1180:	c0000f37          	lui	t5,0xc0000
    1184:	ffff0f13          	addi	t5,t5,-1 # bfffffff <_end+0xbfff9ffb>
    1188:	00100d93          	li	s11,1
    118c:	01bf7533          	and	a0,t5,s11
    1190:	00a32e23          	sw	a0,28(t1)

00001194 <inst_8>:

inst_8:
// rs1==x28, rs2==x18, rd==x22, rs1_val == (-2**(xlen-1)), rs2_val == 2048, rs1_val == -2147483648
// opcode: and ; op1:x28; op2:x18; dest:x22; op1val:-0x80000000;  op2val:0x800
TEST_RR_OP(and, x22, x28, x18, 0x0, -0x80000000, 0x800, x6, 32, x8)
    1194:	80000e37          	lui	t3,0x80000
    1198:	00001937          	lui	s2,0x1
    119c:	80090913          	addi	s2,s2,-2048 # 800 <offset+0x72c>
    11a0:	012e7b33          	and	s6,t3,s2
    11a4:	03632023          	sw	s6,32(t1)

000011a8 <inst_9>:

inst_9:
// rs1==x2, rs2==x15, rd==x0, rs1_val == 0, rs2_val == 512
// opcode: and ; op1:x2; op2:x15; dest:x0; op1val:0x0;  op2val:0x200
TEST_RR_OP(and, x0, x2, x15, 0, 0x0, 0x200, x6, 36, x8)
    11a8:	00000113          	li	sp,0
    11ac:	20000793          	li	a5,512
    11b0:	00f17033          	and	zero,sp,a5
    11b4:	02032223          	sw	zero,36(t1)

000011b8 <inst_10>:

inst_10:
// rs1==x25, rs2==x26, rd==x12, rs1_val == (2**(xlen-1)-1), rs2_val == 1431655765, rs1_val == 2147483647
// opcode: and ; op1:x25; op2:x26; dest:x12; op1val:0x7fffffff;  op2val:0x55555555
TEST_RR_OP(and, x12, x25, x26, 0x55555555, 0x7fffffff, 0x55555555, x6, 40, x8)
    11b8:	80000cb7          	lui	s9,0x80000
    11bc:	fffc8c93          	addi	s9,s9,-1 # 7fffffff <_end+0x7fff9ffb>
    11c0:	55555d37          	lui	s10,0x55555
    11c4:	555d0d13          	addi	s10,s10,1365 # 55555555 <_end+0x5554f551>
    11c8:	01acf633          	and	a2,s9,s10
    11cc:	02c32423          	sw	a2,40(t1)

000011d0 <inst_11>:

inst_11:
// rs1==x1, rs2==x31, rd==x2, rs1_val == 1, 
// opcode: and ; op1:x1; op2:x31; dest:x2; op1val:0x1;  op2val:0x55555554
TEST_RR_OP(and, x2, x1, x31, 0x0, 0x1, 0x55555554, x6, 44, x8)
    11d0:	00100093          	li	ra,1
    11d4:	55555fb7          	lui	t6,0x55555
    11d8:	554f8f93          	addi	t6,t6,1364 # 55555554 <_end+0x5554f550>
    11dc:	01f0f133          	and	sp,ra,t6
    11e0:	02232623          	sw	sp,44(t1)

000011e4 <inst_12>:

inst_12:
// rs1==x27, rs2==x11, rd==x14, rs2_val == 2, rs1_val == 262144
// opcode: and ; op1:x27; op2:x11; dest:x14; op1val:0x40000;  op2val:0x2
TEST_RR_OP(and, x14, x27, x11, 0x0, 0x40000, 0x2, x6, 48, x8)
    11e4:	00040db7          	lui	s11,0x40
    11e8:	00200593          	li	a1,2
    11ec:	00bdf733          	and	a4,s11,a1
    11f0:	02e32823          	sw	a4,48(t1)

000011f4 <inst_13>:

inst_13:
// rs1==x31, rs2==x23, rd==x4, rs2_val == 4, rs1_val == -131073
// opcode: and ; op1:x31; op2:x23; dest:x4; op1val:-0x20001;  op2val:0x4
TEST_RR_OP(and, x4, x31, x23, 0x4, -0x20001, 0x4, x6, 52, x8)
    11f4:	fffe0fb7          	lui	t6,0xfffe0
    11f8:	ffff8f93          	addi	t6,t6,-1 # fffdffff <_end+0xfffd9ffb>
    11fc:	00400b93          	li	s7,4
    1200:	017ff233          	and	tp,t6,s7
    1204:	02432a23          	sw	tp,52(t1)

00001208 <inst_14>:

inst_14:
// rs1==x21, rs2==x9, rd==x27, rs2_val == 8, 
// opcode: and ; op1:x21; op2:x9; dest:x27; op1val:-0x55555555;  op2val:0x8
TEST_RR_OP(and, x27, x21, x9, 0x8, -0x55555555, 0x8, x6, 56, x8)
    1208:	aaaabab7          	lui	s5,0xaaaab
    120c:	aaba8a93          	addi	s5,s5,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1210:	00800493          	li	s1,8
    1214:	009afdb3          	and	s11,s5,s1
    1218:	03b32c23          	sw	s11,56(t1)

0000121c <inst_15>:

inst_15:
// rs1==x26, rs2==x7, rd==x23, rs2_val == 16, rs1_val == 1024
// opcode: and ; op1:x26; op2:x7; dest:x23; op1val:0x400;  op2val:0x10
TEST_RR_OP(and, x23, x26, x7, 0x0, 0x400, 0x10, x6, 60, x19)
    121c:	40000d13          	li	s10,1024
    1220:	01000393          	li	t2,16
    1224:	007d7bb3          	and	s7,s10,t2
    1228:	03732e23          	sw	s7,60(t1)

0000122c <inst_16>:

inst_16:
// rs1==x9, rs2==x20, rd==x24, rs2_val == 32, 
// opcode: and ; op1:x9; op2:x20; dest:x24; op1val:-0x8;  op2val:0x20
TEST_RR_OP(and, x24, x9, x20, 0x20, -0x8, 0x20, x6, 64, x19)
    122c:	ff800493          	li	s1,-8
    1230:	02000a13          	li	s4,32
    1234:	0144fc33          	and	s8,s1,s4
    1238:	05832023          	sw	s8,64(t1)

0000123c <inst_17>:

inst_17:
// rs1==x15, rs2==x13, rd==x26, rs2_val == 64, rs1_val == -257
// opcode: and ; op1:x15; op2:x13; dest:x26; op1val:-0x101;  op2val:0x40
TEST_RR_OP(and, x26, x15, x13, 0x40, -0x101, 0x40, x6, 68, x19)
    123c:	eff00793          	li	a5,-257
    1240:	04000693          	li	a3,64
    1244:	00d7fd33          	and	s10,a5,a3
    1248:	05a32223          	sw	s10,68(t1)

0000124c <inst_18>:

inst_18:
// rs1==x12, rs2==x4, rd==x17, rs2_val == 128, rs1_val == -33554433
// opcode: and ; op1:x12; op2:x4; dest:x17; op1val:-0x2000001;  op2val:0x80
TEST_RR_OP(and, x17, x12, x4, 0x80, -0x2000001, 0x80, x6, 72, x19)
    124c:	fe000637          	lui	a2,0xfe000
    1250:	fff60613          	addi	a2,a2,-1 # fdffffff <_end+0xfdff9ffb>
    1254:	08000213          	li	tp,128
    1258:	004678b3          	and	a7,a2,tp
    125c:	05132423          	sw	a7,72(t1)
RVTEST_SIGBASE( x2,signature_x2_0)
    1260:	00004117          	auipc	sp,0x4
    1264:	dfc10113          	addi	sp,sp,-516 # 505c <signature_x2_0>

00001268 <inst_19>:

inst_19:
// rs1==x4, rs2==x17, rd==x8, rs2_val == 256, 
// opcode: and ; op1:x4; op2:x17; dest:x8; op1val:0x66666665;  op2val:0x100
TEST_RR_OP(and, x8, x4, x17, 0x0, 0x66666665, 0x100, x2, 0, x19)
    1268:	66666237          	lui	tp,0x66666
    126c:	66520213          	addi	tp,tp,1637 # 66666665 <_end+0x66660661>
    1270:	10000893          	li	a7,256
    1274:	01127433          	and	s0,tp,a7
    1278:	00812023          	sw	s0,0(sp)

0000127c <inst_20>:

inst_20:
// rs1==x13, rs2==x22, rd==x1, rs2_val == 1024, rs1_val == -129
// opcode: and ; op1:x13; op2:x22; dest:x1; op1val:-0x81;  op2val:0x400
TEST_RR_OP(and, x1, x13, x22, 0x400, -0x81, 0x400, x2, 4, x19)
    127c:	f7f00693          	li	a3,-129
    1280:	40000b13          	li	s6,1024
    1284:	0166f0b3          	and	ra,a3,s6
    1288:	00112223          	sw	ra,4(sp)

0000128c <inst_21>:

inst_21:
// rs1==x8, rs2==x12, rd==x7, rs2_val == 4096, rs1_val == 4
// opcode: and ; op1:x8; op2:x12; dest:x7; op1val:0x4;  op2val:0x1000
TEST_RR_OP(and, x7, x8, x12, 0x0, 0x4, 0x1000, x2, 8, x19)
    128c:	00400413          	li	s0,4
    1290:	00001637          	lui	a2,0x1
    1294:	00c473b3          	and	t2,s0,a2
    1298:	00712423          	sw	t2,8(sp)

0000129c <inst_22>:

inst_22:
// rs1==x11, rs2==x5, rd==x21, rs2_val == 8192, rs1_val == -32769
// opcode: and ; op1:x11; op2:x5; dest:x21; op1val:-0x8001;  op2val:0x2000
TEST_RR_OP(and, x21, x11, x5, 0x2000, -0x8001, 0x2000, x2, 12, x19)
    129c:	ffff85b7          	lui	a1,0xffff8
    12a0:	fff58593          	addi	a1,a1,-1 # ffff7fff <_end+0xffff1ffb>
    12a4:	000022b7          	lui	t0,0x2
    12a8:	0055fab3          	and	s5,a1,t0
    12ac:	01512623          	sw	s5,12(sp)

000012b0 <inst_23>:

inst_23:
// rs1==x14, rs2==x21, rd==x29, rs2_val == 16384, rs1_val == 64
// opcode: and ; op1:x14; op2:x21; dest:x29; op1val:0x40;  op2val:0x4000
TEST_RR_OP(and, x29, x14, x21, 0x0, 0x40, 0x4000, x2, 16, x19)
    12b0:	04000713          	li	a4,64
    12b4:	00004ab7          	lui	s5,0x4
    12b8:	01577eb3          	and	t4,a4,s5
    12bc:	01d12823          	sw	t4,16(sp)

000012c0 <inst_24>:

inst_24:
// rs1==x17, rs2==x10, rd==x11, rs2_val == 32768, 
// opcode: and ; op1:x17; op2:x10; dest:x11; op1val:0x5;  op2val:0x8000
TEST_RR_OP(and, x11, x17, x10, 0x0, 0x5, 0x8000, x2, 20, x19)
    12c0:	00500893          	li	a7,5
    12c4:	00008537          	lui	a0,0x8
    12c8:	00a8f5b3          	and	a1,a7,a0
    12cc:	00b12a23          	sw	a1,20(sp)

000012d0 <inst_25>:

inst_25:
// rs1==x22, rs2==x6, rd==x3, rs2_val == 65536, rs1_val == 8388608
// opcode: and ; op1:x22; op2:x6; dest:x3; op1val:0x800000;  op2val:0x10000
TEST_RR_OP(and, x3, x22, x6, 0x0, 0x800000, 0x10000, x2, 24, x19)
    12d0:	00800b37          	lui	s6,0x800
    12d4:	00010337          	lui	t1,0x10
    12d8:	006b71b3          	and	gp,s6,t1
    12dc:	00312c23          	sw	gp,24(sp)

000012e0 <inst_26>:

inst_26:
// rs1==x0, rs2==x29, rd==x9, rs2_val == 131072, 
// opcode: and ; op1:x0; op2:x29; dest:x9; op1val:0x0;  op2val:0x20000
TEST_RR_OP(and, x9, x0, x29, 0x0, 0x0, 0x20000, x2, 28, x19)
    12e0:	00000013          	nop
    12e4:	00020eb7          	lui	t4,0x20
    12e8:	01d074b3          	and	s1,zero,t4
    12ec:	00912e23          	sw	s1,28(sp)

000012f0 <inst_27>:

inst_27:
// rs1==x29, rs2==x30, rd==x28, rs2_val == 262144, 
// opcode: and ; op1:x29; op2:x30; dest:x28; op1val:0x5;  op2val:0x40000
TEST_RR_OP(and, x28, x29, x30, 0x0, 0x5, 0x40000, x2, 32, x19)
    12f0:	00500e93          	li	t4,5
    12f4:	00040f37          	lui	t5,0x40
    12f8:	01eefe33          	and	t3,t4,t5
    12fc:	03c12023          	sw	t3,32(sp)

00001300 <inst_28>:

inst_28:
// rs1==x18, rs2==x1, rd==x6, rs2_val == 524288, rs1_val == 65536
// opcode: and ; op1:x18; op2:x1; dest:x6; op1val:0x10000;  op2val:0x80000
TEST_RR_OP(and, x6, x18, x1, 0x0, 0x10000, 0x80000, x2, 36, x19)
    1300:	00010937          	lui	s2,0x10
    1304:	000800b7          	lui	ra,0x80
    1308:	00197333          	and	t1,s2,ra
    130c:	02612223          	sw	t1,36(sp)

00001310 <inst_29>:

inst_29:
// rs1==x6, rs2==x0, rd==x31, rs2_val == 1048576, rs1_val == 134217728
// opcode: and ; op1:x6; op2:x0; dest:x31; op1val:0x8000000;  op2val:0x0
TEST_RR_OP(and, x31, x6, x0, 0x0, 0x8000000, 0x0, x2, 40, x19)
    1310:	08000337          	lui	t1,0x8000
    1314:	00000013          	nop
    1318:	00037fb3          	and	t6,t1,zero
    131c:	03f12423          	sw	t6,40(sp)

00001320 <inst_30>:

inst_30:
// rs1==x16, rs2==x8, rd==x15, rs2_val == 2097152, 
// opcode: and ; op1:x16; op2:x8; dest:x15; op1val:-0x3;  op2val:0x200000
TEST_RR_OP(and, x15, x16, x8, 0x200000, -0x3, 0x200000, x2, 44, x19)
    1320:	ffd00813          	li	a6,-3
    1324:	00200437          	lui	s0,0x200
    1328:	008877b3          	and	a5,a6,s0
    132c:	02f12623          	sw	a5,44(sp)

00001330 <inst_31>:

inst_31:
// rs1==x10, rs2==x28, rd==x16, rs2_val == 4194304, 
// opcode: and ; op1:x10; op2:x28; dest:x16; op1val:0x800;  op2val:0x400000
TEST_RR_OP(and, x16, x10, x28, 0x0, 0x800, 0x400000, x2, 48, x1)
    1330:	00001537          	lui	a0,0x1
    1334:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x72c>
    1338:	00400e37          	lui	t3,0x400
    133c:	01c57833          	and	a6,a0,t3
    1340:	03012823          	sw	a6,48(sp)

00001344 <inst_32>:

inst_32:
// rs2_val == 8388608, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x800000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x66666666, 0x800000, x2, 52, x1)
    1344:	66666537          	lui	a0,0x66666
    1348:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    134c:	008005b7          	lui	a1,0x800
    1350:	00b57633          	and	a2,a0,a1
    1354:	02c12a23          	sw	a2,52(sp)

00001358 <inst_33>:

inst_33:
// rs2_val == 16777216, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x1000000
TEST_RR_OP(and, x12, x10, x11, 0x1000000, 0x33333333, 0x1000000, x2, 56, x1)
    1358:	33333537          	lui	a0,0x33333
    135c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    1360:	010005b7          	lui	a1,0x1000
    1364:	00b57633          	and	a2,a0,a1
    1368:	02c12c23          	sw	a2,56(sp)

0000136c <inst_34>:

inst_34:
// rs2_val == 33554432, rs1_val == 1431655765
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x2000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555555, 0x2000000, x2, 60, x1)
    136c:	55555537          	lui	a0,0x55555
    1370:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1374:	020005b7          	lui	a1,0x2000
    1378:	00b57633          	and	a2,a0,a1
    137c:	02c12e23          	sw	a2,60(sp)

00001380 <inst_35>:

inst_35:
// rs2_val == 67108864, rs1_val == 131072
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:0x4000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x20000, 0x4000000, x2, 64, x1)
    1380:	00020537          	lui	a0,0x20
    1384:	040005b7          	lui	a1,0x4000
    1388:	00b57633          	and	a2,a0,a1
    138c:	04c12023          	sw	a2,64(sp)

00001390 <inst_36>:

inst_36:
// rs2_val == 134217728, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x8001;  op2val:0x8000000
TEST_RR_OP(and, x12, x10, x11, 0x8000000, -0x8001, 0x8000000, x2, 68, x1)
    1390:	ffff8537          	lui	a0,0xffff8
    1394:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0xffff1ffb>
    1398:	080005b7          	lui	a1,0x8000
    139c:	00b57633          	and	a2,a0,a1
    13a0:	04c12223          	sw	a2,68(sp)

000013a4 <inst_37>:

inst_37:
// rs2_val == 268435456, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x10000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x66666666, 0x10000000, x2, 72, x1)
    13a4:	66666537          	lui	a0,0x66666
    13a8:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    13ac:	100005b7          	lui	a1,0x10000
    13b0:	00b57633          	and	a2,a0,a1
    13b4:	04c12423          	sw	a2,72(sp)

000013b8 <inst_38>:

inst_38:
// rs2_val == 536870912, rs1_val == -65537
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x10001;  op2val:0x20000000
TEST_RR_OP(and, x12, x10, x11, 0x20000000, -0x10001, 0x20000000, x2, 76, x1)
    13b8:	ffff0537          	lui	a0,0xffff0
    13bc:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffe9ffb>
    13c0:	200005b7          	lui	a1,0x20000
    13c4:	00b57633          	and	a2,a0,a1
    13c8:	04c12623          	sw	a2,76(sp)

000013cc <inst_39>:

inst_39:
// rs2_val == 1073741824, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0x40000000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x8000000, 0x40000000, x2, 80, x1)
    13cc:	08000537          	lui	a0,0x8000
    13d0:	400005b7          	lui	a1,0x40000
    13d4:	00b57633          	and	a2,a0,a1
    13d8:	04c12823          	sw	a2,80(sp)

000013dc <inst_40>:

inst_40:
// rs2_val == -2, rs1_val == -513
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:-0x2
TEST_RR_OP(and, x12, x10, x11, 0xfffffdfe, -0x201, -0x2, x2, 84, x1)
    13dc:	dff00513          	li	a0,-513
    13e0:	ffe00593          	li	a1,-2
    13e4:	00b57633          	and	a2,a0,a1
    13e8:	04c12a23          	sw	a2,84(sp)

000013ec <inst_41>:

inst_41:
// rs2_val == -3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x40000001;  op2val:-0x3
TEST_RR_OP(and, x12, x10, x11, 0xbffffffd, -0x40000001, -0x3, x2, 88, x1)
    13ec:	c0000537          	lui	a0,0xc0000
    13f0:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0xbfff9ffb>
    13f4:	ffd00593          	li	a1,-3
    13f8:	00b57633          	and	a2,a0,a1
    13fc:	04c12c23          	sw	a2,88(sp)

00001400 <inst_42>:

inst_42:
// rs2_val == -5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x800000;  op2val:-0x5
TEST_RR_OP(and, x12, x10, x11, 0x800000, 0x800000, -0x5, x2, 92, x1)
    1400:	00800537          	lui	a0,0x800
    1404:	ffb00593          	li	a1,-5
    1408:	00b57633          	and	a2,a0,a1
    140c:	04c12e23          	sw	a2,92(sp)

00001410 <inst_43>:

inst_43:
// rs2_val == -9, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:-0x9
TEST_RR_OP(and, x12, x10, x11, 0xfffffdf7, -0x201, -0x9, x2, 96, x1)
    1410:	dff00513          	li	a0,-513
    1414:	ff700593          	li	a1,-9
    1418:	00b57633          	and	a2,a0,a1
    141c:	06c12023          	sw	a2,96(sp)

00001420 <inst_44>:

inst_44:
// rs2_val == -17, rs1_val == -134217729
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x8000001;  op2val:-0x11
TEST_RR_OP(and, x12, x10, x11, 0xf7ffffef, -0x8000001, -0x11, x2, 100, x1)
    1420:	f8000537          	lui	a0,0xf8000
    1424:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ff9ffb>
    1428:	fef00593          	li	a1,-17
    142c:	00b57633          	and	a2,a0,a1
    1430:	06c12223          	sw	a2,100(sp)

00001434 <inst_45>:

inst_45:
// rs2_val == -33, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x21
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x3, -0x21, x2, 104, x1)
    1434:	00300513          	li	a0,3
    1438:	fdf00593          	li	a1,-33
    143c:	00b57633          	and	a2,a0,a1
    1440:	06c12423          	sw	a2,104(sp)

00001444 <inst_46>:

inst_46:
// rs2_val == -65, rs1_val == 128
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:-0x41
TEST_RR_OP(and, x12, x10, x11, 0x80, 0x80, -0x41, x2, 108, x1)
    1444:	08000513          	li	a0,128
    1448:	fbf00593          	li	a1,-65
    144c:	00b57633          	and	a2,a0,a1
    1450:	06c12623          	sw	a2,108(sp)

00001454 <inst_47>:

inst_47:
// rs2_val == -129, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x7;  op2val:-0x81
TEST_RR_OP(and, x12, x10, x11, 0xffffff79, -0x7, -0x81, x2, 112, x1)
    1454:	ff900513          	li	a0,-7
    1458:	f7f00593          	li	a1,-129
    145c:	00b57633          	and	a2,a0,a1
    1460:	06c12823          	sw	a2,112(sp)

00001464 <inst_48>:

inst_48:
// rs2_val == -257, rs1_val == -9
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x9;  op2val:-0x101
TEST_RR_OP(and, x12, x10, x11, 0xfffffef7, -0x9, -0x101, x2, 116, x1)
    1464:	ff700513          	li	a0,-9
    1468:	eff00593          	li	a1,-257
    146c:	00b57633          	and	a2,a0,a1
    1470:	06c12a23          	sw	a2,116(sp)

00001474 <inst_49>:

inst_49:
// rs2_val == -513, rs1_val == -1431655766
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0x201
TEST_RR_OP(and, x12, x10, x11, 0xaaaaa8aa, -0x55555556, -0x201, x2, 120, x1)
    1474:	aaaab537          	lui	a0,0xaaaab
    1478:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    147c:	dff00593          	li	a1,-513
    1480:	00b57633          	and	a2,a0,a1
    1484:	06c12c23          	sw	a2,120(sp)

00001488 <inst_50>:

inst_50:
// rs2_val == -1025, rs1_val == -8388609
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x800001;  op2val:-0x401
TEST_RR_OP(and, x12, x10, x11, 0xff7ffbff, -0x800001, -0x401, x2, 124, x1)
    1488:	ff800537          	lui	a0,0xff800
    148c:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7f9ffb>
    1490:	bff00593          	li	a1,-1025
    1494:	00b57633          	and	a2,a0,a1
    1498:	06c12e23          	sw	a2,124(sp)

0000149c <inst_51>:

inst_51:
// rs2_val == -2049, rs1_val == -1048577
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x100001;  op2val:-0x801
TEST_RR_OP(and, x12, x10, x11, 0xffeff7ff, -0x100001, -0x801, x2, 128, x1)
    149c:	fff00537          	lui	a0,0xfff00
    14a0:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0xffef9ffb>
    14a4:	fffff5b7          	lui	a1,0xfffff
    14a8:	7ff58593          	addi	a1,a1,2047 # fffff7ff <_end+0xffff97fb>
    14ac:	00b57633          	and	a2,a0,a1
    14b0:	08c12023          	sw	a2,128(sp)

000014b4 <inst_52>:

inst_52:
// rs2_val == -4097, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:-0x1001
TEST_RR_OP(and, x12, x10, x11, 0x400, 0x400, -0x1001, x2, 132, x1)
    14b4:	40000513          	li	a0,1024
    14b8:	fffff5b7          	lui	a1,0xfffff
    14bc:	fff58593          	addi	a1,a1,-1 # ffffefff <_end+0xffff8ffb>
    14c0:	00b57633          	and	a2,a0,a1
    14c4:	08c12223          	sw	a2,132(sp)

000014c8 <inst_53>:

inst_53:
// rs2_val == -8193, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x2001
TEST_RR_OP(and, x12, x10, x11, 0x66664666, 0x66666666, -0x2001, x2, 136, x1)
    14c8:	66666537          	lui	a0,0x66666
    14cc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    14d0:	ffffe5b7          	lui	a1,0xffffe
    14d4:	fff58593          	addi	a1,a1,-1 # ffffdfff <_end+0xffff7ffb>
    14d8:	00b57633          	and	a2,a0,a1
    14dc:	08c12423          	sw	a2,136(sp)

000014e0 <inst_54>:

inst_54:
// rs2_val == -16385, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x7;  op2val:-0x4001
TEST_RR_OP(and, x12, x10, x11, 0x7, 0x7, -0x4001, x2, 140, x1)
    14e0:	00700513          	li	a0,7
    14e4:	ffffc5b7          	lui	a1,0xffffc
    14e8:	fff58593          	addi	a1,a1,-1 # ffffbfff <_end+0xffff5ffb>
    14ec:	00b57633          	and	a2,a0,a1
    14f0:	08c12623          	sw	a2,140(sp)

000014f4 <inst_55>:

inst_55:
// rs2_val == -32769, rs1_val == 33554432
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:-0x8001
TEST_RR_OP(and, x12, x10, x11, 0x2000000, 0x2000000, -0x8001, x2, 144, x1)
    14f4:	02000537          	lui	a0,0x2000
    14f8:	ffff85b7          	lui	a1,0xffff8
    14fc:	fff58593          	addi	a1,a1,-1 # ffff7fff <_end+0xffff1ffb>
    1500:	00b57633          	and	a2,a0,a1
    1504:	08c12823          	sw	a2,144(sp)

00001508 <inst_56>:

inst_56:
// rs2_val == -65537, rs1_val == 1073741824
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:-0x10001
TEST_RR_OP(and, x12, x10, x11, 0x40000000, 0x40000000, -0x10001, x2, 148, x1)
    1508:	40000537          	lui	a0,0x40000
    150c:	ffff05b7          	lui	a1,0xffff0
    1510:	fff58593          	addi	a1,a1,-1 # fffeffff <_end+0xfffe9ffb>
    1514:	00b57633          	and	a2,a0,a1
    1518:	08c12a23          	sw	a2,148(sp)

0000151c <inst_57>:

inst_57:
// rs2_val == -131073, rs1_val == -5
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:-0x20001
TEST_RR_OP(and, x12, x10, x11, 0xfffdfffb, -0x5, -0x20001, x2, 152, x1)
    151c:	ffb00513          	li	a0,-5
    1520:	fffe05b7          	lui	a1,0xfffe0
    1524:	fff58593          	addi	a1,a1,-1 # fffdffff <_end+0xfffd9ffb>
    1528:	00b57633          	and	a2,a0,a1
    152c:	08c12c23          	sw	a2,152(sp)

00001530 <inst_58>:

inst_58:
// rs2_val == -262145, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x40000;  op2val:-0x40001
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x40000, -0x40001, x2, 156, x1)
    1530:	00040537          	lui	a0,0x40
    1534:	fffc05b7          	lui	a1,0xfffc0
    1538:	fff58593          	addi	a1,a1,-1 # fffbffff <_end+0xfffb9ffb>
    153c:	00b57633          	and	a2,a0,a1
    1540:	08c12e23          	sw	a2,156(sp)

00001544 <inst_59>:

inst_59:
// rs2_val == -524289, rs1_val == 16
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x10;  op2val:-0x80001
TEST_RR_OP(and, x12, x10, x11, 0x10, 0x10, -0x80001, x2, 160, x1)
    1544:	01000513          	li	a0,16
    1548:	fff805b7          	lui	a1,0xfff80
    154c:	fff58593          	addi	a1,a1,-1 # fff7ffff <_end+0xfff79ffb>
    1550:	00b57633          	and	a2,a0,a1
    1554:	0ac12023          	sw	a2,160(sp)

00001558 <inst_60>:

inst_60:
// rs2_val == -2097153, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x400;  op2val:-0x200001
TEST_RR_OP(and, x12, x10, x11, 0x400, 0x400, -0x200001, x2, 164, x1)
    1558:	40000513          	li	a0,1024
    155c:	ffe005b7          	lui	a1,0xffe00
    1560:	fff58593          	addi	a1,a1,-1 # ffdfffff <_end+0xffdf9ffb>
    1564:	00b57633          	and	a2,a0,a1
    1568:	0ac12223          	sw	a2,164(sp)

0000156c <inst_61>:

inst_61:
// rs2_val == -4194305, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x1;  op2val:-0x400001
TEST_RR_OP(and, x12, x10, x11, 0xffbfffff, -0x1, -0x400001, x2, 168, x1)
    156c:	fff00513          	li	a0,-1
    1570:	ffc005b7          	lui	a1,0xffc00
    1574:	fff58593          	addi	a1,a1,-1 # ffbfffff <_end+0xffbf9ffb>
    1578:	00b57633          	and	a2,a0,a1
    157c:	0ac12423          	sw	a2,168(sp)

00001580 <inst_62>:

inst_62:
// rs2_val == -8388609, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x20000;  op2val:-0x800001
TEST_RR_OP(and, x12, x10, x11, 0x20000, 0x20000, -0x800001, x2, 172, x1)
    1580:	00020537          	lui	a0,0x20
    1584:	ff8005b7          	lui	a1,0xff800
    1588:	fff58593          	addi	a1,a1,-1 # ff7fffff <_end+0xff7f9ffb>
    158c:	00b57633          	and	a2,a0,a1
    1590:	0ac12623          	sw	a2,172(sp)

00001594 <inst_63>:

inst_63:
// rs2_val == -16777217, rs1_val == -262145
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:-0x1000001
TEST_RR_OP(and, x12, x10, x11, 0xfefbffff, -0x40001, -0x1000001, x2, 176, x1)
    1594:	fffc0537          	lui	a0,0xfffc0
    1598:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffb9ffb>
    159c:	ff0005b7          	lui	a1,0xff000
    15a0:	fff58593          	addi	a1,a1,-1 # feffffff <_end+0xfeff9ffb>
    15a4:	00b57633          	and	a2,a0,a1
    15a8:	0ac12823          	sw	a2,176(sp)

000015ac <inst_64>:

inst_64:
// rs2_val == -33554433, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x2000001
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x6, -0x2000001, x2, 180, x1)
    15ac:	00600513          	li	a0,6
    15b0:	fe0005b7          	lui	a1,0xfe000
    15b4:	fff58593          	addi	a1,a1,-1 # fdffffff <_end+0xfdff9ffb>
    15b8:	00b57633          	and	a2,a0,a1
    15bc:	0ac12a23          	sw	a2,180(sp)

000015c0 <inst_65>:

inst_65:
// rs2_val == -67108865, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x4000001
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaab, -0x55555555, -0x4000001, x2, 184, x1)
    15c0:	aaaab537          	lui	a0,0xaaaab
    15c4:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    15c8:	fc0005b7          	lui	a1,0xfc000
    15cc:	fff58593          	addi	a1,a1,-1 # fbffffff <_end+0xfbff9ffb>
    15d0:	00b57633          	and	a2,a0,a1
    15d4:	0ac12c23          	sw	a2,184(sp)

000015d8 <inst_66>:

inst_66:
// rs2_val == -134217729, rs1_val == -17
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:-0x8000001
TEST_RR_OP(and, x12, x10, x11, 0xf7ffffef, -0x11, -0x8000001, x2, 188, x1)
    15d8:	fef00513          	li	a0,-17
    15dc:	f80005b7          	lui	a1,0xf8000
    15e0:	fff58593          	addi	a1,a1,-1 # f7ffffff <_end+0xf7ff9ffb>
    15e4:	00b57633          	and	a2,a0,a1
    15e8:	0ac12e23          	sw	a2,188(sp)

000015ec <inst_67>:

inst_67:
// rs2_val == -268435457, rs1_val == -536870913
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x20000001;  op2val:-0x10000001
TEST_RR_OP(and, x12, x10, x11, 0xcfffffff, -0x20000001, -0x10000001, x2, 192, x1)
    15ec:	e0000537          	lui	a0,0xe0000
    15f0:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfff9ffb>
    15f4:	f00005b7          	lui	a1,0xf0000
    15f8:	fff58593          	addi	a1,a1,-1 # efffffff <_end+0xefff9ffb>
    15fc:	00b57633          	and	a2,a0,a1
    1600:	0cc12023          	sw	a2,192(sp)

00001604 <inst_68>:

inst_68:
// rs2_val == -536870913, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0x20000001
TEST_RR_OP(and, x12, x10, x11, 0xdfff4afd, -0xb503, -0x20000001, x2, 196, x1)
    1604:	ffff5537          	lui	a0,0xffff5
    1608:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    160c:	e00005b7          	lui	a1,0xe0000
    1610:	fff58593          	addi	a1,a1,-1 # dfffffff <_end+0xdfff9ffb>
    1614:	00b57633          	and	a2,a0,a1
    1618:	0cc12223          	sw	a2,196(sp)

0000161c <inst_69>:

inst_69:
// rs2_val == -1073741825, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x80000000;  op2val:-0x40000001
TEST_RR_OP(and, x12, x10, x11, 0x80000000, -0x80000000, -0x40000001, x2, 200, x1)
    161c:	80000537          	lui	a0,0x80000
    1620:	c00005b7          	lui	a1,0xc0000
    1624:	fff58593          	addi	a1,a1,-1 # bfffffff <_end+0xbfff9ffb>
    1628:	00b57633          	and	a2,a0,a1
    162c:	0cc12423          	sw	a2,200(sp)

00001630 <inst_70>:

inst_70:
// rs2_val == -1431655766, rs1_val==-46340 and rs2_val==-1431655766
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa8, -0xb504, -0x55555556, x2, 204, x1)
    1630:	ffff5537          	lui	a0,0xffff5
    1634:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    1638:	aaaab5b7          	lui	a1,0xaaaab
    163c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1640:	00b57633          	and	a2,a0,a1
    1644:	0cc12623          	sw	a2,204(sp)

00001648 <inst_71>:

inst_71:
// rs1_val == 8, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x8;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x8, 0x55555554, x2, 208, x1)
    1648:	00800513          	li	a0,8
    164c:	555555b7          	lui	a1,0x55555
    1650:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1654:	00b57633          	and	a2,a0,a1
    1658:	0cc12823          	sw	a2,208(sp)

0000165c <inst_72>:

inst_72:
// rs1_val == 32, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x20;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x20, 0x4, x2, 212, x1)
    165c:	02000513          	li	a0,32
    1660:	00400593          	li	a1,4
    1664:	00b57633          	and	a2,a0,a1
    1668:	0cc12a23          	sw	a2,212(sp)

0000166c <inst_73>:

inst_73:
// rs1_val == 256, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x100;  op2val:-0x101
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x100, -0x101, x2, 216, x1)
    166c:	10000513          	li	a0,256
    1670:	eff00593          	li	a1,-257
    1674:	00b57633          	and	a2,a0,a1
    1678:	0cc12c23          	sw	a2,216(sp)

0000167c <inst_74>:

inst_74:
// rs1_val == 512, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x200;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x200, 0x0, x2, 220, x1)
    167c:	20000513          	li	a0,512
    1680:	00000593          	li	a1,0
    1684:	00b57633          	and	a2,a0,a1
    1688:	0cc12e23          	sw	a2,220(sp)

0000168c <inst_75>:

inst_75:
// rs1_val == 4096, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x1000;  op2val:0x8
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x1000, 0x8, x2, 224, x1)
    168c:	00001537          	lui	a0,0x1
    1690:	00800593          	li	a1,8
    1694:	00b57633          	and	a2,a0,a1
    1698:	0ec12023          	sw	a2,224(sp)

0000169c <inst_76>:

inst_76:
// rs1_val == 8192, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2000;  op2val:0x40000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2000, 0x40000, x2, 228, x1)
    169c:	00002537          	lui	a0,0x2
    16a0:	000405b7          	lui	a1,0x40
    16a4:	00b57633          	and	a2,a0,a1
    16a8:	0ec12223          	sw	a2,228(sp)

000016ac <inst_77>:

inst_77:
// rs1_val == 32768, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x8000;  op2val:-0x4
TEST_RR_OP(and, x12, x10, x11, 0x8000, 0x8000, -0x4, x2, 232, x1)
    16ac:	00008537          	lui	a0,0x8
    16b0:	ffc00593          	li	a1,-4
    16b4:	00b57633          	and	a2,a0,a1
    16b8:	0ec12423          	sw	a2,232(sp)

000016bc <inst_78>:

inst_78:
// rs1_val == 524288, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x80000;  op2val:0x3fffffff
TEST_RR_OP(and, x12, x10, x11, 0x80000, 0x80000, 0x3fffffff, x2, 236, x1)
    16bc:	00080537          	lui	a0,0x80
    16c0:	400005b7          	lui	a1,0x40000
    16c4:	fff58593          	addi	a1,a1,-1 # 3fffffff <_end+0x3fff9ffb>
    16c8:	00b57633          	and	a2,a0,a1
    16cc:	0ec12623          	sw	a2,236(sp)

000016d0 <inst_79>:

inst_79:
// rs1_val == 1048576, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x100000;  op2val:-0x2001
TEST_RR_OP(and, x12, x10, x11, 0x100000, 0x100000, -0x2001, x2, 240, x1)
    16d0:	00100537          	lui	a0,0x100
    16d4:	ffffe5b7          	lui	a1,0xffffe
    16d8:	fff58593          	addi	a1,a1,-1 # ffffdfff <_end+0xffff7ffb>
    16dc:	00b57633          	and	a2,a0,a1
    16e0:	0ec12823          	sw	a2,240(sp)

000016e4 <inst_80>:

inst_80:
// rs1_val == 2097152, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x200000;  op2val:0x8000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x200000, 0x8000, x2, 244, x1)
    16e4:	00200537          	lui	a0,0x200
    16e8:	000085b7          	lui	a1,0x8
    16ec:	00b57633          	and	a2,a0,a1
    16f0:	0ec12a23          	sw	a2,244(sp)

000016f4 <inst_81>:

inst_81:
// rs1_val == 4194304, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:-0x11
TEST_RR_OP(and, x12, x10, x11, 0x400000, 0x400000, -0x11, x2, 248, x1)
    16f4:	00400537          	lui	a0,0x400
    16f8:	fef00593          	li	a1,-17
    16fc:	00b57633          	and	a2,a0,a1
    1700:	0ec12c23          	sw	a2,248(sp)

00001704 <inst_82>:

inst_82:
// rs1_val == 16777216, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x1000000;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x1000000, 0x3, x2, 252, x1)
    1704:	01000537          	lui	a0,0x1000
    1708:	00300593          	li	a1,3
    170c:	00b57633          	and	a2,a0,a1
    1710:	0ec12e23          	sw	a2,252(sp)

00001714 <inst_83>:

inst_83:
// rs1_val == 67108864, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0x20000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4000000, 0x20000, x2, 256, x1)
    1714:	04000537          	lui	a0,0x4000
    1718:	000205b7          	lui	a1,0x20
    171c:	00b57633          	and	a2,a0,a1
    1720:	10c12023          	sw	a2,256(sp)

00001724 <inst_84>:

inst_84:
// rs1_val == 268435456, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x10000000, 0x4, x2, 260, x1)
    1724:	10000537          	lui	a0,0x10000
    1728:	00400593          	li	a1,4
    172c:	00b57633          	and	a2,a0,a1
    1730:	10c12223          	sw	a2,260(sp)

00001734 <inst_85>:

inst_85:
// rs1_val == 536870912, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x20000000, 0x4, x2, 264, x1)
    1734:	20000537          	lui	a0,0x20000
    1738:	00400593          	li	a1,4
    173c:	00b57633          	and	a2,a0,a1
    1740:	10c12423          	sw	a2,264(sp)

00001744 <inst_86>:

inst_86:
// rs1_val == -2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x2;  op2val:-0x10000001
TEST_RR_OP(and, x12, x10, x11, 0xeffffffe, -0x2, -0x10000001, x2, 268, x1)
    1744:	ffe00513          	li	a0,-2
    1748:	f00005b7          	lui	a1,0xf0000
    174c:	fff58593          	addi	a1,a1,-1 # efffffff <_end+0xefff9ffb>
    1750:	00b57633          	and	a2,a0,a1
    1754:	10c12623          	sw	a2,268(sp)

00001758 <inst_87>:

inst_87:
// rs1_val == -33, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x21;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x33333312, -0x21, 0x33333332, x2, 272, x1)
    1758:	fdf00513          	li	a0,-33
    175c:	333335b7          	lui	a1,0x33333
    1760:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1764:	00b57633          	and	a2,a0,a1
    1768:	10c12823          	sw	a2,272(sp)

0000176c <inst_88>:

inst_88:
// rs1_val == -65, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x41;  op2val:-0x400001
TEST_RR_OP(and, x12, x10, x11, 0xffbfffbf, -0x41, -0x400001, x2, 276, x1)
    176c:	fbf00513          	li	a0,-65
    1770:	ffc005b7          	lui	a1,0xffc00
    1774:	fff58593          	addi	a1,a1,-1 # ffbfffff <_end+0xffbf9ffb>
    1778:	00b57633          	and	a2,a0,a1
    177c:	10c12a23          	sw	a2,276(sp)

00001780 <inst_89>:

inst_89:
// rs1_val == -1025, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x401;  op2val:-0x4001
TEST_RR_OP(and, x12, x10, x11, 0xffffbbff, -0x401, -0x4001, x2, 280, x1)
    1780:	bff00513          	li	a0,-1025
    1784:	ffffc5b7          	lui	a1,0xffffc
    1788:	fff58593          	addi	a1,a1,-1 # ffffbfff <_end+0xffff5ffb>
    178c:	00b57633          	and	a2,a0,a1
    1790:	10c12c23          	sw	a2,280(sp)

00001794 <inst_90>:

inst_90:
// rs1_val == -2049, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x801;  op2val:-0x7
TEST_RR_OP(and, x12, x10, x11, 0xfffff7f9, -0x801, -0x7, x2, 284, x1)
    1794:	fffff537          	lui	a0,0xfffff
    1798:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffff97fb>
    179c:	ff900593          	li	a1,-7
    17a0:	00b57633          	and	a2,a0,a1
    17a4:	10c12e23          	sw	a2,284(sp)

000017a8 <inst_91>:

inst_91:
// rs1_val == -4097, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x1001;  op2val:-0x81
TEST_RR_OP(and, x12, x10, x11, 0xffffef7f, -0x1001, -0x81, x2, 288, x1)
    17a8:	fffff537          	lui	a0,0xfffff
    17ac:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0xffff8ffb>
    17b0:	f7f00593          	li	a1,-129
    17b4:	00b57633          	and	a2,a0,a1
    17b8:	12c12023          	sw	a2,288(sp)

000017bc <inst_92>:

inst_92:
// rs1_val == -8193, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:-0x5
TEST_RR_OP(and, x12, x10, x11, 0xffffdffb, -0x2001, -0x5, x2, 292, x1)
    17bc:	ffffe537          	lui	a0,0xffffe
    17c0:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffff7ffb>
    17c4:	ffb00593          	li	a1,-5
    17c8:	00b57633          	and	a2,a0,a1
    17cc:	12c12223          	sw	a2,292(sp)

000017d0 <inst_93>:

inst_93:
// rs1_val == -16385, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x4001;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, -0x4001, 0x4, x2, 296, x1)
    17d0:	ffffc537          	lui	a0,0xffffc
    17d4:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff5ffb>
    17d8:	00400593          	li	a1,4
    17dc:	00b57633          	and	a2,a0,a1
    17e0:	12c12423          	sw	a2,296(sp)

000017e4 <inst_94>:

inst_94:
// rs1_val == -524289, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x80001;  op2val:-0x200001
TEST_RR_OP(and, x12, x10, x11, 0xffd7ffff, -0x80001, -0x200001, x2, 300, x1)
    17e4:	fff80537          	lui	a0,0xfff80
    17e8:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0xfff79ffb>
    17ec:	ffe005b7          	lui	a1,0xffe00
    17f0:	fff58593          	addi	a1,a1,-1 # ffdfffff <_end+0xffdf9ffb>
    17f4:	00b57633          	and	a2,a0,a1
    17f8:	12c12623          	sw	a2,300(sp)

000017fc <inst_95>:

inst_95:
// rs1_val == -2097153, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x200001;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, -0x200001, 0x4, x2, 304, x1)
    17fc:	ffe00537          	lui	a0,0xffe00
    1800:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdf9ffb>
    1804:	00400593          	li	a1,4
    1808:	00b57633          	and	a2,a0,a1
    180c:	12c12823          	sw	a2,304(sp)

00001810 <inst_96>:

inst_96:
// rs1_val == -4194305, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x400001;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x33333334, -0x400001, 0x33333334, x2, 308, x1)
    1810:	ffc00537          	lui	a0,0xffc00
    1814:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbf9ffb>
    1818:	333335b7          	lui	a1,0x33333
    181c:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    1820:	00b57633          	and	a2,a0,a1
    1824:	12c12a23          	sw	a2,308(sp)

00001828 <inst_97>:

inst_97:
// rs1_val == -16777217, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:0x7fffffff
TEST_RR_OP(and, x12, x10, x11, 0x7effffff, -0x1000001, 0x7fffffff, x2, 312, x1)
    1828:	ff000537          	lui	a0,0xff000
    182c:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeff9ffb>
    1830:	800005b7          	lui	a1,0x80000
    1834:	fff58593          	addi	a1,a1,-1 # 7fffffff <_end+0x7fff9ffb>
    1838:	00b57633          	and	a2,a0,a1
    183c:	12c12c23          	sw	a2,312(sp)

00001840 <inst_98>:

inst_98:
// rs1_val == -67108865, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x62666665, -0x4000001, 0x66666665, x2, 316, x1)
    1840:	fc000537          	lui	a0,0xfc000
    1844:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbff9ffb>
    1848:	666665b7          	lui	a1,0x66666
    184c:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1850:	00b57633          	and	a2,a0,a1
    1854:	12c12e23          	sw	a2,316(sp)

00001858 <inst_99>:

inst_99:
// rs1_val == -268435457, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0xefff4afd, -0x10000001, -0xb503, x2, 320, x1)
    1858:	f0000537          	lui	a0,0xf0000
    185c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefff9ffb>
    1860:	ffff55b7          	lui	a1,0xffff5
    1864:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1868:	00b57633          	and	a2,a0,a1
    186c:	14c12023          	sw	a2,320(sp)

00001870 <inst_100>:

inst_100:
// rs1_val==3 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x3, 0x3, x2, 324, x1)
    1870:	00300513          	li	a0,3
    1874:	00300593          	li	a1,3
    1878:	00b57633          	and	a2,a0,a1
    187c:	14c12223          	sw	a2,324(sp)

00001880 <inst_101>:

inst_101:
// rs1_val==3 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x3, 0x55555555, x2, 328, x1)
    1880:	00300513          	li	a0,3
    1884:	555555b7          	lui	a1,0x55555
    1888:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    188c:	00b57633          	and	a2,a0,a1
    1890:	14c12423          	sw	a2,328(sp)

00001894 <inst_102>:

inst_102:
// rs1_val==3 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x3, -0x55555556, x2, 332, x1)
    1894:	00300513          	li	a0,3
    1898:	aaaab5b7          	lui	a1,0xaaaab
    189c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    18a0:	00b57633          	and	a2,a0,a1
    18a4:	14c12623          	sw	a2,332(sp)

000018a8 <inst_103>:

inst_103:
// rs1_val==3 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x3, 0x5, x2, 336, x1)
    18a8:	00300513          	li	a0,3
    18ac:	00500593          	li	a1,5
    18b0:	00b57633          	and	a2,a0,a1
    18b4:	14c12823          	sw	a2,336(sp)

000018b8 <inst_104>:

inst_104:
// rs1_val==3 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x3, 0x33333333, x2, 340, x1)
    18b8:	00300513          	li	a0,3
    18bc:	333335b7          	lui	a1,0x33333
    18c0:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    18c4:	00b57633          	and	a2,a0,a1
    18c8:	14c12a23          	sw	a2,340(sp)

000018cc <inst_105>:

inst_105:
// rs1_val==3 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x3, 0x66666666, x2, 344, x1)
    18cc:	00300513          	li	a0,3
    18d0:	666665b7          	lui	a1,0x66666
    18d4:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    18d8:	00b57633          	and	a2,a0,a1
    18dc:	14c12c23          	sw	a2,344(sp)

000018e0 <inst_106>:

inst_106:
// rs1_val==3 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x3, -0xb504, x2, 348, x1)
    18e0:	00300513          	li	a0,3
    18e4:	ffff55b7          	lui	a1,0xffff5
    18e8:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    18ec:	00b57633          	and	a2,a0,a1
    18f0:	14c12e23          	sw	a2,348(sp)

000018f4 <inst_107>:

inst_107:
// rs1_val==3 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x3, 0xb504, x2, 352, x1)
    18f4:	00300513          	li	a0,3
    18f8:	0000b5b7          	lui	a1,0xb
    18fc:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1900:	00b57633          	and	a2,a0,a1
    1904:	16c12023          	sw	a2,352(sp)

00001908 <inst_108>:

inst_108:
// rs1_val==3 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x3, 0x2, x2, 356, x1)
    1908:	00300513          	li	a0,3
    190c:	00200593          	li	a1,2
    1910:	00b57633          	and	a2,a0,a1
    1914:	16c12223          	sw	a2,356(sp)

00001918 <inst_109>:

inst_109:
// rs1_val==3 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x3, 0x55555554, x2, 360, x1)
    1918:	00300513          	li	a0,3
    191c:	555555b7          	lui	a1,0x55555
    1920:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1924:	00b57633          	and	a2,a0,a1
    1928:	16c12423          	sw	a2,360(sp)

0000192c <inst_110>:

inst_110:
// rs1_val==3 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x3, 0x0, x2, 364, x1)
    192c:	00300513          	li	a0,3
    1930:	00000593          	li	a1,0
    1934:	00b57633          	and	a2,a0,a1
    1938:	16c12623          	sw	a2,364(sp)

0000193c <inst_111>:

inst_111:
// rs1_val==3 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x3, 0x4, x2, 368, x1)
    193c:	00300513          	li	a0,3
    1940:	00400593          	li	a1,4
    1944:	00b57633          	and	a2,a0,a1
    1948:	16c12823          	sw	a2,368(sp)

0000194c <inst_112>:

inst_112:
// rs1_val==3 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x3, 0x33333332, x2, 372, x1)
    194c:	00300513          	li	a0,3
    1950:	333335b7          	lui	a1,0x33333
    1954:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1958:	00b57633          	and	a2,a0,a1
    195c:	16c12a23          	sw	a2,372(sp)

00001960 <inst_113>:

inst_113:
// rs1_val==3 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x3, 0x66666665, x2, 376, x1)
    1960:	00300513          	li	a0,3
    1964:	666665b7          	lui	a1,0x66666
    1968:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    196c:	00b57633          	and	a2,a0,a1
    1970:	16c12c23          	sw	a2,376(sp)

00001974 <inst_114>:

inst_114:
// rs1_val==3 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x3, 0xb503, x2, 380, x1)
    1974:	00300513          	li	a0,3
    1978:	0000b5b7          	lui	a1,0xb
    197c:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    1980:	00b57633          	and	a2,a0,a1
    1984:	16c12e23          	sw	a2,380(sp)

00001988 <inst_115>:

inst_115:
// rs1_val==3 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x3, 0x55555556, x2, 384, x1)
    1988:	00300513          	li	a0,3
    198c:	555555b7          	lui	a1,0x55555
    1990:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1994:	00b57633          	and	a2,a0,a1
    1998:	18c12023          	sw	a2,384(sp)

0000199c <inst_116>:

inst_116:
// rs1_val==3 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x3, -0x55555555, x2, 388, x1)
    199c:	00300513          	li	a0,3
    19a0:	aaaab5b7          	lui	a1,0xaaaab
    19a4:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    19a8:	00b57633          	and	a2,a0,a1
    19ac:	18c12223          	sw	a2,388(sp)

000019b0 <inst_117>:

inst_117:
// rs1_val==3 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x3, 0x6, x2, 392, x1)
    19b0:	00300513          	li	a0,3
    19b4:	00600593          	li	a1,6
    19b8:	00b57633          	and	a2,a0,a1
    19bc:	18c12423          	sw	a2,392(sp)

000019c0 <inst_118>:

inst_118:
// rs1_val==3 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x3, 0x33333334, x2, 396, x1)
    19c0:	00300513          	li	a0,3
    19c4:	333335b7          	lui	a1,0x33333
    19c8:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    19cc:	00b57633          	and	a2,a0,a1
    19d0:	18c12623          	sw	a2,396(sp)

000019d4 <inst_119>:

inst_119:
// rs1_val==3 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x3, 0x66666667, x2, 400, x1)
    19d4:	00300513          	li	a0,3
    19d8:	666665b7          	lui	a1,0x66666
    19dc:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    19e0:	00b57633          	and	a2,a0,a1
    19e4:	18c12823          	sw	a2,400(sp)

000019e8 <inst_120>:

inst_120:
// rs1_val==3 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x3, -0xb503, x2, 404, x1)
    19e8:	00300513          	li	a0,3
    19ec:	ffff55b7          	lui	a1,0xffff5
    19f0:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    19f4:	00b57633          	and	a2,a0,a1
    19f8:	18c12a23          	sw	a2,404(sp)

000019fc <inst_121>:

inst_121:
// rs1_val==3 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x3, 0xb505, x2, 408, x1)
    19fc:	00300513          	li	a0,3
    1a00:	0000b5b7          	lui	a1,0xb
    1a04:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1a08:	00b57633          	and	a2,a0,a1
    1a0c:	18c12c23          	sw	a2,408(sp)

00001a10 <inst_122>:

inst_122:
// rs1_val==1431655765 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x55555555, 0x3, x2, 412, x1)
    1a10:	55555537          	lui	a0,0x55555
    1a14:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a18:	00300593          	li	a1,3
    1a1c:	00b57633          	and	a2,a0,a1
    1a20:	18c12e23          	sw	a2,412(sp)

00001a24 <inst_123>:

inst_123:
// rs1_val==1431655765 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x55555555, 0x55555555, 0x55555555, x2, 416, x1)
    1a24:	55555537          	lui	a0,0x55555
    1a28:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a2c:	555555b7          	lui	a1,0x55555
    1a30:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1a34:	00b57633          	and	a2,a0,a1
    1a38:	1ac12023          	sw	a2,416(sp)

00001a3c <inst_124>:

inst_124:
// rs1_val==1431655765 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555555, -0x55555556, x2, 420, x1)
    1a3c:	55555537          	lui	a0,0x55555
    1a40:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a44:	aaaab5b7          	lui	a1,0xaaaab
    1a48:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1a4c:	00b57633          	and	a2,a0,a1
    1a50:	1ac12223          	sw	a2,420(sp)

00001a54 <inst_125>:

inst_125:
// rs1_val==1431655765 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x55555555, 0x5, x2, 424, x1)
    1a54:	55555537          	lui	a0,0x55555
    1a58:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a5c:	00500593          	li	a1,5
    1a60:	00b57633          	and	a2,a0,a1
    1a64:	1ac12423          	sw	a2,424(sp)

00001a68 <inst_126>:

inst_126:
// rs1_val==1431655765 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x11111111, 0x55555555, 0x33333333, x2, 428, x1)
    1a68:	55555537          	lui	a0,0x55555
    1a6c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a70:	333335b7          	lui	a1,0x33333
    1a74:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1a78:	00b57633          	and	a2,a0,a1
    1a7c:	1ac12623          	sw	a2,428(sp)

00001a80 <inst_127>:

inst_127:
// rs1_val==1431655765 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x55555555, 0x66666666, x2, 432, x1)
    1a80:	55555537          	lui	a0,0x55555
    1a84:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1a88:	666665b7          	lui	a1,0x66666
    1a8c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    1a90:	00b57633          	and	a2,a0,a1
    1a94:	1ac12823          	sw	a2,432(sp)

00001a98 <inst_128>:

inst_128:
// rs1_val==1431655765 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x55554054, 0x55555555, -0xb504, x2, 436, x1)
    1a98:	55555537          	lui	a0,0x55555
    1a9c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1aa0:	ffff55b7          	lui	a1,0xffff5
    1aa4:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    1aa8:	00b57633          	and	a2,a0,a1
    1aac:	1ac12a23          	sw	a2,436(sp)

00001ab0 <inst_129>:

inst_129:
// rs1_val==1431655765 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0x55555555, 0xb504, x2, 440, x1)
    1ab0:	55555537          	lui	a0,0x55555
    1ab4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1ab8:	0000b5b7          	lui	a1,0xb
    1abc:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1ac0:	00b57633          	and	a2,a0,a1
    1ac4:	1ac12c23          	sw	a2,440(sp)

00001ac8 <inst_130>:

inst_130:
// rs1_val==1431655765 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555555, 0x2, x2, 444, x1)
    1ac8:	55555537          	lui	a0,0x55555
    1acc:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1ad0:	00200593          	li	a1,2
    1ad4:	00b57633          	and	a2,a0,a1
    1ad8:	1ac12e23          	sw	a2,444(sp)

00001adc <inst_131>:

inst_131:
// rs1_val==1431655765 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x55555554, 0x55555555, 0x55555554, x2, 448, x1)
    1adc:	55555537          	lui	a0,0x55555
    1ae0:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1ae4:	555555b7          	lui	a1,0x55555
    1ae8:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1aec:	00b57633          	and	a2,a0,a1
    1af0:	1cc12023          	sw	a2,448(sp)

00001af4 <inst_132>:

inst_132:
// rs1_val==1431655765 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555555, 0x0, x2, 452, x1)
    1af4:	55555537          	lui	a0,0x55555
    1af8:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1afc:	00000593          	li	a1,0
    1b00:	00b57633          	and	a2,a0,a1
    1b04:	1cc12223          	sw	a2,452(sp)

00001b08 <inst_133>:

inst_133:
// rs1_val==1431655765 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x55555555, 0x4, x2, 456, x1)
    1b08:	55555537          	lui	a0,0x55555
    1b0c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b10:	00400593          	li	a1,4
    1b14:	00b57633          	and	a2,a0,a1
    1b18:	1cc12423          	sw	a2,456(sp)

00001b1c <inst_134>:

inst_134:
// rs1_val==1431655765 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x11111110, 0x55555555, 0x33333332, x2, 460, x1)
    1b1c:	55555537          	lui	a0,0x55555
    1b20:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b24:	333335b7          	lui	a1,0x33333
    1b28:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1b2c:	00b57633          	and	a2,a0,a1
    1b30:	1cc12623          	sw	a2,460(sp)

00001b34 <inst_135>:

inst_135:
// rs1_val==1431655765 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x44444445, 0x55555555, 0x66666665, x2, 464, x1)
    1b34:	55555537          	lui	a0,0x55555
    1b38:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b3c:	666665b7          	lui	a1,0x66666
    1b40:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1b44:	00b57633          	and	a2,a0,a1
    1b48:	1cc12823          	sw	a2,464(sp)

00001b4c <inst_136>:

inst_136:
// rs1_val==1431655765 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x1501, 0x55555555, 0xb503, x2, 468, x1)
    1b4c:	55555537          	lui	a0,0x55555
    1b50:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b54:	0000b5b7          	lui	a1,0xb
    1b58:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    1b5c:	00b57633          	and	a2,a0,a1
    1b60:	1cc12a23          	sw	a2,468(sp)

00001b64 <inst_137>:

inst_137:
// rs1_val==1431655765 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x55555554, 0x55555555, 0x55555556, x2, 472, x1)
    1b64:	55555537          	lui	a0,0x55555
    1b68:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b6c:	555555b7          	lui	a1,0x55555
    1b70:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1b74:	00b57633          	and	a2,a0,a1
    1b78:	1cc12c23          	sw	a2,472(sp)

00001b7c <inst_138>:

inst_138:
// rs1_val==1431655765 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x55555555, -0x55555555, x2, 476, x1)
    1b7c:	55555537          	lui	a0,0x55555
    1b80:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b84:	aaaab5b7          	lui	a1,0xaaaab
    1b88:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1b8c:	00b57633          	and	a2,a0,a1
    1b90:	1cc12e23          	sw	a2,476(sp)

00001b94 <inst_139>:

inst_139:
// rs1_val==1431655765 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x55555555, 0x6, x2, 480, x1)
    1b94:	55555537          	lui	a0,0x55555
    1b98:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1b9c:	00600593          	li	a1,6
    1ba0:	00b57633          	and	a2,a0,a1
    1ba4:	1ec12023          	sw	a2,480(sp)

00001ba8 <inst_140>:

inst_140:
// rs1_val==1431655765 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x11111114, 0x55555555, 0x33333334, x2, 484, x1)
    1ba8:	55555537          	lui	a0,0x55555
    1bac:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1bb0:	333335b7          	lui	a1,0x33333
    1bb4:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    1bb8:	00b57633          	and	a2,a0,a1
    1bbc:	1ec12223          	sw	a2,484(sp)

00001bc0 <inst_141>:

inst_141:
// rs1_val==1431655765 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x44444445, 0x55555555, 0x66666667, x2, 488, x1)
    1bc0:	55555537          	lui	a0,0x55555
    1bc4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1bc8:	666665b7          	lui	a1,0x66666
    1bcc:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    1bd0:	00b57633          	and	a2,a0,a1
    1bd4:	1ec12423          	sw	a2,488(sp)

00001bd8 <inst_142>:

inst_142:
// rs1_val==1431655765 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x55554055, 0x55555555, -0xb503, x2, 492, x1)
    1bd8:	55555537          	lui	a0,0x55555
    1bdc:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1be0:	ffff55b7          	lui	a1,0xffff5
    1be4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1be8:	00b57633          	and	a2,a0,a1
    1bec:	1ec12623          	sw	a2,492(sp)

00001bf0 <inst_143>:

inst_143:
// rs1_val==1431655765 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x1505, 0x55555555, 0xb505, x2, 496, x1)
    1bf0:	55555537          	lui	a0,0x55555
    1bf4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x5554f551>
    1bf8:	0000b5b7          	lui	a1,0xb
    1bfc:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1c00:	00b57633          	and	a2,a0,a1
    1c04:	1ec12823          	sw	a2,496(sp)

00001c08 <inst_144>:

inst_144:
// rs1_val==-1431655766 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x2, -0x55555556, 0x3, x2, 500, x1)
    1c08:	aaaab537          	lui	a0,0xaaaab
    1c0c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c10:	00300593          	li	a1,3
    1c14:	00b57633          	and	a2,a0,a1
    1c18:	1ec12a23          	sw	a2,500(sp)

00001c1c <inst_145>:

inst_145:
// rs1_val==-1431655766 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555556, 0x55555555, x2, 504, x1)
    1c1c:	aaaab537          	lui	a0,0xaaaab
    1c20:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c24:	555555b7          	lui	a1,0x55555
    1c28:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1c2c:	00b57633          	and	a2,a0,a1
    1c30:	1ec12c23          	sw	a2,504(sp)

00001c34 <inst_146>:

inst_146:
// rs1_val==-1431655766 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaaa, -0x55555556, -0x55555556, x2, 508, x1)
    1c34:	aaaab537          	lui	a0,0xaaaab
    1c38:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c3c:	aaaab5b7          	lui	a1,0xaaaab
    1c40:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c44:	00b57633          	and	a2,a0,a1
    1c48:	1ec12e23          	sw	a2,508(sp)

00001c4c <inst_147>:

inst_147:
// rs1_val==-1431655766 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555556, 0x5, x2, 512, x1)
    1c4c:	aaaab537          	lui	a0,0xaaaab
    1c50:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c54:	00500593          	li	a1,5
    1c58:	00b57633          	and	a2,a0,a1
    1c5c:	20c12023          	sw	a2,512(sp)

00001c60 <inst_148>:

inst_148:
// rs1_val==-1431655766 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x22222222, -0x55555556, 0x33333333, x2, 516, x1)
    1c60:	aaaab537          	lui	a0,0xaaaab
    1c64:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c68:	333335b7          	lui	a1,0x33333
    1c6c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1c70:	00b57633          	and	a2,a0,a1
    1c74:	20c12223          	sw	a2,516(sp)

00001c78 <inst_149>:

inst_149:
// rs1_val==-1431655766 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x22222222, -0x55555556, 0x66666666, x2, 520, x1)
    1c78:	aaaab537          	lui	a0,0xaaaab
    1c7c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c80:	666665b7          	lui	a1,0x66666
    1c84:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    1c88:	00b57633          	and	a2,a0,a1
    1c8c:	20c12423          	sw	a2,520(sp)

00001c90 <inst_150>:

inst_150:
// rs1_val==-1431655766 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa8, -0x55555556, -0xb504, x2, 524, x1)
    1c90:	aaaab537          	lui	a0,0xaaaab
    1c94:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1c98:	ffff55b7          	lui	a1,0xffff5
    1c9c:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    1ca0:	00b57633          	and	a2,a0,a1
    1ca4:	20c12623          	sw	a2,524(sp)

00001ca8 <inst_151>:

inst_151:
// rs1_val==-1431655766 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0xa000, -0x55555556, 0xb504, x2, 528, x1)
    1ca8:	aaaab537          	lui	a0,0xaaaab
    1cac:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cb0:	0000b5b7          	lui	a1,0xb
    1cb4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1cb8:	00b57633          	and	a2,a0,a1
    1cbc:	20c12823          	sw	a2,528(sp)

00001cc0 <inst_152>:

inst_152:
// rs1_val==-1431655766 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, -0x55555556, 0x2, x2, 532, x1)
    1cc0:	aaaab537          	lui	a0,0xaaaab
    1cc4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cc8:	00200593          	li	a1,2
    1ccc:	00b57633          	and	a2,a0,a1
    1cd0:	20c12a23          	sw	a2,532(sp)

00001cd4 <inst_153>:

inst_153:
// rs1_val==-1431655766 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555556, 0x55555554, x2, 536, x1)
    1cd4:	aaaab537          	lui	a0,0xaaaab
    1cd8:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cdc:	555555b7          	lui	a1,0x55555
    1ce0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1ce4:	00b57633          	and	a2,a0,a1
    1ce8:	20c12c23          	sw	a2,536(sp)

00001cec <inst_154>:

inst_154:
// rs1_val==-1431655766 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555556, 0x0, x2, 540, x1)
    1cec:	aaaab537          	lui	a0,0xaaaab
    1cf0:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1cf4:	00000593          	li	a1,0
    1cf8:	00b57633          	and	a2,a0,a1
    1cfc:	20c12e23          	sw	a2,540(sp)

00001d00 <inst_155>:

inst_155:
// rs1_val==-1431655766 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555556, 0x4, x2, 544, x1)
    1d00:	aaaab537          	lui	a0,0xaaaab
    1d04:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d08:	00400593          	li	a1,4
    1d0c:	00b57633          	and	a2,a0,a1
    1d10:	22c12023          	sw	a2,544(sp)

00001d14 <inst_156>:

inst_156:
// rs1_val==-1431655766 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x22222222, -0x55555556, 0x33333332, x2, 548, x1)
    1d14:	aaaab537          	lui	a0,0xaaaab
    1d18:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d1c:	333335b7          	lui	a1,0x33333
    1d20:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1d24:	00b57633          	and	a2,a0,a1
    1d28:	22c12223          	sw	a2,548(sp)

00001d2c <inst_157>:

inst_157:
// rs1_val==-1431655766 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x22222220, -0x55555556, 0x66666665, x2, 552, x1)
    1d2c:	aaaab537          	lui	a0,0xaaaab
    1d30:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d34:	666665b7          	lui	a1,0x66666
    1d38:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1d3c:	00b57633          	and	a2,a0,a1
    1d40:	22c12423          	sw	a2,552(sp)

00001d44 <inst_158>:

inst_158:
// rs1_val==-1431655766 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0xa002, -0x55555556, 0xb503, x2, 556, x1)
    1d44:	aaaab537          	lui	a0,0xaaaab
    1d48:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d4c:	0000b5b7          	lui	a1,0xb
    1d50:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    1d54:	00b57633          	and	a2,a0,a1
    1d58:	22c12623          	sw	a2,556(sp)

00001d5c <inst_159>:

inst_159:
// rs1_val==-1431655766 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, -0x55555556, 0x55555556, x2, 560, x1)
    1d5c:	aaaab537          	lui	a0,0xaaaab
    1d60:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d64:	555555b7          	lui	a1,0x55555
    1d68:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1d6c:	00b57633          	and	a2,a0,a1
    1d70:	22c12823          	sw	a2,560(sp)

00001d74 <inst_160>:

inst_160:
// rs1_val==-1431655766 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaaa, -0x55555556, -0x55555555, x2, 564, x1)
    1d74:	aaaab537          	lui	a0,0xaaaab
    1d78:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d7c:	aaaab5b7          	lui	a1,0xaaaab
    1d80:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1d84:	00b57633          	and	a2,a0,a1
    1d88:	22c12a23          	sw	a2,564(sp)

00001d8c <inst_161>:

inst_161:
// rs1_val==-1431655766 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x2, -0x55555556, 0x6, x2, 568, x1)
    1d8c:	aaaab537          	lui	a0,0xaaaab
    1d90:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1d94:	00600593          	li	a1,6
    1d98:	00b57633          	and	a2,a0,a1
    1d9c:	22c12c23          	sw	a2,568(sp)

00001da0 <inst_162>:

inst_162:
// rs1_val==-1431655766 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x22222220, -0x55555556, 0x33333334, x2, 572, x1)
    1da0:	aaaab537          	lui	a0,0xaaaab
    1da4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1da8:	333335b7          	lui	a1,0x33333
    1dac:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    1db0:	00b57633          	and	a2,a0,a1
    1db4:	22c12e23          	sw	a2,572(sp)

00001db8 <inst_163>:

inst_163:
// rs1_val==-1431655766 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x22222222, -0x55555556, 0x66666667, x2, 576, x1)
    1db8:	aaaab537          	lui	a0,0xaaaab
    1dbc:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1dc0:	666665b7          	lui	a1,0x66666
    1dc4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    1dc8:	00b57633          	and	a2,a0,a1
    1dcc:	24c12023          	sw	a2,576(sp)

00001dd0 <inst_164>:

inst_164:
// rs1_val==-1431655766 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa8, -0x55555556, -0xb503, x2, 580, x1)
    1dd0:	aaaab537          	lui	a0,0xaaaab
    1dd4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1dd8:	ffff55b7          	lui	a1,0xffff5
    1ddc:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1de0:	00b57633          	and	a2,a0,a1
    1de4:	24c12223          	sw	a2,580(sp)

00001de8 <inst_165>:

inst_165:
// rs1_val==-1431655766 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0xa000, -0x55555556, 0xb505, x2, 584, x1)
    1de8:	aaaab537          	lui	a0,0xaaaab
    1dec:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1df0:	0000b5b7          	lui	a1,0xb
    1df4:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1df8:	00b57633          	and	a2,a0,a1
    1dfc:	24c12423          	sw	a2,584(sp)

00001e00 <inst_166>:

inst_166:
// rs1_val==5 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x5, 0x3, x2, 588, x1)
    1e00:	00500513          	li	a0,5
    1e04:	00300593          	li	a1,3
    1e08:	00b57633          	and	a2,a0,a1
    1e0c:	24c12623          	sw	a2,588(sp)

00001e10 <inst_167>:

inst_167:
// rs1_val==5 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x5, 0x55555555, x2, 592, x1)
    1e10:	00500513          	li	a0,5
    1e14:	555555b7          	lui	a1,0x55555
    1e18:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1e1c:	00b57633          	and	a2,a0,a1
    1e20:	24c12823          	sw	a2,592(sp)

00001e24 <inst_168>:

inst_168:
// rs1_val==5 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x5, -0x55555556, x2, 596, x1)
    1e24:	00500513          	li	a0,5
    1e28:	aaaab5b7          	lui	a1,0xaaaab
    1e2c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1e30:	00b57633          	and	a2,a0,a1
    1e34:	24c12a23          	sw	a2,596(sp)

00001e38 <inst_169>:

inst_169:
// rs1_val==5 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x5, 0x33333333, x2, 600, x1)
    1e38:	00500513          	li	a0,5
    1e3c:	333335b7          	lui	a1,0x33333
    1e40:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1e44:	00b57633          	and	a2,a0,a1
    1e48:	24c12c23          	sw	a2,600(sp)

00001e4c <inst_170>:

inst_170:
// rs1_val==5 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, 0x66666666, x2, 604, x1)
    1e4c:	00500513          	li	a0,5
    1e50:	666665b7          	lui	a1,0x66666
    1e54:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    1e58:	00b57633          	and	a2,a0,a1
    1e5c:	24c12e23          	sw	a2,604(sp)

00001e60 <inst_171>:

inst_171:
// rs1_val==5 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, -0xb504, x2, 608, x1)
    1e60:	00500513          	li	a0,5
    1e64:	ffff55b7          	lui	a1,0xffff5
    1e68:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    1e6c:	00b57633          	and	a2,a0,a1
    1e70:	26c12023          	sw	a2,608(sp)

00001e74 <inst_172>:

inst_172:
// rs1_val==5 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, 0xb504, x2, 612, x1)
    1e74:	00500513          	li	a0,5
    1e78:	0000b5b7          	lui	a1,0xb
    1e7c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    1e80:	00b57633          	and	a2,a0,a1
    1e84:	26c12223          	sw	a2,612(sp)

00001e88 <inst_173>:

inst_173:
// rs1_val==5 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x5, 0x2, x2, 616, x1)
    1e88:	00500513          	li	a0,5
    1e8c:	00200593          	li	a1,2
    1e90:	00b57633          	and	a2,a0,a1
    1e94:	26c12423          	sw	a2,616(sp)

00001e98 <inst_174>:

inst_174:
// rs1_val==5 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, 0x55555554, x2, 620, x1)
    1e98:	00500513          	li	a0,5
    1e9c:	555555b7          	lui	a1,0x55555
    1ea0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    1ea4:	00b57633          	and	a2,a0,a1
    1ea8:	26c12623          	sw	a2,620(sp)

00001eac <inst_175>:

inst_175:
// rs1_val==5 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x5, 0x0, x2, 624, x1)
    1eac:	00500513          	li	a0,5
    1eb0:	00000593          	li	a1,0
    1eb4:	00b57633          	and	a2,a0,a1
    1eb8:	26c12823          	sw	a2,624(sp)

00001ebc <inst_176>:

inst_176:
// rs1_val==5 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, 0x4, x2, 628, x1)
    1ebc:	00500513          	li	a0,5
    1ec0:	00400593          	li	a1,4
    1ec4:	00b57633          	and	a2,a0,a1
    1ec8:	26c12a23          	sw	a2,628(sp)

00001ecc <inst_177>:

inst_177:
// rs1_val==5 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x5, 0x33333332, x2, 632, x1)
    1ecc:	00500513          	li	a0,5
    1ed0:	333335b7          	lui	a1,0x33333
    1ed4:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    1ed8:	00b57633          	and	a2,a0,a1
    1edc:	26c12c23          	sw	a2,632(sp)

00001ee0 <inst_178>:

inst_178:
// rs1_val==5 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x5, 0x66666665, x2, 636, x1)
    1ee0:	00500513          	li	a0,5
    1ee4:	666665b7          	lui	a1,0x66666
    1ee8:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    1eec:	00b57633          	and	a2,a0,a1
    1ef0:	26c12e23          	sw	a2,636(sp)

00001ef4 <inst_179>:

inst_179:
// rs1_val==5 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x5, 0xb503, x2, 640, x1)
    1ef4:	00500513          	li	a0,5
    1ef8:	0000b5b7          	lui	a1,0xb
    1efc:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    1f00:	00b57633          	and	a2,a0,a1
    1f04:	28c12023          	sw	a2,640(sp)

00001f08 <inst_180>:

inst_180:
// rs1_val==5 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, 0x55555556, x2, 644, x1)
    1f08:	00500513          	li	a0,5
    1f0c:	555555b7          	lui	a1,0x55555
    1f10:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    1f14:	00b57633          	and	a2,a0,a1
    1f18:	28c12223          	sw	a2,644(sp)

00001f1c <inst_181>:

inst_181:
// rs1_val==5 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x5, -0x55555555, x2, 648, x1)
    1f1c:	00500513          	li	a0,5
    1f20:	aaaab5b7          	lui	a1,0xaaaab
    1f24:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    1f28:	00b57633          	and	a2,a0,a1
    1f2c:	28c12423          	sw	a2,648(sp)

00001f30 <inst_182>:

inst_182:
// rs1_val==5 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, 0x6, x2, 652, x1)
    1f30:	00500513          	li	a0,5
    1f34:	00600593          	li	a1,6
    1f38:	00b57633          	and	a2,a0,a1
    1f3c:	28c12623          	sw	a2,652(sp)

00001f40 <inst_183>:

inst_183:
// rs1_val==5 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x5, 0x33333334, x2, 656, x1)
    1f40:	00500513          	li	a0,5
    1f44:	333335b7          	lui	a1,0x33333
    1f48:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    1f4c:	00b57633          	and	a2,a0,a1
    1f50:	28c12823          	sw	a2,656(sp)

00001f54 <inst_184>:

inst_184:
// rs1_val==5 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x5, 0x66666667, x2, 660, x1)
    1f54:	00500513          	li	a0,5
    1f58:	666665b7          	lui	a1,0x66666
    1f5c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    1f60:	00b57633          	and	a2,a0,a1
    1f64:	28c12a23          	sw	a2,660(sp)

00001f68 <inst_185>:

inst_185:
// rs1_val==5 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x5, -0xb503, x2, 664, x1)
    1f68:	00500513          	li	a0,5
    1f6c:	ffff55b7          	lui	a1,0xffff5
    1f70:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    1f74:	00b57633          	and	a2,a0,a1
    1f78:	28c12c23          	sw	a2,664(sp)

00001f7c <inst_186>:

inst_186:
// rs1_val==5 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x5, 0xb505, x2, 668, x1)
    1f7c:	00500513          	li	a0,5
    1f80:	0000b5b7          	lui	a1,0xb
    1f84:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    1f88:	00b57633          	and	a2,a0,a1
    1f8c:	28c12e23          	sw	a2,668(sp)

00001f90 <inst_187>:

inst_187:
// rs1_val==858993459 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x33333333, 0x3, x2, 672, x1)
    1f90:	33333537          	lui	a0,0x33333
    1f94:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    1f98:	00300593          	li	a1,3
    1f9c:	00b57633          	and	a2,a0,a1
    1fa0:	2ac12023          	sw	a2,672(sp)

00001fa4 <inst_188>:

inst_188:
// rs1_val==858993459 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x11111111, 0x33333333, 0x55555555, x2, 676, x1)
    1fa4:	33333537          	lui	a0,0x33333
    1fa8:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    1fac:	555555b7          	lui	a1,0x55555
    1fb0:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    1fb4:	00b57633          	and	a2,a0,a1
    1fb8:	2ac12223          	sw	a2,676(sp)

00001fbc <inst_189>:

inst_189:
// rs1_val==858993459 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x33333333, -0x55555556, x2, 680, x1)
    1fbc:	33333537          	lui	a0,0x33333
    1fc0:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    1fc4:	aaaab5b7          	lui	a1,0xaaaab
    1fc8:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    1fcc:	00b57633          	and	a2,a0,a1
    1fd0:	2ac12423          	sw	a2,680(sp)

00001fd4 <inst_190>:

inst_190:
// rs1_val==858993459 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x33333333, 0x5, x2, 684, x1)
    1fd4:	33333537          	lui	a0,0x33333
    1fd8:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    1fdc:	00500593          	li	a1,5
    1fe0:	00b57633          	and	a2,a0,a1
    1fe4:	2ac12623          	sw	a2,684(sp)

00001fe8 <inst_191>:

inst_191:
// rs1_val==858993459 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x33333333, 0x33333333, 0x33333333, x2, 688, x1)
    1fe8:	33333537          	lui	a0,0x33333
    1fec:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    1ff0:	333335b7          	lui	a1,0x33333
    1ff4:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    1ff8:	00b57633          	and	a2,a0,a1
    1ffc:	2ac12823          	sw	a2,688(sp)

00002000 <inst_192>:

inst_192:
// rs1_val==858993459 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x33333333, 0x66666666, x2, 692, x1)
    2000:	33333537          	lui	a0,0x33333
    2004:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2008:	666665b7          	lui	a1,0x66666
    200c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2010:	00b57633          	and	a2,a0,a1
    2014:	2ac12a23          	sw	a2,692(sp)

00002018 <inst_193>:

inst_193:
// rs1_val==858993459 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x33330230, 0x33333333, -0xb504, x2, 696, x1)
    2018:	33333537          	lui	a0,0x33333
    201c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2020:	ffff55b7          	lui	a1,0xffff5
    2024:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2028:	00b57633          	and	a2,a0,a1
    202c:	2ac12c23          	sw	a2,696(sp)

00002030 <inst_194>:

inst_194:
// rs1_val==858993459 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0x33333333, 0xb504, x2, 700, x1)
    2030:	33333537          	lui	a0,0x33333
    2034:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2038:	0000b5b7          	lui	a1,0xb
    203c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2040:	00b57633          	and	a2,a0,a1
    2044:	2ac12e23          	sw	a2,700(sp)

00002048 <inst_195>:

inst_195:
// rs1_val==858993459 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x33333333, 0x2, x2, 704, x1)
    2048:	33333537          	lui	a0,0x33333
    204c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2050:	00200593          	li	a1,2
    2054:	00b57633          	and	a2,a0,a1
    2058:	2cc12023          	sw	a2,704(sp)

0000205c <inst_196>:

inst_196:
// rs1_val==858993459 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x11111110, 0x33333333, 0x55555554, x2, 708, x1)
    205c:	33333537          	lui	a0,0x33333
    2060:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2064:	555555b7          	lui	a1,0x55555
    2068:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    206c:	00b57633          	and	a2,a0,a1
    2070:	2cc12223          	sw	a2,708(sp)

00002074 <inst_197>:

inst_197:
// rs1_val==858993459 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x33333333, 0x4, x2, 712, x1)
    2074:	33333537          	lui	a0,0x33333
    2078:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    207c:	00400593          	li	a1,4
    2080:	00b57633          	and	a2,a0,a1
    2084:	2cc12423          	sw	a2,712(sp)

00002088 <inst_198>:

inst_198:
// rs1_val==858993459 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x33333332, 0x33333333, 0x33333332, x2, 716, x1)
    2088:	33333537          	lui	a0,0x33333
    208c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2090:	333335b7          	lui	a1,0x33333
    2094:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2098:	00b57633          	and	a2,a0,a1
    209c:	2cc12623          	sw	a2,716(sp)

000020a0 <inst_199>:

inst_199:
// rs1_val==858993459 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x22222221, 0x33333333, 0x66666665, x2, 720, x1)
    20a0:	33333537          	lui	a0,0x33333
    20a4:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20a8:	666665b7          	lui	a1,0x66666
    20ac:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    20b0:	00b57633          	and	a2,a0,a1
    20b4:	2cc12823          	sw	a2,720(sp)

000020b8 <inst_200>:

inst_200:
// rs1_val==858993459 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x3103, 0x33333333, 0xb503, x2, 724, x1)
    20b8:	33333537          	lui	a0,0x33333
    20bc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20c0:	0000b5b7          	lui	a1,0xb
    20c4:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    20c8:	00b57633          	and	a2,a0,a1
    20cc:	2cc12a23          	sw	a2,724(sp)

000020d0 <inst_201>:

inst_201:
// rs1_val==858993459 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x11111112, 0x33333333, 0x55555556, x2, 728, x1)
    20d0:	33333537          	lui	a0,0x33333
    20d4:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20d8:	555555b7          	lui	a1,0x55555
    20dc:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    20e0:	00b57633          	and	a2,a0,a1
    20e4:	2cc12c23          	sw	a2,728(sp)

000020e8 <inst_202>:

inst_202:
// rs1_val==858993459 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x22222223, 0x33333333, -0x55555555, x2, 732, x1)
    20e8:	33333537          	lui	a0,0x33333
    20ec:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    20f0:	aaaab5b7          	lui	a1,0xaaaab
    20f4:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    20f8:	00b57633          	and	a2,a0,a1
    20fc:	2cc12e23          	sw	a2,732(sp)

00002100 <inst_203>:

inst_203:
// rs1_val==858993459 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x33333333, 0x6, x2, 736, x1)
    2100:	33333537          	lui	a0,0x33333
    2104:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2108:	00600593          	li	a1,6
    210c:	00b57633          	and	a2,a0,a1
    2110:	2ec12023          	sw	a2,736(sp)

00002114 <inst_204>:

inst_204:
// rs1_val==858993459 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x33333330, 0x33333333, 0x33333334, x2, 740, x1)
    2114:	33333537          	lui	a0,0x33333
    2118:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    211c:	333335b7          	lui	a1,0x33333
    2120:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2124:	00b57633          	and	a2,a0,a1
    2128:	2ec12223          	sw	a2,740(sp)

0000212c <inst_205>:

inst_205:
// rs1_val==858993459 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x22222223, 0x33333333, 0x66666667, x2, 744, x1)
    212c:	33333537          	lui	a0,0x33333
    2130:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2134:	666665b7          	lui	a1,0x66666
    2138:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    213c:	00b57633          	and	a2,a0,a1
    2140:	2ec12423          	sw	a2,744(sp)

00002144 <inst_206>:

inst_206:
// rs1_val==858993459 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x33330231, 0x33333333, -0xb503, x2, 748, x1)
    2144:	33333537          	lui	a0,0x33333
    2148:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    214c:	ffff55b7          	lui	a1,0xffff5
    2150:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2154:	00b57633          	and	a2,a0,a1
    2158:	2ec12623          	sw	a2,748(sp)

0000215c <inst_207>:

inst_207:
// rs1_val==858993459 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333333;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x3101, 0x33333333, 0xb505, x2, 752, x1)
    215c:	33333537          	lui	a0,0x33333
    2160:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332d32f>
    2164:	0000b5b7          	lui	a1,0xb
    2168:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    216c:	00b57633          	and	a2,a0,a1
    2170:	2ec12823          	sw	a2,752(sp)

00002174 <inst_208>:

inst_208:
// rs1_val==1717986918 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x66666666, 0x3, x2, 756, x1)
    2174:	66666537          	lui	a0,0x66666
    2178:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    217c:	00300593          	li	a1,3
    2180:	00b57633          	and	a2,a0,a1
    2184:	2ec12a23          	sw	a2,756(sp)

00002188 <inst_209>:

inst_209:
// rs1_val==1717986918 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x66666666, 0x55555555, x2, 760, x1)
    2188:	66666537          	lui	a0,0x66666
    218c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2190:	555555b7          	lui	a1,0x55555
    2194:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2198:	00b57633          	and	a2,a0,a1
    219c:	2ec12c23          	sw	a2,760(sp)

000021a0 <inst_210>:

inst_210:
// rs1_val==1717986918 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x66666666, -0x55555556, x2, 764, x1)
    21a0:	66666537          	lui	a0,0x66666
    21a4:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    21a8:	aaaab5b7          	lui	a1,0xaaaab
    21ac:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    21b0:	00b57633          	and	a2,a0,a1
    21b4:	2ec12e23          	sw	a2,764(sp)

000021b8 <inst_211>:

inst_211:
// rs1_val==1717986918 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x66666666, 0x5, x2, 768, x1)
    21b8:	66666537          	lui	a0,0x66666
    21bc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    21c0:	00500593          	li	a1,5
    21c4:	00b57633          	and	a2,a0,a1
    21c8:	30c12023          	sw	a2,768(sp)

000021cc <inst_212>:

inst_212:
// rs1_val==1717986918 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x66666666, 0x33333333, x2, 772, x1)
    21cc:	66666537          	lui	a0,0x66666
    21d0:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    21d4:	333335b7          	lui	a1,0x33333
    21d8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    21dc:	00b57633          	and	a2,a0,a1
    21e0:	30c12223          	sw	a2,772(sp)

000021e4 <inst_213>:

inst_213:
// rs1_val==1717986918 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x66666666, 0x66666666, 0x66666666, x2, 776, x1)
    21e4:	66666537          	lui	a0,0x66666
    21e8:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    21ec:	666665b7          	lui	a1,0x66666
    21f0:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    21f4:	00b57633          	and	a2,a0,a1
    21f8:	30c12423          	sw	a2,776(sp)

000021fc <inst_214>:

inst_214:
// rs1_val==1717986918 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x66664264, 0x66666666, -0xb504, x2, 780, x1)
    21fc:	66666537          	lui	a0,0x66666
    2200:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2204:	ffff55b7          	lui	a1,0xffff5
    2208:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    220c:	00b57633          	and	a2,a0,a1
    2210:	30c12623          	sw	a2,780(sp)

00002214 <inst_215>:

inst_215:
// rs1_val==1717986918 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0x66666666, 0xb504, x2, 784, x1)
    2214:	66666537          	lui	a0,0x66666
    2218:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    221c:	0000b5b7          	lui	a1,0xb
    2220:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2224:	00b57633          	and	a2,a0,a1
    2228:	30c12823          	sw	a2,784(sp)

0000222c <inst_216>:

inst_216:
// rs1_val==1717986918 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x66666666, 0x2, x2, 788, x1)
    222c:	66666537          	lui	a0,0x66666
    2230:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2234:	00200593          	li	a1,2
    2238:	00b57633          	and	a2,a0,a1
    223c:	30c12a23          	sw	a2,788(sp)

00002240 <inst_217>:

inst_217:
// rs1_val==1717986918 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x66666666, 0x55555554, x2, 792, x1)
    2240:	66666537          	lui	a0,0x66666
    2244:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2248:	555555b7          	lui	a1,0x55555
    224c:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2250:	00b57633          	and	a2,a0,a1
    2254:	30c12c23          	sw	a2,792(sp)

00002258 <inst_218>:

inst_218:
// rs1_val==1717986918 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x66666666, 0x0, x2, 796, x1)
    2258:	66666537          	lui	a0,0x66666
    225c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2260:	00000593          	li	a1,0
    2264:	00b57633          	and	a2,a0,a1
    2268:	30c12e23          	sw	a2,796(sp)

0000226c <inst_219>:

inst_219:
// rs1_val==1717986918 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x66666666, 0x4, x2, 800, x1)
    226c:	66666537          	lui	a0,0x66666
    2270:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2274:	00400593          	li	a1,4
    2278:	00b57633          	and	a2,a0,a1
    227c:	32c12023          	sw	a2,800(sp)

00002280 <inst_220>:

inst_220:
// rs1_val==1717986918 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x66666666, 0x33333332, x2, 804, x1)
    2280:	66666537          	lui	a0,0x66666
    2284:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2288:	333335b7          	lui	a1,0x33333
    228c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2290:	00b57633          	and	a2,a0,a1
    2294:	32c12223          	sw	a2,804(sp)

00002298 <inst_221>:

inst_221:
// rs1_val==1717986918 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x66666664, 0x66666666, 0x66666665, x2, 808, x1)
    2298:	66666537          	lui	a0,0x66666
    229c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22a0:	666665b7          	lui	a1,0x66666
    22a4:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    22a8:	00b57633          	and	a2,a0,a1
    22ac:	32c12423          	sw	a2,808(sp)

000022b0 <inst_222>:

inst_222:
// rs1_val==1717986918 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x2402, 0x66666666, 0xb503, x2, 812, x1)
    22b0:	66666537          	lui	a0,0x66666
    22b4:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22b8:	0000b5b7          	lui	a1,0xb
    22bc:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    22c0:	00b57633          	and	a2,a0,a1
    22c4:	32c12623          	sw	a2,812(sp)

000022c8 <inst_223>:

inst_223:
// rs1_val==1717986918 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x44444446, 0x66666666, 0x55555556, x2, 816, x1)
    22c8:	66666537          	lui	a0,0x66666
    22cc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22d0:	555555b7          	lui	a1,0x55555
    22d4:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    22d8:	00b57633          	and	a2,a0,a1
    22dc:	32c12823          	sw	a2,816(sp)

000022e0 <inst_224>:

inst_224:
// rs1_val==1717986918 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x66666666, -0x55555555, x2, 820, x1)
    22e0:	66666537          	lui	a0,0x66666
    22e4:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    22e8:	aaaab5b7          	lui	a1,0xaaaab
    22ec:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    22f0:	00b57633          	and	a2,a0,a1
    22f4:	32c12a23          	sw	a2,820(sp)

000022f8 <inst_225>:

inst_225:
// rs1_val==1717986918 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x66666666, 0x6, x2, 824, x1)
    22f8:	66666537          	lui	a0,0x66666
    22fc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2300:	00600593          	li	a1,6
    2304:	00b57633          	and	a2,a0,a1
    2308:	32c12c23          	sw	a2,824(sp)

0000230c <inst_226>:

inst_226:
// rs1_val==1717986918 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x22222224, 0x66666666, 0x33333334, x2, 828, x1)
    230c:	66666537          	lui	a0,0x66666
    2310:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2314:	333335b7          	lui	a1,0x33333
    2318:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    231c:	00b57633          	and	a2,a0,a1
    2320:	32c12e23          	sw	a2,828(sp)

00002324 <inst_227>:

inst_227:
// rs1_val==1717986918 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x66666666, 0x66666666, 0x66666667, x2, 832, x1)
    2324:	66666537          	lui	a0,0x66666
    2328:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    232c:	666665b7          	lui	a1,0x66666
    2330:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2334:	00b57633          	and	a2,a0,a1
    2338:	34c12023          	sw	a2,832(sp)

0000233c <inst_228>:

inst_228:
// rs1_val==1717986918 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x66664264, 0x66666666, -0xb503, x2, 836, x1)
    233c:	66666537          	lui	a0,0x66666
    2340:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    2344:	ffff55b7          	lui	a1,0xffff5
    2348:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    234c:	00b57633          	and	a2,a0,a1
    2350:	34c12223          	sw	a2,836(sp)

00002354 <inst_229>:

inst_229:
// rs1_val==1717986918 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0x66666666, 0xb505, x2, 840, x1)
    2354:	66666537          	lui	a0,0x66666
    2358:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66660662>
    235c:	0000b5b7          	lui	a1,0xb
    2360:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2364:	00b57633          	and	a2,a0,a1
    2368:	34c12423          	sw	a2,840(sp)

0000236c <inst_230>:

inst_230:
// rs1_val==-46340 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x0, -0xb504, 0x3, x2, 844, x1)
    236c:	ffff5537          	lui	a0,0xffff5
    2370:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2374:	00300593          	li	a1,3
    2378:	00b57633          	and	a2,a0,a1
    237c:	34c12623          	sw	a2,844(sp)

00002380 <inst_231>:

inst_231:
// rs1_val==-46340 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x55554054, -0xb504, 0x55555555, x2, 848, x1)
    2380:	ffff5537          	lui	a0,0xffff5
    2384:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2388:	555555b7          	lui	a1,0x55555
    238c:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2390:	00b57633          	and	a2,a0,a1
    2394:	34c12823          	sw	a2,848(sp)

00002398 <inst_232>:

inst_232:
// rs1_val==-46340 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb504, 0x5, x2, 852, x1)
    2398:	ffff5537          	lui	a0,0xffff5
    239c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    23a0:	00500593          	li	a1,5
    23a4:	00b57633          	and	a2,a0,a1
    23a8:	34c12a23          	sw	a2,852(sp)

000023ac <inst_233>:

inst_233:
// rs1_val==-46340 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x33330230, -0xb504, 0x33333333, x2, 856, x1)
    23ac:	ffff5537          	lui	a0,0xffff5
    23b0:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    23b4:	333335b7          	lui	a1,0x33333
    23b8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    23bc:	00b57633          	and	a2,a0,a1
    23c0:	34c12c23          	sw	a2,856(sp)

000023c4 <inst_234>:

inst_234:
// rs1_val==-46340 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x66664264, -0xb504, 0x66666666, x2, 860, x1)
    23c4:	ffff5537          	lui	a0,0xffff5
    23c8:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    23cc:	666665b7          	lui	a1,0x66666
    23d0:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    23d4:	00b57633          	and	a2,a0,a1
    23d8:	34c12e23          	sw	a2,860(sp)

000023dc <inst_235>:

inst_235:
// rs1_val==-46340 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0xffff4afc, -0xb504, -0xb504, x2, 864, x1)
    23dc:	ffff5537          	lui	a0,0xffff5
    23e0:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    23e4:	ffff55b7          	lui	a1,0xffff5
    23e8:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    23ec:	00b57633          	and	a2,a0,a1
    23f0:	36c12023          	sw	a2,864(sp)

000023f4 <inst_236>:

inst_236:
// rs1_val==-46340 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb504, 0xb504, x2, 868, x1)
    23f4:	ffff5537          	lui	a0,0xffff5
    23f8:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    23fc:	0000b5b7          	lui	a1,0xb
    2400:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2404:	00b57633          	and	a2,a0,a1
    2408:	36c12223          	sw	a2,868(sp)

0000240c <inst_237>:

inst_237:
// rs1_val==-46340 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, -0xb504, 0x2, x2, 872, x1)
    240c:	ffff5537          	lui	a0,0xffff5
    2410:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2414:	00200593          	li	a1,2
    2418:	00b57633          	and	a2,a0,a1
    241c:	36c12423          	sw	a2,872(sp)

00002420 <inst_238>:

inst_238:
// rs1_val==-46340 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x55554054, -0xb504, 0x55555554, x2, 876, x1)
    2420:	ffff5537          	lui	a0,0xffff5
    2424:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2428:	555555b7          	lui	a1,0x55555
    242c:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2430:	00b57633          	and	a2,a0,a1
    2434:	36c12623          	sw	a2,876(sp)

00002438 <inst_239>:

inst_239:
// rs1_val==-46340 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, -0xb504, 0x0, x2, 880, x1)
    2438:	ffff5537          	lui	a0,0xffff5
    243c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2440:	00000593          	li	a1,0
    2444:	00b57633          	and	a2,a0,a1
    2448:	36c12823          	sw	a2,880(sp)

0000244c <inst_240>:

inst_240:
// rs1_val==-46340 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb504, 0x4, x2, 884, x1)
    244c:	ffff5537          	lui	a0,0xffff5
    2450:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2454:	00400593          	li	a1,4
    2458:	00b57633          	and	a2,a0,a1
    245c:	36c12a23          	sw	a2,884(sp)

00002460 <inst_241>:

inst_241:
// rs1_val==-46340 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x33330230, -0xb504, 0x33333332, x2, 888, x1)
    2460:	ffff5537          	lui	a0,0xffff5
    2464:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2468:	333335b7          	lui	a1,0x33333
    246c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2470:	00b57633          	and	a2,a0,a1
    2474:	36c12c23          	sw	a2,888(sp)

00002478 <inst_242>:

inst_242:
// rs1_val==-46340 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x66664264, -0xb504, 0x66666665, x2, 892, x1)
    2478:	ffff5537          	lui	a0,0xffff5
    247c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2480:	666665b7          	lui	a1,0x66666
    2484:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2488:	00b57633          	and	a2,a0,a1
    248c:	36c12e23          	sw	a2,892(sp)

00002490 <inst_243>:

inst_243:
// rs1_val==-46340 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x0, -0xb504, 0xb503, x2, 896, x1)
    2490:	ffff5537          	lui	a0,0xffff5
    2494:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2498:	0000b5b7          	lui	a1,0xb
    249c:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    24a0:	00b57633          	and	a2,a0,a1
    24a4:	38c12023          	sw	a2,896(sp)

000024a8 <inst_244>:

inst_244:
// rs1_val==-46340 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x55554054, -0xb504, 0x55555556, x2, 900, x1)
    24a8:	ffff5537          	lui	a0,0xffff5
    24ac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24b0:	555555b7          	lui	a1,0x55555
    24b4:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    24b8:	00b57633          	and	a2,a0,a1
    24bc:	38c12223          	sw	a2,900(sp)

000024c0 <inst_245>:

inst_245:
// rs1_val==-46340 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa8, -0xb504, -0x55555555, x2, 904, x1)
    24c0:	ffff5537          	lui	a0,0xffff5
    24c4:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24c8:	aaaab5b7          	lui	a1,0xaaaab
    24cc:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    24d0:	00b57633          	and	a2,a0,a1
    24d4:	38c12423          	sw	a2,904(sp)

000024d8 <inst_246>:

inst_246:
// rs1_val==-46340 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb504, 0x6, x2, 908, x1)
    24d8:	ffff5537          	lui	a0,0xffff5
    24dc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24e0:	00600593          	li	a1,6
    24e4:	00b57633          	and	a2,a0,a1
    24e8:	38c12623          	sw	a2,908(sp)

000024ec <inst_247>:

inst_247:
// rs1_val==-46340 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x33330234, -0xb504, 0x33333334, x2, 912, x1)
    24ec:	ffff5537          	lui	a0,0xffff5
    24f0:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    24f4:	333335b7          	lui	a1,0x33333
    24f8:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    24fc:	00b57633          	and	a2,a0,a1
    2500:	38c12823          	sw	a2,912(sp)

00002504 <inst_248>:

inst_248:
// rs1_val==-46340 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x66664264, -0xb504, 0x66666667, x2, 916, x1)
    2504:	ffff5537          	lui	a0,0xffff5
    2508:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    250c:	666665b7          	lui	a1,0x66666
    2510:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2514:	00b57633          	and	a2,a0,a1
    2518:	38c12a23          	sw	a2,916(sp)

0000251c <inst_249>:

inst_249:
// rs1_val==-46340 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0xffff4afc, -0xb504, -0xb503, x2, 920, x1)
    251c:	ffff5537          	lui	a0,0xffff5
    2520:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    2524:	ffff55b7          	lui	a1,0xffff5
    2528:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    252c:	00b57633          	and	a2,a0,a1
    2530:	38c12c23          	sw	a2,920(sp)

00002534 <inst_250>:

inst_250:
// rs1_val==-46340 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb504, 0xb505, x2, 924, x1)
    2534:	ffff5537          	lui	a0,0xffff5
    2538:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffeeaf8>
    253c:	0000b5b7          	lui	a1,0xb
    2540:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2544:	00b57633          	and	a2,a0,a1
    2548:	38c12e23          	sw	a2,924(sp)

0000254c <inst_251>:

inst_251:
// rs1_val==46340 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb504, 0x3, x2, 928, x1)
    254c:	0000b537          	lui	a0,0xb
    2550:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2554:	00300593          	li	a1,3
    2558:	00b57633          	and	a2,a0,a1
    255c:	3ac12023          	sw	a2,928(sp)

00002560 <inst_252>:

inst_252:
// rs1_val==46340 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0xb504, 0x55555555, x2, 932, x1)
    2560:	0000b537          	lui	a0,0xb
    2564:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2568:	555555b7          	lui	a1,0x55555
    256c:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2570:	00b57633          	and	a2,a0,a1
    2574:	3ac12223          	sw	a2,932(sp)

00002578 <inst_253>:

inst_253:
// rs1_val==46340 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0xa000, 0xb504, -0x55555556, x2, 936, x1)
    2578:	0000b537          	lui	a0,0xb
    257c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2580:	aaaab5b7          	lui	a1,0xaaaab
    2584:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2588:	00b57633          	and	a2,a0,a1
    258c:	3ac12423          	sw	a2,936(sp)

00002590 <inst_254>:

inst_254:
// rs1_val==46340 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb504, 0x5, x2, 940, x1)
    2590:	0000b537          	lui	a0,0xb
    2594:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2598:	00500593          	li	a1,5
    259c:	00b57633          	and	a2,a0,a1
    25a0:	3ac12623          	sw	a2,940(sp)

000025a4 <inst_255>:

inst_255:
// rs1_val==46340 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0xb504, 0x33333333, x2, 944, x1)
    25a4:	0000b537          	lui	a0,0xb
    25a8:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    25ac:	333335b7          	lui	a1,0x33333
    25b0:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    25b4:	00b57633          	and	a2,a0,a1
    25b8:	3ac12823          	sw	a2,944(sp)

000025bc <inst_256>:

inst_256:
// rs1_val==46340 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0xb504, 0x66666666, x2, 948, x1)
    25bc:	0000b537          	lui	a0,0xb
    25c0:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    25c4:	666665b7          	lui	a1,0x66666
    25c8:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    25cc:	00b57633          	and	a2,a0,a1
    25d0:	3ac12a23          	sw	a2,948(sp)

000025d4 <inst_257>:

inst_257:
// rs1_val==46340 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb504, -0xb504, x2, 952, x1)
    25d4:	0000b537          	lui	a0,0xb
    25d8:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    25dc:	ffff55b7          	lui	a1,0xffff5
    25e0:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    25e4:	00b57633          	and	a2,a0,a1
    25e8:	3ac12c23          	sw	a2,952(sp)

000025ec <inst_258>:

inst_258:
// rs1_val==46340 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0xb504, 0xb504, 0xb504, x2, 956, x1)
    25ec:	0000b537          	lui	a0,0xb
    25f0:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    25f4:	0000b5b7          	lui	a1,0xb
    25f8:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    25fc:	00b57633          	and	a2,a0,a1
    2600:	3ac12e23          	sw	a2,956(sp)

00002604 <inst_259>:

inst_259:
// rs1_val==46340 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb504, 0x2, x2, 960, x1)
    2604:	0000b537          	lui	a0,0xb
    2608:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    260c:	00200593          	li	a1,2
    2610:	00b57633          	and	a2,a0,a1
    2614:	3cc12023          	sw	a2,960(sp)

00002618 <inst_260>:

inst_260:
// rs1_val==46340 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0xb504, 0x55555554, x2, 964, x1)
    2618:	0000b537          	lui	a0,0xb
    261c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2620:	555555b7          	lui	a1,0x55555
    2624:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2628:	00b57633          	and	a2,a0,a1
    262c:	3cc12223          	sw	a2,964(sp)

00002630 <inst_261>:

inst_261:
// rs1_val==46340 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb504, 0x0, x2, 968, x1)
    2630:	0000b537          	lui	a0,0xb
    2634:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2638:	00000593          	li	a1,0
    263c:	00b57633          	and	a2,a0,a1
    2640:	3cc12423          	sw	a2,968(sp)

00002644 <inst_262>:

inst_262:
// rs1_val==46340 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb504, 0x4, x2, 972, x1)
    2644:	0000b537          	lui	a0,0xb
    2648:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    264c:	00400593          	li	a1,4
    2650:	00b57633          	and	a2,a0,a1
    2654:	3cc12623          	sw	a2,972(sp)

00002658 <inst_263>:

inst_263:
// rs1_val==46340 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0xb504, 0x33333332, x2, 976, x1)
    2658:	0000b537          	lui	a0,0xb
    265c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2660:	333335b7          	lui	a1,0x33333
    2664:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2668:	00b57633          	and	a2,a0,a1
    266c:	3cc12823          	sw	a2,976(sp)

00002670 <inst_264>:

inst_264:
// rs1_val==46340 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0xb504, 0x66666665, x2, 980, x1)
    2670:	0000b537          	lui	a0,0xb
    2674:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2678:	666665b7          	lui	a1,0x66666
    267c:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2680:	00b57633          	and	a2,a0,a1
    2684:	3cc12a23          	sw	a2,980(sp)

00002688 <inst_265>:

inst_265:
// rs1_val==46340 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0xb500, 0xb504, 0xb503, x2, 984, x1)
    2688:	0000b537          	lui	a0,0xb
    268c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2690:	0000b5b7          	lui	a1,0xb
    2694:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2698:	00b57633          	and	a2,a0,a1
    269c:	3cc12c23          	sw	a2,984(sp)

000026a0 <inst_266>:

inst_266:
// rs1_val==46340 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0xb504, 0x55555556, x2, 988, x1)
    26a0:	0000b537          	lui	a0,0xb
    26a4:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26a8:	555555b7          	lui	a1,0x55555
    26ac:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    26b0:	00b57633          	and	a2,a0,a1
    26b4:	3cc12e23          	sw	a2,988(sp)

000026b8 <inst_267>:

inst_267:
// rs1_val==46340 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0xa000, 0xb504, -0x55555555, x2, 992, x1)
    26b8:	0000b537          	lui	a0,0xb
    26bc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26c0:	aaaab5b7          	lui	a1,0xaaaab
    26c4:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    26c8:	00b57633          	and	a2,a0,a1
    26cc:	3ec12023          	sw	a2,992(sp)

000026d0 <inst_268>:

inst_268:
// rs1_val==46340 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb504, 0x6, x2, 996, x1)
    26d0:	0000b537          	lui	a0,0xb
    26d4:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26d8:	00600593          	li	a1,6
    26dc:	00b57633          	and	a2,a0,a1
    26e0:	3ec12223          	sw	a2,996(sp)

000026e4 <inst_269>:

inst_269:
// rs1_val==46340 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x3104, 0xb504, 0x33333334, x2, 1000, x1)
    26e4:	0000b537          	lui	a0,0xb
    26e8:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    26ec:	333335b7          	lui	a1,0x33333
    26f0:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    26f4:	00b57633          	and	a2,a0,a1
    26f8:	3ec12423          	sw	a2,1000(sp)

000026fc <inst_270>:

inst_270:
// rs1_val==46340 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0xb504, 0x66666667, x2, 1004, x1)
    26fc:	0000b537          	lui	a0,0xb
    2700:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2704:	666665b7          	lui	a1,0x66666
    2708:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    270c:	00b57633          	and	a2,a0,a1
    2710:	3ec12623          	sw	a2,1004(sp)

00002714 <inst_271>:

inst_271:
// rs1_val==46340 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb504, -0xb503, x2, 1008, x1)
    2714:	0000b537          	lui	a0,0xb
    2718:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    271c:	ffff55b7          	lui	a1,0xffff5
    2720:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2724:	00b57633          	and	a2,a0,a1
    2728:	3ec12823          	sw	a2,1008(sp)

0000272c <inst_272>:

inst_272:
// rs1_val==46340 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0xb504, 0xb504, 0xb505, x2, 1012, x1)
    272c:	0000b537          	lui	a0,0xb
    2730:	50450513          	addi	a0,a0,1284 # b504 <_end+0x5500>
    2734:	0000b5b7          	lui	a1,0xb
    2738:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    273c:	00b57633          	and	a2,a0,a1
    2740:	3ec12a23          	sw	a2,1012(sp)

00002744 <inst_273>:

inst_273:
// rs1_val==2 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x3, x2, 1016, x1)
    2744:	00200513          	li	a0,2
    2748:	00300593          	li	a1,3
    274c:	00b57633          	and	a2,a0,a1
    2750:	3ec12c23          	sw	a2,1016(sp)

00002754 <inst_274>:

inst_274:
// rs1_val==2 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0x55555555, x2, 1020, x1)
    2754:	00200513          	li	a0,2
    2758:	555555b7          	lui	a1,0x55555
    275c:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2760:	00b57633          	and	a2,a0,a1
    2764:	3ec12e23          	sw	a2,1020(sp)

00002768 <inst_275>:

inst_275:
// rs1_val==2 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, -0x55555556, x2, 1024, x1)
    2768:	00200513          	li	a0,2
    276c:	aaaab5b7          	lui	a1,0xaaaab
    2770:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2774:	00b57633          	and	a2,a0,a1
    2778:	40c12023          	sw	a2,1024(sp)

0000277c <inst_276>:

inst_276:
// rs1_val==2 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0x5, x2, 1028, x1)
    277c:	00200513          	li	a0,2
    2780:	00500593          	li	a1,5
    2784:	00b57633          	and	a2,a0,a1
    2788:	40c12223          	sw	a2,1028(sp)

0000278c <inst_277>:

inst_277:
// rs1_val==2 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x33333333, x2, 1032, x1)
    278c:	00200513          	li	a0,2
    2790:	333335b7          	lui	a1,0x33333
    2794:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2798:	00b57633          	and	a2,a0,a1
    279c:	40c12423          	sw	a2,1032(sp)

000027a0 <inst_278>:

inst_278:
// rs1_val==2 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x66666666, x2, 1036, x1)
    27a0:	00200513          	li	a0,2
    27a4:	666665b7          	lui	a1,0x66666
    27a8:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    27ac:	00b57633          	and	a2,a0,a1
    27b0:	40c12623          	sw	a2,1036(sp)

000027b4 <inst_279>:

inst_279:
// rs1_val==2 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, -0xb504, x2, 1040, x1)
    27b4:	00200513          	li	a0,2
    27b8:	ffff55b7          	lui	a1,0xffff5
    27bc:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    27c0:	00b57633          	and	a2,a0,a1
    27c4:	40c12823          	sw	a2,1040(sp)

000027c8 <inst_280>:

inst_280:
// rs1_val==2 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0xb504, x2, 1044, x1)
    27c8:	00200513          	li	a0,2
    27cc:	0000b5b7          	lui	a1,0xb
    27d0:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    27d4:	00b57633          	and	a2,a0,a1
    27d8:	40c12a23          	sw	a2,1044(sp)

000027dc <inst_281>:

inst_281:
// rs1_val==2 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x2, x2, 1048, x1)
    27dc:	00200513          	li	a0,2
    27e0:	00200593          	li	a1,2
    27e4:	00b57633          	and	a2,a0,a1
    27e8:	40c12c23          	sw	a2,1048(sp)

000027ec <inst_282>:

inst_282:
// rs1_val==2 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0x55555554, x2, 1052, x1)
    27ec:	00200513          	li	a0,2
    27f0:	555555b7          	lui	a1,0x55555
    27f4:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    27f8:	00b57633          	and	a2,a0,a1
    27fc:	40c12e23          	sw	a2,1052(sp)

00002800 <inst_283>:

inst_283:
// rs1_val==2 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0x0, x2, 1056, x1)
    2800:	00200513          	li	a0,2
    2804:	00000593          	li	a1,0
    2808:	00b57633          	and	a2,a0,a1
    280c:	42c12023          	sw	a2,1056(sp)

00002810 <inst_284>:

inst_284:
// rs1_val==2 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0x4, x2, 1060, x1)
    2810:	00200513          	li	a0,2
    2814:	00400593          	li	a1,4
    2818:	00b57633          	and	a2,a0,a1
    281c:	42c12223          	sw	a2,1060(sp)

00002820 <inst_285>:

inst_285:
// rs1_val==2 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x33333332, x2, 1064, x1)
    2820:	00200513          	li	a0,2
    2824:	333335b7          	lui	a1,0x33333
    2828:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    282c:	00b57633          	and	a2,a0,a1
    2830:	42c12423          	sw	a2,1064(sp)

00002834 <inst_286>:

inst_286:
// rs1_val==2 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0x66666665, x2, 1068, x1)
    2834:	00200513          	li	a0,2
    2838:	666665b7          	lui	a1,0x66666
    283c:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2840:	00b57633          	and	a2,a0,a1
    2844:	42c12623          	sw	a2,1068(sp)

00002848 <inst_287>:

inst_287:
// rs1_val==2 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0xb503, x2, 1072, x1)
    2848:	00200513          	li	a0,2
    284c:	0000b5b7          	lui	a1,0xb
    2850:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2854:	00b57633          	and	a2,a0,a1
    2858:	42c12823          	sw	a2,1072(sp)

0000285c <inst_288>:

inst_288:
// rs1_val==2 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x55555556, x2, 1076, x1)
    285c:	00200513          	li	a0,2
    2860:	555555b7          	lui	a1,0x55555
    2864:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2868:	00b57633          	and	a2,a0,a1
    286c:	42c12a23          	sw	a2,1076(sp)

00002870 <inst_289>:

inst_289:
// rs1_val==2 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, -0x55555555, x2, 1080, x1)
    2870:	00200513          	li	a0,2
    2874:	aaaab5b7          	lui	a1,0xaaaab
    2878:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    287c:	00b57633          	and	a2,a0,a1
    2880:	42c12c23          	sw	a2,1080(sp)

00002884 <inst_290>:

inst_290:
// rs1_val==2 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x6, x2, 1084, x1)
    2884:	00200513          	li	a0,2
    2888:	00600593          	li	a1,6
    288c:	00b57633          	and	a2,a0,a1
    2890:	42c12e23          	sw	a2,1084(sp)

00002894 <inst_291>:

inst_291:
// rs1_val==2 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0x33333334, x2, 1088, x1)
    2894:	00200513          	li	a0,2
    2898:	333335b7          	lui	a1,0x33333
    289c:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    28a0:	00b57633          	and	a2,a0,a1
    28a4:	44c12023          	sw	a2,1088(sp)

000028a8 <inst_292>:

inst_292:
// rs1_val==2 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x2, 0x66666667, x2, 1092, x1)
    28a8:	00200513          	li	a0,2
    28ac:	666665b7          	lui	a1,0x66666
    28b0:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    28b4:	00b57633          	and	a2,a0,a1
    28b8:	44c12223          	sw	a2,1092(sp)

000028bc <inst_293>:

inst_293:
// rs1_val==2 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, -0xb503, x2, 1096, x1)
    28bc:	00200513          	li	a0,2
    28c0:	ffff55b7          	lui	a1,0xffff5
    28c4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    28c8:	00b57633          	and	a2,a0,a1
    28cc:	44c12423          	sw	a2,1096(sp)

000028d0 <inst_294>:

inst_294:
// rs1_val==2 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x2;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x2, 0xb505, x2, 1100, x1)
    28d0:	00200513          	li	a0,2
    28d4:	0000b5b7          	lui	a1,0xb
    28d8:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    28dc:	00b57633          	and	a2,a0,a1
    28e0:	44c12623          	sw	a2,1100(sp)

000028e4 <inst_295>:

inst_295:
// rs1_val==1431655764 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555554, 0x3, x2, 1104, x1)
    28e4:	55555537          	lui	a0,0x55555
    28e8:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    28ec:	00300593          	li	a1,3
    28f0:	00b57633          	and	a2,a0,a1
    28f4:	44c12823          	sw	a2,1104(sp)

000028f8 <inst_296>:

inst_296:
// rs1_val==1431655764 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x55555554, 0x55555554, 0x55555555, x2, 1108, x1)
    28f8:	55555537          	lui	a0,0x55555
    28fc:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2900:	555555b7          	lui	a1,0x55555
    2904:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2908:	00b57633          	and	a2,a0,a1
    290c:	44c12a23          	sw	a2,1108(sp)

00002910 <inst_297>:

inst_297:
// rs1_val==1431655764 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555554, -0x55555556, x2, 1112, x1)
    2910:	55555537          	lui	a0,0x55555
    2914:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2918:	aaaab5b7          	lui	a1,0xaaaab
    291c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2920:	00b57633          	and	a2,a0,a1
    2924:	44c12c23          	sw	a2,1112(sp)

00002928 <inst_298>:

inst_298:
// rs1_val==1431655764 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x55555554, 0x5, x2, 1116, x1)
    2928:	55555537          	lui	a0,0x55555
    292c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2930:	00500593          	li	a1,5
    2934:	00b57633          	and	a2,a0,a1
    2938:	44c12e23          	sw	a2,1116(sp)

0000293c <inst_299>:

inst_299:
// rs1_val==1431655764 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x11111110, 0x55555554, 0x33333333, x2, 1120, x1)
    293c:	55555537          	lui	a0,0x55555
    2940:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2944:	333335b7          	lui	a1,0x33333
    2948:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    294c:	00b57633          	and	a2,a0,a1
    2950:	46c12023          	sw	a2,1120(sp)

00002954 <inst_300>:

inst_300:
// rs1_val==1431655764 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x55555554, 0x66666666, x2, 1124, x1)
    2954:	55555537          	lui	a0,0x55555
    2958:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    295c:	666665b7          	lui	a1,0x66666
    2960:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2964:	00b57633          	and	a2,a0,a1
    2968:	46c12223          	sw	a2,1124(sp)

0000296c <inst_301>:

inst_301:
// rs1_val==1431655764 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x55554054, 0x55555554, -0xb504, x2, 1128, x1)
    296c:	55555537          	lui	a0,0x55555
    2970:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2974:	ffff55b7          	lui	a1,0xffff5
    2978:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    297c:	00b57633          	and	a2,a0,a1
    2980:	46c12423          	sw	a2,1128(sp)

00002984 <inst_302>:

inst_302:
// rs1_val==1431655764 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0x55555554, 0xb504, x2, 1132, x1)
    2984:	55555537          	lui	a0,0x55555
    2988:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    298c:	0000b5b7          	lui	a1,0xb
    2990:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2994:	00b57633          	and	a2,a0,a1
    2998:	46c12623          	sw	a2,1132(sp)

0000299c <inst_303>:

inst_303:
// rs1_val==1431655764 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555554, 0x2, x2, 1136, x1)
    299c:	55555537          	lui	a0,0x55555
    29a0:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29a4:	00200593          	li	a1,2
    29a8:	00b57633          	and	a2,a0,a1
    29ac:	46c12823          	sw	a2,1136(sp)

000029b0 <inst_304>:

inst_304:
// rs1_val==1431655764 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x55555554, 0x55555554, 0x55555554, x2, 1140, x1)
    29b0:	55555537          	lui	a0,0x55555
    29b4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29b8:	555555b7          	lui	a1,0x55555
    29bc:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    29c0:	00b57633          	and	a2,a0,a1
    29c4:	46c12a23          	sw	a2,1140(sp)

000029c8 <inst_305>:

inst_305:
// rs1_val==1431655764 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555554, 0x0, x2, 1144, x1)
    29c8:	55555537          	lui	a0,0x55555
    29cc:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29d0:	00000593          	li	a1,0
    29d4:	00b57633          	and	a2,a0,a1
    29d8:	46c12c23          	sw	a2,1144(sp)

000029dc <inst_306>:

inst_306:
// rs1_val==1431655764 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x55555554, 0x4, x2, 1148, x1)
    29dc:	55555537          	lui	a0,0x55555
    29e0:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29e4:	00400593          	li	a1,4
    29e8:	00b57633          	and	a2,a0,a1
    29ec:	46c12e23          	sw	a2,1148(sp)

000029f0 <inst_307>:

inst_307:
// rs1_val==1431655764 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x11111110, 0x55555554, 0x33333332, x2, 1152, x1)
    29f0:	55555537          	lui	a0,0x55555
    29f4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    29f8:	333335b7          	lui	a1,0x33333
    29fc:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2a00:	00b57633          	and	a2,a0,a1
    2a04:	48c12023          	sw	a2,1152(sp)

00002a08 <inst_308>:

inst_308:
// rs1_val==1431655764 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x55555554, 0x66666665, x2, 1156, x1)
    2a08:	55555537          	lui	a0,0x55555
    2a0c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a10:	666665b7          	lui	a1,0x66666
    2a14:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2a18:	00b57633          	and	a2,a0,a1
    2a1c:	48c12223          	sw	a2,1156(sp)

00002a20 <inst_309>:

inst_309:
// rs1_val==1431655764 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x1500, 0x55555554, 0xb503, x2, 1160, x1)
    2a20:	55555537          	lui	a0,0x55555
    2a24:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a28:	0000b5b7          	lui	a1,0xb
    2a2c:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2a30:	00b57633          	and	a2,a0,a1
    2a34:	48c12423          	sw	a2,1160(sp)

00002a38 <inst_310>:

inst_310:
// rs1_val==1431655764 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x55555554, 0x55555554, 0x55555556, x2, 1164, x1)
    2a38:	55555537          	lui	a0,0x55555
    2a3c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a40:	555555b7          	lui	a1,0x55555
    2a44:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2a48:	00b57633          	and	a2,a0,a1
    2a4c:	48c12623          	sw	a2,1164(sp)

00002a50 <inst_311>:

inst_311:
// rs1_val==1431655764 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555554, -0x55555555, x2, 1168, x1)
    2a50:	55555537          	lui	a0,0x55555
    2a54:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a58:	aaaab5b7          	lui	a1,0xaaaab
    2a5c:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2a60:	00b57633          	and	a2,a0,a1
    2a64:	48c12823          	sw	a2,1168(sp)

00002a68 <inst_312>:

inst_312:
// rs1_val==1431655764 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x55555554, 0x6, x2, 1172, x1)
    2a68:	55555537          	lui	a0,0x55555
    2a6c:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a70:	00600593          	li	a1,6
    2a74:	00b57633          	and	a2,a0,a1
    2a78:	48c12a23          	sw	a2,1172(sp)

00002a7c <inst_313>:

inst_313:
// rs1_val==1431655764 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x11111114, 0x55555554, 0x33333334, x2, 1176, x1)
    2a7c:	55555537          	lui	a0,0x55555
    2a80:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a84:	333335b7          	lui	a1,0x33333
    2a88:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2a8c:	00b57633          	and	a2,a0,a1
    2a90:	48c12c23          	sw	a2,1176(sp)

00002a94 <inst_314>:

inst_314:
// rs1_val==1431655764 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x55555554, 0x66666667, x2, 1180, x1)
    2a94:	55555537          	lui	a0,0x55555
    2a98:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2a9c:	666665b7          	lui	a1,0x66666
    2aa0:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2aa4:	00b57633          	and	a2,a0,a1
    2aa8:	48c12e23          	sw	a2,1180(sp)

00002aac <inst_315>:

inst_315:
// rs1_val==1431655764 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x55554054, 0x55555554, -0xb503, x2, 1184, x1)
    2aac:	55555537          	lui	a0,0x55555
    2ab0:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2ab4:	ffff55b7          	lui	a1,0xffff5
    2ab8:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2abc:	00b57633          	and	a2,a0,a1
    2ac0:	4ac12023          	sw	a2,1184(sp)

00002ac4 <inst_316>:

inst_316:
// rs1_val==1431655764 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0x55555554, 0xb505, x2, 1188, x1)
    2ac4:	55555537          	lui	a0,0x55555
    2ac8:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x5554f550>
    2acc:	0000b5b7          	lui	a1,0xb
    2ad0:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2ad4:	00b57633          	and	a2,a0,a1
    2ad8:	4ac12223          	sw	a2,1188(sp)

00002adc <inst_317>:

inst_317:
// rs1_val==0 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x3, x2, 1192, x1)
    2adc:	00000513          	li	a0,0
    2ae0:	00300593          	li	a1,3
    2ae4:	00b57633          	and	a2,a0,a1
    2ae8:	4ac12423          	sw	a2,1192(sp)

00002aec <inst_318>:

inst_318:
// rs1_val==0 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x55555555, x2, 1196, x1)
    2aec:	00000513          	li	a0,0
    2af0:	555555b7          	lui	a1,0x55555
    2af4:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2af8:	00b57633          	and	a2,a0,a1
    2afc:	4ac12623          	sw	a2,1196(sp)

00002b00 <inst_319>:

inst_319:
// rs1_val==0 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, -0x55555556, x2, 1200, x1)
    2b00:	00000513          	li	a0,0
    2b04:	aaaab5b7          	lui	a1,0xaaaab
    2b08:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2b0c:	00b57633          	and	a2,a0,a1
    2b10:	4ac12823          	sw	a2,1200(sp)

00002b14 <inst_320>:

inst_320:
// rs1_val==0 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x5, x2, 1204, x1)
    2b14:	00000513          	li	a0,0
    2b18:	00500593          	li	a1,5
    2b1c:	00b57633          	and	a2,a0,a1
    2b20:	4ac12a23          	sw	a2,1204(sp)

00002b24 <inst_321>:

inst_321:
// rs1_val==0 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x33333333, x2, 1208, x1)
    2b24:	00000513          	li	a0,0
    2b28:	333335b7          	lui	a1,0x33333
    2b2c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2b30:	00b57633          	and	a2,a0,a1
    2b34:	4ac12c23          	sw	a2,1208(sp)

00002b38 <inst_322>:

inst_322:
// rs1_val==0 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x66666666, x2, 1212, x1)
    2b38:	00000513          	li	a0,0
    2b3c:	666665b7          	lui	a1,0x66666
    2b40:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2b44:	00b57633          	and	a2,a0,a1
    2b48:	4ac12e23          	sw	a2,1212(sp)

00002b4c <inst_323>:

inst_323:
// rs1_val==0 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, -0xb504, x2, 1216, x1)
    2b4c:	00000513          	li	a0,0
    2b50:	ffff55b7          	lui	a1,0xffff5
    2b54:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2b58:	00b57633          	and	a2,a0,a1
    2b5c:	4cc12023          	sw	a2,1216(sp)

00002b60 <inst_324>:

inst_324:
// rs1_val==0 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0xb504, x2, 1220, x1)
    2b60:	00000513          	li	a0,0
    2b64:	0000b5b7          	lui	a1,0xb
    2b68:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2b6c:	00b57633          	and	a2,a0,a1
    2b70:	4cc12223          	sw	a2,1220(sp)

00002b74 <inst_325>:

inst_325:
// rs1_val==0 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x2, x2, 1224, x1)
    2b74:	00000513          	li	a0,0
    2b78:	00200593          	li	a1,2
    2b7c:	00b57633          	and	a2,a0,a1
    2b80:	4cc12423          	sw	a2,1224(sp)

00002b84 <inst_326>:

inst_326:
// rs1_val==-1431655765 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaab, -0x55555555, -0x55555555, x2, 1228, x1)
    2b84:	aaaab537          	lui	a0,0xaaaab
    2b88:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2b8c:	aaaab5b7          	lui	a1,0xaaaab
    2b90:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2b94:	00b57633          	and	a2,a0,a1
    2b98:	4cc12623          	sw	a2,1228(sp)

00002b9c <inst_327>:

inst_327:
// rs1_val==-1431655765 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x2, -0x55555555, 0x6, x2, 1232, x1)
    2b9c:	aaaab537          	lui	a0,0xaaaab
    2ba0:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2ba4:	00600593          	li	a1,6
    2ba8:	00b57633          	and	a2,a0,a1
    2bac:	4cc12823          	sw	a2,1232(sp)

00002bb0 <inst_328>:

inst_328:
// rs1_val==-1431655765 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x22222220, -0x55555555, 0x33333334, x2, 1236, x1)
    2bb0:	aaaab537          	lui	a0,0xaaaab
    2bb4:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2bb8:	333335b7          	lui	a1,0x33333
    2bbc:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2bc0:	00b57633          	and	a2,a0,a1
    2bc4:	4cc12a23          	sw	a2,1236(sp)

00002bc8 <inst_329>:

inst_329:
// rs1_val==-1431655765 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x22222223, -0x55555555, 0x66666667, x2, 1240, x1)
    2bc8:	aaaab537          	lui	a0,0xaaaab
    2bcc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2bd0:	666665b7          	lui	a1,0x66666
    2bd4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2bd8:	00b57633          	and	a2,a0,a1
    2bdc:	4cc12c23          	sw	a2,1240(sp)

00002be0 <inst_330>:

inst_330:
// rs1_val==-1431655765 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa9, -0x55555555, -0xb503, x2, 1244, x1)
    2be0:	aaaab537          	lui	a0,0xaaaab
    2be4:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2be8:	ffff55b7          	lui	a1,0xffff5
    2bec:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2bf0:	00b57633          	and	a2,a0,a1
    2bf4:	4cc12e23          	sw	a2,1244(sp)

00002bf8 <inst_331>:

inst_331:
// rs1_val==-1431655765 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0xa001, -0x55555555, 0xb505, x2, 1248, x1)
    2bf8:	aaaab537          	lui	a0,0xaaaab
    2bfc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2c00:	0000b5b7          	lui	a1,0xb
    2c04:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2c08:	00b57633          	and	a2,a0,a1
    2c0c:	4ec12023          	sw	a2,1248(sp)

00002c10 <inst_332>:

inst_332:
// rs1_val==6 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x6, 0x3, x2, 1252, x1)
    2c10:	00600513          	li	a0,6
    2c14:	00300593          	li	a1,3
    2c18:	00b57633          	and	a2,a0,a1
    2c1c:	4ec12223          	sw	a2,1252(sp)

00002c20 <inst_333>:

inst_333:
// rs1_val==6 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0x55555555, x2, 1256, x1)
    2c20:	00600513          	li	a0,6
    2c24:	555555b7          	lui	a1,0x55555
    2c28:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2c2c:	00b57633          	and	a2,a0,a1
    2c30:	4ec12423          	sw	a2,1256(sp)

00002c34 <inst_334>:

inst_334:
// rs1_val==6 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x6, -0x55555556, x2, 1260, x1)
    2c34:	00600513          	li	a0,6
    2c38:	aaaab5b7          	lui	a1,0xaaaab
    2c3c:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2c40:	00b57633          	and	a2,a0,a1
    2c44:	4ec12623          	sw	a2,1260(sp)

00002c48 <inst_335>:

inst_335:
// rs1_val==6 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0x5, x2, 1264, x1)
    2c48:	00600513          	li	a0,6
    2c4c:	00500593          	li	a1,5
    2c50:	00b57633          	and	a2,a0,a1
    2c54:	4ec12823          	sw	a2,1264(sp)

00002c58 <inst_336>:

inst_336:
// rs1_val==6 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x6, 0x33333333, x2, 1268, x1)
    2c58:	00600513          	li	a0,6
    2c5c:	333335b7          	lui	a1,0x33333
    2c60:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2c64:	00b57633          	and	a2,a0,a1
    2c68:	4ec12a23          	sw	a2,1268(sp)

00002c6c <inst_337>:

inst_337:
// rs1_val==6 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x6, 0x66666666, x2, 1272, x1)
    2c6c:	00600513          	li	a0,6
    2c70:	666665b7          	lui	a1,0x66666
    2c74:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2c78:	00b57633          	and	a2,a0,a1
    2c7c:	4ec12c23          	sw	a2,1272(sp)

00002c80 <inst_338>:

inst_338:
// rs1_val==6 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, -0xb504, x2, 1276, x1)
    2c80:	00600513          	li	a0,6
    2c84:	ffff55b7          	lui	a1,0xffff5
    2c88:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2c8c:	00b57633          	and	a2,a0,a1
    2c90:	4ec12e23          	sw	a2,1276(sp)

00002c94 <inst_339>:

inst_339:
// rs1_val==6 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0xb504, x2, 1280, x1)
    2c94:	00600513          	li	a0,6
    2c98:	0000b5b7          	lui	a1,0xb
    2c9c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2ca0:	00b57633          	and	a2,a0,a1
    2ca4:	50c12023          	sw	a2,1280(sp)

00002ca8 <inst_340>:

inst_340:
// rs1_val==6 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x6, 0x2, x2, 1284, x1)
    2ca8:	00600513          	li	a0,6
    2cac:	00200593          	li	a1,2
    2cb0:	00b57633          	and	a2,a0,a1
    2cb4:	50c12223          	sw	a2,1284(sp)

00002cb8 <inst_341>:

inst_341:
// rs1_val==6 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0x55555554, x2, 1288, x1)
    2cb8:	00600513          	li	a0,6
    2cbc:	555555b7          	lui	a1,0x55555
    2cc0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2cc4:	00b57633          	and	a2,a0,a1
    2cc8:	50c12423          	sw	a2,1288(sp)

00002ccc <inst_342>:

inst_342:
// rs1_val==6 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x6, 0x0, x2, 1292, x1)
    2ccc:	00600513          	li	a0,6
    2cd0:	00000593          	li	a1,0
    2cd4:	00b57633          	and	a2,a0,a1
    2cd8:	50c12623          	sw	a2,1292(sp)

00002cdc <inst_343>:

inst_343:
// rs1_val==6 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0x4, x2, 1296, x1)
    2cdc:	00600513          	li	a0,6
    2ce0:	00400593          	li	a1,4
    2ce4:	00b57633          	and	a2,a0,a1
    2ce8:	50c12823          	sw	a2,1296(sp)

00002cec <inst_344>:

inst_344:
// rs1_val==6 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x6, 0x33333332, x2, 1300, x1)
    2cec:	00600513          	li	a0,6
    2cf0:	333335b7          	lui	a1,0x33333
    2cf4:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2cf8:	00b57633          	and	a2,a0,a1
    2cfc:	50c12a23          	sw	a2,1300(sp)

00002d00 <inst_345>:

inst_345:
// rs1_val==6 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0x66666665, x2, 1304, x1)
    2d00:	00600513          	li	a0,6
    2d04:	666665b7          	lui	a1,0x66666
    2d08:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2d0c:	00b57633          	and	a2,a0,a1
    2d10:	50c12c23          	sw	a2,1304(sp)

00002d14 <inst_346>:

inst_346:
// rs1_val==6 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x6, 0xb503, x2, 1308, x1)
    2d14:	00600513          	li	a0,6
    2d18:	0000b5b7          	lui	a1,0xb
    2d1c:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2d20:	00b57633          	and	a2,a0,a1
    2d24:	50c12e23          	sw	a2,1308(sp)

00002d28 <inst_347>:

inst_347:
// rs1_val==6 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x6, 0x55555556, x2, 1312, x1)
    2d28:	00600513          	li	a0,6
    2d2c:	555555b7          	lui	a1,0x55555
    2d30:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2d34:	00b57633          	and	a2,a0,a1
    2d38:	52c12023          	sw	a2,1312(sp)

00002d3c <inst_348>:

inst_348:
// rs1_val==6 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x6, -0x55555555, x2, 1316, x1)
    2d3c:	00600513          	li	a0,6
    2d40:	aaaab5b7          	lui	a1,0xaaaab
    2d44:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2d48:	00b57633          	and	a2,a0,a1
    2d4c:	52c12223          	sw	a2,1316(sp)

00002d50 <inst_349>:

inst_349:
// rs1_val==6 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x6, 0x6, x2, 1320, x1)
    2d50:	00600513          	li	a0,6
    2d54:	00600593          	li	a1,6
    2d58:	00b57633          	and	a2,a0,a1
    2d5c:	52c12423          	sw	a2,1320(sp)

00002d60 <inst_350>:

inst_350:
// rs1_val==6 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0x33333334, x2, 1324, x1)
    2d60:	00600513          	li	a0,6
    2d64:	333335b7          	lui	a1,0x33333
    2d68:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2d6c:	00b57633          	and	a2,a0,a1
    2d70:	52c12623          	sw	a2,1324(sp)

00002d74 <inst_351>:

inst_351:
// rs1_val==6 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x6, 0x66666667, x2, 1328, x1)
    2d74:	00600513          	li	a0,6
    2d78:	666665b7          	lui	a1,0x66666
    2d7c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2d80:	00b57633          	and	a2,a0,a1
    2d84:	52c12823          	sw	a2,1328(sp)

00002d88 <inst_352>:

inst_352:
// rs1_val==6 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, -0xb503, x2, 1332, x1)
    2d88:	00600513          	li	a0,6
    2d8c:	ffff55b7          	lui	a1,0xffff5
    2d90:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2d94:	00b57633          	and	a2,a0,a1
    2d98:	52c12a23          	sw	a2,1332(sp)

00002d9c <inst_353>:

inst_353:
// rs1_val==6 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x6;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x6, 0xb505, x2, 1336, x1)
    2d9c:	00600513          	li	a0,6
    2da0:	0000b5b7          	lui	a1,0xb
    2da4:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2da8:	00b57633          	and	a2,a0,a1
    2dac:	52c12c23          	sw	a2,1336(sp)

00002db0 <inst_354>:

inst_354:
// rs1_val==858993460 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x33333334, 0x3, x2, 1340, x1)
    2db0:	33333537          	lui	a0,0x33333
    2db4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2db8:	00300593          	li	a1,3
    2dbc:	00b57633          	and	a2,a0,a1
    2dc0:	52c12e23          	sw	a2,1340(sp)

00002dc4 <inst_355>:

inst_355:
// rs1_val==858993460 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x11111114, 0x33333334, 0x55555555, x2, 1344, x1)
    2dc4:	33333537          	lui	a0,0x33333
    2dc8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2dcc:	555555b7          	lui	a1,0x55555
    2dd0:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2dd4:	00b57633          	and	a2,a0,a1
    2dd8:	54c12023          	sw	a2,1344(sp)

00002ddc <inst_356>:

inst_356:
// rs1_val==858993460 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x22222220, 0x33333334, -0x55555556, x2, 1348, x1)
    2ddc:	33333537          	lui	a0,0x33333
    2de0:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2de4:	aaaab5b7          	lui	a1,0xaaaab
    2de8:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2dec:	00b57633          	and	a2,a0,a1
    2df0:	54c12223          	sw	a2,1348(sp)

00002df4 <inst_357>:

inst_357:
// rs1_val==858993460 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x33333334, 0x5, x2, 1352, x1)
    2df4:	33333537          	lui	a0,0x33333
    2df8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2dfc:	00500593          	li	a1,5
    2e00:	00b57633          	and	a2,a0,a1
    2e04:	54c12423          	sw	a2,1352(sp)

00002e08 <inst_358>:

inst_358:
// rs1_val==858993460 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x33333330, 0x33333334, 0x33333333, x2, 1356, x1)
    2e08:	33333537          	lui	a0,0x33333
    2e0c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e10:	333335b7          	lui	a1,0x33333
    2e14:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    2e18:	00b57633          	and	a2,a0,a1
    2e1c:	54c12623          	sw	a2,1356(sp)

00002e20 <inst_359>:

inst_359:
// rs1_val==858993460 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x22222224, 0x33333334, 0x66666666, x2, 1360, x1)
    2e20:	33333537          	lui	a0,0x33333
    2e24:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e28:	666665b7          	lui	a1,0x66666
    2e2c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    2e30:	00b57633          	and	a2,a0,a1
    2e34:	54c12823          	sw	a2,1360(sp)

00002e38 <inst_360>:

inst_360:
// rs1_val==858993460 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x33330234, 0x33333334, -0xb504, x2, 1364, x1)
    2e38:	33333537          	lui	a0,0x33333
    2e3c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e40:	ffff55b7          	lui	a1,0xffff5
    2e44:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    2e48:	00b57633          	and	a2,a0,a1
    2e4c:	54c12a23          	sw	a2,1364(sp)

00002e50 <inst_361>:

inst_361:
// rs1_val==858993460 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x3104, 0x33333334, 0xb504, x2, 1368, x1)
    2e50:	33333537          	lui	a0,0x33333
    2e54:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e58:	0000b5b7          	lui	a1,0xb
    2e5c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    2e60:	00b57633          	and	a2,a0,a1
    2e64:	54c12c23          	sw	a2,1368(sp)

00002e68 <inst_362>:

inst_362:
// rs1_val==858993460 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x33333334, 0x2, x2, 1372, x1)
    2e68:	33333537          	lui	a0,0x33333
    2e6c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e70:	00200593          	li	a1,2
    2e74:	00b57633          	and	a2,a0,a1
    2e78:	54c12e23          	sw	a2,1372(sp)

00002e7c <inst_363>:

inst_363:
// rs1_val==858993460 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x11111114, 0x33333334, 0x55555554, x2, 1376, x1)
    2e7c:	33333537          	lui	a0,0x33333
    2e80:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e84:	555555b7          	lui	a1,0x55555
    2e88:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    2e8c:	00b57633          	and	a2,a0,a1
    2e90:	56c12023          	sw	a2,1376(sp)

00002e94 <inst_364>:

inst_364:
// rs1_val==858993460 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x33333334, 0x0, x2, 1380, x1)
    2e94:	33333537          	lui	a0,0x33333
    2e98:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2e9c:	00000593          	li	a1,0
    2ea0:	00b57633          	and	a2,a0,a1
    2ea4:	56c12223          	sw	a2,1380(sp)

00002ea8 <inst_365>:

inst_365:
// rs1_val==858993460 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x33333334, 0x4, x2, 1384, x1)
    2ea8:	33333537          	lui	a0,0x33333
    2eac:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2eb0:	00400593          	li	a1,4
    2eb4:	00b57633          	and	a2,a0,a1
    2eb8:	56c12423          	sw	a2,1384(sp)

00002ebc <inst_366>:

inst_366:
// rs1_val==858993460 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x33333330, 0x33333334, 0x33333332, x2, 1388, x1)
    2ebc:	33333537          	lui	a0,0x33333
    2ec0:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2ec4:	333335b7          	lui	a1,0x33333
    2ec8:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    2ecc:	00b57633          	and	a2,a0,a1
    2ed0:	56c12623          	sw	a2,1388(sp)

00002ed4 <inst_367>:

inst_367:
// rs1_val==858993460 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x22222224, 0x33333334, 0x66666665, x2, 1392, x1)
    2ed4:	33333537          	lui	a0,0x33333
    2ed8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2edc:	666665b7          	lui	a1,0x66666
    2ee0:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    2ee4:	00b57633          	and	a2,a0,a1
    2ee8:	56c12823          	sw	a2,1392(sp)

00002eec <inst_368>:

inst_368:
// rs1_val==858993460 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0x33333334, 0xb503, x2, 1396, x1)
    2eec:	33333537          	lui	a0,0x33333
    2ef0:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2ef4:	0000b5b7          	lui	a1,0xb
    2ef8:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    2efc:	00b57633          	and	a2,a0,a1
    2f00:	56c12a23          	sw	a2,1396(sp)

00002f04 <inst_369>:

inst_369:
// rs1_val==858993460 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x11111114, 0x33333334, 0x55555556, x2, 1400, x1)
    2f04:	33333537          	lui	a0,0x33333
    2f08:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f0c:	555555b7          	lui	a1,0x55555
    2f10:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    2f14:	00b57633          	and	a2,a0,a1
    2f18:	56c12c23          	sw	a2,1400(sp)

00002f1c <inst_370>:

inst_370:
// rs1_val==858993460 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x22222220, 0x33333334, -0x55555555, x2, 1404, x1)
    2f1c:	33333537          	lui	a0,0x33333
    2f20:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f24:	aaaab5b7          	lui	a1,0xaaaab
    2f28:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    2f2c:	00b57633          	and	a2,a0,a1
    2f30:	56c12e23          	sw	a2,1404(sp)

00002f34 <inst_371>:

inst_371:
// rs1_val==858993460 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x33333334, 0x6, x2, 1408, x1)
    2f34:	33333537          	lui	a0,0x33333
    2f38:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f3c:	00600593          	li	a1,6
    2f40:	00b57633          	and	a2,a0,a1
    2f44:	58c12023          	sw	a2,1408(sp)

00002f48 <inst_372>:

inst_372:
// rs1_val==858993460 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x33333334, 0x33333334, 0x33333334, x2, 1412, x1)
    2f48:	33333537          	lui	a0,0x33333
    2f4c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f50:	333335b7          	lui	a1,0x33333
    2f54:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    2f58:	00b57633          	and	a2,a0,a1
    2f5c:	58c12223          	sw	a2,1412(sp)

00002f60 <inst_373>:

inst_373:
// rs1_val==858993460 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x22222224, 0x33333334, 0x66666667, x2, 1416, x1)
    2f60:	33333537          	lui	a0,0x33333
    2f64:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f68:	666665b7          	lui	a1,0x66666
    2f6c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    2f70:	00b57633          	and	a2,a0,a1
    2f74:	58c12423          	sw	a2,1416(sp)

00002f78 <inst_374>:

inst_374:
// rs1_val==858993460 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x33330234, 0x33333334, -0xb503, x2, 1420, x1)
    2f78:	33333537          	lui	a0,0x33333
    2f7c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f80:	ffff55b7          	lui	a1,0xffff5
    2f84:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    2f88:	00b57633          	and	a2,a0,a1
    2f8c:	58c12623          	sw	a2,1420(sp)

00002f90 <inst_375>:

inst_375:
// rs1_val==858993460 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x3104, 0x33333334, 0xb505, x2, 1424, x1)
    2f90:	33333537          	lui	a0,0x33333
    2f94:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332d330>
    2f98:	0000b5b7          	lui	a1,0xb
    2f9c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    2fa0:	00b57633          	and	a2,a0,a1
    2fa4:	58c12823          	sw	a2,1424(sp)

00002fa8 <inst_376>:

inst_376:
// rs1_val==1717986919 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x3, 0x66666667, 0x3, x2, 1428, x1)
    2fa8:	66666537          	lui	a0,0x66666
    2fac:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    2fb0:	00300593          	li	a1,3
    2fb4:	00b57633          	and	a2,a0,a1
    2fb8:	58c12a23          	sw	a2,1428(sp)

00002fbc <inst_377>:

inst_377:
// rs1_val==1717986919 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x44444445, 0x66666667, 0x55555555, x2, 1432, x1)
    2fbc:	66666537          	lui	a0,0x66666
    2fc0:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    2fc4:	555555b7          	lui	a1,0x55555
    2fc8:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    2fcc:	00b57633          	and	a2,a0,a1
    2fd0:	58c12c23          	sw	a2,1432(sp)

00002fd4 <inst_378>:

inst_378:
// rs1_val==1717986919 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x66666667, -0x55555556, x2, 1436, x1)
    2fd4:	66666537          	lui	a0,0x66666
    2fd8:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    2fdc:	aaaab5b7          	lui	a1,0xaaaab
    2fe0:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    2fe4:	00b57633          	and	a2,a0,a1
    2fe8:	58c12e23          	sw	a2,1436(sp)

00002fec <inst_379>:

inst_379:
// rs1_val==1717986919 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x66666667, 0x5, x2, 1440, x1)
    2fec:	66666537          	lui	a0,0x66666
    2ff0:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    2ff4:	00500593          	li	a1,5
    2ff8:	00b57633          	and	a2,a0,a1
    2ffc:	5ac12023          	sw	a2,1440(sp)

00003000 <inst_380>:

inst_380:
// rs1_val==1717986919 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x22222223, 0x66666667, 0x33333333, x2, 1444, x1)
    3000:	66666537          	lui	a0,0x66666
    3004:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3008:	333335b7          	lui	a1,0x33333
    300c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3010:	00b57633          	and	a2,a0,a1
    3014:	5ac12223          	sw	a2,1444(sp)

00003018 <inst_381>:

inst_381:
// rs1_val==1717986919 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x66666666, 0x66666667, 0x66666666, x2, 1448, x1)
    3018:	66666537          	lui	a0,0x66666
    301c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3020:	666665b7          	lui	a1,0x66666
    3024:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3028:	00b57633          	and	a2,a0,a1
    302c:	5ac12423          	sw	a2,1448(sp)

00003030 <inst_382>:

inst_382:
// rs1_val==1717986919 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x66664264, 0x66666667, -0xb504, x2, 1452, x1)
    3030:	66666537          	lui	a0,0x66666
    3034:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3038:	ffff55b7          	lui	a1,0xffff5
    303c:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3040:	00b57633          	and	a2,a0,a1
    3044:	5ac12623          	sw	a2,1452(sp)

00003048 <inst_383>:

inst_383:
// rs1_val==1717986919 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0x66666667, 0xb504, x2, 1456, x1)
    3048:	66666537          	lui	a0,0x66666
    304c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3050:	0000b5b7          	lui	a1,0xb
    3054:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3058:	00b57633          	and	a2,a0,a1
    305c:	5ac12823          	sw	a2,1456(sp)

00003060 <inst_384>:

inst_384:
// rs1_val==1717986919 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x66666667, 0x2, x2, 1460, x1)
    3060:	66666537          	lui	a0,0x66666
    3064:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3068:	00200593          	li	a1,2
    306c:	00b57633          	and	a2,a0,a1
    3070:	5ac12a23          	sw	a2,1460(sp)

00003074 <inst_385>:

inst_385:
// rs1_val==1717986919 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x66666667, 0x55555554, x2, 1464, x1)
    3074:	66666537          	lui	a0,0x66666
    3078:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    307c:	555555b7          	lui	a1,0x55555
    3080:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3084:	00b57633          	and	a2,a0,a1
    3088:	5ac12c23          	sw	a2,1464(sp)

0000308c <inst_386>:

inst_386:
// rs1_val==1717986919 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x66666667, 0x0, x2, 1468, x1)
    308c:	66666537          	lui	a0,0x66666
    3090:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3094:	00000593          	li	a1,0
    3098:	00b57633          	and	a2,a0,a1
    309c:	5ac12e23          	sw	a2,1468(sp)

000030a0 <inst_387>:

inst_387:
// rs1_val==1717986919 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x66666667, 0x4, x2, 1472, x1)
    30a0:	66666537          	lui	a0,0x66666
    30a4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30a8:	00400593          	li	a1,4
    30ac:	00b57633          	and	a2,a0,a1
    30b0:	5cc12023          	sw	a2,1472(sp)

000030b4 <inst_388>:

inst_388:
// rs1_val==1717986919 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x66666667, 0x33333332, x2, 1476, x1)
    30b4:	66666537          	lui	a0,0x66666
    30b8:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30bc:	333335b7          	lui	a1,0x33333
    30c0:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    30c4:	00b57633          	and	a2,a0,a1
    30c8:	5cc12223          	sw	a2,1476(sp)

000030cc <inst_389>:

inst_389:
// rs1_val==1717986919 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x66666665, 0x66666667, 0x66666665, x2, 1480, x1)
    30cc:	66666537          	lui	a0,0x66666
    30d0:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30d4:	666665b7          	lui	a1,0x66666
    30d8:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    30dc:	00b57633          	and	a2,a0,a1
    30e0:	5cc12423          	sw	a2,1480(sp)

000030e4 <inst_390>:

inst_390:
// rs1_val==1717986919 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x2403, 0x66666667, 0xb503, x2, 1484, x1)
    30e4:	66666537          	lui	a0,0x66666
    30e8:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    30ec:	0000b5b7          	lui	a1,0xb
    30f0:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    30f4:	00b57633          	and	a2,a0,a1
    30f8:	5cc12623          	sw	a2,1484(sp)

000030fc <inst_391>:

inst_391:
// rs1_val==1717986919 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x44444446, 0x66666667, 0x55555556, x2, 1488, x1)
    30fc:	66666537          	lui	a0,0x66666
    3100:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3104:	555555b7          	lui	a1,0x55555
    3108:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    310c:	00b57633          	and	a2,a0,a1
    3110:	5cc12823          	sw	a2,1488(sp)

00003114 <inst_392>:

inst_392:
// rs1_val==1717986919 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x22222223, 0x66666667, -0x55555555, x2, 1492, x1)
    3114:	66666537          	lui	a0,0x66666
    3118:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    311c:	aaaab5b7          	lui	a1,0xaaaab
    3120:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3124:	00b57633          	and	a2,a0,a1
    3128:	5cc12a23          	sw	a2,1492(sp)

0000312c <inst_393>:

inst_393:
// rs1_val==1717986919 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x66666667, 0x6, x2, 1496, x1)
    312c:	66666537          	lui	a0,0x66666
    3130:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3134:	00600593          	li	a1,6
    3138:	00b57633          	and	a2,a0,a1
    313c:	5cc12c23          	sw	a2,1496(sp)

00003140 <inst_394>:

inst_394:
// rs1_val==1717986919 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x22222224, 0x66666667, 0x33333334, x2, 1500, x1)
    3140:	66666537          	lui	a0,0x66666
    3144:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3148:	333335b7          	lui	a1,0x33333
    314c:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3150:	00b57633          	and	a2,a0,a1
    3154:	5cc12e23          	sw	a2,1500(sp)

00003158 <inst_395>:

inst_395:
// rs1_val==1717986919 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x66666667, 0x66666667, 0x66666667, x2, 1504, x1)
    3158:	66666537          	lui	a0,0x66666
    315c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3160:	666665b7          	lui	a1,0x66666
    3164:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3168:	00b57633          	and	a2,a0,a1
    316c:	5ec12023          	sw	a2,1504(sp)

00003170 <inst_396>:

inst_396:
// rs1_val==1717986919 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x66664265, 0x66666667, -0xb503, x2, 1508, x1)
    3170:	66666537          	lui	a0,0x66666
    3174:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3178:	ffff55b7          	lui	a1,0xffff5
    317c:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3180:	00b57633          	and	a2,a0,a1
    3184:	5ec12223          	sw	a2,1508(sp)

00003188 <inst_397>:

inst_397:
// rs1_val==1717986919 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x2405, 0x66666667, 0xb505, x2, 1512, x1)
    3188:	66666537          	lui	a0,0x66666
    318c:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66660663>
    3190:	0000b5b7          	lui	a1,0xb
    3194:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3198:	00b57633          	and	a2,a0,a1
    319c:	5ec12423          	sw	a2,1512(sp)

000031a0 <inst_398>:

inst_398:
// rs1_val==-46339 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x1, -0xb503, 0x3, x2, 1516, x1)
    31a0:	ffff5537          	lui	a0,0xffff5
    31a4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    31a8:	00300593          	li	a1,3
    31ac:	00b57633          	and	a2,a0,a1
    31b0:	5ec12623          	sw	a2,1516(sp)

000031b4 <inst_399>:

inst_399:
// rs1_val==-46339 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x55554055, -0xb503, 0x55555555, x2, 1520, x1)
    31b4:	ffff5537          	lui	a0,0xffff5
    31b8:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    31bc:	555555b7          	lui	a1,0x55555
    31c0:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    31c4:	00b57633          	and	a2,a0,a1
    31c8:	5ec12823          	sw	a2,1520(sp)

000031cc <inst_400>:

inst_400:
// rs1_val==-46339 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa8, -0xb503, -0x55555556, x2, 1524, x1)
    31cc:	ffff5537          	lui	a0,0xffff5
    31d0:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    31d4:	aaaab5b7          	lui	a1,0xaaaab
    31d8:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    31dc:	00b57633          	and	a2,a0,a1
    31e0:	5ec12a23          	sw	a2,1524(sp)

000031e4 <inst_401>:

inst_401:
// rs1_val==-46339 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x5, -0xb503, 0x5, x2, 1528, x1)
    31e4:	ffff5537          	lui	a0,0xffff5
    31e8:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    31ec:	00500593          	li	a1,5
    31f0:	00b57633          	and	a2,a0,a1
    31f4:	5ec12c23          	sw	a2,1528(sp)

000031f8 <inst_402>:

inst_402:
// rs1_val==-46339 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x33330231, -0xb503, 0x33333333, x2, 1532, x1)
    31f8:	ffff5537          	lui	a0,0xffff5
    31fc:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3200:	333335b7          	lui	a1,0x33333
    3204:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3208:	00b57633          	and	a2,a0,a1
    320c:	5ec12e23          	sw	a2,1532(sp)

00003210 <inst_403>:

inst_403:
// rs1_val==-46339 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x66664264, -0xb503, 0x66666666, x2, 1536, x1)
    3210:	ffff5537          	lui	a0,0xffff5
    3214:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3218:	666665b7          	lui	a1,0x66666
    321c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3220:	00b57633          	and	a2,a0,a1
    3224:	60c12023          	sw	a2,1536(sp)

00003228 <inst_404>:

inst_404:
// rs1_val==-46339 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0xffff4afc, -0xb503, -0xb504, x2, 1540, x1)
    3228:	ffff5537          	lui	a0,0xffff5
    322c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3230:	ffff55b7          	lui	a1,0xffff5
    3234:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3238:	00b57633          	and	a2,a0,a1
    323c:	60c12223          	sw	a2,1540(sp)

00003240 <inst_405>:

inst_405:
// rs1_val==-46339 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb503, 0xb504, x2, 1544, x1)
    3240:	ffff5537          	lui	a0,0xffff5
    3244:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3248:	0000b5b7          	lui	a1,0xb
    324c:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3250:	00b57633          	and	a2,a0,a1
    3254:	60c12423          	sw	a2,1544(sp)

00003258 <inst_406>:

inst_406:
// rs1_val==-46339 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, -0xb503, 0x2, x2, 1548, x1)
    3258:	ffff5537          	lui	a0,0xffff5
    325c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3260:	00200593          	li	a1,2
    3264:	00b57633          	and	a2,a0,a1
    3268:	60c12623          	sw	a2,1548(sp)

0000326c <inst_407>:

inst_407:
// rs1_val==-46339 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x55554054, -0xb503, 0x55555554, x2, 1552, x1)
    326c:	ffff5537          	lui	a0,0xffff5
    3270:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3274:	555555b7          	lui	a1,0x55555
    3278:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    327c:	00b57633          	and	a2,a0,a1
    3280:	60c12823          	sw	a2,1552(sp)

00003284 <inst_408>:

inst_408:
// rs1_val==-46339 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, -0xb503, 0x0, x2, 1556, x1)
    3284:	ffff5537          	lui	a0,0xffff5
    3288:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    328c:	00000593          	li	a1,0
    3290:	00b57633          	and	a2,a0,a1
    3294:	60c12a23          	sw	a2,1556(sp)

00003298 <inst_409>:

inst_409:
// rs1_val==-46339 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb503, 0x4, x2, 1560, x1)
    3298:	ffff5537          	lui	a0,0xffff5
    329c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32a0:	00400593          	li	a1,4
    32a4:	00b57633          	and	a2,a0,a1
    32a8:	60c12c23          	sw	a2,1560(sp)

000032ac <inst_410>:

inst_410:
// rs1_val==-46339 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x33330230, -0xb503, 0x33333332, x2, 1564, x1)
    32ac:	ffff5537          	lui	a0,0xffff5
    32b0:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32b4:	333335b7          	lui	a1,0x33333
    32b8:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    32bc:	00b57633          	and	a2,a0,a1
    32c0:	60c12e23          	sw	a2,1564(sp)

000032c4 <inst_411>:

inst_411:
// rs1_val==-46339 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x66664265, -0xb503, 0x66666665, x2, 1568, x1)
    32c4:	ffff5537          	lui	a0,0xffff5
    32c8:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32cc:	666665b7          	lui	a1,0x66666
    32d0:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    32d4:	00b57633          	and	a2,a0,a1
    32d8:	62c12023          	sw	a2,1568(sp)

000032dc <inst_412>:

inst_412:
// rs1_val==-46339 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x1, -0xb503, 0xb503, x2, 1572, x1)
    32dc:	ffff5537          	lui	a0,0xffff5
    32e0:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32e4:	0000b5b7          	lui	a1,0xb
    32e8:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    32ec:	00b57633          	and	a2,a0,a1
    32f0:	62c12223          	sw	a2,1572(sp)

000032f4 <inst_413>:

inst_413:
// rs1_val==-46339 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x55554054, -0xb503, 0x55555556, x2, 1576, x1)
    32f4:	ffff5537          	lui	a0,0xffff5
    32f8:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    32fc:	555555b7          	lui	a1,0x55555
    3300:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3304:	00b57633          	and	a2,a0,a1
    3308:	62c12423          	sw	a2,1576(sp)

0000330c <inst_414>:

inst_414:
// rs1_val==-46339 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa9, -0xb503, -0x55555555, x2, 1580, x1)
    330c:	ffff5537          	lui	a0,0xffff5
    3310:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3314:	aaaab5b7          	lui	a1,0xaaaab
    3318:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    331c:	00b57633          	and	a2,a0,a1
    3320:	62c12623          	sw	a2,1580(sp)

00003324 <inst_415>:

inst_415:
// rs1_val==-46339 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, -0xb503, 0x6, x2, 1584, x1)
    3324:	ffff5537          	lui	a0,0xffff5
    3328:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    332c:	00600593          	li	a1,6
    3330:	00b57633          	and	a2,a0,a1
    3334:	62c12823          	sw	a2,1584(sp)

00003338 <inst_416>:

inst_416:
// rs1_val==-46339 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x33330234, -0xb503, 0x33333334, x2, 1588, x1)
    3338:	ffff5537          	lui	a0,0xffff5
    333c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3340:	333335b7          	lui	a1,0x33333
    3344:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3348:	00b57633          	and	a2,a0,a1
    334c:	62c12a23          	sw	a2,1588(sp)

00003350 <inst_417>:

inst_417:
// rs1_val==-46339 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x66664265, -0xb503, 0x66666667, x2, 1592, x1)
    3350:	ffff5537          	lui	a0,0xffff5
    3354:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3358:	666665b7          	lui	a1,0x66666
    335c:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3360:	00b57633          	and	a2,a0,a1
    3364:	62c12c23          	sw	a2,1592(sp)

00003368 <inst_418>:

inst_418:
// rs1_val==-46339 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0xffff4afd, -0xb503, -0xb503, x2, 1596, x1)
    3368:	ffff5537          	lui	a0,0xffff5
    336c:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3370:	ffff55b7          	lui	a1,0xffff5
    3374:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3378:	00b57633          	and	a2,a0,a1
    337c:	62c12e23          	sw	a2,1596(sp)

00003380 <inst_419>:

inst_419:
// rs1_val==-46339 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x5, -0xb503, 0xb505, x2, 1600, x1)
    3380:	ffff5537          	lui	a0,0xffff5
    3384:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffeeaf9>
    3388:	0000b5b7          	lui	a1,0xb
    338c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3390:	00b57633          	and	a2,a0,a1
    3394:	64c12023          	sw	a2,1600(sp)

00003398 <inst_420>:

inst_420:
// rs1_val==46341 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x1, 0xb505, 0x3, x2, 1604, x1)
    3398:	0000b537          	lui	a0,0xb
    339c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    33a0:	00300593          	li	a1,3
    33a4:	00b57633          	and	a2,a0,a1
    33a8:	64c12223          	sw	a2,1604(sp)

000033ac <inst_421>:

inst_421:
// rs1_val==46341 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x1505, 0xb505, 0x55555555, x2, 1608, x1)
    33ac:	0000b537          	lui	a0,0xb
    33b0:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    33b4:	555555b7          	lui	a1,0x55555
    33b8:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    33bc:	00b57633          	and	a2,a0,a1
    33c0:	64c12423          	sw	a2,1608(sp)

000033c4 <inst_422>:

inst_422:
// rs1_val==46341 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0xa000, 0xb505, -0x55555556, x2, 1612, x1)
    33c4:	0000b537          	lui	a0,0xb
    33c8:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    33cc:	aaaab5b7          	lui	a1,0xaaaab
    33d0:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    33d4:	00b57633          	and	a2,a0,a1
    33d8:	64c12623          	sw	a2,1612(sp)

000033dc <inst_423>:

inst_423:
// rs1_val==46341 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x5, 0xb505, 0x5, x2, 1616, x1)
    33dc:	0000b537          	lui	a0,0xb
    33e0:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    33e4:	00500593          	li	a1,5
    33e8:	00b57633          	and	a2,a0,a1
    33ec:	64c12823          	sw	a2,1616(sp)

000033f0 <inst_424>:

inst_424:
// rs1_val==46341 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x3101, 0xb505, 0x33333333, x2, 1620, x1)
    33f0:	0000b537          	lui	a0,0xb
    33f4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    33f8:	333335b7          	lui	a1,0x33333
    33fc:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3400:	00b57633          	and	a2,a0,a1
    3404:	64c12a23          	sw	a2,1620(sp)

00003408 <inst_425>:

inst_425:
// rs1_val==46341 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0xb505, 0x66666666, x2, 1624, x1)
    3408:	0000b537          	lui	a0,0xb
    340c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3410:	666665b7          	lui	a1,0x66666
    3414:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3418:	00b57633          	and	a2,a0,a1
    341c:	64c12c23          	sw	a2,1624(sp)

00003420 <inst_426>:

inst_426:
// rs1_val==46341 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb505, -0xb504, x2, 1628, x1)
    3420:	0000b537          	lui	a0,0xb
    3424:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3428:	ffff55b7          	lui	a1,0xffff5
    342c:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3430:	00b57633          	and	a2,a0,a1
    3434:	64c12e23          	sw	a2,1628(sp)

00003438 <inst_427>:

inst_427:
// rs1_val==46341 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0xb504, 0xb505, 0xb504, x2, 1632, x1)
    3438:	0000b537          	lui	a0,0xb
    343c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3440:	0000b5b7          	lui	a1,0xb
    3444:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3448:	00b57633          	and	a2,a0,a1
    344c:	66c12023          	sw	a2,1632(sp)

00003450 <inst_428>:

inst_428:
// rs1_val==46341 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb505, 0x2, x2, 1636, x1)
    3450:	0000b537          	lui	a0,0xb
    3454:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3458:	00200593          	li	a1,2
    345c:	00b57633          	and	a2,a0,a1
    3460:	66c12223          	sw	a2,1636(sp)

00003464 <inst_429>:

inst_429:
// rs1_val==46341 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0xb505, 0x55555554, x2, 1640, x1)
    3464:	0000b537          	lui	a0,0xb
    3468:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    346c:	555555b7          	lui	a1,0x55555
    3470:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3474:	00b57633          	and	a2,a0,a1
    3478:	66c12423          	sw	a2,1640(sp)

0000347c <inst_430>:

inst_430:
// rs1_val==46341 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb505, 0x0, x2, 1644, x1)
    347c:	0000b537          	lui	a0,0xb
    3480:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3484:	00000593          	li	a1,0
    3488:	00b57633          	and	a2,a0,a1
    348c:	66c12623          	sw	a2,1644(sp)

00003490 <inst_431>:

inst_431:
// rs1_val==46341 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb505, 0x4, x2, 1648, x1)
    3490:	0000b537          	lui	a0,0xb
    3494:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3498:	00400593          	li	a1,4
    349c:	00b57633          	and	a2,a0,a1
    34a0:	66c12823          	sw	a2,1648(sp)

000034a4 <inst_432>:

inst_432:
// rs1_val==46341 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0xb505, 0x33333332, x2, 1652, x1)
    34a4:	0000b537          	lui	a0,0xb
    34a8:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34ac:	333335b7          	lui	a1,0x33333
    34b0:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    34b4:	00b57633          	and	a2,a0,a1
    34b8:	66c12a23          	sw	a2,1652(sp)

000034bc <inst_433>:

inst_433:
// rs1_val==46341 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x2405, 0xb505, 0x66666665, x2, 1656, x1)
    34bc:	0000b537          	lui	a0,0xb
    34c0:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34c4:	666665b7          	lui	a1,0x66666
    34c8:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    34cc:	00b57633          	and	a2,a0,a1
    34d0:	66c12c23          	sw	a2,1656(sp)

000034d4 <inst_434>:

inst_434:
// rs1_val==46341 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0xb501, 0xb505, 0xb503, x2, 1660, x1)
    34d4:	0000b537          	lui	a0,0xb
    34d8:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34dc:	0000b5b7          	lui	a1,0xb
    34e0:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    34e4:	00b57633          	and	a2,a0,a1
    34e8:	66c12e23          	sw	a2,1660(sp)

000034ec <inst_435>:

inst_435:
// rs1_val==46341 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0xb505, 0x55555556, x2, 1664, x1)
    34ec:	0000b537          	lui	a0,0xb
    34f0:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    34f4:	555555b7          	lui	a1,0x55555
    34f8:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    34fc:	00b57633          	and	a2,a0,a1
    3500:	68c12023          	sw	a2,1664(sp)

00003504 <inst_436>:

inst_436:
// rs1_val==46341 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0xa001, 0xb505, -0x55555555, x2, 1668, x1)
    3504:	0000b537          	lui	a0,0xb
    3508:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    350c:	aaaab5b7          	lui	a1,0xaaaab
    3510:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3514:	00b57633          	and	a2,a0,a1
    3518:	68c12223          	sw	a2,1668(sp)

0000351c <inst_437>:

inst_437:
// rs1_val==46341 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0xb505, 0x6, x2, 1672, x1)
    351c:	0000b537          	lui	a0,0xb
    3520:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3524:	00600593          	li	a1,6
    3528:	00b57633          	and	a2,a0,a1
    352c:	68c12423          	sw	a2,1672(sp)

00003530 <inst_438>:

inst_438:
// rs1_val==46341 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x3104, 0xb505, 0x33333334, x2, 1676, x1)
    3530:	0000b537          	lui	a0,0xb
    3534:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3538:	333335b7          	lui	a1,0x33333
    353c:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3540:	00b57633          	and	a2,a0,a1
    3544:	68c12623          	sw	a2,1676(sp)

00003548 <inst_439>:

inst_439:
// rs1_val==46341 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x2405, 0xb505, 0x66666667, x2, 1680, x1)
    3548:	0000b537          	lui	a0,0xb
    354c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3550:	666665b7          	lui	a1,0x66666
    3554:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3558:	00b57633          	and	a2,a0,a1
    355c:	68c12823          	sw	a2,1680(sp)

00003560 <inst_440>:

inst_440:
// rs1_val==46341 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x5, 0xb505, -0xb503, x2, 1684, x1)
    3560:	0000b537          	lui	a0,0xb
    3564:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3568:	ffff55b7          	lui	a1,0xffff5
    356c:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3570:	00b57633          	and	a2,a0,a1
    3574:	68c12a23          	sw	a2,1684(sp)

00003578 <inst_441>:

inst_441:
// rs1_val==46341 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0xb505, 0xb505, 0xb505, x2, 1688, x1)
    3578:	0000b537          	lui	a0,0xb
    357c:	50550513          	addi	a0,a0,1285 # b505 <_end+0x5501>
    3580:	0000b5b7          	lui	a1,0xb
    3584:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3588:	00b57633          	and	a2,a0,a1
    358c:	68c12c23          	sw	a2,1688(sp)

00003590 <inst_442>:

inst_442:
// rs1_val==0 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x55555554, x2, 1692, x1)
    3590:	00000513          	li	a0,0
    3594:	555555b7          	lui	a1,0x55555
    3598:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    359c:	00b57633          	and	a2,a0,a1
    35a0:	68c12e23          	sw	a2,1692(sp)

000035a4 <inst_443>:

inst_443:
// rs1_val==0 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x0, x2, 1696, x1)
    35a4:	00000513          	li	a0,0
    35a8:	00000593          	li	a1,0
    35ac:	00b57633          	and	a2,a0,a1
    35b0:	6ac12023          	sw	a2,1696(sp)

000035b4 <inst_444>:

inst_444:
// rs1_val==0 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x4, x2, 1700, x1)
    35b4:	00000513          	li	a0,0
    35b8:	00400593          	li	a1,4
    35bc:	00b57633          	and	a2,a0,a1
    35c0:	6ac12223          	sw	a2,1700(sp)

000035c4 <inst_445>:

inst_445:
// rs1_val==0 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x33333332, x2, 1704, x1)
    35c4:	00000513          	li	a0,0
    35c8:	333335b7          	lui	a1,0x33333
    35cc:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    35d0:	00b57633          	and	a2,a0,a1
    35d4:	6ac12423          	sw	a2,1704(sp)

000035d8 <inst_446>:

inst_446:
// rs1_val==0 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x66666665, x2, 1708, x1)
    35d8:	00000513          	li	a0,0
    35dc:	666665b7          	lui	a1,0x66666
    35e0:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    35e4:	00b57633          	and	a2,a0,a1
    35e8:	6ac12623          	sw	a2,1708(sp)

000035ec <inst_447>:

inst_447:
// rs1_val==0 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0xb503, x2, 1712, x1)
    35ec:	00000513          	li	a0,0
    35f0:	0000b5b7          	lui	a1,0xb
    35f4:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    35f8:	00b57633          	and	a2,a0,a1
    35fc:	6ac12823          	sw	a2,1712(sp)

00003600 <inst_448>:

inst_448:
// rs1_val==0 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x55555556, x2, 1716, x1)
    3600:	00000513          	li	a0,0
    3604:	555555b7          	lui	a1,0x55555
    3608:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    360c:	00b57633          	and	a2,a0,a1
    3610:	6ac12a23          	sw	a2,1716(sp)

00003614 <inst_449>:

inst_449:
// rs1_val==0 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, -0x55555555, x2, 1720, x1)
    3614:	00000513          	li	a0,0
    3618:	aaaab5b7          	lui	a1,0xaaaab
    361c:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3620:	00b57633          	and	a2,a0,a1
    3624:	6ac12c23          	sw	a2,1720(sp)

00003628 <inst_450>:

inst_450:
// rs1_val==0 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x6, x2, 1724, x1)
    3628:	00000513          	li	a0,0
    362c:	00600593          	li	a1,6
    3630:	00b57633          	and	a2,a0,a1
    3634:	6ac12e23          	sw	a2,1724(sp)

00003638 <inst_451>:

inst_451:
// rs1_val==0 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x33333334, x2, 1728, x1)
    3638:	00000513          	li	a0,0
    363c:	333335b7          	lui	a1,0x33333
    3640:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3644:	00b57633          	and	a2,a0,a1
    3648:	6cc12023          	sw	a2,1728(sp)

0000364c <inst_452>:

inst_452:
// rs1_val==0 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x66666667, x2, 1732, x1)
    364c:	00000513          	li	a0,0
    3650:	666665b7          	lui	a1,0x66666
    3654:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3658:	00b57633          	and	a2,a0,a1
    365c:	6cc12223          	sw	a2,1732(sp)

00003660 <inst_453>:

inst_453:
// rs1_val==0 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, -0xb503, x2, 1736, x1)
    3660:	00000513          	li	a0,0
    3664:	ffff55b7          	lui	a1,0xffff5
    3668:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    366c:	00b57633          	and	a2,a0,a1
    3670:	6cc12423          	sw	a2,1736(sp)

00003674 <inst_454>:

inst_454:
// rs1_val==0 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0xb505, x2, 1740, x1)
    3674:	00000513          	li	a0,0
    3678:	0000b5b7          	lui	a1,0xb
    367c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3680:	00b57633          	and	a2,a0,a1
    3684:	6cc12623          	sw	a2,1740(sp)

00003688 <inst_455>:

inst_455:
// rs1_val==4 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, 0x3, x2, 1744, x1)
    3688:	00400513          	li	a0,4
    368c:	00300593          	li	a1,3
    3690:	00b57633          	and	a2,a0,a1
    3694:	6cc12823          	sw	a2,1744(sp)

00003698 <inst_456>:

inst_456:
// rs1_val==4 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x55555555, x2, 1748, x1)
    3698:	00400513          	li	a0,4
    369c:	555555b7          	lui	a1,0x55555
    36a0:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    36a4:	00b57633          	and	a2,a0,a1
    36a8:	6cc12a23          	sw	a2,1748(sp)

000036ac <inst_457>:

inst_457:
// rs1_val==4 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, -0x55555556, x2, 1752, x1)
    36ac:	00400513          	li	a0,4
    36b0:	aaaab5b7          	lui	a1,0xaaaab
    36b4:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    36b8:	00b57633          	and	a2,a0,a1
    36bc:	6cc12c23          	sw	a2,1752(sp)

000036c0 <inst_458>:

inst_458:
// rs1_val==4 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x5, x2, 1756, x1)
    36c0:	00400513          	li	a0,4
    36c4:	00500593          	li	a1,5
    36c8:	00b57633          	and	a2,a0,a1
    36cc:	6cc12e23          	sw	a2,1756(sp)

000036d0 <inst_459>:

inst_459:
// rs1_val==4 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, 0x33333333, x2, 1760, x1)
    36d0:	00400513          	li	a0,4
    36d4:	333335b7          	lui	a1,0x33333
    36d8:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    36dc:	00b57633          	and	a2,a0,a1
    36e0:	6ec12023          	sw	a2,1760(sp)

000036e4 <inst_460>:

inst_460:
// rs1_val==4 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x66666666, x2, 1764, x1)
    36e4:	00400513          	li	a0,4
    36e8:	666665b7          	lui	a1,0x66666
    36ec:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    36f0:	00b57633          	and	a2,a0,a1
    36f4:	6ec12223          	sw	a2,1764(sp)

000036f8 <inst_461>:

inst_461:
// rs1_val==4 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, -0xb504, x2, 1768, x1)
    36f8:	00400513          	li	a0,4
    36fc:	ffff55b7          	lui	a1,0xffff5
    3700:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3704:	00b57633          	and	a2,a0,a1
    3708:	6ec12423          	sw	a2,1768(sp)

0000370c <inst_462>:

inst_462:
// rs1_val==4 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0xb504, x2, 1772, x1)
    370c:	00400513          	li	a0,4
    3710:	0000b5b7          	lui	a1,0xb
    3714:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3718:	00b57633          	and	a2,a0,a1
    371c:	6ec12623          	sw	a2,1772(sp)

00003720 <inst_463>:

inst_463:
// rs1_val==4 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, 0x2, x2, 1776, x1)
    3720:	00400513          	li	a0,4
    3724:	00200593          	li	a1,2
    3728:	00b57633          	and	a2,a0,a1
    372c:	6ec12823          	sw	a2,1776(sp)

00003730 <inst_464>:

inst_464:
// rs1_val==4 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x55555554, x2, 1780, x1)
    3730:	00400513          	li	a0,4
    3734:	555555b7          	lui	a1,0x55555
    3738:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    373c:	00b57633          	and	a2,a0,a1
    3740:	6ec12a23          	sw	a2,1780(sp)

00003744 <inst_465>:

inst_465:
// rs1_val==4 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, 0x0, x2, 1784, x1)
    3744:	00400513          	li	a0,4
    3748:	00000593          	li	a1,0
    374c:	00b57633          	and	a2,a0,a1
    3750:	6ec12c23          	sw	a2,1784(sp)

00003754 <inst_466>:

inst_466:
// rs1_val==4 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x4, x2, 1788, x1)
    3754:	00400513          	li	a0,4
    3758:	00400593          	li	a1,4
    375c:	00b57633          	and	a2,a0,a1
    3760:	6ec12e23          	sw	a2,1788(sp)

00003764 <inst_467>:

inst_467:
// rs1_val==4 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, 0x33333332, x2, 1792, x1)
    3764:	00400513          	li	a0,4
    3768:	333335b7          	lui	a1,0x33333
    376c:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3770:	00b57633          	and	a2,a0,a1
    3774:	70c12023          	sw	a2,1792(sp)

00003778 <inst_468>:

inst_468:
// rs1_val==4 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x66666665, x2, 1796, x1)
    3778:	00400513          	li	a0,4
    377c:	666665b7          	lui	a1,0x66666
    3780:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3784:	00b57633          	and	a2,a0,a1
    3788:	70c12223          	sw	a2,1796(sp)

0000378c <inst_469>:

inst_469:
// rs1_val==4 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, 0xb503, x2, 1800, x1)
    378c:	00400513          	li	a0,4
    3790:	0000b5b7          	lui	a1,0xb
    3794:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3798:	00b57633          	and	a2,a0,a1
    379c:	70c12423          	sw	a2,1800(sp)

000037a0 <inst_470>:

inst_470:
// rs1_val==4 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x55555556, x2, 1804, x1)
    37a0:	00400513          	li	a0,4
    37a4:	555555b7          	lui	a1,0x55555
    37a8:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    37ac:	00b57633          	and	a2,a0,a1
    37b0:	70c12623          	sw	a2,1804(sp)

000037b4 <inst_471>:

inst_471:
// rs1_val==4 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x4, -0x55555555, x2, 1808, x1)
    37b4:	00400513          	li	a0,4
    37b8:	aaaab5b7          	lui	a1,0xaaaab
    37bc:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    37c0:	00b57633          	and	a2,a0,a1
    37c4:	70c12823          	sw	a2,1808(sp)

000037c8 <inst_472>:

inst_472:
// rs1_val==4 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x6, x2, 1812, x1)
    37c8:	00400513          	li	a0,4
    37cc:	00600593          	li	a1,6
    37d0:	00b57633          	and	a2,a0,a1
    37d4:	70c12a23          	sw	a2,1812(sp)

000037d8 <inst_473>:

inst_473:
// rs1_val==4 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x33333334, x2, 1816, x1)
    37d8:	00400513          	li	a0,4
    37dc:	333335b7          	lui	a1,0x33333
    37e0:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    37e4:	00b57633          	and	a2,a0,a1
    37e8:	70c12c23          	sw	a2,1816(sp)

000037ec <inst_474>:

inst_474:
// rs1_val==4 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0x66666667, x2, 1820, x1)
    37ec:	00400513          	li	a0,4
    37f0:	666665b7          	lui	a1,0x66666
    37f4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    37f8:	00b57633          	and	a2,a0,a1
    37fc:	70c12e23          	sw	a2,1820(sp)

00003800 <inst_475>:

inst_475:
// rs1_val==4 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, -0xb503, x2, 1824, x1)
    3800:	00400513          	li	a0,4
    3804:	ffff55b7          	lui	a1,0xffff5
    3808:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    380c:	00b57633          	and	a2,a0,a1
    3810:	72c12023          	sw	a2,1824(sp)

00003814 <inst_476>:

inst_476:
// rs1_val==4 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x4, 0xb505, x2, 1828, x1)
    3814:	00400513          	li	a0,4
    3818:	0000b5b7          	lui	a1,0xb
    381c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3820:	00b57633          	and	a2,a0,a1
    3824:	72c12223          	sw	a2,1828(sp)

00003828 <inst_477>:

inst_477:
// rs1_val==858993458 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x33333332, 0x3, x2, 1832, x1)
    3828:	33333537          	lui	a0,0x33333
    382c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3830:	00300593          	li	a1,3
    3834:	00b57633          	and	a2,a0,a1
    3838:	72c12423          	sw	a2,1832(sp)

0000383c <inst_478>:

inst_478:
// rs1_val==858993458 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x11111110, 0x33333332, 0x55555555, x2, 1836, x1)
    383c:	33333537          	lui	a0,0x33333
    3840:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3844:	555555b7          	lui	a1,0x55555
    3848:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    384c:	00b57633          	and	a2,a0,a1
    3850:	72c12623          	sw	a2,1836(sp)

00003854 <inst_479>:

inst_479:
// rs1_val==858993458 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x33333332, -0x55555556, x2, 1840, x1)
    3854:	33333537          	lui	a0,0x33333
    3858:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    385c:	aaaab5b7          	lui	a1,0xaaaab
    3860:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3864:	00b57633          	and	a2,a0,a1
    3868:	72c12823          	sw	a2,1840(sp)

0000386c <inst_480>:

inst_480:
// rs1_val==858993458 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x33333332, 0x5, x2, 1844, x1)
    386c:	33333537          	lui	a0,0x33333
    3870:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3874:	00500593          	li	a1,5
    3878:	00b57633          	and	a2,a0,a1
    387c:	72c12a23          	sw	a2,1844(sp)

00003880 <inst_481>:

inst_481:
// rs1_val==858993458 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x33333332, 0x33333332, 0x33333333, x2, 1848, x1)
    3880:	33333537          	lui	a0,0x33333
    3884:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3888:	333335b7          	lui	a1,0x33333
    388c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3890:	00b57633          	and	a2,a0,a1
    3894:	72c12c23          	sw	a2,1848(sp)

00003898 <inst_482>:

inst_482:
// rs1_val==858993458 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x33333332, 0x66666666, x2, 1852, x1)
    3898:	33333537          	lui	a0,0x33333
    389c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38a0:	666665b7          	lui	a1,0x66666
    38a4:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    38a8:	00b57633          	and	a2,a0,a1
    38ac:	72c12e23          	sw	a2,1852(sp)

000038b0 <inst_483>:

inst_483:
// rs1_val==858993458 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x33330230, 0x33333332, -0xb504, x2, 1856, x1)
    38b0:	33333537          	lui	a0,0x33333
    38b4:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38b8:	ffff55b7          	lui	a1,0xffff5
    38bc:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    38c0:	00b57633          	and	a2,a0,a1
    38c4:	74c12023          	sw	a2,1856(sp)

000038c8 <inst_484>:

inst_484:
// rs1_val==858993458 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0x33333332, 0xb504, x2, 1860, x1)
    38c8:	33333537          	lui	a0,0x33333
    38cc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38d0:	0000b5b7          	lui	a1,0xb
    38d4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    38d8:	00b57633          	and	a2,a0,a1
    38dc:	74c12223          	sw	a2,1860(sp)

000038e0 <inst_485>:

inst_485:
// rs1_val==858993458 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x33333332, 0x2, x2, 1864, x1)
    38e0:	33333537          	lui	a0,0x33333
    38e4:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38e8:	00200593          	li	a1,2
    38ec:	00b57633          	and	a2,a0,a1
    38f0:	74c12423          	sw	a2,1864(sp)

000038f4 <inst_486>:

inst_486:
// rs1_val==858993458 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x11111110, 0x33333332, 0x55555554, x2, 1868, x1)
    38f4:	33333537          	lui	a0,0x33333
    38f8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    38fc:	555555b7          	lui	a1,0x55555
    3900:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3904:	00b57633          	and	a2,a0,a1
    3908:	74c12623          	sw	a2,1868(sp)

0000390c <inst_487>:

inst_487:
// rs1_val==858993458 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x33333332, 0x0, x2, 1872, x1)
    390c:	33333537          	lui	a0,0x33333
    3910:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3914:	00000593          	li	a1,0
    3918:	00b57633          	and	a2,a0,a1
    391c:	74c12823          	sw	a2,1872(sp)

00003920 <inst_488>:

inst_488:
// rs1_val==858993458 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x33333332, 0x4, x2, 1876, x1)
    3920:	33333537          	lui	a0,0x33333
    3924:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3928:	00400593          	li	a1,4
    392c:	00b57633          	and	a2,a0,a1
    3930:	74c12a23          	sw	a2,1876(sp)

00003934 <inst_489>:

inst_489:
// rs1_val==858993458 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x33333332, 0x33333332, 0x33333332, x2, 1880, x1)
    3934:	33333537          	lui	a0,0x33333
    3938:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    393c:	333335b7          	lui	a1,0x33333
    3940:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3944:	00b57633          	and	a2,a0,a1
    3948:	74c12c23          	sw	a2,1880(sp)

0000394c <inst_490>:

inst_490:
// rs1_val==858993458 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x22222220, 0x33333332, 0x66666665, x2, 1884, x1)
    394c:	33333537          	lui	a0,0x33333
    3950:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3954:	666665b7          	lui	a1,0x66666
    3958:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    395c:	00b57633          	and	a2,a0,a1
    3960:	74c12e23          	sw	a2,1884(sp)

00003964 <inst_491>:

inst_491:
// rs1_val==858993458 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x3102, 0x33333332, 0xb503, x2, 1888, x1)
    3964:	33333537          	lui	a0,0x33333
    3968:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    396c:	0000b5b7          	lui	a1,0xb
    3970:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3974:	00b57633          	and	a2,a0,a1
    3978:	76c12023          	sw	a2,1888(sp)

0000397c <inst_492>:

inst_492:
// rs1_val==858993458 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x11111112, 0x33333332, 0x55555556, x2, 1892, x1)
    397c:	33333537          	lui	a0,0x33333
    3980:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3984:	555555b7          	lui	a1,0x55555
    3988:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    398c:	00b57633          	and	a2,a0,a1
    3990:	76c12223          	sw	a2,1892(sp)

00003994 <inst_493>:

inst_493:
// rs1_val==858993458 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x33333332, -0x55555555, x2, 1896, x1)
    3994:	33333537          	lui	a0,0x33333
    3998:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    399c:	aaaab5b7          	lui	a1,0xaaaab
    39a0:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    39a4:	00b57633          	and	a2,a0,a1
    39a8:	76c12423          	sw	a2,1896(sp)

000039ac <inst_494>:

inst_494:
// rs1_val==858993458 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x33333332, 0x6, x2, 1900, x1)
    39ac:	33333537          	lui	a0,0x33333
    39b0:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39b4:	00600593          	li	a1,6
    39b8:	00b57633          	and	a2,a0,a1
    39bc:	76c12623          	sw	a2,1900(sp)

000039c0 <inst_495>:

inst_495:
// rs1_val==858993458 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x33333330, 0x33333332, 0x33333334, x2, 1904, x1)
    39c0:	33333537          	lui	a0,0x33333
    39c4:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39c8:	333335b7          	lui	a1,0x33333
    39cc:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    39d0:	00b57633          	and	a2,a0,a1
    39d4:	76c12823          	sw	a2,1904(sp)

000039d8 <inst_496>:

inst_496:
// rs1_val==858993458 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x22222222, 0x33333332, 0x66666667, x2, 1908, x1)
    39d8:	33333537          	lui	a0,0x33333
    39dc:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39e0:	666665b7          	lui	a1,0x66666
    39e4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    39e8:	00b57633          	and	a2,a0,a1
    39ec:	76c12a23          	sw	a2,1908(sp)

000039f0 <inst_497>:

inst_497:
// rs1_val==858993458 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x33330230, 0x33333332, -0xb503, x2, 1912, x1)
    39f0:	33333537          	lui	a0,0x33333
    39f4:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    39f8:	ffff55b7          	lui	a1,0xffff5
    39fc:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3a00:	00b57633          	and	a2,a0,a1
    3a04:	76c12c23          	sw	a2,1912(sp)

00003a08 <inst_498>:

inst_498:
// rs1_val==858993458 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0x33333332, 0xb505, x2, 1916, x1)
    3a08:	33333537          	lui	a0,0x33333
    3a0c:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332d32e>
    3a10:	0000b5b7          	lui	a1,0xb
    3a14:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3a18:	00b57633          	and	a2,a0,a1
    3a1c:	76c12e23          	sw	a2,1916(sp)

00003a20 <inst_499>:

inst_499:
// rs1_val==1717986917 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x1, 0x66666665, 0x3, x2, 1920, x1)
    3a20:	66666537          	lui	a0,0x66666
    3a24:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3a28:	00300593          	li	a1,3
    3a2c:	00b57633          	and	a2,a0,a1
    3a30:	78c12023          	sw	a2,1920(sp)

00003a34 <inst_500>:

inst_500:
// rs1_val==1717986917 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x44444445, 0x66666665, 0x55555555, x2, 1924, x1)
    3a34:	66666537          	lui	a0,0x66666
    3a38:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3a3c:	555555b7          	lui	a1,0x55555
    3a40:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3a44:	00b57633          	and	a2,a0,a1
    3a48:	78c12223          	sw	a2,1924(sp)

00003a4c <inst_501>:

inst_501:
// rs1_val==1717986917 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x22222220, 0x66666665, -0x55555556, x2, 1928, x1)
    3a4c:	66666537          	lui	a0,0x66666
    3a50:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3a54:	aaaab5b7          	lui	a1,0xaaaab
    3a58:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3a5c:	00b57633          	and	a2,a0,a1
    3a60:	78c12423          	sw	a2,1928(sp)

00003a64 <inst_502>:

inst_502:
// rs1_val==1717986917 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x5, 0x66666665, 0x5, x2, 1932, x1)
    3a64:	66666537          	lui	a0,0x66666
    3a68:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3a6c:	00500593          	li	a1,5
    3a70:	00b57633          	and	a2,a0,a1
    3a74:	78c12623          	sw	a2,1932(sp)

00003a78 <inst_503>:

inst_503:
// rs1_val==1717986917 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x22222221, 0x66666665, 0x33333333, x2, 1936, x1)
    3a78:	66666537          	lui	a0,0x66666
    3a7c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3a80:	333335b7          	lui	a1,0x33333
    3a84:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3a88:	00b57633          	and	a2,a0,a1
    3a8c:	78c12823          	sw	a2,1936(sp)

00003a90 <inst_504>:

inst_504:
// rs1_val==1717986917 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x66666664, 0x66666665, 0x66666666, x2, 1940, x1)
    3a90:	66666537          	lui	a0,0x66666
    3a94:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3a98:	666665b7          	lui	a1,0x66666
    3a9c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3aa0:	00b57633          	and	a2,a0,a1
    3aa4:	78c12a23          	sw	a2,1940(sp)

00003aa8 <inst_505>:

inst_505:
// rs1_val==1717986917 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x66664264, 0x66666665, -0xb504, x2, 1944, x1)
    3aa8:	66666537          	lui	a0,0x66666
    3aac:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3ab0:	ffff55b7          	lui	a1,0xffff5
    3ab4:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3ab8:	00b57633          	and	a2,a0,a1
    3abc:	78c12c23          	sw	a2,1944(sp)

00003ac0 <inst_506>:

inst_506:
// rs1_val==1717986917 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x2404, 0x66666665, 0xb504, x2, 1948, x1)
    3ac0:	66666537          	lui	a0,0x66666
    3ac4:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3ac8:	0000b5b7          	lui	a1,0xb
    3acc:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3ad0:	00b57633          	and	a2,a0,a1
    3ad4:	78c12e23          	sw	a2,1948(sp)

00003ad8 <inst_507>:

inst_507:
// rs1_val==1717986917 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x66666665, 0x2, x2, 1952, x1)
    3ad8:	66666537          	lui	a0,0x66666
    3adc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3ae0:	00200593          	li	a1,2
    3ae4:	00b57633          	and	a2,a0,a1
    3ae8:	7ac12023          	sw	a2,1952(sp)

00003aec <inst_508>:

inst_508:
// rs1_val==1717986917 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x66666665, 0x55555554, x2, 1956, x1)
    3aec:	66666537          	lui	a0,0x66666
    3af0:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3af4:	555555b7          	lui	a1,0x55555
    3af8:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3afc:	00b57633          	and	a2,a0,a1
    3b00:	7ac12223          	sw	a2,1956(sp)

00003b04 <inst_509>:

inst_509:
// rs1_val==1717986917 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x66666665, 0x0, x2, 1960, x1)
    3b04:	66666537          	lui	a0,0x66666
    3b08:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b0c:	00000593          	li	a1,0
    3b10:	00b57633          	and	a2,a0,a1
    3b14:	7ac12423          	sw	a2,1960(sp)

00003b18 <inst_510>:

inst_510:
// rs1_val==1717986917 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x66666665, 0x4, x2, 1964, x1)
    3b18:	66666537          	lui	a0,0x66666
    3b1c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b20:	00400593          	li	a1,4
    3b24:	00b57633          	and	a2,a0,a1
    3b28:	7ac12623          	sw	a2,1964(sp)

00003b2c <inst_511>:

inst_511:
// rs1_val==1717986917 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x22222220, 0x66666665, 0x33333332, x2, 1968, x1)
    3b2c:	66666537          	lui	a0,0x66666
    3b30:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b34:	333335b7          	lui	a1,0x33333
    3b38:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3b3c:	00b57633          	and	a2,a0,a1
    3b40:	7ac12823          	sw	a2,1968(sp)

00003b44 <inst_512>:

inst_512:
// rs1_val==1717986917 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x66666665, 0x66666665, 0x66666665, x2, 1972, x1)
    3b44:	66666537          	lui	a0,0x66666
    3b48:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b4c:	666665b7          	lui	a1,0x66666
    3b50:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3b54:	00b57633          	and	a2,a0,a1
    3b58:	7ac12a23          	sw	a2,1972(sp)

00003b5c <inst_513>:

inst_513:
// rs1_val==1717986917 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x2401, 0x66666665, 0xb503, x2, 1976, x1)
    3b5c:	66666537          	lui	a0,0x66666
    3b60:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b64:	0000b5b7          	lui	a1,0xb
    3b68:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3b6c:	00b57633          	and	a2,a0,a1
    3b70:	7ac12c23          	sw	a2,1976(sp)

00003b74 <inst_514>:

inst_514:
// rs1_val==1717986917 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x66666665, 0x55555556, x2, 1980, x1)
    3b74:	66666537          	lui	a0,0x66666
    3b78:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b7c:	555555b7          	lui	a1,0x55555
    3b80:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3b84:	00b57633          	and	a2,a0,a1
    3b88:	7ac12e23          	sw	a2,1980(sp)

00003b8c <inst_515>:

inst_515:
// rs1_val==1717986917 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x22222221, 0x66666665, -0x55555555, x2, 1984, x1)
    3b8c:	66666537          	lui	a0,0x66666
    3b90:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3b94:	aaaab5b7          	lui	a1,0xaaaab
    3b98:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3b9c:	00b57633          	and	a2,a0,a1
    3ba0:	7cc12023          	sw	a2,1984(sp)

00003ba4 <inst_516>:

inst_516:
// rs1_val==1717986917 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x66666665, 0x6, x2, 1988, x1)
    3ba4:	66666537          	lui	a0,0x66666
    3ba8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3bac:	00600593          	li	a1,6
    3bb0:	00b57633          	and	a2,a0,a1
    3bb4:	7cc12223          	sw	a2,1988(sp)

00003bb8 <inst_517>:

inst_517:
// rs1_val==1717986917 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x22222224, 0x66666665, 0x33333334, x2, 1992, x1)
    3bb8:	66666537          	lui	a0,0x66666
    3bbc:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3bc0:	333335b7          	lui	a1,0x33333
    3bc4:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3bc8:	00b57633          	and	a2,a0,a1
    3bcc:	7cc12423          	sw	a2,1992(sp)

00003bd0 <inst_518>:

inst_518:
// rs1_val==1717986917 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x66666665, 0x66666665, 0x66666667, x2, 1996, x1)
    3bd0:	66666537          	lui	a0,0x66666
    3bd4:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3bd8:	666665b7          	lui	a1,0x66666
    3bdc:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3be0:	00b57633          	and	a2,a0,a1
    3be4:	7cc12623          	sw	a2,1996(sp)

00003be8 <inst_519>:

inst_519:
// rs1_val==1717986917 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x66664265, 0x66666665, -0xb503, x2, 2000, x1)
    3be8:	66666537          	lui	a0,0x66666
    3bec:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3bf0:	ffff55b7          	lui	a1,0xffff5
    3bf4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3bf8:	00b57633          	and	a2,a0,a1
    3bfc:	7cc12823          	sw	a2,2000(sp)

00003c00 <inst_520>:

inst_520:
// rs1_val==1717986917 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x2405, 0x66666665, 0xb505, x2, 2004, x1)
    3c00:	66666537          	lui	a0,0x66666
    3c04:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66660661>
    3c08:	0000b5b7          	lui	a1,0xb
    3c0c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3c10:	00b57633          	and	a2,a0,a1
    3c14:	7cc12a23          	sw	a2,2004(sp)

00003c18 <inst_521>:

inst_521:
// rs1_val==46339 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x3, 0xb503, 0x3, x2, 2008, x1)
    3c18:	0000b537          	lui	a0,0xb
    3c1c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c20:	00300593          	li	a1,3
    3c24:	00b57633          	and	a2,a0,a1
    3c28:	7cc12c23          	sw	a2,2008(sp)

00003c2c <inst_522>:

inst_522:
// rs1_val==46339 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x1501, 0xb503, 0x55555555, x2, 2012, x1)
    3c2c:	0000b537          	lui	a0,0xb
    3c30:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c34:	555555b7          	lui	a1,0x55555
    3c38:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3c3c:	00b57633          	and	a2,a0,a1
    3c40:	7cc12e23          	sw	a2,2012(sp)

00003c44 <inst_523>:

inst_523:
// rs1_val==46339 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0xa002, 0xb503, -0x55555556, x2, 2016, x1)
    3c44:	0000b537          	lui	a0,0xb
    3c48:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c4c:	aaaab5b7          	lui	a1,0xaaaab
    3c50:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3c54:	00b57633          	and	a2,a0,a1
    3c58:	7ec12023          	sw	a2,2016(sp)

00003c5c <inst_524>:

inst_524:
// rs1_val==46339 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x1, 0xb503, 0x5, x2, 2020, x1)
    3c5c:	0000b537          	lui	a0,0xb
    3c60:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c64:	00500593          	li	a1,5
    3c68:	00b57633          	and	a2,a0,a1
    3c6c:	7ec12223          	sw	a2,2020(sp)

00003c70 <inst_525>:

inst_525:
// rs1_val==46339 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x3103, 0xb503, 0x33333333, x2, 2024, x1)
    3c70:	0000b537          	lui	a0,0xb
    3c74:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c78:	333335b7          	lui	a1,0x33333
    3c7c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3c80:	00b57633          	and	a2,a0,a1
    3c84:	7ec12423          	sw	a2,2024(sp)

00003c88 <inst_526>:

inst_526:
// rs1_val==46339 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x2402, 0xb503, 0x66666666, x2, 2028, x1)
    3c88:	0000b537          	lui	a0,0xb
    3c8c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3c90:	666665b7          	lui	a1,0x66666
    3c94:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3c98:	00b57633          	and	a2,a0,a1
    3c9c:	7ec12623          	sw	a2,2028(sp)

00003ca0 <inst_527>:

inst_527:
// rs1_val==46339 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb503, -0xb504, x2, 2032, x1)
    3ca0:	0000b537          	lui	a0,0xb
    3ca4:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3ca8:	ffff55b7          	lui	a1,0xffff5
    3cac:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3cb0:	00b57633          	and	a2,a0,a1
    3cb4:	7ec12823          	sw	a2,2032(sp)

00003cb8 <inst_528>:

inst_528:
// rs1_val==46339 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0xb500, 0xb503, 0xb504, x2, 2036, x1)
    3cb8:	0000b537          	lui	a0,0xb
    3cbc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3cc0:	0000b5b7          	lui	a1,0xb
    3cc4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3cc8:	00b57633          	and	a2,a0,a1
    3ccc:	7ec12a23          	sw	a2,2036(sp)

00003cd0 <inst_529>:

inst_529:
// rs1_val==46339 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0xb503, 0x2, x2, 2040, x1)
    3cd0:	0000b537          	lui	a0,0xb
    3cd4:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3cd8:	00200593          	li	a1,2
    3cdc:	00b57633          	and	a2,a0,a1
    3ce0:	7ec12c23          	sw	a2,2040(sp)

00003ce4 <inst_530>:

inst_530:
// rs1_val==46339 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x1500, 0xb503, 0x55555554, x2, 2044, x1)
    3ce4:	0000b537          	lui	a0,0xb
    3ce8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3cec:	555555b7          	lui	a1,0x55555
    3cf0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3cf4:	00b57633          	and	a2,a0,a1
    3cf8:	7ec12e23          	sw	a2,2044(sp)
RVTEST_SIGBASE( x2,signature_x2_1)
    3cfc:	00002117          	auipc	sp,0x2
    3d00:	b6010113          	addi	sp,sp,-1184 # 585c <signature_x2_1>

00003d04 <inst_531>:

inst_531:
// rs1_val==46339 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb503, 0x0, x2, 0, x1)
    3d04:	0000b537          	lui	a0,0xb
    3d08:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d0c:	00000593          	li	a1,0
    3d10:	00b57633          	and	a2,a0,a1
    3d14:	00c12023          	sw	a2,0(sp)

00003d18 <inst_532>:

inst_532:
// rs1_val==46339 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, 0xb503, 0x4, x2, 4, x1)
    3d18:	0000b537          	lui	a0,0xb
    3d1c:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d20:	00400593          	li	a1,4
    3d24:	00b57633          	and	a2,a0,a1
    3d28:	00c12223          	sw	a2,4(sp)

00003d2c <inst_533>:

inst_533:
// rs1_val==46339 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x3102, 0xb503, 0x33333332, x2, 8, x1)
    3d2c:	0000b537          	lui	a0,0xb
    3d30:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d34:	333335b7          	lui	a1,0x33333
    3d38:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3d3c:	00b57633          	and	a2,a0,a1
    3d40:	00c12423          	sw	a2,8(sp)

00003d44 <inst_534>:

inst_534:
// rs1_val==46339 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x2401, 0xb503, 0x66666665, x2, 12, x1)
    3d44:	0000b537          	lui	a0,0xb
    3d48:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d4c:	666665b7          	lui	a1,0x66666
    3d50:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3d54:	00b57633          	and	a2,a0,a1
    3d58:	00c12623          	sw	a2,12(sp)

00003d5c <inst_535>:

inst_535:
// rs1_val==46339 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0xb503, 0xb503, 0xb503, x2, 16, x1)
    3d5c:	0000b537          	lui	a0,0xb
    3d60:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d64:	0000b5b7          	lui	a1,0xb
    3d68:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3d6c:	00b57633          	and	a2,a0,a1
    3d70:	00c12823          	sw	a2,16(sp)

00003d74 <inst_536>:

inst_536:
// rs1_val==46339 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x1502, 0xb503, 0x55555556, x2, 20, x1)
    3d74:	0000b537          	lui	a0,0xb
    3d78:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d7c:	555555b7          	lui	a1,0x55555
    3d80:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3d84:	00b57633          	and	a2,a0,a1
    3d88:	00c12a23          	sw	a2,20(sp)

00003d8c <inst_537>:

inst_537:
// rs1_val==46339 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0xa003, 0xb503, -0x55555555, x2, 24, x1)
    3d8c:	0000b537          	lui	a0,0xb
    3d90:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3d94:	aaaab5b7          	lui	a1,0xaaaab
    3d98:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3d9c:	00b57633          	and	a2,a0,a1
    3da0:	00c12c23          	sw	a2,24(sp)

00003da4 <inst_538>:

inst_538:
// rs1_val==46339 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x2, 0xb503, 0x6, x2, 28, x1)
    3da4:	0000b537          	lui	a0,0xb
    3da8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3dac:	00600593          	li	a1,6
    3db0:	00b57633          	and	a2,a0,a1
    3db4:	00c12e23          	sw	a2,28(sp)

00003db8 <inst_539>:

inst_539:
// rs1_val==46339 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x3100, 0xb503, 0x33333334, x2, 32, x1)
    3db8:	0000b537          	lui	a0,0xb
    3dbc:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3dc0:	333335b7          	lui	a1,0x33333
    3dc4:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3dc8:	00b57633          	and	a2,a0,a1
    3dcc:	02c12023          	sw	a2,32(sp)

00003dd0 <inst_540>:

inst_540:
// rs1_val==46339 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x2403, 0xb503, 0x66666667, x2, 36, x1)
    3dd0:	0000b537          	lui	a0,0xb
    3dd4:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3dd8:	666665b7          	lui	a1,0x66666
    3ddc:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3de0:	00b57633          	and	a2,a0,a1
    3de4:	02c12223          	sw	a2,36(sp)

00003de8 <inst_541>:

inst_541:
// rs1_val==46339 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x1, 0xb503, -0xb503, x2, 40, x1)
    3de8:	0000b537          	lui	a0,0xb
    3dec:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3df0:	ffff55b7          	lui	a1,0xffff5
    3df4:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3df8:	00b57633          	and	a2,a0,a1
    3dfc:	02c12423          	sw	a2,40(sp)

00003e00 <inst_542>:

inst_542:
// rs1_val==46339 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0xb501, 0xb503, 0xb505, x2, 44, x1)
    3e00:	0000b537          	lui	a0,0xb
    3e04:	50350513          	addi	a0,a0,1283 # b503 <_end+0x54ff>
    3e08:	0000b5b7          	lui	a1,0xb
    3e0c:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    3e10:	00b57633          	and	a2,a0,a1
    3e14:	02c12623          	sw	a2,44(sp)

00003e18 <inst_543>:

inst_543:
// rs1_val==1431655766 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x55555556, 0x3, x2, 48, x1)
    3e18:	55555537          	lui	a0,0x55555
    3e1c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e20:	00300593          	li	a1,3
    3e24:	00b57633          	and	a2,a0,a1
    3e28:	02c12823          	sw	a2,48(sp)

00003e2c <inst_544>:

inst_544:
// rs1_val==1431655766 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x55555554, 0x55555556, 0x55555555, x2, 52, x1)
    3e2c:	55555537          	lui	a0,0x55555
    3e30:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e34:	555555b7          	lui	a1,0x55555
    3e38:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    3e3c:	00b57633          	and	a2,a0,a1
    3e40:	02c12a23          	sw	a2,52(sp)

00003e44 <inst_545>:

inst_545:
// rs1_val==1431655766 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x55555556, -0x55555556, x2, 56, x1)
    3e44:	55555537          	lui	a0,0x55555
    3e48:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e4c:	aaaab5b7          	lui	a1,0xaaaab
    3e50:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    3e54:	00b57633          	and	a2,a0,a1
    3e58:	02c12c23          	sw	a2,56(sp)

00003e5c <inst_546>:

inst_546:
// rs1_val==1431655766 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x55555556, 0x5, x2, 60, x1)
    3e5c:	55555537          	lui	a0,0x55555
    3e60:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e64:	00500593          	li	a1,5
    3e68:	00b57633          	and	a2,a0,a1
    3e6c:	02c12e23          	sw	a2,60(sp)

00003e70 <inst_547>:

inst_547:
// rs1_val==1431655766 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x11111112, 0x55555556, 0x33333333, x2, 64, x1)
    3e70:	55555537          	lui	a0,0x55555
    3e74:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e78:	333335b7          	lui	a1,0x33333
    3e7c:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    3e80:	00b57633          	and	a2,a0,a1
    3e84:	04c12023          	sw	a2,64(sp)

00003e88 <inst_548>:

inst_548:
// rs1_val==1431655766 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x44444446, 0x55555556, 0x66666666, x2, 68, x1)
    3e88:	55555537          	lui	a0,0x55555
    3e8c:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3e90:	666665b7          	lui	a1,0x66666
    3e94:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    3e98:	00b57633          	and	a2,a0,a1
    3e9c:	04c12223          	sw	a2,68(sp)

00003ea0 <inst_549>:

inst_549:
// rs1_val==1431655766 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0x55554054, 0x55555556, -0xb504, x2, 72, x1)
    3ea0:	55555537          	lui	a0,0x55555
    3ea4:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3ea8:	ffff55b7          	lui	a1,0xffff5
    3eac:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    3eb0:	00b57633          	and	a2,a0,a1
    3eb4:	04c12423          	sw	a2,72(sp)

00003eb8 <inst_550>:

inst_550:
// rs1_val==1431655766 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0x55555556, 0xb504, x2, 76, x1)
    3eb8:	55555537          	lui	a0,0x55555
    3ebc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3ec0:	0000b5b7          	lui	a1,0xb
    3ec4:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    3ec8:	00b57633          	and	a2,a0,a1
    3ecc:	04c12623          	sw	a2,76(sp)

00003ed0 <inst_551>:

inst_551:
// rs1_val==1431655766 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x55555556, 0x2, x2, 80, x1)
    3ed0:	55555537          	lui	a0,0x55555
    3ed4:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3ed8:	00200593          	li	a1,2
    3edc:	00b57633          	and	a2,a0,a1
    3ee0:	04c12823          	sw	a2,80(sp)

00003ee4 <inst_552>:

inst_552:
// rs1_val==1431655766 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x55555554, 0x55555556, 0x55555554, x2, 84, x1)
    3ee4:	55555537          	lui	a0,0x55555
    3ee8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3eec:	555555b7          	lui	a1,0x55555
    3ef0:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    3ef4:	00b57633          	and	a2,a0,a1
    3ef8:	04c12a23          	sw	a2,84(sp)

00003efc <inst_553>:

inst_553:
// rs1_val==1431655766 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x55555556, 0x0, x2, 88, x1)
    3efc:	55555537          	lui	a0,0x55555
    3f00:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f04:	00000593          	li	a1,0
    3f08:	00b57633          	and	a2,a0,a1
    3f0c:	04c12c23          	sw	a2,88(sp)

00003f10 <inst_554>:

inst_554:
// rs1_val==1431655766 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x4, 0x55555556, 0x4, x2, 92, x1)
    3f10:	55555537          	lui	a0,0x55555
    3f14:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f18:	00400593          	li	a1,4
    3f1c:	00b57633          	and	a2,a0,a1
    3f20:	04c12e23          	sw	a2,92(sp)

00003f24 <inst_555>:

inst_555:
// rs1_val==1431655766 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x11111112, 0x55555556, 0x33333332, x2, 96, x1)
    3f24:	55555537          	lui	a0,0x55555
    3f28:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f2c:	333335b7          	lui	a1,0x33333
    3f30:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    3f34:	00b57633          	and	a2,a0,a1
    3f38:	06c12023          	sw	a2,96(sp)

00003f3c <inst_556>:

inst_556:
// rs1_val==1431655766 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x44444444, 0x55555556, 0x66666665, x2, 100, x1)
    3f3c:	55555537          	lui	a0,0x55555
    3f40:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f44:	666665b7          	lui	a1,0x66666
    3f48:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    3f4c:	00b57633          	and	a2,a0,a1
    3f50:	06c12223          	sw	a2,100(sp)

00003f54 <inst_557>:

inst_557:
// rs1_val==1431655766 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0x1502, 0x55555556, 0xb503, x2, 104, x1)
    3f54:	55555537          	lui	a0,0x55555
    3f58:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f5c:	0000b5b7          	lui	a1,0xb
    3f60:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    3f64:	00b57633          	and	a2,a0,a1
    3f68:	06c12423          	sw	a2,104(sp)

00003f6c <inst_558>:

inst_558:
// rs1_val==1431655766 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x55555556, 0x55555556, 0x55555556, x2, 108, x1)
    3f6c:	55555537          	lui	a0,0x55555
    3f70:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f74:	555555b7          	lui	a1,0x55555
    3f78:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    3f7c:	00b57633          	and	a2,a0,a1
    3f80:	06c12623          	sw	a2,108(sp)

00003f84 <inst_559>:

inst_559:
// rs1_val==1431655766 and rs2_val==-1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x2, 0x55555556, -0x55555555, x2, 112, x1)
    3f84:	55555537          	lui	a0,0x55555
    3f88:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3f8c:	aaaab5b7          	lui	a1,0xaaaab
    3f90:	aab58593          	addi	a1,a1,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    3f94:	00b57633          	and	a2,a0,a1
    3f98:	06c12823          	sw	a2,112(sp)

00003f9c <inst_560>:

inst_560:
// rs1_val==1431655766 and rs2_val==6, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x6
TEST_RR_OP(and, x12, x10, x11, 0x6, 0x55555556, 0x6, x2, 116, x1)
    3f9c:	55555537          	lui	a0,0x55555
    3fa0:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3fa4:	00600593          	li	a1,6
    3fa8:	00b57633          	and	a2,a0,a1
    3fac:	06c12a23          	sw	a2,116(sp)

00003fb0 <inst_561>:

inst_561:
// rs1_val==1431655766 and rs2_val==858993460, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x33333334
TEST_RR_OP(and, x12, x10, x11, 0x11111114, 0x55555556, 0x33333334, x2, 120, x1)
    3fb0:	55555537          	lui	a0,0x55555
    3fb4:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3fb8:	333335b7          	lui	a1,0x33333
    3fbc:	33458593          	addi	a1,a1,820 # 33333334 <_end+0x3332d330>
    3fc0:	00b57633          	and	a2,a0,a1
    3fc4:	06c12c23          	sw	a2,120(sp)

00003fc8 <inst_562>:

inst_562:
// rs1_val==1431655766 and rs2_val==1717986919, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x66666667
TEST_RR_OP(and, x12, x10, x11, 0x44444446, 0x55555556, 0x66666667, x2, 124, x1)
    3fc8:	55555537          	lui	a0,0x55555
    3fcc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3fd0:	666665b7          	lui	a1,0x66666
    3fd4:	66758593          	addi	a1,a1,1639 # 66666667 <_end+0x66660663>
    3fd8:	00b57633          	and	a2,a0,a1
    3fdc:	06c12e23          	sw	a2,124(sp)

00003fe0 <inst_563>:

inst_563:
// rs1_val==1431655766 and rs2_val==-46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:-0xb503
TEST_RR_OP(and, x12, x10, x11, 0x55554054, 0x55555556, -0xb503, x2, 128, x1)
    3fe0:	55555537          	lui	a0,0x55555
    3fe4:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    3fe8:	ffff55b7          	lui	a1,0xffff5
    3fec:	afd58593          	addi	a1,a1,-1283 # ffff4afd <_end+0xfffeeaf9>
    3ff0:	00b57633          	and	a2,a0,a1
    3ff4:	08c12023          	sw	a2,128(sp)

00003ff8 <inst_564>:

inst_564:
// rs1_val==1431655766 and rs2_val==46341, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0xb505
TEST_RR_OP(and, x12, x10, x11, 0x1504, 0x55555556, 0xb505, x2, 132, x1)
    3ff8:	55555537          	lui	a0,0x55555
    3ffc:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x5554f552>
    4000:	0000b5b7          	lui	a1,0xb
    4004:	50558593          	addi	a1,a1,1285 # b505 <_end+0x5501>
    4008:	00b57633          	and	a2,a0,a1
    400c:	08c12223          	sw	a2,132(sp)

00004010 <inst_565>:

inst_565:
// rs1_val==-1431655765 and rs2_val==3, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x3
TEST_RR_OP(and, x12, x10, x11, 0x3, -0x55555555, 0x3, x2, 136, x1)
    4010:	aaaab537          	lui	a0,0xaaaab
    4014:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4018:	00300593          	li	a1,3
    401c:	00b57633          	and	a2,a0,a1
    4020:	08c12423          	sw	a2,136(sp)

00004024 <inst_566>:

inst_566:
// rs1_val==-1431655765 and rs2_val==1431655765, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555555
TEST_RR_OP(and, x12, x10, x11, 0x1, -0x55555555, 0x55555555, x2, 140, x1)
    4024:	aaaab537          	lui	a0,0xaaaab
    4028:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    402c:	555555b7          	lui	a1,0x55555
    4030:	55558593          	addi	a1,a1,1365 # 55555555 <_end+0x5554f551>
    4034:	00b57633          	and	a2,a0,a1
    4038:	08c12623          	sw	a2,140(sp)

0000403c <inst_567>:

inst_567:
// rs1_val==-1431655765 and rs2_val==-1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0x55555556
TEST_RR_OP(and, x12, x10, x11, 0xaaaaaaaa, -0x55555555, -0x55555556, x2, 144, x1)
    403c:	aaaab537          	lui	a0,0xaaaab
    4040:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4044:	aaaab5b7          	lui	a1,0xaaaab
    4048:	aaa58593          	addi	a1,a1,-1366 # aaaaaaaa <_end+0xaaaa4aa6>
    404c:	00b57633          	and	a2,a0,a1
    4050:	08c12823          	sw	a2,144(sp)

00004054 <inst_568>:

inst_568:
// rs1_val==-1431655765 and rs2_val==5, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x5
TEST_RR_OP(and, x12, x10, x11, 0x1, -0x55555555, 0x5, x2, 148, x1)
    4054:	aaaab537          	lui	a0,0xaaaab
    4058:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    405c:	00500593          	li	a1,5
    4060:	00b57633          	and	a2,a0,a1
    4064:	08c12a23          	sw	a2,148(sp)

00004068 <inst_569>:

inst_569:
// rs1_val==-1431655765 and rs2_val==858993459, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333333
TEST_RR_OP(and, x12, x10, x11, 0x22222223, -0x55555555, 0x33333333, x2, 152, x1)
    4068:	aaaab537          	lui	a0,0xaaaab
    406c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4070:	333335b7          	lui	a1,0x33333
    4074:	33358593          	addi	a1,a1,819 # 33333333 <_end+0x3332d32f>
    4078:	00b57633          	and	a2,a0,a1
    407c:	08c12c23          	sw	a2,152(sp)

00004080 <inst_570>:

inst_570:
// rs1_val==-1431655765 and rs2_val==1717986918, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666666
TEST_RR_OP(and, x12, x10, x11, 0x22222222, -0x55555555, 0x66666666, x2, 156, x1)
    4080:	aaaab537          	lui	a0,0xaaaab
    4084:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4088:	666665b7          	lui	a1,0x66666
    408c:	66658593          	addi	a1,a1,1638 # 66666666 <_end+0x66660662>
    4090:	00b57633          	and	a2,a0,a1
    4094:	08c12e23          	sw	a2,156(sp)

00004098 <inst_571>:

inst_571:
// rs1_val==-1431655765 and rs2_val==-46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:-0xb504
TEST_RR_OP(and, x12, x10, x11, 0xaaaa0aa8, -0x55555555, -0xb504, x2, 160, x1)
    4098:	aaaab537          	lui	a0,0xaaaab
    409c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40a0:	ffff55b7          	lui	a1,0xffff5
    40a4:	afc58593          	addi	a1,a1,-1284 # ffff4afc <_end+0xfffeeaf8>
    40a8:	00b57633          	and	a2,a0,a1
    40ac:	0ac12023          	sw	a2,160(sp)

000040b0 <inst_572>:

inst_572:
// rs1_val==-1431655765 and rs2_val==46340, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb504
TEST_RR_OP(and, x12, x10, x11, 0xa000, -0x55555555, 0xb504, x2, 164, x1)
    40b0:	aaaab537          	lui	a0,0xaaaab
    40b4:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40b8:	0000b5b7          	lui	a1,0xb
    40bc:	50458593          	addi	a1,a1,1284 # b504 <_end+0x5500>
    40c0:	00b57633          	and	a2,a0,a1
    40c4:	0ac12223          	sw	a2,164(sp)

000040c8 <inst_573>:

inst_573:
// rs1_val==-1431655765 and rs2_val==2, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x2
TEST_RR_OP(and, x12, x10, x11, 0x2, -0x55555555, 0x2, x2, 168, x1)
    40c8:	aaaab537          	lui	a0,0xaaaab
    40cc:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40d0:	00200593          	li	a1,2
    40d4:	00b57633          	and	a2,a0,a1
    40d8:	0ac12423          	sw	a2,168(sp)

000040dc <inst_574>:

inst_574:
// rs1_val==-1431655765 and rs2_val==1431655764, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555554
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555555, 0x55555554, x2, 172, x1)
    40dc:	aaaab537          	lui	a0,0xaaaab
    40e0:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40e4:	555555b7          	lui	a1,0x55555
    40e8:	55458593          	addi	a1,a1,1364 # 55555554 <_end+0x5554f550>
    40ec:	00b57633          	and	a2,a0,a1
    40f0:	0ac12623          	sw	a2,172(sp)

000040f4 <inst_575>:

inst_575:
// rs1_val==-1431655765 and rs2_val==0, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x0
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555555, 0x0, x2, 176, x1)
    40f4:	aaaab537          	lui	a0,0xaaaab
    40f8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    40fc:	00000593          	li	a1,0
    4100:	00b57633          	and	a2,a0,a1
    4104:	0ac12823          	sw	a2,176(sp)

00004108 <inst_576>:

inst_576:
// rs1_val==-1431655765 and rs2_val==4, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x4
TEST_RR_OP(and, x12, x10, x11, 0x0, -0x55555555, 0x4, x2, 180, x1)
    4108:	aaaab537          	lui	a0,0xaaaab
    410c:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4110:	00400593          	li	a1,4
    4114:	00b57633          	and	a2,a0,a1
    4118:	0ac12a23          	sw	a2,180(sp)

0000411c <inst_577>:

inst_577:
// rs1_val==-1431655765 and rs2_val==858993458, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x33333332
TEST_RR_OP(and, x12, x10, x11, 0x22222222, -0x55555555, 0x33333332, x2, 184, x1)
    411c:	aaaab537          	lui	a0,0xaaaab
    4120:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4124:	333335b7          	lui	a1,0x33333
    4128:	33258593          	addi	a1,a1,818 # 33333332 <_end+0x3332d32e>
    412c:	00b57633          	and	a2,a0,a1
    4130:	0ac12c23          	sw	a2,184(sp)

00004134 <inst_578>:

inst_578:
// rs1_val==-1431655765 and rs2_val==1717986917, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x66666665
TEST_RR_OP(and, x12, x10, x11, 0x22222221, -0x55555555, 0x66666665, x2, 188, x1)
    4134:	aaaab537          	lui	a0,0xaaaab
    4138:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    413c:	666665b7          	lui	a1,0x66666
    4140:	66558593          	addi	a1,a1,1637 # 66666665 <_end+0x66660661>
    4144:	00b57633          	and	a2,a0,a1
    4148:	0ac12e23          	sw	a2,188(sp)

0000414c <inst_579>:

inst_579:
// rs1_val==-1431655765 and rs2_val==46339, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0xb503
TEST_RR_OP(and, x12, x10, x11, 0xa003, -0x55555555, 0xb503, x2, 192, x1)
    414c:	aaaab537          	lui	a0,0xaaaab
    4150:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    4154:	0000b5b7          	lui	a1,0xb
    4158:	50358593          	addi	a1,a1,1283 # b503 <_end+0x54ff>
    415c:	00b57633          	and	a2,a0,a1
    4160:	0cc12023          	sw	a2,192(sp)

00004164 <inst_580>:

inst_580:
// rs1_val==-1431655765 and rs2_val==1431655766, 
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x55555556
TEST_RR_OP(and, x12, x10, x11, 0x2, -0x55555555, 0x55555556, x2, 196, x1)
    4164:	aaaab537          	lui	a0,0xaaaab
    4168:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa4aa7>
    416c:	555555b7          	lui	a1,0x55555
    4170:	55658593          	addi	a1,a1,1366 # 55555556 <_end+0x5554f552>
    4174:	00b57633          	and	a2,a0,a1
    4178:	0cc12223          	sw	a2,196(sp)

0000417c <inst_581>:

inst_581:
// rs1_val > 0 and rs2_val < 0, rs1_val == 2048, rs2_val == -1048577
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x800;  op2val:-0x100001
TEST_RR_OP(and, x12, x10, x11, 0x800, 0x800, -0x100001, x2, 200, x1)
    417c:	00001537          	lui	a0,0x1
    4180:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x72c>
    4184:	fff005b7          	lui	a1,0xfff00
    4188:	fff58593          	addi	a1,a1,-1 # ffefffff <_end+0xffef9ffb>
    418c:	00b57633          	and	a2,a0,a1
    4190:	0cc12423          	sw	a2,200(sp)

00004194 <inst_582>:

inst_582:
// rs1_val == 0, rs2_val == 512
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x200
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x0, 0x200, x2, 204, x1)
    4194:	00000513          	li	a0,0
    4198:	20000593          	li	a1,512
    419c:	00b57633          	and	a2,a0,a1
    41a0:	0cc12623          	sw	a2,204(sp)

000041a4 <inst_583>:

inst_583:
// rs2_val == 1048576, rs1_val == 134217728
// opcode: and ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0x100000
TEST_RR_OP(and, x12, x10, x11, 0x0, 0x8000000, 0x100000, x2, 208, x1)
    41a4:	08000537          	lui	a0,0x8000
    41a8:	001005b7          	lui	a1,0x100
    41ac:	00b57633          	and	a2,a0,a1
    41b0:	0cc12823          	sw	a2,208(sp)
    41b4:	00000013          	nop
    41b8:	00000013          	nop
    41bc:	00000013          	nop

000041c0 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    41c0:	babed0b7          	lui	ra,0xbabed
    41c4:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe6afa>

000041c8 <write_tohost>:
    41c8:	00002017          	auipc	zero,0x2
    41cc:	e2102c23          	sw	ra,-456(zero) # fffffe38 <_end+0xffff9e34>

000041d0 <loop>:
    41d0:	0000006f          	j	41d0 <loop>
	...
