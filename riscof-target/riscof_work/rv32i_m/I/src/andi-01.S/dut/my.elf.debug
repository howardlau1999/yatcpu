
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed6ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff768f52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb1fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd67d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00003317          	auipc	t1,0x3
    102c:	fd830313          	addi	t1,t1,-40 # 4000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb66f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfd8b79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfe9dba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff26db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f6b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bf8db3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadf9ed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fa769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7abb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5badd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadaee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56af72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab2fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d56fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbea8fea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df51ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa67f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d0bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe5dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df06fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f5b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb785bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedb9adb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76da56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6aab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",andi)

RVTEST_SIGBASE( x18,signature_x18_1)
    10f8:	00003917          	auipc	s2,0x3
    10fc:	f1890913          	addi	s2,s2,-232 # 4010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x22, rd==x10, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val < 0 and imm_val < 0, rs1_val == -2
// opcode: andi ; op1:x22; dest:x10; op1val:-0x2;  immval:-0x800
TEST_IMM_OP( andi, x10, x22, 0xfffff800, -0x2, -0x800, x18, 0, x24)
    1100:	ffe00b13          	li	s6,-2
    1104:	800b7513          	andi	a0,s6,-2048
    1108:	00a92023          	sw	a0,0(s2)

0000110c <inst_1>:

inst_1:
// rs1 == rd, rs1==x25, rd==x25, imm_val == 0, rs1_val == -4097
// opcode: andi ; op1:x25; dest:x25; op1val:-0x1001;  immval:0x0
TEST_IMM_OP( andi, x25, x25, 0x0, -0x1001, 0x0, x18, 4, x24)
    110c:	fffffcb7          	lui	s9,0xfffff
    1110:	fffc8c93          	addi	s9,s9,-1 # ffffefff <_end+0xffff9ffb>
    1114:	000cfc93          	andi	s9,s9,0
    1118:	01992223          	sw	s9,4(s2)

0000111c <inst_2>:

inst_2:
// rs1==x16, rd==x17, imm_val == (2**(12-1)-1), rs1_val < 0 and imm_val > 0, imm_val == 2047, rs1_val == -33554433
// opcode: andi ; op1:x16; dest:x17; op1val:-0x2000001;  immval:0x7ff
TEST_IMM_OP( andi, x17, x16, 0x7ff, -0x2000001, 0x7ff, x18, 8, x24)
    111c:	fe000837          	lui	a6,0xfe000
    1120:	fff80813          	addi	a6,a6,-1 # fdffffff <_end+0xfdffaffb>
    1124:	7ff87893          	andi	a7,a6,2047
    1128:	01192423          	sw	a7,8(s2)

0000112c <inst_3>:

inst_3:
// rs1==x2, rd==x8, imm_val == 1, rs1_val == -131073
// opcode: andi ; op1:x2; dest:x8; op1val:-0x20001;  immval:0x1
TEST_IMM_OP( andi, x8, x2, 0x1, -0x20001, 0x1, x18, 12, x24)
    112c:	fffe0137          	lui	sp,0xfffe0
    1130:	fff10113          	addi	sp,sp,-1 # fffdffff <_end+0xfffdaffb>
    1134:	00117413          	andi	s0,sp,1
    1138:	00892623          	sw	s0,12(s2)

0000113c <inst_4>:

inst_4:
// rs1==x28, rd==x30, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648, imm_val == 4
// opcode: andi ; op1:x28; dest:x30; op1val:-0x80000000;  immval:0x4
TEST_IMM_OP( andi, x30, x28, 0x0, -0x80000000, 0x4, x18, 16, x24)
    113c:	80000e37          	lui	t3,0x80000
    1140:	004e7f13          	andi	t5,t3,4
    1144:	01e92823          	sw	t5,16(s2)

00001148 <inst_5>:

inst_5:
// rs1==x4, rd==x19, rs1_val == 0, 
// opcode: andi ; op1:x4; dest:x19; op1val:0x0;  immval:-0x800
TEST_IMM_OP( andi, x19, x4, 0x0, 0x0, -0x800, x18, 20, x24)
    1148:	00000213          	li	tp,0
    114c:	80027993          	andi	s3,tp,-2048
    1150:	01392a23          	sw	s3,20(s2)

00001154 <inst_6>:

inst_6:
// rs1==x10, rd==x2, rs1_val == (2**(xlen-1)-1), rs1_val > 0 and imm_val > 0, rs1_val == 2147483647
// opcode: andi ; op1:x10; dest:x2; op1val:0x7fffffff;  immval:0x6
TEST_IMM_OP( andi, x2, x10, 0x6, 0x7fffffff, 0x6, x18, 24, x24)
    1154:	80000537          	lui	a0,0x80000
    1158:	fff50513          	addi	a0,a0,-1 # 7fffffff <_end+0x7fffaffb>
    115c:	00657113          	andi	sp,a0,6
    1160:	00292c23          	sw	sp,24(s2)

00001164 <inst_7>:

inst_7:
// rs1==x7, rd==x13, rs1_val == 1, 
// opcode: andi ; op1:x7; dest:x13; op1val:0x1;  immval:0x554
TEST_IMM_OP( andi, x13, x7, 0x0, 0x1, 0x554, x18, 28, x24)
    1164:	00100393          	li	t2,1
    1168:	5543f693          	andi	a3,t2,1364
    116c:	00d92e23          	sw	a3,28(s2)

00001170 <inst_8>:

inst_8:
// rs1==x27, rd==x9, rs1_val == imm_val, imm_val == 128, rs1_val == 128
// opcode: andi ; op1:x27; dest:x9; op1val:0x80;  immval:0x80
TEST_IMM_OP( andi, x9, x27, 0x80, 0x80, 0x80, x18, 32, x24)
    1170:	08000d93          	li	s11,128
    1174:	080df493          	andi	s1,s11,128
    1178:	02992023          	sw	s1,32(s2)

0000117c <inst_9>:

inst_9:
// rs1==x17, rd==x3, rs1_val > 0 and imm_val < 0, 
// opcode: andi ; op1:x17; dest:x3; op1val:0x7fffffff;  immval:-0x2c
TEST_IMM_OP( andi, x3, x17, 0x7fffffd4, 0x7fffffff, -0x2c, x18, 36, x24)
    117c:	800008b7          	lui	a7,0x80000
    1180:	fff88893          	addi	a7,a7,-1 # 7fffffff <_end+0x7fffaffb>
    1184:	fd48f193          	andi	gp,a7,-44
    1188:	02392223          	sw	gp,36(s2)

0000118c <inst_10>:

inst_10:
// rs1==x0, rd==x26, imm_val == 2, rs1_val == 16777216
// opcode: andi ; op1:x0; dest:x26; op1val:0x0;  immval:0x2
TEST_IMM_OP( andi, x26, x0, 0x0, 0x0, 0x2, x18, 40, x24)
    118c:	00000013          	nop
    1190:	00207d13          	andi	s10,zero,2
    1194:	03a92423          	sw	s10,40(s2)

00001198 <inst_11>:

inst_11:
// rs1==x23, rd==x21, imm_val == 8, 
// opcode: andi ; op1:x23; dest:x21; op1val:0x66666666;  immval:0x8
TEST_IMM_OP( andi, x21, x23, 0x0, 0x66666666, 0x8, x18, 44, x24)
    1198:	66666bb7          	lui	s7,0x66666
    119c:	666b8b93          	addi	s7,s7,1638 # 66666666 <_end+0x66661662>
    11a0:	008bfa93          	andi	s5,s7,8
    11a4:	03592623          	sw	s5,44(s2)

000011a8 <inst_12>:

inst_12:
// rs1==x6, rd==x14, imm_val == 16, 
// opcode: andi ; op1:x6; dest:x14; op1val:0x0;  immval:0x10
TEST_IMM_OP( andi, x14, x6, 0x0, 0x0, 0x10, x18, 48, x24)
    11a8:	00000313          	li	t1,0
    11ac:	01037713          	andi	a4,t1,16
    11b0:	02e92823          	sw	a4,48(s2)

000011b4 <inst_13>:

inst_13:
// rs1==x5, rd==x22, imm_val == 32, rs1_val == 256
// opcode: andi ; op1:x5; dest:x22; op1val:0x100;  immval:0x20
TEST_IMM_OP( andi, x22, x5, 0x0, 0x100, 0x20, x18, 52, x24)
    11b4:	10000293          	li	t0,256
    11b8:	0202fb13          	andi	s6,t0,32
    11bc:	03692a23          	sw	s6,52(s2)

000011c0 <inst_14>:

inst_14:
// rs1==x8, rd==x29, imm_val == 64, rs1_val == -5
// opcode: andi ; op1:x8; dest:x29; op1val:-0x5;  immval:0x40
TEST_IMM_OP( andi, x29, x8, 0x40, -0x5, 0x40, x18, 56, x24)
    11c0:	ffb00413          	li	s0,-5
    11c4:	04047e93          	andi	t4,s0,64
    11c8:	03d92c23          	sw	t4,56(s2)

000011cc <inst_15>:

inst_15:
// rs1==x12, rd==x23, imm_val == 256, 
// opcode: andi ; op1:x12; dest:x23; op1val:0x1;  immval:0x100
TEST_IMM_OP( andi, x23, x12, 0x0, 0x1, 0x100, x18, 60, x24)
    11cc:	00100613          	li	a2,1
    11d0:	10067b93          	andi	s7,a2,256
    11d4:	03792e23          	sw	s7,60(s2)

000011d8 <inst_16>:

inst_16:
// rs1==x15, rd==x6, imm_val == 512, 
// opcode: andi ; op1:x15; dest:x6; op1val:-0x55555555;  immval:0x200
TEST_IMM_OP( andi, x6, x15, 0x200, -0x55555555, 0x200, x18, 64, x24)
    11d8:	aaaab7b7          	lui	a5,0xaaaab
    11dc:	aab78793          	addi	a5,a5,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    11e0:	2007f313          	andi	t1,a5,512
    11e4:	04692023          	sw	t1,64(s2)

000011e8 <inst_17>:

inst_17:
// rs1==x29, rd==x11, imm_val == 1024, 
// opcode: andi ; op1:x29; dest:x11; op1val:0x0;  immval:0x400
TEST_IMM_OP( andi, x11, x29, 0x0, 0x0, 0x400, x18, 68, x24)
    11e8:	00000e93          	li	t4,0
    11ec:	400ef593          	andi	a1,t4,1024
    11f0:	04b92223          	sw	a1,68(s2)

000011f4 <inst_18>:

inst_18:
// rs1==x20, rd==x1, imm_val == -2, 
// opcode: andi ; op1:x20; dest:x1; op1val:0x66666667;  immval:-0x2
TEST_IMM_OP( andi, x1, x20, 0x66666666, 0x66666667, -0x2, x18, 72, x24)
    11f4:	66666a37          	lui	s4,0x66666
    11f8:	667a0a13          	addi	s4,s4,1639 # 66666667 <_end+0x66661663>
    11fc:	ffea7093          	andi	ra,s4,-2
    1200:	04192423          	sw	ra,72(s2)
RVTEST_SIGBASE( x2,signature_x2_0)
    1204:	00003117          	auipc	sp,0x3
    1208:	e5810113          	addi	sp,sp,-424 # 405c <signature_x2_0>

0000120c <inst_19>:

inst_19:
// rs1==x31, rd==x5, imm_val == -3, rs1_val == -1048577
// opcode: andi ; op1:x31; dest:x5; op1val:-0x100001;  immval:-0x3
TEST_IMM_OP( andi, x5, x31, 0xffeffffd, -0x100001, -0x3, x2, 0, x6)
    120c:	fff00fb7          	lui	t6,0xfff00
    1210:	ffff8f93          	addi	t6,t6,-1 # ffefffff <_end+0xffefaffb>
    1214:	ffdff293          	andi	t0,t6,-3
    1218:	00512023          	sw	t0,0(sp)

0000121c <inst_20>:

inst_20:
// rs1==x3, rd==x20, imm_val == -5, rs1_val == 512
// opcode: andi ; op1:x3; dest:x20; op1val:0x200;  immval:-0x5
TEST_IMM_OP( andi, x20, x3, 0x200, 0x200, -0x5, x2, 4, x6)
    121c:	20000193          	li	gp,512
    1220:	ffb1fa13          	andi	s4,gp,-5
    1224:	01412223          	sw	s4,4(sp)

00001228 <inst_21>:

inst_21:
// rs1==x9, rd==x7, imm_val == -9, rs1_val == 16384
// opcode: andi ; op1:x9; dest:x7; op1val:0x4000;  immval:-0x9
TEST_IMM_OP( andi, x7, x9, 0x4000, 0x4000, -0x9, x2, 8, x6)
    1228:	000044b7          	lui	s1,0x4
    122c:	ff74f393          	andi	t2,s1,-9
    1230:	00712423          	sw	t2,8(sp)

00001234 <inst_22>:

inst_22:
// rs1==x13, rd==x16, imm_val == -17, rs1_val == 2097152
// opcode: andi ; op1:x13; dest:x16; op1val:0x200000;  immval:-0x11
TEST_IMM_OP( andi, x16, x13, 0x200000, 0x200000, -0x11, x2, 12, x6)
    1234:	002006b7          	lui	a3,0x200
    1238:	fef6f813          	andi	a6,a3,-17
    123c:	01012623          	sw	a6,12(sp)

00001240 <inst_23>:

inst_23:
// rs1==x18, rd==x24, imm_val == -33, rs1_val == -3
// opcode: andi ; op1:x18; dest:x24; op1val:-0x3;  immval:-0x21
TEST_IMM_OP( andi, x24, x18, 0xffffffdd, -0x3, -0x21, x2, 16, x6)
    1240:	ffd00913          	li	s2,-3
    1244:	fdf97c13          	andi	s8,s2,-33
    1248:	01812823          	sw	s8,16(sp)

0000124c <inst_24>:

inst_24:
// rs1==x26, rd==x4, imm_val == -65, 
// opcode: andi ; op1:x26; dest:x4; op1val:-0x6;  immval:-0x41
TEST_IMM_OP( andi, x4, x26, 0xffffffba, -0x6, -0x41, x2, 20, x6)
    124c:	ffa00d13          	li	s10,-6
    1250:	fbfd7213          	andi	tp,s10,-65
    1254:	00412a23          	sw	tp,20(sp)

00001258 <inst_25>:

inst_25:
// rs1==x30, rd==x28, imm_val == -129, rs1_val == 64
// opcode: andi ; op1:x30; dest:x28; op1val:0x40;  immval:-0x81
TEST_IMM_OP( andi, x28, x30, 0x40, 0x40, -0x81, x2, 24, x6)
    1258:	04000f13          	li	t5,64
    125c:	f7ff7e13          	andi	t3,t5,-129
    1260:	01c12c23          	sw	t3,24(sp)

00001264 <inst_26>:

inst_26:
// rs1==x19, rd==x0, imm_val == -257, 
// opcode: andi ; op1:x19; dest:x0; op1val:-0xb504;  immval:-0x101
TEST_IMM_OP( andi, x0, x19, 0, -0xb504, -0x101, x2, 28, x6)
    1264:	ffff59b7          	lui	s3,0xffff5
    1268:	afc98993          	addi	s3,s3,-1284 # ffff4afc <_end+0xfffefaf8>
    126c:	eff9f013          	andi	zero,s3,-257
    1270:	00012e23          	sw	zero,28(sp)

00001274 <inst_27>:

inst_27:
// rs1==x21, rd==x18, imm_val == -513, rs1_val == -32769
// opcode: andi ; op1:x21; dest:x18; op1val:-0x8001;  immval:-0x201
TEST_IMM_OP( andi, x18, x21, 0xffff7dff, -0x8001, -0x201, x2, 32, x6)
    1274:	ffff8ab7          	lui	s5,0xffff8
    1278:	fffa8a93          	addi	s5,s5,-1 # ffff7fff <_end+0xffff2ffb>
    127c:	dffaf913          	andi	s2,s5,-513
    1280:	03212023          	sw	s2,32(sp)

00001284 <inst_28>:

inst_28:
// rs1==x1, rd==x12, imm_val == -1025, 
// opcode: andi ; op1:x1; dest:x12; op1val:0x40;  immval:-0x401
TEST_IMM_OP( andi, x12, x1, 0x40, 0x40, -0x401, x2, 36, x6)
    1284:	04000093          	li	ra,64
    1288:	bff0f613          	andi	a2,ra,-1025
    128c:	02c12223          	sw	a2,36(sp)

00001290 <inst_29>:

inst_29:
// rs1==x24, rd==x27, imm_val == 1365, rs1_val == -16385
// opcode: andi ; op1:x24; dest:x27; op1val:-0x4001;  immval:0x555
TEST_IMM_OP( andi, x27, x24, 0x555, -0x4001, 0x555, x2, 40, x6)
    1290:	ffffcc37          	lui	s8,0xffffc
    1294:	fffc0c13          	addi	s8,s8,-1 # ffffbfff <_end+0xffff6ffb>
    1298:	555c7d93          	andi	s11,s8,1365
    129c:	03b12423          	sw	s11,40(sp)

000012a0 <inst_30>:

inst_30:
// rs1==x11, rd==x31, imm_val == -1366, rs1_val == 1073741824
// opcode: andi ; op1:x11; dest:x31; op1val:0x40000000;  immval:-0x556
TEST_IMM_OP( andi, x31, x11, 0x40000000, 0x40000000, -0x556, x2, 44, x6)
    12a0:	400005b7          	lui	a1,0x40000
    12a4:	aaa5ff93          	andi	t6,a1,-1366
    12a8:	03f12623          	sw	t6,44(sp)

000012ac <inst_31>:

inst_31:
// rs1==x14, rd==x15, rs1_val == 2, 
// opcode: andi ; op1:x14; dest:x15; op1val:0x2;  immval:0x8
TEST_IMM_OP( andi, x15, x14, 0x0, 0x2, 0x8, x2, 48, x6)
    12ac:	00200713          	li	a4,2
    12b0:	00877793          	andi	a5,a4,8
    12b4:	02f12823          	sw	a5,48(sp)

000012b8 <inst_32>:

inst_32:
// rs1_val == 4, rs1_val==4 and imm_val==1639
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x667, x2, 52, x6)
    12b8:	00400513          	li	a0,4
    12bc:	66757593          	andi	a1,a0,1639
    12c0:	02b12a23          	sw	a1,52(sp)

000012c4 <inst_33>:

inst_33:
// rs1_val == 8, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x8, 0x334, x2, 56, x6)
    12c4:	00800513          	li	a0,8
    12c8:	33457593          	andi	a1,a0,820
    12cc:	02b12c23          	sw	a1,56(sp)

000012d0 <inst_34>:

inst_34:
// rs1_val == 16, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10, 0x2e, x2, 60, x6)
    12d0:	01000513          	li	a0,16
    12d4:	02e57593          	andi	a1,a0,46
    12d8:	02b12e23          	sw	a1,60(sp)

000012dc <inst_35>:

inst_35:
// rs1_val == 32, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20;  immval:0x10
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20, 0x10, x2, 64, x6)
    12dc:	02000513          	li	a0,32
    12e0:	01057593          	andi	a1,a0,16
    12e4:	04b12023          	sw	a1,64(sp)

000012e8 <inst_36>:

inst_36:
// rs1_val == 1024, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x400;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x400, 0x400, -0x2c, x2, 68, x6)
    12e8:	40000513          	li	a0,1024
    12ec:	fd457593          	andi	a1,a0,-44
    12f0:	04b12223          	sw	a1,68(sp)

000012f4 <inst_37>:

inst_37:
// rs1_val == 2048, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800;  immval:-0x41
TEST_IMM_OP( andi, x11, x10, 0x800, 0x800, -0x41, x2, 72, x6)
    12f4:	00001537          	lui	a0,0x1
    12f8:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x784>
    12fc:	fbf57593          	andi	a1,a0,-65
    1300:	04b12423          	sw	a1,72(sp)

00001304 <inst_38>:

inst_38:
// rs1_val == 4096, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000;  immval:0x40
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000, 0x40, x2, 76, x6)
    1304:	00001537          	lui	a0,0x1
    1308:	04057593          	andi	a1,a0,64
    130c:	04b12623          	sw	a1,76(sp)

00001310 <inst_39>:

inst_39:
// rs1_val == 8192, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x2000, 0x2000, -0x2d, x2, 80, x6)
    1310:	00002537          	lui	a0,0x2
    1314:	fd357593          	andi	a1,a0,-45
    1318:	04b12823          	sw	a1,80(sp)

0000131c <inst_40>:

inst_40:
// rs1_val == 32768, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x8000, 0x8000, -0x556, x2, 84, x6)
    131c:	00008537          	lui	a0,0x8
    1320:	aaa57593          	andi	a1,a0,-1366
    1324:	04b12a23          	sw	a1,84(sp)

00001328 <inst_41>:

inst_41:
// rs1_val == 65536, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10000;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10000, 0x333, x2, 88, x6)
    1328:	00010537          	lui	a0,0x10
    132c:	33357593          	andi	a1,a0,819
    1330:	04b12c23          	sw	a1,88(sp)

00001334 <inst_42>:

inst_42:
// rs1_val == 131072, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20000, 0x332, x2, 92, x6)
    1334:	00020537          	lui	a0,0x20
    1338:	33257593          	andi	a1,a0,818
    133c:	04b12e23          	sw	a1,92(sp)

00001340 <inst_43>:

inst_43:
// rs1_val == 262144, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x40000;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x40000, 0x556, x2, 96, x6)
    1340:	00040537          	lui	a0,0x40
    1344:	55657593          	andi	a1,a0,1366
    1348:	06b12023          	sw	a1,96(sp)

0000134c <inst_44>:

inst_44:
// rs1_val == 524288, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x80000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x80000, 0x4, x2, 100, x6)
    134c:	00080537          	lui	a0,0x80
    1350:	00457593          	andi	a1,a0,4
    1354:	06b12223          	sw	a1,100(sp)

00001358 <inst_45>:

inst_45:
// rs1_val == 1048576, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x100000;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x100000, 0x5, x2, 104, x6)
    1358:	00100537          	lui	a0,0x100
    135c:	00557593          	andi	a1,a0,5
    1360:	06b12423          	sw	a1,104(sp)

00001364 <inst_46>:

inst_46:
// rs1_val == 4194304, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x400000;  immval:-0x1
TEST_IMM_OP( andi, x11, x10, 0x400000, 0x400000, -0x1, x2, 108, x6)
    1364:	00400537          	lui	a0,0x400
    1368:	fff57593          	andi	a1,a0,-1
    136c:	06b12623          	sw	a1,108(sp)

00001370 <inst_47>:

inst_47:
// rs1_val == 8388608, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x800000;  immval:-0x6
TEST_IMM_OP( andi, x11, x10, 0x800000, 0x800000, -0x6, x2, 112, x6)
    1370:	00800537          	lui	a0,0x800
    1374:	ffa57593          	andi	a1,a0,-6
    1378:	06b12823          	sw	a1,112(sp)

0000137c <inst_48>:

inst_48:
// rs1_val == 33554432, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2000000;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x2000000, 0x2000000, -0x2c, x2, 116, x6)
    137c:	02000537          	lui	a0,0x2000
    1380:	fd457593          	andi	a1,a0,-44
    1384:	06b12a23          	sw	a1,116(sp)

00001388 <inst_49>:

inst_49:
// rs1_val == 67108864, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4000000;  immval:-0x81
TEST_IMM_OP( andi, x11, x10, 0x4000000, 0x4000000, -0x81, x2, 120, x6)
    1388:	04000537          	lui	a0,0x4000
    138c:	f7f57593          	andi	a1,a0,-129
    1390:	06b12c23          	sw	a1,120(sp)

00001394 <inst_50>:

inst_50:
// rs1_val == 134217728, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x8000000, 0x0, x2, 124, x6)
    1394:	08000537          	lui	a0,0x8000
    1398:	00057593          	andi	a1,a0,0
    139c:	06b12e23          	sw	a1,124(sp)

000013a0 <inst_51>:

inst_51:
// rs1_val == 268435456, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x10000000, 0x0, x2, 128, x6)
    13a0:	10000537          	lui	a0,0x10000
    13a4:	00057593          	andi	a1,a0,0
    13a8:	08b12023          	sw	a1,128(sp)

000013ac <inst_52>:

inst_52:
// rs1_val == 536870912, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x20000000;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x20000000, 0x4, x2, 132, x6)
    13ac:	20000537          	lui	a0,0x20000
    13b0:	00457593          	andi	a1,a0,4
    13b4:	08b12223          	sw	a1,132(sp)

000013b8 <inst_53>:

inst_53:
// rs1_val == -9, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x9;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0xfffffff5, -0x9, -0x3, x2, 136, x6)
    13b8:	ff700513          	li	a0,-9
    13bc:	ffd57593          	andi	a1,a0,-3
    13c0:	08b12423          	sw	a1,136(sp)

000013c4 <inst_54>:

inst_54:
// rs1_val == -17, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x11;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x546, -0x11, 0x556, x2, 140, x6)
    13c4:	fef00513          	li	a0,-17
    13c8:	55657593          	andi	a1,a0,1366
    13cc:	08b12623          	sw	a1,140(sp)

000013d0 <inst_55>:

inst_55:
// rs1_val == -33, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x21;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0x21, 0x4, x2, 144, x6)
    13d0:	fdf00513          	li	a0,-33
    13d4:	00457593          	andi	a1,a0,4
    13d8:	08b12823          	sw	a1,144(sp)

000013dc <inst_56>:

inst_56:
// rs1_val == -65, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x41;  immval:0x9
TEST_IMM_OP( andi, x11, x10, 0x9, -0x41, 0x9, x2, 148, x6)
    13dc:	fbf00513          	li	a0,-65
    13e0:	00957593          	andi	a1,a0,9
    13e4:	08b12a23          	sw	a1,148(sp)

000013e8 <inst_57>:

inst_57:
// rs1_val == -129, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x81;  immval:-0x3
TEST_IMM_OP( andi, x11, x10, 0xffffff7d, -0x81, -0x3, x2, 152, x6)
    13e8:	f7f00513          	li	a0,-129
    13ec:	ffd57593          	andi	a1,a0,-3
    13f0:	08b12c23          	sw	a1,152(sp)

000013f4 <inst_58>:

inst_58:
// rs1_val == -257, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x101;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x234, -0x101, 0x334, x2, 156, x6)
    13f4:	eff00513          	li	a0,-257
    13f8:	33457593          	andi	a1,a0,820
    13fc:	08b12e23          	sw	a1,156(sp)

00001400 <inst_59>:

inst_59:
// rs1_val == -513, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x201;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x201, 0x0, x2, 160, x6)
    1400:	dff00513          	li	a0,-513
    1404:	00057593          	andi	a1,a0,0
    1408:	0ab12023          	sw	a1,160(sp)

0000140c <inst_60>:

inst_60:
// rs1_val == -1025, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x401;  immval:0x40
TEST_IMM_OP( andi, x11, x10, 0x40, -0x401, 0x40, x2, 164, x6)
    140c:	bff00513          	li	a0,-1025
    1410:	04057593          	andi	a1,a0,64
    1414:	0ab12223          	sw	a1,164(sp)

00001418 <inst_61>:

inst_61:
// rs1_val == -2049, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x801;  immval:0x9
TEST_IMM_OP( andi, x11, x10, 0x9, -0x801, 0x9, x2, 168, x6)
    1418:	fffff537          	lui	a0,0xfffff
    141c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffffa7fb>
    1420:	00957593          	andi	a1,a0,9
    1424:	0ab12423          	sw	a1,168(sp)

00001428 <inst_62>:

inst_62:
// rs1_val == -8193, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x667, -0x2001, 0x667, x2, 172, x6)
    1428:	ffffe537          	lui	a0,0xffffe
    142c:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffff8ffb>
    1430:	66757593          	andi	a1,a0,1639
    1434:	0ab12623          	sw	a1,172(sp)

00001438 <inst_63>:

inst_63:
// rs1_val == -65537, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10001;  immval:0x7ff
TEST_IMM_OP( andi, x11, x10, 0x7ff, -0x10001, 0x7ff, x2, 176, x6)
    1438:	ffff0537          	lui	a0,0xffff0
    143c:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffeaffb>
    1440:	7ff57593          	andi	a1,a0,2047
    1444:	0ab12823          	sw	a1,176(sp)

00001448 <inst_64>:

inst_64:
// rs1_val == -262145, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x40001;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xfffbffd3, -0x40001, -0x2d, x2, 180, x6)
    1448:	fffc0537          	lui	a0,0xfffc0
    144c:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffbaffb>
    1450:	fd357593          	andi	a1,a0,-45
    1454:	0ab12a23          	sw	a1,180(sp)

00001458 <inst_65>:

inst_65:
// rs1_val == -524289, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x80001;  immval:0x200
TEST_IMM_OP( andi, x11, x10, 0x200, -0x80001, 0x200, x2, 184, x6)
    1458:	fff80537          	lui	a0,0xfff80
    145c:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0xfff7affb>
    1460:	20057593          	andi	a1,a0,512
    1464:	0ab12c23          	sw	a1,184(sp)

00001468 <inst_66>:

inst_66:
// rs1_val == -2097153, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x200001;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffdfffd4, -0x200001, -0x2c, x2, 188, x6)
    1468:	ffe00537          	lui	a0,0xffe00
    146c:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdfaffb>
    1470:	fd457593          	andi	a1,a0,-44
    1474:	0ab12e23          	sw	a1,188(sp)

00001478 <inst_67>:

inst_67:
// rs1_val == -4194305, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0x400001, 0x5, x2, 192, x6)
    1478:	ffc00537          	lui	a0,0xffc00
    147c:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbfaffb>
    1480:	00557593          	andi	a1,a0,5
    1484:	0cb12023          	sw	a1,192(sp)

00001488 <inst_68>:

inst_68:
// rs1_val == -8388609, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x7
TEST_IMM_OP( andi, x11, x10, 0x7, -0x800001, 0x7, x2, 196, x6)
    1488:	ff800537          	lui	a0,0xff800
    148c:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7faffb>
    1490:	00757593          	andi	a1,a0,7
    1494:	0cb12223          	sw	a1,196(sp)

00001498 <inst_69>:

inst_69:
// rs1_val == -16777217, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x1000001;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, -0x1000001, 0x6, x2, 200, x6)
    1498:	ff000537          	lui	a0,0xff000
    149c:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeffaffb>
    14a0:	00657593          	andi	a1,a0,6
    14a4:	0cb12423          	sw	a1,200(sp)

000014a8 <inst_70>:

inst_70:
// rs1_val == -67108865, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x4000001;  immval:0x8
TEST_IMM_OP( andi, x11, x10, 0x8, -0x4000001, 0x8, x2, 204, x6)
    14a8:	fc000537          	lui	a0,0xfc000
    14ac:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbffaffb>
    14b0:	00857593          	andi	a1,a0,8
    14b4:	0cb12623          	sw	a1,204(sp)

000014b8 <inst_71>:

inst_71:
// rs1_val == -134217729, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2e, -0x8000001, 0x2e, x2, 208, x6)
    14b8:	f8000537          	lui	a0,0xf8000
    14bc:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ffaffb>
    14c0:	02e57593          	andi	a1,a0,46
    14c4:	0cb12823          	sw	a1,208(sp)

000014c8 <inst_72>:

inst_72:
// rs1_val == -268435457, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0x1
TEST_IMM_OP( andi, x11, x10, 0x1, -0x10000001, 0x1, x2, 212, x6)
    14c8:	f0000537          	lui	a0,0xf0000
    14cc:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefffaffb>
    14d0:	00157593          	andi	a1,a0,1
    14d4:	0cb12a23          	sw	a1,212(sp)

000014d8 <inst_73>:

inst_73:
// rs1_val == -536870913, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x20000001;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xdfffffd4, -0x20000001, -0x2c, x2, 216, x6)
    14d8:	e0000537          	lui	a0,0xe0000
    14dc:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfffaffb>
    14e0:	fd457593          	andi	a1,a0,-44
    14e4:	0cb12c23          	sw	a1,216(sp)

000014e8 <inst_74>:

inst_74:
// rs1_val == -1073741825, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x40000001;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x556, -0x40000001, 0x556, x2, 220, x6)
    14e8:	c0000537          	lui	a0,0xc0000
    14ec:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0xbfffaffb>
    14f0:	55657593          	andi	a1,a0,1366
    14f4:	0cb12e23          	sw	a1,220(sp)

000014f8 <inst_75>:

inst_75:
// rs1_val == 1431655765, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x5
TEST_IMM_OP( andi, x11, x10, 0x55555551, 0x55555555, -0x5, x2, 224, x6)
    14f8:	55555537          	lui	a0,0x55555
    14fc:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1500:	ffb57593          	andi	a1,a0,-5
    1504:	0eb12023          	sw	a1,224(sp)

00001508 <inst_76>:

inst_76:
// rs1_val == -1431655766, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x80
TEST_IMM_OP( andi, x11, x10, 0x80, -0x55555556, 0x80, x2, 228, x6)
    1508:	aaaab537          	lui	a0,0xaaaab
    150c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1510:	08057593          	andi	a1,a0,128
    1514:	0eb12223          	sw	a1,228(sp)

00001518 <inst_77>:

inst_77:
// rs1_val==3 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x3, x2, 232, x6)
    1518:	00300513          	li	a0,3
    151c:	00357593          	andi	a1,a0,3
    1520:	0eb12423          	sw	a1,232(sp)

00001524 <inst_78>:

inst_78:
// rs1_val==3 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x555, x2, 236, x6)
    1524:	00300513          	li	a0,3
    1528:	55557593          	andi	a1,a0,1365
    152c:	0eb12623          	sw	a1,236(sp)

00001530 <inst_79>:

inst_79:
// rs1_val==3 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, -0x556, x2, 240, x6)
    1530:	00300513          	li	a0,3
    1534:	aaa57593          	andi	a1,a0,-1366
    1538:	0eb12823          	sw	a1,240(sp)

0000153c <inst_80>:

inst_80:
// rs1_val==3 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x5, x2, 244, x6)
    153c:	00300513          	li	a0,3
    1540:	00557593          	andi	a1,a0,5
    1544:	0eb12a23          	sw	a1,244(sp)

00001548 <inst_81>:

inst_81:
// rs1_val==3 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x333, x2, 248, x6)
    1548:	00300513          	li	a0,3
    154c:	33357593          	andi	a1,a0,819
    1550:	0eb12c23          	sw	a1,248(sp)

00001554 <inst_82>:

inst_82:
// rs1_val==3 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x666, x2, 252, x6)
    1554:	00300513          	li	a0,3
    1558:	66657593          	andi	a1,a0,1638
    155c:	0eb12e23          	sw	a1,252(sp)

00001560 <inst_83>:

inst_83:
// rs1_val==3 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, -0x2d, x2, 256, x6)
    1560:	00300513          	li	a0,3
    1564:	fd357593          	andi	a1,a0,-45
    1568:	10b12023          	sw	a1,256(sp)

0000156c <inst_84>:

inst_84:
// rs1_val==3 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x2d, x2, 260, x6)
    156c:	00300513          	li	a0,3
    1570:	02d57593          	andi	a1,a0,45
    1574:	10b12223          	sw	a1,260(sp)

00001578 <inst_85>:

inst_85:
// rs1_val==3 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x2, x2, 264, x6)
    1578:	00300513          	li	a0,3
    157c:	00257593          	andi	a1,a0,2
    1580:	10b12423          	sw	a1,264(sp)

00001584 <inst_86>:

inst_86:
// rs1_val==3 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x554, x2, 268, x6)
    1584:	00300513          	li	a0,3
    1588:	55457593          	andi	a1,a0,1364
    158c:	10b12623          	sw	a1,268(sp)

00001590 <inst_87>:

inst_87:
// rs1_val==3 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x0, x2, 272, x6)
    1590:	00300513          	li	a0,3
    1594:	00057593          	andi	a1,a0,0
    1598:	10b12823          	sw	a1,272(sp)

0000159c <inst_88>:

inst_88:
// rs1_val==3 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x4, x2, 276, x6)
    159c:	00300513          	li	a0,3
    15a0:	00457593          	andi	a1,a0,4
    15a4:	10b12a23          	sw	a1,276(sp)

000015a8 <inst_89>:

inst_89:
// rs1_val==3 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x332, x2, 280, x6)
    15a8:	00300513          	li	a0,3
    15ac:	33257593          	andi	a1,a0,818
    15b0:	10b12c23          	sw	a1,280(sp)

000015b4 <inst_90>:

inst_90:
// rs1_val==3 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x1, 0x3, 0x665, x2, 284, x6)
    15b4:	00300513          	li	a0,3
    15b8:	66557593          	andi	a1,a0,1637
    15bc:	10b12e23          	sw	a1,284(sp)

000015c0 <inst_91>:

inst_91:
// rs1_val==3 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x2c, x2, 288, x6)
    15c0:	00300513          	li	a0,3
    15c4:	02c57593          	andi	a1,a0,44
    15c8:	12b12023          	sw	a1,288(sp)

000015cc <inst_92>:

inst_92:
// rs1_val==3 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x556, x2, 292, x6)
    15cc:	00300513          	li	a0,3
    15d0:	55657593          	andi	a1,a0,1366
    15d4:	12b12223          	sw	a1,292(sp)

000015d8 <inst_93>:

inst_93:
// rs1_val==3 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, -0x555, x2, 296, x6)
    15d8:	00300513          	li	a0,3
    15dc:	aab57593          	andi	a1,a0,-1365
    15e0:	12b12423          	sw	a1,296(sp)

000015e4 <inst_94>:

inst_94:
// rs1_val==3 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x6, x2, 300, x6)
    15e4:	00300513          	li	a0,3
    15e8:	00657593          	andi	a1,a0,6
    15ec:	12b12623          	sw	a1,300(sp)

000015f0 <inst_95>:

inst_95:
// rs1_val==3 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, 0x334, x2, 304, x6)
    15f0:	00300513          	li	a0,3
    15f4:	33457593          	andi	a1,a0,820
    15f8:	12b12823          	sw	a1,304(sp)

000015fc <inst_96>:

inst_96:
// rs1_val==3 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x3, 0x3, 0x667, x2, 308, x6)
    15fc:	00300513          	li	a0,3
    1600:	66757593          	andi	a1,a0,1639
    1604:	12b12a23          	sw	a1,308(sp)

00001608 <inst_97>:

inst_97:
// rs1_val==3 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x3, -0x2c, x2, 312, x6)
    1608:	00300513          	li	a0,3
    160c:	fd457593          	andi	a1,a0,-44
    1610:	12b12c23          	sw	a1,312(sp)

00001614 <inst_98>:

inst_98:
// rs1_val==3 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x3;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0x3, 0x2e, x2, 316, x6)
    1614:	00300513          	li	a0,3
    1618:	02e57593          	andi	a1,a0,46
    161c:	12b12e23          	sw	a1,316(sp)

00001620 <inst_99>:

inst_99:
// rs1_val==1431655765 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x55555555, 0x3, x2, 320, x6)
    1620:	55555537          	lui	a0,0x55555
    1624:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1628:	00357593          	andi	a1,a0,3
    162c:	14b12023          	sw	a1,320(sp)

00001630 <inst_100>:

inst_100:
// rs1_val==1431655765 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x555, 0x55555555, 0x555, x2, 324, x6)
    1630:	55555537          	lui	a0,0x55555
    1634:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1638:	55557593          	andi	a1,a0,1365
    163c:	14b12223          	sw	a1,324(sp)

00001640 <inst_101>:

inst_101:
// rs1_val==1431655765 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x55555000, 0x55555555, -0x556, x2, 328, x6)
    1640:	55555537          	lui	a0,0x55555
    1644:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1648:	aaa57593          	andi	a1,a0,-1366
    164c:	14b12423          	sw	a1,328(sp)

00001650 <inst_102>:

inst_102:
// rs1_val==1431655765 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x55555555, 0x5, x2, 332, x6)
    1650:	55555537          	lui	a0,0x55555
    1654:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1658:	00557593          	andi	a1,a0,5
    165c:	14b12623          	sw	a1,332(sp)

00001660 <inst_103>:

inst_103:
// rs1_val==1431655765 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x111, 0x55555555, 0x333, x2, 336, x6)
    1660:	55555537          	lui	a0,0x55555
    1664:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1668:	33357593          	andi	a1,a0,819
    166c:	14b12823          	sw	a1,336(sp)

00001670 <inst_104>:

inst_104:
// rs1_val==1431655765 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555555, 0x666, x2, 340, x6)
    1670:	55555537          	lui	a0,0x55555
    1674:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1678:	66657593          	andi	a1,a0,1638
    167c:	14b12a23          	sw	a1,340(sp)

00001680 <inst_105>:

inst_105:
// rs1_val==1431655765 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x55555551, 0x55555555, -0x2d, x2, 344, x6)
    1680:	55555537          	lui	a0,0x55555
    1684:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1688:	fd357593          	andi	a1,a0,-45
    168c:	14b12c23          	sw	a1,344(sp)

00001690 <inst_106>:

inst_106:
// rs1_val==1431655765 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0x55555555, 0x2d, x2, 348, x6)
    1690:	55555537          	lui	a0,0x55555
    1694:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1698:	02d57593          	andi	a1,a0,45
    169c:	14b12e23          	sw	a1,348(sp)

000016a0 <inst_107>:

inst_107:
// rs1_val==1431655765 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555555, 0x2, x2, 352, x6)
    16a0:	55555537          	lui	a0,0x55555
    16a4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16a8:	00257593          	andi	a1,a0,2
    16ac:	16b12023          	sw	a1,352(sp)

000016b0 <inst_108>:

inst_108:
// rs1_val==1431655765 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555555, 0x554, x2, 356, x6)
    16b0:	55555537          	lui	a0,0x55555
    16b4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16b8:	55457593          	andi	a1,a0,1364
    16bc:	16b12223          	sw	a1,356(sp)

000016c0 <inst_109>:

inst_109:
// rs1_val==1431655765 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555555, 0x0, x2, 360, x6)
    16c0:	55555537          	lui	a0,0x55555
    16c4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16c8:	00057593          	andi	a1,a0,0
    16cc:	16b12423          	sw	a1,360(sp)

000016d0 <inst_110>:

inst_110:
// rs1_val==1431655765 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x4, x2, 364, x6)
    16d0:	55555537          	lui	a0,0x55555
    16d4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16d8:	00457593          	andi	a1,a0,4
    16dc:	16b12623          	sw	a1,364(sp)

000016e0 <inst_111>:

inst_111:
// rs1_val==1431655765 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x110, 0x55555555, 0x332, x2, 368, x6)
    16e0:	55555537          	lui	a0,0x55555
    16e4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16e8:	33257593          	andi	a1,a0,818
    16ec:	16b12823          	sw	a1,368(sp)

000016f0 <inst_112>:

inst_112:
// rs1_val==1431655765 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x445, 0x55555555, 0x665, x2, 372, x6)
    16f0:	55555537          	lui	a0,0x55555
    16f4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16f8:	66557593          	andi	a1,a0,1637
    16fc:	16b12a23          	sw	a1,372(sp)

00001700 <inst_113>:

inst_113:
// rs1_val==1431655765 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x2c, x2, 376, x6)
    1700:	55555537          	lui	a0,0x55555
    1704:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1708:	02c57593          	andi	a1,a0,44
    170c:	16b12c23          	sw	a1,376(sp)

00001710 <inst_114>:

inst_114:
// rs1_val==1431655765 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555555, 0x556, x2, 380, x6)
    1710:	55555537          	lui	a0,0x55555
    1714:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1718:	55657593          	andi	a1,a0,1366
    171c:	16b12e23          	sw	a1,380(sp)

00001720 <inst_115>:

inst_115:
// rs1_val==1431655765 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x55555001, 0x55555555, -0x555, x2, 384, x6)
    1720:	55555537          	lui	a0,0x55555
    1724:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1728:	aab57593          	andi	a1,a0,-1365
    172c:	18b12023          	sw	a1,384(sp)

00001730 <inst_116>:

inst_116:
// rs1_val==1431655765 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x6, x2, 388, x6)
    1730:	55555537          	lui	a0,0x55555
    1734:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1738:	00657593          	andi	a1,a0,6
    173c:	18b12223          	sw	a1,388(sp)

00001740 <inst_117>:

inst_117:
// rs1_val==1431655765 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x55555555, 0x334, x2, 392, x6)
    1740:	55555537          	lui	a0,0x55555
    1744:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1748:	33457593          	andi	a1,a0,820
    174c:	18b12423          	sw	a1,392(sp)

00001750 <inst_118>:

inst_118:
// rs1_val==1431655765 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x445, 0x55555555, 0x667, x2, 396, x6)
    1750:	55555537          	lui	a0,0x55555
    1754:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1758:	66757593          	andi	a1,a0,1639
    175c:	18b12623          	sw	a1,396(sp)

00001760 <inst_119>:

inst_119:
// rs1_val==1431655765 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x55555554, 0x55555555, -0x2c, x2, 400, x6)
    1760:	55555537          	lui	a0,0x55555
    1764:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1768:	fd457593          	andi	a1,a0,-44
    176c:	18b12823          	sw	a1,400(sp)

00001770 <inst_120>:

inst_120:
// rs1_val==1431655765 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555555, 0x2e, x2, 404, x6)
    1770:	55555537          	lui	a0,0x55555
    1774:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1778:	02e57593          	andi	a1,a0,46
    177c:	18b12a23          	sw	a1,404(sp)

00001780 <inst_121>:

inst_121:
// rs1_val==-1431655766 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x3, x2, 408, x6)
    1780:	aaaab537          	lui	a0,0xaaaab
    1784:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1788:	00357593          	andi	a1,a0,3
    178c:	18b12c23          	sw	a1,408(sp)

00001790 <inst_122>:

inst_122:
// rs1_val==-1431655766 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x555, x2, 412, x6)
    1790:	aaaab537          	lui	a0,0xaaaab
    1794:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1798:	55557593          	andi	a1,a0,1365
    179c:	18b12e23          	sw	a1,412(sp)

000017a0 <inst_123>:

inst_123:
// rs1_val==-1431655766 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaa, -0x55555556, -0x556, x2, 416, x6)
    17a0:	aaaab537          	lui	a0,0xaaaab
    17a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17a8:	aaa57593          	andi	a1,a0,-1366
    17ac:	1ab12023          	sw	a1,416(sp)

000017b0 <inst_124>:

inst_124:
// rs1_val==-1431655766 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x5, x2, 420, x6)
    17b0:	aaaab537          	lui	a0,0xaaaab
    17b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17b8:	00557593          	andi	a1,a0,5
    17bc:	1ab12223          	sw	a1,420(sp)

000017c0 <inst_125>:

inst_125:
// rs1_val==-1431655766 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x333, x2, 424, x6)
    17c0:	aaaab537          	lui	a0,0xaaaab
    17c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17c8:	33357593          	andi	a1,a0,819
    17cc:	1ab12423          	sw	a1,424(sp)

000017d0 <inst_126>:

inst_126:
// rs1_val==-1431655766 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x666, x2, 428, x6)
    17d0:	aaaab537          	lui	a0,0xaaaab
    17d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17d8:	66657593          	andi	a1,a0,1638
    17dc:	1ab12623          	sw	a1,428(sp)

000017e0 <inst_127>:

inst_127:
// rs1_val==-1431655766 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa82, -0x55555556, -0x2d, x2, 432, x6)
    17e0:	aaaab537          	lui	a0,0xaaaab
    17e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17e8:	fd357593          	andi	a1,a0,-45
    17ec:	1ab12823          	sw	a1,432(sp)

000017f0 <inst_128>:

inst_128:
// rs1_val==-1431655766 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x28, -0x55555556, 0x2d, x2, 436, x6)
    17f0:	aaaab537          	lui	a0,0xaaaab
    17f4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17f8:	02d57593          	andi	a1,a0,45
    17fc:	1ab12a23          	sw	a1,436(sp)

00001800 <inst_129>:

inst_129:
// rs1_val==-1431655766 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x2, x2, 440, x6)
    1800:	aaaab537          	lui	a0,0xaaaab
    1804:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1808:	00257593          	andi	a1,a0,2
    180c:	1ab12c23          	sw	a1,440(sp)

00001810 <inst_130>:

inst_130:
// rs1_val==-1431655766 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x554, x2, 444, x6)
    1810:	aaaab537          	lui	a0,0xaaaab
    1814:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1818:	55457593          	andi	a1,a0,1364
    181c:	1ab12e23          	sw	a1,444(sp)

00001820 <inst_131>:

inst_131:
// rs1_val==-1431655766 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x0, x2, 448, x6)
    1820:	aaaab537          	lui	a0,0xaaaab
    1824:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1828:	00057593          	andi	a1,a0,0
    182c:	1cb12023          	sw	a1,448(sp)

00001830 <inst_132>:

inst_132:
// rs1_val==-1431655766 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555556, 0x4, x2, 452, x6)
    1830:	aaaab537          	lui	a0,0xaaaab
    1834:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1838:	00457593          	andi	a1,a0,4
    183c:	1cb12223          	sw	a1,452(sp)

00001840 <inst_133>:

inst_133:
// rs1_val==-1431655766 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x332, x2, 456, x6)
    1840:	aaaab537          	lui	a0,0xaaaab
    1844:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1848:	33257593          	andi	a1,a0,818
    184c:	1cb12423          	sw	a1,456(sp)

00001850 <inst_134>:

inst_134:
// rs1_val==-1431655766 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x220, -0x55555556, 0x665, x2, 460, x6)
    1850:	aaaab537          	lui	a0,0xaaaab
    1854:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1858:	66557593          	andi	a1,a0,1637
    185c:	1cb12623          	sw	a1,460(sp)

00001860 <inst_135>:

inst_135:
// rs1_val==-1431655766 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x28, -0x55555556, 0x2c, x2, 464, x6)
    1860:	aaaab537          	lui	a0,0xaaaab
    1864:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1868:	02c57593          	andi	a1,a0,44
    186c:	1cb12823          	sw	a1,464(sp)

00001870 <inst_136>:

inst_136:
// rs1_val==-1431655766 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x556, x2, 468, x6)
    1870:	aaaab537          	lui	a0,0xaaaab
    1874:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1878:	55657593          	andi	a1,a0,1366
    187c:	1cb12a23          	sw	a1,468(sp)

00001880 <inst_137>:

inst_137:
// rs1_val==-1431655766 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaa, -0x55555556, -0x555, x2, 472, x6)
    1880:	aaaab537          	lui	a0,0xaaaab
    1884:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1888:	aab57593          	andi	a1,a0,-1365
    188c:	1cb12c23          	sw	a1,472(sp)

00001890 <inst_138>:

inst_138:
// rs1_val==-1431655766 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555556, 0x6, x2, 476, x6)
    1890:	aaaab537          	lui	a0,0xaaaab
    1894:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1898:	00657593          	andi	a1,a0,6
    189c:	1cb12e23          	sw	a1,476(sp)

000018a0 <inst_139>:

inst_139:
// rs1_val==-1431655766 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x220, -0x55555556, 0x334, x2, 480, x6)
    18a0:	aaaab537          	lui	a0,0xaaaab
    18a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18a8:	33457593          	andi	a1,a0,820
    18ac:	1eb12023          	sw	a1,480(sp)

000018b0 <inst_140>:

inst_140:
// rs1_val==-1431655766 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555556, 0x667, x2, 484, x6)
    18b0:	aaaab537          	lui	a0,0xaaaab
    18b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18b8:	66757593          	andi	a1,a0,1639
    18bc:	1eb12223          	sw	a1,484(sp)

000018c0 <inst_141>:

inst_141:
// rs1_val==-1431655766 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa80, -0x55555556, -0x2c, x2, 488, x6)
    18c0:	aaaab537          	lui	a0,0xaaaab
    18c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18c8:	fd457593          	andi	a1,a0,-44
    18cc:	1eb12423          	sw	a1,488(sp)

000018d0 <inst_142>:

inst_142:
// rs1_val==-1431655766 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2a, -0x55555556, 0x2e, x2, 492, x6)
    18d0:	aaaab537          	lui	a0,0xaaaab
    18d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18d8:	02e57593          	andi	a1,a0,46
    18dc:	1eb12623          	sw	a1,492(sp)

000018e0 <inst_143>:

inst_143:
// rs1_val==5 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, 0x3, x2, 496, x6)
    18e0:	00500513          	li	a0,5
    18e4:	00357593          	andi	a1,a0,3
    18e8:	1eb12823          	sw	a1,496(sp)

000018ec <inst_144>:

inst_144:
// rs1_val==5 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x555, x2, 500, x6)
    18ec:	00500513          	li	a0,5
    18f0:	55557593          	andi	a1,a0,1365
    18f4:	1eb12a23          	sw	a1,500(sp)

000018f8 <inst_145>:

inst_145:
// rs1_val==5 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, -0x556, x2, 504, x6)
    18f8:	00500513          	li	a0,5
    18fc:	aaa57593          	andi	a1,a0,-1366
    1900:	1eb12c23          	sw	a1,504(sp)

00001904 <inst_146>:

inst_146:
// rs1_val==5 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x5, x2, 508, x6)
    1904:	00500513          	li	a0,5
    1908:	00557593          	andi	a1,a0,5
    190c:	1eb12e23          	sw	a1,508(sp)

00001910 <inst_147>:

inst_147:
// rs1_val==5 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, 0x333, x2, 512, x6)
    1910:	00500513          	li	a0,5
    1914:	33357593          	andi	a1,a0,819
    1918:	20b12023          	sw	a1,512(sp)

0000191c <inst_148>:

inst_148:
// rs1_val==5 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x666, x2, 516, x6)
    191c:	00500513          	li	a0,5
    1920:	66657593          	andi	a1,a0,1638
    1924:	20b12223          	sw	a1,516(sp)

00001928 <inst_149>:

inst_149:
// rs1_val==5 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, -0x2d, x2, 520, x6)
    1928:	00500513          	li	a0,5
    192c:	fd357593          	andi	a1,a0,-45
    1930:	20b12423          	sw	a1,520(sp)

00001934 <inst_150>:

inst_150:
// rs1_val==5 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x2d, x2, 524, x6)
    1934:	00500513          	li	a0,5
    1938:	02d57593          	andi	a1,a0,45
    193c:	20b12623          	sw	a1,524(sp)

00001940 <inst_151>:

inst_151:
// rs1_val==5 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x2, x2, 528, x6)
    1940:	00500513          	li	a0,5
    1944:	00257593          	andi	a1,a0,2
    1948:	20b12823          	sw	a1,528(sp)

0000194c <inst_152>:

inst_152:
// rs1_val==5 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x554, x2, 532, x6)
    194c:	00500513          	li	a0,5
    1950:	55457593          	andi	a1,a0,1364
    1954:	20b12a23          	sw	a1,532(sp)

00001958 <inst_153>:

inst_153:
// rs1_val==5 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x0, x2, 536, x6)
    1958:	00500513          	li	a0,5
    195c:	00057593          	andi	a1,a0,0
    1960:	20b12c23          	sw	a1,536(sp)

00001964 <inst_154>:

inst_154:
// rs1_val==5 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x4, x2, 540, x6)
    1964:	00500513          	li	a0,5
    1968:	00457593          	andi	a1,a0,4
    196c:	20b12e23          	sw	a1,540(sp)

00001970 <inst_155>:

inst_155:
// rs1_val==5 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x5, 0x332, x2, 544, x6)
    1970:	00500513          	li	a0,5
    1974:	33257593          	andi	a1,a0,818
    1978:	22b12023          	sw	a1,544(sp)

0000197c <inst_156>:

inst_156:
// rs1_val==5 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x665, x2, 548, x6)
    197c:	00500513          	li	a0,5
    1980:	66557593          	andi	a1,a0,1637
    1984:	22b12223          	sw	a1,548(sp)

00001988 <inst_157>:

inst_157:
// rs1_val==5 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x2c, x2, 552, x6)
    1988:	00500513          	li	a0,5
    198c:	02c57593          	andi	a1,a0,44
    1990:	22b12423          	sw	a1,552(sp)

00001994 <inst_158>:

inst_158:
// rs1_val==5 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x556, x2, 556, x6)
    1994:	00500513          	li	a0,5
    1998:	55657593          	andi	a1,a0,1366
    199c:	22b12623          	sw	a1,556(sp)

000019a0 <inst_159>:

inst_159:
// rs1_val==5 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x1, 0x5, -0x555, x2, 560, x6)
    19a0:	00500513          	li	a0,5
    19a4:	aab57593          	andi	a1,a0,-1365
    19a8:	22b12823          	sw	a1,560(sp)

000019ac <inst_160>:

inst_160:
// rs1_val==5 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x6, x2, 564, x6)
    19ac:	00500513          	li	a0,5
    19b0:	00657593          	andi	a1,a0,6
    19b4:	22b12a23          	sw	a1,564(sp)

000019b8 <inst_161>:

inst_161:
// rs1_val==5 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x334, x2, 568, x6)
    19b8:	00500513          	li	a0,5
    19bc:	33457593          	andi	a1,a0,820
    19c0:	22b12c23          	sw	a1,568(sp)

000019c4 <inst_162>:

inst_162:
// rs1_val==5 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x5, 0x5, 0x667, x2, 572, x6)
    19c4:	00500513          	li	a0,5
    19c8:	66757593          	andi	a1,a0,1639
    19cc:	22b12e23          	sw	a1,572(sp)

000019d0 <inst_163>:

inst_163:
// rs1_val==5 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, -0x2c, x2, 576, x6)
    19d0:	00500513          	li	a0,5
    19d4:	fd457593          	andi	a1,a0,-44
    19d8:	24b12023          	sw	a1,576(sp)

000019dc <inst_164>:

inst_164:
// rs1_val==5 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x5;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x5, 0x2e, x2, 580, x6)
    19dc:	00500513          	li	a0,5
    19e0:	02e57593          	andi	a1,a0,46
    19e4:	24b12223          	sw	a1,580(sp)

000019e8 <inst_165>:

inst_165:
// rs1_val==858993459 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x33333333, 0x3, x2, 584, x6)
    19e8:	33333537          	lui	a0,0x33333
    19ec:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    19f0:	00357593          	andi	a1,a0,3
    19f4:	24b12423          	sw	a1,584(sp)

000019f8 <inst_166>:

inst_166:
// rs1_val==858993459 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x111, 0x33333333, 0x555, x2, 588, x6)
    19f8:	33333537          	lui	a0,0x33333
    19fc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a00:	55557593          	andi	a1,a0,1365
    1a04:	24b12623          	sw	a1,588(sp)

00001a08 <inst_167>:

inst_167:
// rs1_val==858993459 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x33333222, 0x33333333, -0x556, x2, 592, x6)
    1a08:	33333537          	lui	a0,0x33333
    1a0c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a10:	aaa57593          	andi	a1,a0,-1366
    1a14:	24b12823          	sw	a1,592(sp)

00001a18 <inst_168>:

inst_168:
// rs1_val==858993459 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0x33333333, 0x5, x2, 596, x6)
    1a18:	33333537          	lui	a0,0x33333
    1a1c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a20:	00557593          	andi	a1,a0,5
    1a24:	24b12a23          	sw	a1,596(sp)

00001a28 <inst_169>:

inst_169:
// rs1_val==858993459 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x333, 0x33333333, 0x333, x2, 600, x6)
    1a28:	33333537          	lui	a0,0x33333
    1a2c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a30:	33357593          	andi	a1,a0,819
    1a34:	24b12c23          	sw	a1,600(sp)

00001a38 <inst_170>:

inst_170:
// rs1_val==858993459 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0x33333333, 0x666, x2, 604, x6)
    1a38:	33333537          	lui	a0,0x33333
    1a3c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a40:	66657593          	andi	a1,a0,1638
    1a44:	24b12e23          	sw	a1,604(sp)

00001a48 <inst_171>:

inst_171:
// rs1_val==858993459 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x33333313, 0x33333333, -0x2d, x2, 608, x6)
    1a48:	33333537          	lui	a0,0x33333
    1a4c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a50:	fd357593          	andi	a1,a0,-45
    1a54:	26b12023          	sw	a1,608(sp)

00001a58 <inst_172>:

inst_172:
// rs1_val==858993459 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x21, 0x33333333, 0x2d, x2, 612, x6)
    1a58:	33333537          	lui	a0,0x33333
    1a5c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a60:	02d57593          	andi	a1,a0,45
    1a64:	26b12223          	sw	a1,612(sp)

00001a68 <inst_173>:

inst_173:
// rs1_val==858993459 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333333, 0x2, x2, 616, x6)
    1a68:	33333537          	lui	a0,0x33333
    1a6c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a70:	00257593          	andi	a1,a0,2
    1a74:	26b12423          	sw	a1,616(sp)

00001a78 <inst_174>:

inst_174:
// rs1_val==858993459 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0x33333333, 0x554, x2, 620, x6)
    1a78:	33333537          	lui	a0,0x33333
    1a7c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a80:	55457593          	andi	a1,a0,1364
    1a84:	26b12623          	sw	a1,620(sp)

00001a88 <inst_175>:

inst_175:
// rs1_val==858993459 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333333, 0x0, x2, 624, x6)
    1a88:	33333537          	lui	a0,0x33333
    1a8c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a90:	00057593          	andi	a1,a0,0
    1a94:	26b12823          	sw	a1,624(sp)

00001a98 <inst_176>:

inst_176:
// rs1_val==858993459 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333333, 0x4, x2, 628, x6)
    1a98:	33333537          	lui	a0,0x33333
    1a9c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1aa0:	00457593          	andi	a1,a0,4
    1aa4:	26b12a23          	sw	a1,628(sp)

00001aa8 <inst_177>:

inst_177:
// rs1_val==858993459 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0x33333333, 0x332, x2, 632, x6)
    1aa8:	33333537          	lui	a0,0x33333
    1aac:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ab0:	33257593          	andi	a1,a0,818
    1ab4:	26b12c23          	sw	a1,632(sp)

00001ab8 <inst_178>:

inst_178:
// rs1_val==858993459 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x221, 0x33333333, 0x665, x2, 636, x6)
    1ab8:	33333537          	lui	a0,0x33333
    1abc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ac0:	66557593          	andi	a1,a0,1637
    1ac4:	26b12e23          	sw	a1,636(sp)

00001ac8 <inst_179>:

inst_179:
// rs1_val==858993459 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0x33333333, 0x2c, x2, 640, x6)
    1ac8:	33333537          	lui	a0,0x33333
    1acc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ad0:	02c57593          	andi	a1,a0,44
    1ad4:	28b12023          	sw	a1,640(sp)

00001ad8 <inst_180>:

inst_180:
// rs1_val==858993459 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0x33333333, 0x556, x2, 644, x6)
    1ad8:	33333537          	lui	a0,0x33333
    1adc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ae0:	55657593          	andi	a1,a0,1366
    1ae4:	28b12223          	sw	a1,644(sp)

00001ae8 <inst_181>:

inst_181:
// rs1_val==858993459 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x33333223, 0x33333333, -0x555, x2, 648, x6)
    1ae8:	33333537          	lui	a0,0x33333
    1aec:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1af0:	aab57593          	andi	a1,a0,-1365
    1af4:	28b12423          	sw	a1,648(sp)

00001af8 <inst_182>:

inst_182:
// rs1_val==858993459 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333333, 0x6, x2, 652, x6)
    1af8:	33333537          	lui	a0,0x33333
    1afc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b00:	00657593          	andi	a1,a0,6
    1b04:	28b12623          	sw	a1,652(sp)

00001b08 <inst_183>:

inst_183:
// rs1_val==858993459 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333333, 0x334, x2, 656, x6)
    1b08:	33333537          	lui	a0,0x33333
    1b0c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b10:	33457593          	andi	a1,a0,820
    1b14:	28b12823          	sw	a1,656(sp)

00001b18 <inst_184>:

inst_184:
// rs1_val==858993459 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x223, 0x33333333, 0x667, x2, 660, x6)
    1b18:	33333537          	lui	a0,0x33333
    1b1c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b20:	66757593          	andi	a1,a0,1639
    1b24:	28b12a23          	sw	a1,660(sp)

00001b28 <inst_185>:

inst_185:
// rs1_val==858993459 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x33333310, 0x33333333, -0x2c, x2, 664, x6)
    1b28:	33333537          	lui	a0,0x33333
    1b2c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b30:	fd457593          	andi	a1,a0,-44
    1b34:	28b12c23          	sw	a1,664(sp)

00001b38 <inst_186>:

inst_186:
// rs1_val==858993459 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0x33333333, 0x2e, x2, 668, x6)
    1b38:	33333537          	lui	a0,0x33333
    1b3c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b40:	02e57593          	andi	a1,a0,46
    1b44:	28b12e23          	sw	a1,668(sp)

00001b48 <inst_187>:

inst_187:
// rs1_val==1717986918 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x66666666, 0x3, x2, 672, x6)
    1b48:	66666537          	lui	a0,0x66666
    1b4c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b50:	00357593          	andi	a1,a0,3
    1b54:	2ab12023          	sw	a1,672(sp)

00001b58 <inst_188>:

inst_188:
// rs1_val==1717986918 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666666, 0x555, x2, 676, x6)
    1b58:	66666537          	lui	a0,0x66666
    1b5c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b60:	55557593          	andi	a1,a0,1365
    1b64:	2ab12223          	sw	a1,676(sp)

00001b68 <inst_189>:

inst_189:
// rs1_val==1717986918 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x66666222, 0x66666666, -0x556, x2, 680, x6)
    1b68:	66666537          	lui	a0,0x66666
    1b6c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b70:	aaa57593          	andi	a1,a0,-1366
    1b74:	2ab12423          	sw	a1,680(sp)

00001b78 <inst_190>:

inst_190:
// rs1_val==1717986918 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666666, 0x5, x2, 684, x6)
    1b78:	66666537          	lui	a0,0x66666
    1b7c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b80:	00557593          	andi	a1,a0,5
    1b84:	2ab12623          	sw	a1,684(sp)

00001b88 <inst_191>:

inst_191:
// rs1_val==1717986918 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x222, 0x66666666, 0x333, x2, 688, x6)
    1b88:	66666537          	lui	a0,0x66666
    1b8c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1b90:	33357593          	andi	a1,a0,819
    1b94:	2ab12823          	sw	a1,688(sp)

00001b98 <inst_192>:

inst_192:
// rs1_val==1717986918 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x666, 0x66666666, 0x666, x2, 692, x6)
    1b98:	66666537          	lui	a0,0x66666
    1b9c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1ba0:	66657593          	andi	a1,a0,1638
    1ba4:	2ab12a23          	sw	a1,692(sp)

00001ba8 <inst_193>:

inst_193:
// rs1_val==1717986918 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x66666642, 0x66666666, -0x2d, x2, 696, x6)
    1ba8:	66666537          	lui	a0,0x66666
    1bac:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bb0:	fd357593          	andi	a1,a0,-45
    1bb4:	2ab12c23          	sw	a1,696(sp)

00001bb8 <inst_194>:

inst_194:
// rs1_val==1717986918 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666666, 0x2d, x2, 700, x6)
    1bb8:	66666537          	lui	a0,0x66666
    1bbc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bc0:	02d57593          	andi	a1,a0,45
    1bc4:	2ab12e23          	sw	a1,700(sp)

00001bc8 <inst_195>:

inst_195:
// rs1_val==1717986918 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x66666666, 0x2, x2, 704, x6)
    1bc8:	66666537          	lui	a0,0x66666
    1bcc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bd0:	00257593          	andi	a1,a0,2
    1bd4:	2cb12023          	sw	a1,704(sp)

00001bd8 <inst_196>:

inst_196:
// rs1_val==1717986918 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666666, 0x554, x2, 708, x6)
    1bd8:	66666537          	lui	a0,0x66666
    1bdc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1be0:	55457593          	andi	a1,a0,1364
    1be4:	2cb12223          	sw	a1,708(sp)

00001be8 <inst_197>:

inst_197:
// rs1_val==1717986918 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666666, 0x0, x2, 712, x6)
    1be8:	66666537          	lui	a0,0x66666
    1bec:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bf0:	00057593          	andi	a1,a0,0
    1bf4:	2cb12423          	sw	a1,712(sp)

00001bf8 <inst_198>:

inst_198:
// rs1_val==1717986918 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666666, 0x4, x2, 716, x6)
    1bf8:	66666537          	lui	a0,0x66666
    1bfc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c00:	00457593          	andi	a1,a0,4
    1c04:	2cb12623          	sw	a1,716(sp)

00001c08 <inst_199>:

inst_199:
// rs1_val==1717986918 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, 0x66666666, 0x332, x2, 720, x6)
    1c08:	66666537          	lui	a0,0x66666
    1c0c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c10:	33257593          	andi	a1,a0,818
    1c14:	2cb12823          	sw	a1,720(sp)

00001c18 <inst_200>:

inst_200:
// rs1_val==1717986918 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x664, 0x66666666, 0x665, x2, 724, x6)
    1c18:	66666537          	lui	a0,0x66666
    1c1c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c20:	66557593          	andi	a1,a0,1637
    1c24:	2cb12a23          	sw	a1,724(sp)

00001c28 <inst_201>:

inst_201:
// rs1_val==1717986918 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666666, 0x2c, x2, 728, x6)
    1c28:	66666537          	lui	a0,0x66666
    1c2c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c30:	02c57593          	andi	a1,a0,44
    1c34:	2cb12c23          	sw	a1,728(sp)

00001c38 <inst_202>:

inst_202:
// rs1_val==1717986918 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x446, 0x66666666, 0x556, x2, 732, x6)
    1c38:	66666537          	lui	a0,0x66666
    1c3c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c40:	55657593          	andi	a1,a0,1366
    1c44:	2cb12e23          	sw	a1,732(sp)

00001c48 <inst_203>:

inst_203:
// rs1_val==1717986918 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x66666222, 0x66666666, -0x555, x2, 736, x6)
    1c48:	66666537          	lui	a0,0x66666
    1c4c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c50:	aab57593          	andi	a1,a0,-1365
    1c54:	2eb12023          	sw	a1,736(sp)

00001c58 <inst_204>:

inst_204:
// rs1_val==1717986918 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x66666666, 0x6, x2, 740, x6)
    1c58:	66666537          	lui	a0,0x66666
    1c5c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c60:	00657593          	andi	a1,a0,6
    1c64:	2eb12223          	sw	a1,740(sp)

00001c68 <inst_205>:

inst_205:
// rs1_val==1717986918 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x66666666, 0x334, x2, 744, x6)
    1c68:	66666537          	lui	a0,0x66666
    1c6c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c70:	33457593          	andi	a1,a0,820
    1c74:	2eb12423          	sw	a1,744(sp)

00001c78 <inst_206>:

inst_206:
// rs1_val==1717986918 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x666, 0x66666666, 0x667, x2, 748, x6)
    1c78:	66666537          	lui	a0,0x66666
    1c7c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c80:	66757593          	andi	a1,a0,1639
    1c84:	2eb12623          	sw	a1,748(sp)

00001c88 <inst_207>:

inst_207:
// rs1_val==1717986918 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x66666644, 0x66666666, -0x2c, x2, 752, x6)
    1c88:	66666537          	lui	a0,0x66666
    1c8c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c90:	fd457593          	andi	a1,a0,-44
    1c94:	2eb12823          	sw	a1,752(sp)

00001c98 <inst_208>:

inst_208:
// rs1_val==1717986918 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x26, 0x66666666, 0x2e, x2, 756, x6)
    1c98:	66666537          	lui	a0,0x66666
    1c9c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1ca0:	02e57593          	andi	a1,a0,46
    1ca4:	2eb12a23          	sw	a1,756(sp)

00001ca8 <inst_209>:

inst_209:
// rs1_val==-46340 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504, 0x3, x2, 760, x6)
    1ca8:	ffff5537          	lui	a0,0xffff5
    1cac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1cb0:	00357593          	andi	a1,a0,3
    1cb4:	2eb12c23          	sw	a1,760(sp)

00001cb8 <inst_210>:

inst_210:
// rs1_val==-46340 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb504, 0x555, x2, 764, x6)
    1cb8:	ffff5537          	lui	a0,0xffff5
    1cbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1cc0:	55557593          	andi	a1,a0,1365
    1cc4:	2eb12e23          	sw	a1,764(sp)

00001cc8 <inst_211>:

inst_211:
// rs1_val==-46340 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xffff4aa8, -0xb504, -0x556, x2, 768, x6)
    1cc8:	ffff5537          	lui	a0,0xffff5
    1ccc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1cd0:	aaa57593          	andi	a1,a0,-1366
    1cd4:	30b12023          	sw	a1,768(sp)

00001cd8 <inst_212>:

inst_212:
// rs1_val==-46340 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504, 0x5, x2, 772, x6)
    1cd8:	ffff5537          	lui	a0,0xffff5
    1cdc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1ce0:	00557593          	andi	a1,a0,5
    1ce4:	30b12223          	sw	a1,772(sp)

00001ce8 <inst_213>:

inst_213:
// rs1_val==-46340 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x230, -0xb504, 0x333, x2, 776, x6)
    1ce8:	ffff5537          	lui	a0,0xffff5
    1cec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1cf0:	33357593          	andi	a1,a0,819
    1cf4:	30b12423          	sw	a1,776(sp)

00001cf8 <inst_214>:

inst_214:
// rs1_val==-46340 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb504, 0x666, x2, 780, x6)
    1cf8:	ffff5537          	lui	a0,0xffff5
    1cfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d00:	66657593          	andi	a1,a0,1638
    1d04:	30b12623          	sw	a1,780(sp)

00001d08 <inst_215>:

inst_215:
// rs1_val==-46340 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xffff4ad0, -0xb504, -0x2d, x2, 784, x6)
    1d08:	ffff5537          	lui	a0,0xffff5
    1d0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d10:	fd357593          	andi	a1,a0,-45
    1d14:	30b12823          	sw	a1,784(sp)

00001d18 <inst_216>:

inst_216:
// rs1_val==-46340 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb504, 0x2d, x2, 788, x6)
    1d18:	ffff5537          	lui	a0,0xffff5
    1d1c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d20:	02d57593          	andi	a1,a0,45
    1d24:	30b12a23          	sw	a1,788(sp)

00001d28 <inst_217>:

inst_217:
// rs1_val==-46340 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504, 0x2, x2, 792, x6)
    1d28:	ffff5537          	lui	a0,0xffff5
    1d2c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d30:	00257593          	andi	a1,a0,2
    1d34:	30b12c23          	sw	a1,792(sp)

00001d38 <inst_218>:

inst_218:
// rs1_val==-46340 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb504, 0x554, x2, 796, x6)
    1d38:	ffff5537          	lui	a0,0xffff5
    1d3c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d40:	55457593          	andi	a1,a0,1364
    1d44:	30b12e23          	sw	a1,796(sp)

00001d48 <inst_219>:

inst_219:
// rs1_val==-46340 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb504, 0x0, x2, 800, x6)
    1d48:	ffff5537          	lui	a0,0xffff5
    1d4c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d50:	00057593          	andi	a1,a0,0
    1d54:	32b12023          	sw	a1,800(sp)

00001d58 <inst_220>:

inst_220:
// rs1_val==-46340 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504, 0x4, x2, 804, x6)
    1d58:	ffff5537          	lui	a0,0xffff5
    1d5c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d60:	00457593          	andi	a1,a0,4
    1d64:	32b12223          	sw	a1,804(sp)

00001d68 <inst_221>:

inst_221:
// rs1_val==-46340 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x230, -0xb504, 0x332, x2, 808, x6)
    1d68:	ffff5537          	lui	a0,0xffff5
    1d6c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d70:	33257593          	andi	a1,a0,818
    1d74:	32b12423          	sw	a1,808(sp)

00001d78 <inst_222>:

inst_222:
// rs1_val==-46340 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb504, 0x665, x2, 812, x6)
    1d78:	ffff5537          	lui	a0,0xffff5
    1d7c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d80:	66557593          	andi	a1,a0,1637
    1d84:	32b12623          	sw	a1,812(sp)

00001d88 <inst_223>:

inst_223:
// rs1_val==-46340 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb504, 0x2c, x2, 816, x6)
    1d88:	ffff5537          	lui	a0,0xffff5
    1d8c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d90:	02c57593          	andi	a1,a0,44
    1d94:	32b12823          	sw	a1,816(sp)

00001d98 <inst_224>:

inst_224:
// rs1_val==-46340 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb504, 0x556, x2, 820, x6)
    1d98:	ffff5537          	lui	a0,0xffff5
    1d9c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1da0:	55657593          	andi	a1,a0,1366
    1da4:	32b12a23          	sw	a1,820(sp)

00001da8 <inst_225>:

inst_225:
// rs1_val==-46340 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xffff4aa8, -0xb504, -0x555, x2, 824, x6)
    1da8:	ffff5537          	lui	a0,0xffff5
    1dac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1db0:	aab57593          	andi	a1,a0,-1365
    1db4:	32b12c23          	sw	a1,824(sp)

00001db8 <inst_226>:

inst_226:
// rs1_val==-46340 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb504, 0x6, x2, 828, x6)
    1db8:	ffff5537          	lui	a0,0xffff5
    1dbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1dc0:	00657593          	andi	a1,a0,6
    1dc4:	32b12e23          	sw	a1,828(sp)

00001dc8 <inst_227>:

inst_227:
// rs1_val==-46340 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x234, -0xb504, 0x334, x2, 832, x6)
    1dc8:	ffff5537          	lui	a0,0xffff5
    1dcc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1dd0:	33457593          	andi	a1,a0,820
    1dd4:	34b12023          	sw	a1,832(sp)

00001dd8 <inst_228>:

inst_228:
// rs1_val==-46340 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb504, 0x667, x2, 836, x6)
    1dd8:	ffff5537          	lui	a0,0xffff5
    1ddc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1de0:	66757593          	andi	a1,a0,1639
    1de4:	34b12223          	sw	a1,836(sp)

00001de8 <inst_229>:

inst_229:
// rs1_val==-46340 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffff4ad4, -0xb504, -0x2c, x2, 840, x6)
    1de8:	ffff5537          	lui	a0,0xffff5
    1dec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1df0:	fd457593          	andi	a1,a0,-44
    1df4:	34b12423          	sw	a1,840(sp)

00001df8 <inst_230>:

inst_230:
// rs1_val==-46340 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb504, 0x2e, x2, 844, x6)
    1df8:	ffff5537          	lui	a0,0xffff5
    1dfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e00:	02e57593          	andi	a1,a0,46
    1e04:	34b12623          	sw	a1,844(sp)

00001e08 <inst_231>:

inst_231:
// rs1_val==46340 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504, 0x3, x2, 848, x6)
    1e08:	0000b537          	lui	a0,0xb
    1e0c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e10:	00357593          	andi	a1,a0,3
    1e14:	34b12823          	sw	a1,848(sp)

00001e18 <inst_232>:

inst_232:
// rs1_val==46340 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb504, 0x555, x2, 852, x6)
    1e18:	0000b537          	lui	a0,0xb
    1e1c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e20:	55557593          	andi	a1,a0,1365
    1e24:	34b12a23          	sw	a1,852(sp)

00001e28 <inst_233>:

inst_233:
// rs1_val==46340 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb000, 0xb504, -0x556, x2, 856, x6)
    1e28:	0000b537          	lui	a0,0xb
    1e2c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e30:	aaa57593          	andi	a1,a0,-1366
    1e34:	34b12c23          	sw	a1,856(sp)

00001e38 <inst_234>:

inst_234:
// rs1_val==46340 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x5, x2, 860, x6)
    1e38:	0000b537          	lui	a0,0xb
    1e3c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e40:	00557593          	andi	a1,a0,5
    1e44:	34b12e23          	sw	a1,860(sp)

00001e48 <inst_235>:

inst_235:
// rs1_val==46340 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb504, 0x333, x2, 864, x6)
    1e48:	0000b537          	lui	a0,0xb
    1e4c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e50:	33357593          	andi	a1,a0,819
    1e54:	36b12023          	sw	a1,864(sp)

00001e58 <inst_236>:

inst_236:
// rs1_val==46340 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb504, 0x666, x2, 868, x6)
    1e58:	0000b537          	lui	a0,0xb
    1e5c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e60:	66657593          	andi	a1,a0,1638
    1e64:	36b12223          	sw	a1,868(sp)

00001e68 <inst_237>:

inst_237:
// rs1_val==46340 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb500, 0xb504, -0x2d, x2, 872, x6)
    1e68:	0000b537          	lui	a0,0xb
    1e6c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e70:	fd357593          	andi	a1,a0,-45
    1e74:	36b12423          	sw	a1,872(sp)

00001e78 <inst_238>:

inst_238:
// rs1_val==46340 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x2d, x2, 876, x6)
    1e78:	0000b537          	lui	a0,0xb
    1e7c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e80:	02d57593          	andi	a1,a0,45
    1e84:	36b12623          	sw	a1,876(sp)

00001e88 <inst_239>:

inst_239:
// rs1_val==46340 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504, 0x2, x2, 880, x6)
    1e88:	0000b537          	lui	a0,0xb
    1e8c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e90:	00257593          	andi	a1,a0,2
    1e94:	36b12823          	sw	a1,880(sp)

00001e98 <inst_240>:

inst_240:
// rs1_val==46340 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb504, 0x554, x2, 884, x6)
    1e98:	0000b537          	lui	a0,0xb
    1e9c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ea0:	55457593          	andi	a1,a0,1364
    1ea4:	36b12a23          	sw	a1,884(sp)

00001ea8 <inst_241>:

inst_241:
// rs1_val==46340 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb504, 0x0, x2, 888, x6)
    1ea8:	0000b537          	lui	a0,0xb
    1eac:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1eb0:	00057593          	andi	a1,a0,0
    1eb4:	36b12c23          	sw	a1,888(sp)

00001eb8 <inst_242>:

inst_242:
// rs1_val==46340 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x4, x2, 892, x6)
    1eb8:	0000b537          	lui	a0,0xb
    1ebc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ec0:	00457593          	andi	a1,a0,4
    1ec4:	36b12e23          	sw	a1,892(sp)

00001ec8 <inst_243>:

inst_243:
// rs1_val==46340 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb504, 0x332, x2, 896, x6)
    1ec8:	0000b537          	lui	a0,0xb
    1ecc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ed0:	33257593          	andi	a1,a0,818
    1ed4:	38b12023          	sw	a1,896(sp)

00001ed8 <inst_244>:

inst_244:
// rs1_val==46340 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb504, 0x665, x2, 900, x6)
    1ed8:	0000b537          	lui	a0,0xb
    1edc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ee0:	66557593          	andi	a1,a0,1637
    1ee4:	38b12223          	sw	a1,900(sp)

00001ee8 <inst_245>:

inst_245:
// rs1_val==46340 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x2c, x2, 904, x6)
    1ee8:	0000b537          	lui	a0,0xb
    1eec:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ef0:	02c57593          	andi	a1,a0,44
    1ef4:	38b12423          	sw	a1,904(sp)

00001ef8 <inst_246>:

inst_246:
// rs1_val==46340 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb504, 0x556, x2, 908, x6)
    1ef8:	0000b537          	lui	a0,0xb
    1efc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f00:	55657593          	andi	a1,a0,1366
    1f04:	38b12623          	sw	a1,908(sp)

00001f08 <inst_247>:

inst_247:
// rs1_val==46340 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb000, 0xb504, -0x555, x2, 912, x6)
    1f08:	0000b537          	lui	a0,0xb
    1f0c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f10:	aab57593          	andi	a1,a0,-1365
    1f14:	38b12823          	sw	a1,912(sp)

00001f18 <inst_248>:

inst_248:
// rs1_val==46340 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x6, x2, 916, x6)
    1f18:	0000b537          	lui	a0,0xb
    1f1c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f20:	00657593          	andi	a1,a0,6
    1f24:	38b12a23          	sw	a1,916(sp)

00001f28 <inst_249>:

inst_249:
// rs1_val==46340 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x104, 0xb504, 0x334, x2, 920, x6)
    1f28:	0000b537          	lui	a0,0xb
    1f2c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f30:	33457593          	andi	a1,a0,820
    1f34:	38b12c23          	sw	a1,920(sp)

00001f38 <inst_250>:

inst_250:
// rs1_val==46340 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb504, 0x667, x2, 924, x6)
    1f38:	0000b537          	lui	a0,0xb
    1f3c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f40:	66757593          	andi	a1,a0,1639
    1f44:	38b12e23          	sw	a1,924(sp)

00001f48 <inst_251>:

inst_251:
// rs1_val==46340 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb504, 0xb504, -0x2c, x2, 928, x6)
    1f48:	0000b537          	lui	a0,0xb
    1f4c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f50:	fd457593          	andi	a1,a0,-44
    1f54:	3ab12023          	sw	a1,928(sp)

00001f58 <inst_252>:

inst_252:
// rs1_val==46340 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb504, 0x2e, x2, 932, x6)
    1f58:	0000b537          	lui	a0,0xb
    1f5c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f60:	02e57593          	andi	a1,a0,46
    1f64:	3ab12223          	sw	a1,932(sp)

00001f68 <inst_253>:

inst_253:
// rs1_val==2 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x3, x2, 936, x6)
    1f68:	00200513          	li	a0,2
    1f6c:	00357593          	andi	a1,a0,3
    1f70:	3ab12423          	sw	a1,936(sp)

00001f74 <inst_254>:

inst_254:
// rs1_val==2 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x555, x2, 940, x6)
    1f74:	00200513          	li	a0,2
    1f78:	55557593          	andi	a1,a0,1365
    1f7c:	3ab12623          	sw	a1,940(sp)

00001f80 <inst_255>:

inst_255:
// rs1_val==2 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x556, x2, 944, x6)
    1f80:	00200513          	li	a0,2
    1f84:	aaa57593          	andi	a1,a0,-1366
    1f88:	3ab12823          	sw	a1,944(sp)

00001f8c <inst_256>:

inst_256:
// rs1_val==2 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x5, x2, 948, x6)
    1f8c:	00200513          	li	a0,2
    1f90:	00557593          	andi	a1,a0,5
    1f94:	3ab12a23          	sw	a1,948(sp)

00001f98 <inst_257>:

inst_257:
// rs1_val==2 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x333, x2, 952, x6)
    1f98:	00200513          	li	a0,2
    1f9c:	33357593          	andi	a1,a0,819
    1fa0:	3ab12c23          	sw	a1,952(sp)

00001fa4 <inst_258>:

inst_258:
// rs1_val==2 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x666, x2, 956, x6)
    1fa4:	00200513          	li	a0,2
    1fa8:	66657593          	andi	a1,a0,1638
    1fac:	3ab12e23          	sw	a1,956(sp)

00001fb0 <inst_259>:

inst_259:
// rs1_val==2 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x2d, x2, 960, x6)
    1fb0:	00200513          	li	a0,2
    1fb4:	fd357593          	andi	a1,a0,-45
    1fb8:	3cb12023          	sw	a1,960(sp)

00001fbc <inst_260>:

inst_260:
// rs1_val==2 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x2d, x2, 964, x6)
    1fbc:	00200513          	li	a0,2
    1fc0:	02d57593          	andi	a1,a0,45
    1fc4:	3cb12223          	sw	a1,964(sp)

00001fc8 <inst_261>:

inst_261:
// rs1_val==2 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x2, x2, 968, x6)
    1fc8:	00200513          	li	a0,2
    1fcc:	00257593          	andi	a1,a0,2
    1fd0:	3cb12423          	sw	a1,968(sp)

00001fd4 <inst_262>:

inst_262:
// rs1_val==2 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x554, x2, 972, x6)
    1fd4:	00200513          	li	a0,2
    1fd8:	55457593          	andi	a1,a0,1364
    1fdc:	3cb12623          	sw	a1,972(sp)

00001fe0 <inst_263>:

inst_263:
// rs1_val==2 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x0, x2, 976, x6)
    1fe0:	00200513          	li	a0,2
    1fe4:	00057593          	andi	a1,a0,0
    1fe8:	3cb12823          	sw	a1,976(sp)

00001fec <inst_264>:

inst_264:
// rs1_val==2 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x4, x2, 980, x6)
    1fec:	00200513          	li	a0,2
    1ff0:	00457593          	andi	a1,a0,4
    1ff4:	3cb12a23          	sw	a1,980(sp)

00001ff8 <inst_265>:

inst_265:
// rs1_val==2 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x332, x2, 984, x6)
    1ff8:	00200513          	li	a0,2
    1ffc:	33257593          	andi	a1,a0,818
    2000:	3cb12c23          	sw	a1,984(sp)

00002004 <inst_266>:

inst_266:
// rs1_val==2 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x665, x2, 988, x6)
    2004:	00200513          	li	a0,2
    2008:	66557593          	andi	a1,a0,1637
    200c:	3cb12e23          	sw	a1,988(sp)

00002010 <inst_267>:

inst_267:
// rs1_val==2 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x2c, x2, 992, x6)
    2010:	00200513          	li	a0,2
    2014:	02c57593          	andi	a1,a0,44
    2018:	3eb12023          	sw	a1,992(sp)

0000201c <inst_268>:

inst_268:
// rs1_val==2 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x556, x2, 996, x6)
    201c:	00200513          	li	a0,2
    2020:	55657593          	andi	a1,a0,1366
    2024:	3eb12223          	sw	a1,996(sp)

00002028 <inst_269>:

inst_269:
// rs1_val==2 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, -0x555, x2, 1000, x6)
    2028:	00200513          	li	a0,2
    202c:	aab57593          	andi	a1,a0,-1365
    2030:	3eb12423          	sw	a1,1000(sp)

00002034 <inst_270>:

inst_270:
// rs1_val==2 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x6, x2, 1004, x6)
    2034:	00200513          	li	a0,2
    2038:	00657593          	andi	a1,a0,6
    203c:	3eb12623          	sw	a1,1004(sp)

00002040 <inst_271>:

inst_271:
// rs1_val==2 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, 0x334, x2, 1008, x6)
    2040:	00200513          	li	a0,2
    2044:	33457593          	andi	a1,a0,820
    2048:	3eb12823          	sw	a1,1008(sp)

0000204c <inst_272>:

inst_272:
// rs1_val==2 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x667, x2, 1012, x6)
    204c:	00200513          	li	a0,2
    2050:	66757593          	andi	a1,a0,1639
    2054:	3eb12a23          	sw	a1,1012(sp)

00002058 <inst_273>:

inst_273:
// rs1_val==2 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x2, -0x2c, x2, 1016, x6)
    2058:	00200513          	li	a0,2
    205c:	fd457593          	andi	a1,a0,-44
    2060:	3eb12c23          	sw	a1,1016(sp)

00002064 <inst_274>:

inst_274:
// rs1_val==2 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x2;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0x2, 0x2e, x2, 1020, x6)
    2064:	00200513          	li	a0,2
    2068:	02e57593          	andi	a1,a0,46
    206c:	3eb12e23          	sw	a1,1020(sp)

00002070 <inst_275>:

inst_275:
// rs1_val==1431655764 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555554, 0x3, x2, 1024, x6)
    2070:	55555537          	lui	a0,0x55555
    2074:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2078:	00357593          	andi	a1,a0,3
    207c:	40b12023          	sw	a1,1024(sp)

00002080 <inst_276>:

inst_276:
// rs1_val==1431655764 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555554, 0x555, x2, 1028, x6)
    2080:	55555537          	lui	a0,0x55555
    2084:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2088:	55557593          	andi	a1,a0,1365
    208c:	40b12223          	sw	a1,1028(sp)

00002090 <inst_277>:

inst_277:
// rs1_val==1431655764 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x55555000, 0x55555554, -0x556, x2, 1032, x6)
    2090:	55555537          	lui	a0,0x55555
    2094:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2098:	aaa57593          	andi	a1,a0,-1366
    209c:	40b12423          	sw	a1,1032(sp)

000020a0 <inst_278>:

inst_278:
// rs1_val==1431655764 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x5, x2, 1036, x6)
    20a0:	55555537          	lui	a0,0x55555
    20a4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20a8:	00557593          	andi	a1,a0,5
    20ac:	40b12623          	sw	a1,1036(sp)

000020b0 <inst_279>:

inst_279:
// rs1_val==1431655764 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x110, 0x55555554, 0x333, x2, 1040, x6)
    20b0:	55555537          	lui	a0,0x55555
    20b4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20b8:	33357593          	andi	a1,a0,819
    20bc:	40b12823          	sw	a1,1040(sp)

000020c0 <inst_280>:

inst_280:
// rs1_val==1431655764 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555554, 0x666, x2, 1044, x6)
    20c0:	55555537          	lui	a0,0x55555
    20c4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20c8:	66657593          	andi	a1,a0,1638
    20cc:	40b12a23          	sw	a1,1044(sp)

000020d0 <inst_281>:

inst_281:
// rs1_val==1431655764 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x55555550, 0x55555554, -0x2d, x2, 1048, x6)
    20d0:	55555537          	lui	a0,0x55555
    20d4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20d8:	fd357593          	andi	a1,a0,-45
    20dc:	40b12c23          	sw	a1,1048(sp)

000020e0 <inst_282>:

inst_282:
// rs1_val==1431655764 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x2d, x2, 1052, x6)
    20e0:	55555537          	lui	a0,0x55555
    20e4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20e8:	02d57593          	andi	a1,a0,45
    20ec:	40b12e23          	sw	a1,1052(sp)

000020f0 <inst_283>:

inst_283:
// rs1_val==1431655764 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555554, 0x2, x2, 1056, x6)
    20f0:	55555537          	lui	a0,0x55555
    20f4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20f8:	00257593          	andi	a1,a0,2
    20fc:	42b12023          	sw	a1,1056(sp)

00002100 <inst_284>:

inst_284:
// rs1_val==1431655764 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555554, 0x554, x2, 1060, x6)
    2100:	55555537          	lui	a0,0x55555
    2104:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2108:	55457593          	andi	a1,a0,1364
    210c:	42b12223          	sw	a1,1060(sp)

00002110 <inst_285>:

inst_285:
// rs1_val==1431655764 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555554, 0x0, x2, 1064, x6)
    2110:	55555537          	lui	a0,0x55555
    2114:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2118:	00057593          	andi	a1,a0,0
    211c:	42b12423          	sw	a1,1064(sp)

00002120 <inst_286>:

inst_286:
// rs1_val==1431655764 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x4, x2, 1068, x6)
    2120:	55555537          	lui	a0,0x55555
    2124:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2128:	00457593          	andi	a1,a0,4
    212c:	42b12623          	sw	a1,1068(sp)

00002130 <inst_287>:

inst_287:
// rs1_val==1431655764 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x110, 0x55555554, 0x332, x2, 1072, x6)
    2130:	55555537          	lui	a0,0x55555
    2134:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2138:	33257593          	andi	a1,a0,818
    213c:	42b12823          	sw	a1,1072(sp)

00002140 <inst_288>:

inst_288:
// rs1_val==1431655764 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555554, 0x665, x2, 1076, x6)
    2140:	55555537          	lui	a0,0x55555
    2144:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2148:	66557593          	andi	a1,a0,1637
    214c:	42b12a23          	sw	a1,1076(sp)

00002150 <inst_289>:

inst_289:
// rs1_val==1431655764 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x2c, x2, 1080, x6)
    2150:	55555537          	lui	a0,0x55555
    2154:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2158:	02c57593          	andi	a1,a0,44
    215c:	42b12c23          	sw	a1,1080(sp)

00002160 <inst_290>:

inst_290:
// rs1_val==1431655764 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555554, 0x556, x2, 1084, x6)
    2160:	55555537          	lui	a0,0x55555
    2164:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2168:	55657593          	andi	a1,a0,1366
    216c:	42b12e23          	sw	a1,1084(sp)

00002170 <inst_291>:

inst_291:
// rs1_val==1431655764 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x55555000, 0x55555554, -0x555, x2, 1088, x6)
    2170:	55555537          	lui	a0,0x55555
    2174:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2178:	aab57593          	andi	a1,a0,-1365
    217c:	44b12023          	sw	a1,1088(sp)

00002180 <inst_292>:

inst_292:
// rs1_val==1431655764 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x6, x2, 1092, x6)
    2180:	55555537          	lui	a0,0x55555
    2184:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2188:	00657593          	andi	a1,a0,6
    218c:	44b12223          	sw	a1,1092(sp)

00002190 <inst_293>:

inst_293:
// rs1_val==1431655764 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x55555554, 0x334, x2, 1096, x6)
    2190:	55555537          	lui	a0,0x55555
    2194:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2198:	33457593          	andi	a1,a0,820
    219c:	44b12423          	sw	a1,1096(sp)

000021a0 <inst_294>:

inst_294:
// rs1_val==1431655764 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555554, 0x667, x2, 1100, x6)
    21a0:	55555537          	lui	a0,0x55555
    21a4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21a8:	66757593          	andi	a1,a0,1639
    21ac:	44b12623          	sw	a1,1100(sp)

000021b0 <inst_295>:

inst_295:
// rs1_val==1431655764 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x55555554, 0x55555554, -0x2c, x2, 1104, x6)
    21b0:	55555537          	lui	a0,0x55555
    21b4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21b8:	fd457593          	andi	a1,a0,-44
    21bc:	44b12823          	sw	a1,1104(sp)

000021c0 <inst_296>:

inst_296:
// rs1_val==1431655764 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555554, 0x2e, x2, 1108, x6)
    21c0:	55555537          	lui	a0,0x55555
    21c4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21c8:	02e57593          	andi	a1,a0,46
    21cc:	44b12a23          	sw	a1,1108(sp)

000021d0 <inst_297>:

inst_297:
// rs1_val==0 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x3, x2, 1112, x6)
    21d0:	00000513          	li	a0,0
    21d4:	00357593          	andi	a1,a0,3
    21d8:	44b12c23          	sw	a1,1112(sp)

000021dc <inst_298>:

inst_298:
// rs1_val==0 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x555, x2, 1116, x6)
    21dc:	00000513          	li	a0,0
    21e0:	55557593          	andi	a1,a0,1365
    21e4:	44b12e23          	sw	a1,1116(sp)

000021e8 <inst_299>:

inst_299:
// rs1_val==0 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x556, x2, 1120, x6)
    21e8:	00000513          	li	a0,0
    21ec:	aaa57593          	andi	a1,a0,-1366
    21f0:	46b12023          	sw	a1,1120(sp)

000021f4 <inst_300>:

inst_300:
// rs1_val==0 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x5, x2, 1124, x6)
    21f4:	00000513          	li	a0,0
    21f8:	00557593          	andi	a1,a0,5
    21fc:	46b12223          	sw	a1,1124(sp)

00002200 <inst_301>:

inst_301:
// rs1_val==0 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x333, x2, 1128, x6)
    2200:	00000513          	li	a0,0
    2204:	33357593          	andi	a1,a0,819
    2208:	46b12423          	sw	a1,1128(sp)

0000220c <inst_302>:

inst_302:
// rs1_val==0 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x666, x2, 1132, x6)
    220c:	00000513          	li	a0,0
    2210:	66657593          	andi	a1,a0,1638
    2214:	46b12623          	sw	a1,1132(sp)

00002218 <inst_303>:

inst_303:
// rs1_val==0 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x2d, x2, 1136, x6)
    2218:	00000513          	li	a0,0
    221c:	fd357593          	andi	a1,a0,-45
    2220:	46b12823          	sw	a1,1136(sp)

00002224 <inst_304>:

inst_304:
// rs1_val==0 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2d, x2, 1140, x6)
    2224:	00000513          	li	a0,0
    2228:	02d57593          	andi	a1,a0,45
    222c:	46b12a23          	sw	a1,1140(sp)

00002230 <inst_305>:

inst_305:
// rs1_val==858993460 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333334, 0x332, x2, 1144, x6)
    2230:	33333537          	lui	a0,0x33333
    2234:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2238:	33257593          	andi	a1,a0,818
    223c:	46b12c23          	sw	a1,1144(sp)

00002240 <inst_306>:

inst_306:
// rs1_val==858993460 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x224, 0x33333334, 0x665, x2, 1148, x6)
    2240:	33333537          	lui	a0,0x33333
    2244:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2248:	66557593          	andi	a1,a0,1637
    224c:	46b12e23          	sw	a1,1148(sp)

00002250 <inst_307>:

inst_307:
// rs1_val==858993460 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x33333334, 0x2c, x2, 1152, x6)
    2250:	33333537          	lui	a0,0x33333
    2254:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2258:	02c57593          	andi	a1,a0,44
    225c:	48b12023          	sw	a1,1152(sp)

00002260 <inst_308>:

inst_308:
// rs1_val==858993460 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x114, 0x33333334, 0x556, x2, 1156, x6)
    2260:	33333537          	lui	a0,0x33333
    2264:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2268:	55657593          	andi	a1,a0,1366
    226c:	48b12223          	sw	a1,1156(sp)

00002270 <inst_309>:

inst_309:
// rs1_val==858993460 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x33333220, 0x33333334, -0x555, x2, 1160, x6)
    2270:	33333537          	lui	a0,0x33333
    2274:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2278:	aab57593          	andi	a1,a0,-1365
    227c:	48b12423          	sw	a1,1160(sp)

00002280 <inst_310>:

inst_310:
// rs1_val==858993460 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x33333334, 0x6, x2, 1164, x6)
    2280:	33333537          	lui	a0,0x33333
    2284:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2288:	00657593          	andi	a1,a0,6
    228c:	48b12623          	sw	a1,1164(sp)

00002290 <inst_311>:

inst_311:
// rs1_val==858993460 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x334, 0x33333334, 0x334, x2, 1168, x6)
    2290:	33333537          	lui	a0,0x33333
    2294:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2298:	33457593          	andi	a1,a0,820
    229c:	48b12823          	sw	a1,1168(sp)

000022a0 <inst_312>:

inst_312:
// rs1_val==858993460 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x224, 0x33333334, 0x667, x2, 1172, x6)
    22a0:	33333537          	lui	a0,0x33333
    22a4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22a8:	66757593          	andi	a1,a0,1639
    22ac:	48b12a23          	sw	a1,1172(sp)

000022b0 <inst_313>:

inst_313:
// rs1_val==858993460 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x33333314, 0x33333334, -0x2c, x2, 1176, x6)
    22b0:	33333537          	lui	a0,0x33333
    22b4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22b8:	fd457593          	andi	a1,a0,-44
    22bc:	48b12c23          	sw	a1,1176(sp)

000022c0 <inst_314>:

inst_314:
// rs1_val==858993460 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x24, 0x33333334, 0x2e, x2, 1180, x6)
    22c0:	33333537          	lui	a0,0x33333
    22c4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22c8:	02e57593          	andi	a1,a0,46
    22cc:	48b12e23          	sw	a1,1180(sp)

000022d0 <inst_315>:

inst_315:
// rs1_val==1717986919 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0x66666667, 0x3, x2, 1184, x6)
    22d0:	66666537          	lui	a0,0x66666
    22d4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    22d8:	00357593          	andi	a1,a0,3
    22dc:	4ab12023          	sw	a1,1184(sp)

000022e0 <inst_316>:

inst_316:
// rs1_val==1717986919 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x445, 0x66666667, 0x555, x2, 1188, x6)
    22e0:	66666537          	lui	a0,0x66666
    22e4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    22e8:	55557593          	andi	a1,a0,1365
    22ec:	4ab12223          	sw	a1,1188(sp)

000022f0 <inst_317>:

inst_317:
// rs1_val==1717986919 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x66666222, 0x66666667, -0x556, x2, 1192, x6)
    22f0:	66666537          	lui	a0,0x66666
    22f4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    22f8:	aaa57593          	andi	a1,a0,-1366
    22fc:	4ab12423          	sw	a1,1192(sp)

00002300 <inst_318>:

inst_318:
// rs1_val==1717986919 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x66666667, 0x5, x2, 1196, x6)
    2300:	66666537          	lui	a0,0x66666
    2304:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2308:	00557593          	andi	a1,a0,5
    230c:	4ab12623          	sw	a1,1196(sp)

00002310 <inst_319>:

inst_319:
// rs1_val==1717986919 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x223, 0x66666667, 0x333, x2, 1200, x6)
    2310:	66666537          	lui	a0,0x66666
    2314:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2318:	33357593          	andi	a1,a0,819
    231c:	4ab12823          	sw	a1,1200(sp)

00002320 <inst_320>:

inst_320:
// rs1_val==1717986919 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x666, 0x66666667, 0x666, x2, 1204, x6)
    2320:	66666537          	lui	a0,0x66666
    2324:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2328:	66657593          	andi	a1,a0,1638
    232c:	4ab12a23          	sw	a1,1204(sp)

00002330 <inst_321>:

inst_321:
// rs1_val==1717986919 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x66666643, 0x66666667, -0x2d, x2, 1208, x6)
    2330:	66666537          	lui	a0,0x66666
    2334:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2338:	fd357593          	andi	a1,a0,-45
    233c:	4ab12c23          	sw	a1,1208(sp)

00002340 <inst_322>:

inst_322:
// rs1_val==1717986919 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x25, 0x66666667, 0x2d, x2, 1212, x6)
    2340:	66666537          	lui	a0,0x66666
    2344:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2348:	02d57593          	andi	a1,a0,45
    234c:	4ab12e23          	sw	a1,1212(sp)

00002350 <inst_323>:

inst_323:
// rs1_val==1717986919 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x66666667, 0x2, x2, 1216, x6)
    2350:	66666537          	lui	a0,0x66666
    2354:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2358:	00257593          	andi	a1,a0,2
    235c:	4cb12023          	sw	a1,1216(sp)

00002360 <inst_324>:

inst_324:
// rs1_val==1717986919 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666667, 0x554, x2, 1220, x6)
    2360:	66666537          	lui	a0,0x66666
    2364:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2368:	55457593          	andi	a1,a0,1364
    236c:	4cb12223          	sw	a1,1220(sp)

00002370 <inst_325>:

inst_325:
// rs1_val==1717986919 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666667, 0x0, x2, 1224, x6)
    2370:	66666537          	lui	a0,0x66666
    2374:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2378:	00057593          	andi	a1,a0,0
    237c:	4cb12423          	sw	a1,1224(sp)

00002380 <inst_326>:

inst_326:
// rs1_val==1717986919 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666667, 0x4, x2, 1228, x6)
    2380:	66666537          	lui	a0,0x66666
    2384:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2388:	00457593          	andi	a1,a0,4
    238c:	4cb12623          	sw	a1,1228(sp)

00002390 <inst_327>:

inst_327:
// rs1_val==1717986919 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, 0x66666667, 0x332, x2, 1232, x6)
    2390:	66666537          	lui	a0,0x66666
    2394:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2398:	33257593          	andi	a1,a0,818
    239c:	4cb12823          	sw	a1,1232(sp)

000023a0 <inst_328>:

inst_328:
// rs1_val==1717986919 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x665, 0x66666667, 0x665, x2, 1236, x6)
    23a0:	66666537          	lui	a0,0x66666
    23a4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23a8:	66557593          	andi	a1,a0,1637
    23ac:	4cb12a23          	sw	a1,1236(sp)

000023b0 <inst_329>:

inst_329:
// rs1_val==1717986919 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666667, 0x2c, x2, 1240, x6)
    23b0:	66666537          	lui	a0,0x66666
    23b4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23b8:	02c57593          	andi	a1,a0,44
    23bc:	4cb12c23          	sw	a1,1240(sp)

000023c0 <inst_330>:

inst_330:
// rs1_val==1717986919 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x446, 0x66666667, 0x556, x2, 1244, x6)
    23c0:	66666537          	lui	a0,0x66666
    23c4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23c8:	55657593          	andi	a1,a0,1366
    23cc:	4cb12e23          	sw	a1,1244(sp)

000023d0 <inst_331>:

inst_331:
// rs1_val==1717986919 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x66666223, 0x66666667, -0x555, x2, 1248, x6)
    23d0:	66666537          	lui	a0,0x66666
    23d4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23d8:	aab57593          	andi	a1,a0,-1365
    23dc:	4eb12023          	sw	a1,1248(sp)

000023e0 <inst_332>:

inst_332:
// rs1_val==1717986919 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x66666667, 0x6, x2, 1252, x6)
    23e0:	66666537          	lui	a0,0x66666
    23e4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23e8:	00657593          	andi	a1,a0,6
    23ec:	4eb12223          	sw	a1,1252(sp)

000023f0 <inst_333>:

inst_333:
// rs1_val==1717986919 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x66666667, 0x334, x2, 1256, x6)
    23f0:	66666537          	lui	a0,0x66666
    23f4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23f8:	33457593          	andi	a1,a0,820
    23fc:	4eb12423          	sw	a1,1256(sp)

00002400 <inst_334>:

inst_334:
// rs1_val==1717986919 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x667, 0x66666667, 0x667, x2, 1260, x6)
    2400:	66666537          	lui	a0,0x66666
    2404:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2408:	66757593          	andi	a1,a0,1639
    240c:	4eb12623          	sw	a1,1260(sp)

00002410 <inst_335>:

inst_335:
// rs1_val==1717986919 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x66666644, 0x66666667, -0x2c, x2, 1264, x6)
    2410:	66666537          	lui	a0,0x66666
    2414:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2418:	fd457593          	andi	a1,a0,-44
    241c:	4eb12823          	sw	a1,1264(sp)

00002420 <inst_336>:

inst_336:
// rs1_val==1717986919 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x26, 0x66666667, 0x2e, x2, 1268, x6)
    2420:	66666537          	lui	a0,0x66666
    2424:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2428:	02e57593          	andi	a1,a0,46
    242c:	4eb12a23          	sw	a1,1268(sp)

00002430 <inst_337>:

inst_337:
// rs1_val==-46339 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, -0xb503, 0x3, x2, 1272, x6)
    2430:	ffff5537          	lui	a0,0xffff5
    2434:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2438:	00357593          	andi	a1,a0,3
    243c:	4eb12c23          	sw	a1,1272(sp)

00002440 <inst_338>:

inst_338:
// rs1_val==-46339 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x55, -0xb503, 0x555, x2, 1276, x6)
    2440:	ffff5537          	lui	a0,0xffff5
    2444:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2448:	55557593          	andi	a1,a0,1365
    244c:	4eb12e23          	sw	a1,1276(sp)

00002450 <inst_339>:

inst_339:
// rs1_val==-46339 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xffff4aa8, -0xb503, -0x556, x2, 1280, x6)
    2450:	ffff5537          	lui	a0,0xffff5
    2454:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2458:	aaa57593          	andi	a1,a0,-1366
    245c:	50b12023          	sw	a1,1280(sp)

00002460 <inst_340>:

inst_340:
// rs1_val==-46339 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, -0xb503, 0x5, x2, 1284, x6)
    2460:	ffff5537          	lui	a0,0xffff5
    2464:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2468:	00557593          	andi	a1,a0,5
    246c:	50b12223          	sw	a1,1284(sp)

00002470 <inst_341>:

inst_341:
// rs1_val==-46339 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x231, -0xb503, 0x333, x2, 1288, x6)
    2470:	ffff5537          	lui	a0,0xffff5
    2474:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2478:	33357593          	andi	a1,a0,819
    247c:	50b12423          	sw	a1,1288(sp)

00002480 <inst_342>:

inst_342:
// rs1_val==-46339 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x264, -0xb503, 0x666, x2, 1292, x6)
    2480:	ffff5537          	lui	a0,0xffff5
    2484:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2488:	66657593          	andi	a1,a0,1638
    248c:	50b12623          	sw	a1,1292(sp)

00002490 <inst_343>:

inst_343:
// rs1_val==-46339 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xffff4ad1, -0xb503, -0x2d, x2, 1296, x6)
    2490:	ffff5537          	lui	a0,0xffff5
    2494:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2498:	fd357593          	andi	a1,a0,-45
    249c:	50b12823          	sw	a1,1296(sp)

000024a0 <inst_344>:

inst_344:
// rs1_val==-46339 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x2d, -0xb503, 0x2d, x2, 1300, x6)
    24a0:	ffff5537          	lui	a0,0xffff5
    24a4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24a8:	02d57593          	andi	a1,a0,45
    24ac:	50b12a23          	sw	a1,1300(sp)

000024b0 <inst_345>:

inst_345:
// rs1_val==-46339 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb503, 0x2, x2, 1304, x6)
    24b0:	ffff5537          	lui	a0,0xffff5
    24b4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24b8:	00257593          	andi	a1,a0,2
    24bc:	50b12c23          	sw	a1,1304(sp)

000024c0 <inst_346>:

inst_346:
// rs1_val==-46339 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb503, 0x554, x2, 1308, x6)
    24c0:	ffff5537          	lui	a0,0xffff5
    24c4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24c8:	55457593          	andi	a1,a0,1364
    24cc:	50b12e23          	sw	a1,1308(sp)

000024d0 <inst_347>:

inst_347:
// rs1_val==-46339 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0xb503, 0x0, x2, 1312, x6)
    24d0:	ffff5537          	lui	a0,0xffff5
    24d4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24d8:	00057593          	andi	a1,a0,0
    24dc:	52b12023          	sw	a1,1312(sp)

000024e0 <inst_348>:

inst_348:
// rs1_val==-46339 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb503, 0x4, x2, 1316, x6)
    24e0:	ffff5537          	lui	a0,0xffff5
    24e4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24e8:	00457593          	andi	a1,a0,4
    24ec:	52b12223          	sw	a1,1316(sp)

000024f0 <inst_349>:

inst_349:
// rs1_val==-46339 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x230, -0xb503, 0x332, x2, 1320, x6)
    24f0:	ffff5537          	lui	a0,0xffff5
    24f4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24f8:	33257593          	andi	a1,a0,818
    24fc:	52b12423          	sw	a1,1320(sp)

00002500 <inst_350>:

inst_350:
// rs1_val==-46339 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x265, -0xb503, 0x665, x2, 1324, x6)
    2500:	ffff5537          	lui	a0,0xffff5
    2504:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2508:	66557593          	andi	a1,a0,1637
    250c:	52b12623          	sw	a1,1324(sp)

00002510 <inst_351>:

inst_351:
// rs1_val==-46339 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb503, 0x2c, x2, 1328, x6)
    2510:	ffff5537          	lui	a0,0xffff5
    2514:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2518:	02c57593          	andi	a1,a0,44
    251c:	52b12823          	sw	a1,1328(sp)

00002520 <inst_352>:

inst_352:
// rs1_val==-46339 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x54, -0xb503, 0x556, x2, 1332, x6)
    2520:	ffff5537          	lui	a0,0xffff5
    2524:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2528:	55657593          	andi	a1,a0,1366
    252c:	52b12a23          	sw	a1,1332(sp)

00002530 <inst_353>:

inst_353:
// rs1_val==-46339 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xffff4aa9, -0xb503, -0x555, x2, 1336, x6)
    2530:	ffff5537          	lui	a0,0xffff5
    2534:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2538:	aab57593          	andi	a1,a0,-1365
    253c:	52b12c23          	sw	a1,1336(sp)

00002540 <inst_354>:

inst_354:
// rs1_val==-46339 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, -0xb503, 0x6, x2, 1340, x6)
    2540:	ffff5537          	lui	a0,0xffff5
    2544:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2548:	00657593          	andi	a1,a0,6
    254c:	52b12e23          	sw	a1,1340(sp)

00002550 <inst_355>:

inst_355:
// rs1_val==-46339 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x234, -0xb503, 0x334, x2, 1344, x6)
    2550:	ffff5537          	lui	a0,0xffff5
    2554:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2558:	33457593          	andi	a1,a0,820
    255c:	54b12023          	sw	a1,1344(sp)

00002560 <inst_356>:

inst_356:
// rs1_val==-46339 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x265, -0xb503, 0x667, x2, 1348, x6)
    2560:	ffff5537          	lui	a0,0xffff5
    2564:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2568:	66757593          	andi	a1,a0,1639
    256c:	54b12223          	sw	a1,1348(sp)

00002570 <inst_357>:

inst_357:
// rs1_val==-46339 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xffff4ad4, -0xb503, -0x2c, x2, 1352, x6)
    2570:	ffff5537          	lui	a0,0xffff5
    2574:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2578:	fd457593          	andi	a1,a0,-44
    257c:	54b12423          	sw	a1,1352(sp)

00002580 <inst_358>:

inst_358:
// rs1_val==-46339 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2c, -0xb503, 0x2e, x2, 1356, x6)
    2580:	ffff5537          	lui	a0,0xffff5
    2584:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2588:	02e57593          	andi	a1,a0,46
    258c:	54b12623          	sw	a1,1356(sp)

00002590 <inst_359>:

inst_359:
// rs1_val==46341 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0xb505, 0x3, x2, 1360, x6)
    2590:	0000b537          	lui	a0,0xb
    2594:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2598:	00357593          	andi	a1,a0,3
    259c:	54b12823          	sw	a1,1360(sp)

000025a0 <inst_360>:

inst_360:
// rs1_val==46341 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x505, 0xb505, 0x555, x2, 1364, x6)
    25a0:	0000b537          	lui	a0,0xb
    25a4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25a8:	55557593          	andi	a1,a0,1365
    25ac:	54b12a23          	sw	a1,1364(sp)

000025b0 <inst_361>:

inst_361:
// rs1_val==46341 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb000, 0xb505, -0x556, x2, 1368, x6)
    25b0:	0000b537          	lui	a0,0xb
    25b4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25b8:	aaa57593          	andi	a1,a0,-1366
    25bc:	54b12c23          	sw	a1,1368(sp)

000025c0 <inst_362>:

inst_362:
// rs1_val==46341 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0xb505, 0x5, x2, 1372, x6)
    25c0:	0000b537          	lui	a0,0xb
    25c4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25c8:	00557593          	andi	a1,a0,5
    25cc:	54b12e23          	sw	a1,1372(sp)

000025d0 <inst_363>:

inst_363:
// rs1_val==46341 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x101, 0xb505, 0x333, x2, 1376, x6)
    25d0:	0000b537          	lui	a0,0xb
    25d4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25d8:	33357593          	andi	a1,a0,819
    25dc:	56b12023          	sw	a1,1376(sp)

000025e0 <inst_364>:

inst_364:
// rs1_val==46341 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x404, 0xb505, 0x666, x2, 1380, x6)
    25e0:	0000b537          	lui	a0,0xb
    25e4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25e8:	66657593          	andi	a1,a0,1638
    25ec:	56b12223          	sw	a1,1380(sp)

000025f0 <inst_365>:

inst_365:
// rs1_val==46341 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb501, 0xb505, -0x2d, x2, 1384, x6)
    25f0:	0000b537          	lui	a0,0xb
    25f4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25f8:	fd357593          	andi	a1,a0,-45
    25fc:	56b12423          	sw	a1,1384(sp)

00002600 <inst_366>:

inst_366:
// rs1_val==46341 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x5, 0xb505, 0x2d, x2, 1388, x6)
    2600:	0000b537          	lui	a0,0xb
    2604:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2608:	02d57593          	andi	a1,a0,45
    260c:	56b12623          	sw	a1,1388(sp)

00002610 <inst_367>:

inst_367:
// rs1_val==46341 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb505, 0x2, x2, 1392, x6)
    2610:	0000b537          	lui	a0,0xb
    2614:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2618:	00257593          	andi	a1,a0,2
    261c:	56b12823          	sw	a1,1392(sp)

00002620 <inst_368>:

inst_368:
// rs1_val==46341 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb505, 0x554, x2, 1396, x6)
    2620:	0000b537          	lui	a0,0xb
    2624:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2628:	55457593          	andi	a1,a0,1364
    262c:	56b12a23          	sw	a1,1396(sp)

00002630 <inst_369>:

inst_369:
// rs1_val==46341 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb505, 0x0, x2, 1400, x6)
    2630:	0000b537          	lui	a0,0xb
    2634:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2638:	00057593          	andi	a1,a0,0
    263c:	56b12c23          	sw	a1,1400(sp)

00002640 <inst_370>:

inst_370:
// rs1_val==46341 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x4, x2, 1404, x6)
    2640:	0000b537          	lui	a0,0xb
    2644:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2648:	00457593          	andi	a1,a0,4
    264c:	56b12e23          	sw	a1,1404(sp)

00002650 <inst_371>:

inst_371:
// rs1_val==46341 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb505, 0x332, x2, 1408, x6)
    2650:	0000b537          	lui	a0,0xb
    2654:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2658:	33257593          	andi	a1,a0,818
    265c:	58b12023          	sw	a1,1408(sp)

00002660 <inst_372>:

inst_372:
// rs1_val==46341 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x405, 0xb505, 0x665, x2, 1412, x6)
    2660:	0000b537          	lui	a0,0xb
    2664:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2668:	66557593          	andi	a1,a0,1637
    266c:	58b12223          	sw	a1,1412(sp)

00002670 <inst_373>:

inst_373:
// rs1_val==46341 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x2c, x2, 1416, x6)
    2670:	0000b537          	lui	a0,0xb
    2674:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2678:	02c57593          	andi	a1,a0,44
    267c:	58b12423          	sw	a1,1416(sp)

00002680 <inst_374>:

inst_374:
// rs1_val==46341 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x504, 0xb505, 0x556, x2, 1420, x6)
    2680:	0000b537          	lui	a0,0xb
    2684:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2688:	55657593          	andi	a1,a0,1366
    268c:	58b12623          	sw	a1,1420(sp)

00002690 <inst_375>:

inst_375:
// rs1_val==46341 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb001, 0xb505, -0x555, x2, 1424, x6)
    2690:	0000b537          	lui	a0,0xb
    2694:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2698:	aab57593          	andi	a1,a0,-1365
    269c:	58b12823          	sw	a1,1424(sp)

000026a0 <inst_376>:

inst_376:
// rs1_val==46341 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x6, x2, 1428, x6)
    26a0:	0000b537          	lui	a0,0xb
    26a4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26a8:	00657593          	andi	a1,a0,6
    26ac:	58b12a23          	sw	a1,1428(sp)

000026b0 <inst_377>:

inst_377:
// rs1_val==46341 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x104, 0xb505, 0x334, x2, 1432, x6)
    26b0:	0000b537          	lui	a0,0xb
    26b4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26b8:	33457593          	andi	a1,a0,820
    26bc:	58b12c23          	sw	a1,1432(sp)

000026c0 <inst_378>:

inst_378:
// rs1_val==46341 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x405, 0xb505, 0x667, x2, 1436, x6)
    26c0:	0000b537          	lui	a0,0xb
    26c4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26c8:	66757593          	andi	a1,a0,1639
    26cc:	58b12e23          	sw	a1,1436(sp)

000026d0 <inst_379>:

inst_379:
// rs1_val==46341 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb504, 0xb505, -0x2c, x2, 1440, x6)
    26d0:	0000b537          	lui	a0,0xb
    26d4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26d8:	fd457593          	andi	a1,a0,-44
    26dc:	5ab12023          	sw	a1,1440(sp)

000026e0 <inst_380>:

inst_380:
// rs1_val==46341 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0xb505, 0x2e, x2, 1444, x6)
    26e0:	0000b537          	lui	a0,0xb
    26e4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26e8:	02e57593          	andi	a1,a0,46
    26ec:	5ab12223          	sw	a1,1444(sp)

000026f0 <inst_381>:

inst_381:
// rs1_val==0 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2, x2, 1448, x6)
    26f0:	00000513          	li	a0,0
    26f4:	00257593          	andi	a1,a0,2
    26f8:	5ab12423          	sw	a1,1448(sp)

000026fc <inst_382>:

inst_382:
// rs1_val==0 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x554, x2, 1452, x6)
    26fc:	00000513          	li	a0,0
    2700:	55457593          	andi	a1,a0,1364
    2704:	5ab12623          	sw	a1,1452(sp)

00002708 <inst_383>:

inst_383:
// rs1_val==0 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x0, x2, 1456, x6)
    2708:	00000513          	li	a0,0
    270c:	00057593          	andi	a1,a0,0
    2710:	5ab12823          	sw	a1,1456(sp)

00002714 <inst_384>:

inst_384:
// rs1_val==0 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x4, x2, 1460, x6)
    2714:	00000513          	li	a0,0
    2718:	00457593          	andi	a1,a0,4
    271c:	5ab12a23          	sw	a1,1460(sp)

00002720 <inst_385>:

inst_385:
// rs1_val==0 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x332, x2, 1464, x6)
    2720:	00000513          	li	a0,0
    2724:	33257593          	andi	a1,a0,818
    2728:	5ab12c23          	sw	a1,1464(sp)

0000272c <inst_386>:

inst_386:
// rs1_val==0 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x665, x2, 1468, x6)
    272c:	00000513          	li	a0,0
    2730:	66557593          	andi	a1,a0,1637
    2734:	5ab12e23          	sw	a1,1468(sp)

00002738 <inst_387>:

inst_387:
// rs1_val==0 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2c, x2, 1472, x6)
    2738:	00000513          	li	a0,0
    273c:	02c57593          	andi	a1,a0,44
    2740:	5cb12023          	sw	a1,1472(sp)

00002744 <inst_388>:

inst_388:
// rs1_val==0 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x556, x2, 1476, x6)
    2744:	00000513          	li	a0,0
    2748:	55657593          	andi	a1,a0,1366
    274c:	5cb12223          	sw	a1,1476(sp)

00002750 <inst_389>:

inst_389:
// rs1_val==0 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x555, x2, 1480, x6)
    2750:	00000513          	li	a0,0
    2754:	aab57593          	andi	a1,a0,-1365
    2758:	5cb12423          	sw	a1,1480(sp)

0000275c <inst_390>:

inst_390:
// rs1_val==0 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x6, x2, 1484, x6)
    275c:	00000513          	li	a0,0
    2760:	00657593          	andi	a1,a0,6
    2764:	5cb12623          	sw	a1,1484(sp)

00002768 <inst_391>:

inst_391:
// rs1_val==0 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x334, x2, 1488, x6)
    2768:	00000513          	li	a0,0
    276c:	33457593          	andi	a1,a0,820
    2770:	5cb12823          	sw	a1,1488(sp)

00002774 <inst_392>:

inst_392:
// rs1_val==0 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x667, x2, 1492, x6)
    2774:	00000513          	li	a0,0
    2778:	66757593          	andi	a1,a0,1639
    277c:	5cb12a23          	sw	a1,1492(sp)

00002780 <inst_393>:

inst_393:
// rs1_val==0 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, -0x2c, x2, 1496, x6)
    2780:	00000513          	li	a0,0
    2784:	fd457593          	andi	a1,a0,-44
    2788:	5cb12c23          	sw	a1,1496(sp)

0000278c <inst_394>:

inst_394:
// rs1_val==0 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x0;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x0, 0x0, 0x2e, x2, 1500, x6)
    278c:	00000513          	li	a0,0
    2790:	02e57593          	andi	a1,a0,46
    2794:	5cb12e23          	sw	a1,1500(sp)

00002798 <inst_395>:

inst_395:
// rs1_val==4 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x3, x2, 1504, x6)
    2798:	00400513          	li	a0,4
    279c:	00357593          	andi	a1,a0,3
    27a0:	5eb12023          	sw	a1,1504(sp)

000027a4 <inst_396>:

inst_396:
// rs1_val==4 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x555, x2, 1508, x6)
    27a4:	00400513          	li	a0,4
    27a8:	55557593          	andi	a1,a0,1365
    27ac:	5eb12223          	sw	a1,1508(sp)

000027b0 <inst_397>:

inst_397:
// rs1_val==4 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x556, x2, 1512, x6)
    27b0:	00400513          	li	a0,4
    27b4:	aaa57593          	andi	a1,a0,-1366
    27b8:	5eb12423          	sw	a1,1512(sp)

000027bc <inst_398>:

inst_398:
// rs1_val==4 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x5, x2, 1516, x6)
    27bc:	00400513          	li	a0,4
    27c0:	00557593          	andi	a1,a0,5
    27c4:	5eb12623          	sw	a1,1516(sp)

000027c8 <inst_399>:

inst_399:
// rs1_val==4 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x333, x2, 1520, x6)
    27c8:	00400513          	li	a0,4
    27cc:	33357593          	andi	a1,a0,819
    27d0:	5eb12823          	sw	a1,1520(sp)

000027d4 <inst_400>:

inst_400:
// rs1_val==4 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x666, x2, 1524, x6)
    27d4:	00400513          	li	a0,4
    27d8:	66657593          	andi	a1,a0,1638
    27dc:	5eb12a23          	sw	a1,1524(sp)

000027e0 <inst_401>:

inst_401:
// rs1_val==4 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x2d, x2, 1528, x6)
    27e0:	00400513          	li	a0,4
    27e4:	fd357593          	andi	a1,a0,-45
    27e8:	5eb12c23          	sw	a1,1528(sp)

000027ec <inst_402>:

inst_402:
// rs1_val==4 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2d, x2, 1532, x6)
    27ec:	00400513          	li	a0,4
    27f0:	02d57593          	andi	a1,a0,45
    27f4:	5eb12e23          	sw	a1,1532(sp)

000027f8 <inst_403>:

inst_403:
// rs1_val==4 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x2, x2, 1536, x6)
    27f8:	00400513          	li	a0,4
    27fc:	00257593          	andi	a1,a0,2
    2800:	60b12023          	sw	a1,1536(sp)

00002804 <inst_404>:

inst_404:
// rs1_val==4 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x554, x2, 1540, x6)
    2804:	00400513          	li	a0,4
    2808:	55457593          	andi	a1,a0,1364
    280c:	60b12223          	sw	a1,1540(sp)

00002810 <inst_405>:

inst_405:
// rs1_val==4 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x0, x2, 1544, x6)
    2810:	00400513          	li	a0,4
    2814:	00057593          	andi	a1,a0,0
    2818:	60b12423          	sw	a1,1544(sp)

0000281c <inst_406>:

inst_406:
// rs1_val==4 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x4, x2, 1548, x6)
    281c:	00400513          	li	a0,4
    2820:	00457593          	andi	a1,a0,4
    2824:	60b12623          	sw	a1,1548(sp)

00002828 <inst_407>:

inst_407:
// rs1_val==4 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, 0x332, x2, 1552, x6)
    2828:	00400513          	li	a0,4
    282c:	33257593          	andi	a1,a0,818
    2830:	60b12823          	sw	a1,1552(sp)

00002834 <inst_408>:

inst_408:
// rs1_val==4 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x665, x2, 1556, x6)
    2834:	00400513          	li	a0,4
    2838:	66557593          	andi	a1,a0,1637
    283c:	60b12a23          	sw	a1,1556(sp)

00002840 <inst_409>:

inst_409:
// rs1_val==4 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2c, x2, 1560, x6)
    2840:	00400513          	li	a0,4
    2844:	02c57593          	andi	a1,a0,44
    2848:	60b12c23          	sw	a1,1560(sp)

0000284c <inst_410>:

inst_410:
// rs1_val==4 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x556, x2, 1564, x6)
    284c:	00400513          	li	a0,4
    2850:	55657593          	andi	a1,a0,1366
    2854:	60b12e23          	sw	a1,1564(sp)

00002858 <inst_411>:

inst_411:
// rs1_val==4 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x0, 0x4, -0x555, x2, 1568, x6)
    2858:	00400513          	li	a0,4
    285c:	aab57593          	andi	a1,a0,-1365
    2860:	62b12023          	sw	a1,1568(sp)

00002864 <inst_412>:

inst_412:
// rs1_val==4 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x6, x2, 1572, x6)
    2864:	00400513          	li	a0,4
    2868:	00657593          	andi	a1,a0,6
    286c:	62b12223          	sw	a1,1572(sp)

00002870 <inst_413>:

inst_413:
// rs1_val==4 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x334, x2, 1576, x6)
    2870:	00400513          	li	a0,4
    2874:	33457593          	andi	a1,a0,820
    2878:	62b12423          	sw	a1,1576(sp)

0000287c <inst_414>:

inst_414:
// rs1_val==4 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, -0x2c, x2, 1580, x6)
    287c:	00400513          	li	a0,4
    2880:	fd457593          	andi	a1,a0,-44
    2884:	62b12623          	sw	a1,1580(sp)

00002888 <inst_415>:

inst_415:
// rs1_val==4 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x4;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x4, 0x4, 0x2e, x2, 1584, x6)
    2888:	00400513          	li	a0,4
    288c:	02e57593          	andi	a1,a0,46
    2890:	62b12823          	sw	a1,1584(sp)

00002894 <inst_416>:

inst_416:
// rs1_val==858993458 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333332, 0x3, x2, 1588, x6)
    2894:	33333537          	lui	a0,0x33333
    2898:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    289c:	00357593          	andi	a1,a0,3
    28a0:	62b12a23          	sw	a1,1588(sp)

000028a4 <inst_417>:

inst_417:
// rs1_val==858993458 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x110, 0x33333332, 0x555, x2, 1592, x6)
    28a4:	33333537          	lui	a0,0x33333
    28a8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28ac:	55557593          	andi	a1,a0,1365
    28b0:	62b12c23          	sw	a1,1592(sp)

000028b4 <inst_418>:

inst_418:
// rs1_val==858993458 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x33333222, 0x33333332, -0x556, x2, 1596, x6)
    28b4:	33333537          	lui	a0,0x33333
    28b8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28bc:	aaa57593          	andi	a1,a0,-1366
    28c0:	62b12e23          	sw	a1,1596(sp)

000028c4 <inst_419>:

inst_419:
// rs1_val==858993458 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333332, 0x5, x2, 1600, x6)
    28c4:	33333537          	lui	a0,0x33333
    28c8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28cc:	00557593          	andi	a1,a0,5
    28d0:	64b12023          	sw	a1,1600(sp)

000028d4 <inst_420>:

inst_420:
// rs1_val==858993458 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x332, 0x33333332, 0x333, x2, 1604, x6)
    28d4:	33333537          	lui	a0,0x33333
    28d8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28dc:	33357593          	andi	a1,a0,819
    28e0:	64b12223          	sw	a1,1604(sp)

000028e4 <inst_421>:

inst_421:
// rs1_val==858993458 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, 0x33333332, 0x666, x2, 1608, x6)
    28e4:	33333537          	lui	a0,0x33333
    28e8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28ec:	66657593          	andi	a1,a0,1638
    28f0:	64b12423          	sw	a1,1608(sp)

000028f4 <inst_422>:

inst_422:
// rs1_val==858993458 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x33333312, 0x33333332, -0x2d, x2, 1612, x6)
    28f4:	33333537          	lui	a0,0x33333
    28f8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28fc:	fd357593          	andi	a1,a0,-45
    2900:	64b12623          	sw	a1,1612(sp)

00002904 <inst_423>:

inst_423:
// rs1_val==858993458 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x20, 0x33333332, 0x2d, x2, 1616, x6)
    2904:	33333537          	lui	a0,0x33333
    2908:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    290c:	02d57593          	andi	a1,a0,45
    2910:	64b12823          	sw	a1,1616(sp)

00002914 <inst_424>:

inst_424:
// rs1_val==858993458 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333332, 0x2, x2, 1620, x6)
    2914:	33333537          	lui	a0,0x33333
    2918:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    291c:	00257593          	andi	a1,a0,2
    2920:	64b12a23          	sw	a1,1620(sp)

00002924 <inst_425>:

inst_425:
// rs1_val==858993458 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x110, 0x33333332, 0x554, x2, 1624, x6)
    2924:	33333537          	lui	a0,0x33333
    2928:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    292c:	55457593          	andi	a1,a0,1364
    2930:	64b12c23          	sw	a1,1624(sp)

00002934 <inst_426>:

inst_426:
// rs1_val==858993458 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333332, 0x0, x2, 1628, x6)
    2934:	33333537          	lui	a0,0x33333
    2938:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    293c:	00057593          	andi	a1,a0,0
    2940:	64b12e23          	sw	a1,1628(sp)

00002944 <inst_427>:

inst_427:
// rs1_val==858993458 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333332, 0x4, x2, 1632, x6)
    2944:	33333537          	lui	a0,0x33333
    2948:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    294c:	00457593          	andi	a1,a0,4
    2950:	66b12023          	sw	a1,1632(sp)

00002954 <inst_428>:

inst_428:
// rs1_val==858993458 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x332, 0x33333332, 0x332, x2, 1636, x6)
    2954:	33333537          	lui	a0,0x33333
    2958:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    295c:	33257593          	andi	a1,a0,818
    2960:	66b12223          	sw	a1,1636(sp)

00002964 <inst_429>:

inst_429:
// rs1_val==858993458 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x220, 0x33333332, 0x665, x2, 1640, x6)
    2964:	33333537          	lui	a0,0x33333
    2968:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    296c:	66557593          	andi	a1,a0,1637
    2970:	66b12423          	sw	a1,1640(sp)

00002974 <inst_430>:

inst_430:
// rs1_val==858993458 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x20, 0x33333332, 0x2c, x2, 1644, x6)
    2974:	33333537          	lui	a0,0x33333
    2978:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    297c:	02c57593          	andi	a1,a0,44
    2980:	66b12623          	sw	a1,1644(sp)

00002984 <inst_431>:

inst_431:
// rs1_val==858993458 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x112, 0x33333332, 0x556, x2, 1648, x6)
    2984:	33333537          	lui	a0,0x33333
    2988:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    298c:	55657593          	andi	a1,a0,1366
    2990:	66b12823          	sw	a1,1648(sp)

00002994 <inst_432>:

inst_432:
// rs1_val==858993458 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x33333222, 0x33333332, -0x555, x2, 1652, x6)
    2994:	33333537          	lui	a0,0x33333
    2998:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    299c:	aab57593          	andi	a1,a0,-1365
    29a0:	66b12a23          	sw	a1,1652(sp)

000029a4 <inst_433>:

inst_433:
// rs1_val==858993458 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0x33333332, 0x6, x2, 1656, x6)
    29a4:	33333537          	lui	a0,0x33333
    29a8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29ac:	00657593          	andi	a1,a0,6
    29b0:	66b12c23          	sw	a1,1656(sp)

000029b4 <inst_434>:

inst_434:
// rs1_val==858993458 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333332, 0x334, x2, 1660, x6)
    29b4:	33333537          	lui	a0,0x33333
    29b8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29bc:	33457593          	andi	a1,a0,820
    29c0:	66b12e23          	sw	a1,1660(sp)

000029c4 <inst_435>:

inst_435:
// rs1_val==858993458 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x222, 0x33333332, 0x667, x2, 1664, x6)
    29c4:	33333537          	lui	a0,0x33333
    29c8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29cc:	66757593          	andi	a1,a0,1639
    29d0:	68b12023          	sw	a1,1664(sp)

000029d4 <inst_436>:

inst_436:
// rs1_val==858993458 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x33333310, 0x33333332, -0x2c, x2, 1668, x6)
    29d4:	33333537          	lui	a0,0x33333
    29d8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29dc:	fd457593          	andi	a1,a0,-44
    29e0:	68b12223          	sw	a1,1668(sp)

000029e4 <inst_437>:

inst_437:
// rs1_val==858993458 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x22, 0x33333332, 0x2e, x2, 1672, x6)
    29e4:	33333537          	lui	a0,0x33333
    29e8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29ec:	02e57593          	andi	a1,a0,46
    29f0:	68b12423          	sw	a1,1672(sp)

000029f4 <inst_438>:

inst_438:
// rs1_val==1717986917 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x1, 0x66666665, 0x3, x2, 1676, x6)
    29f4:	66666537          	lui	a0,0x66666
    29f8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    29fc:	00357593          	andi	a1,a0,3
    2a00:	68b12623          	sw	a1,1676(sp)

00002a04 <inst_439>:

inst_439:
// rs1_val==1717986917 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x445, 0x66666665, 0x555, x2, 1680, x6)
    2a04:	66666537          	lui	a0,0x66666
    2a08:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a0c:	55557593          	andi	a1,a0,1365
    2a10:	68b12823          	sw	a1,1680(sp)

00002a14 <inst_440>:

inst_440:
// rs1_val==1717986917 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x66666220, 0x66666665, -0x556, x2, 1684, x6)
    2a14:	66666537          	lui	a0,0x66666
    2a18:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a1c:	aaa57593          	andi	a1,a0,-1366
    2a20:	68b12a23          	sw	a1,1684(sp)

00002a24 <inst_441>:

inst_441:
// rs1_val==1717986917 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x5, 0x66666665, 0x5, x2, 1688, x6)
    2a24:	66666537          	lui	a0,0x66666
    2a28:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a2c:	00557593          	andi	a1,a0,5
    2a30:	68b12c23          	sw	a1,1688(sp)

00002a34 <inst_442>:

inst_442:
// rs1_val==1717986917 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x221, 0x66666665, 0x333, x2, 1692, x6)
    2a34:	66666537          	lui	a0,0x66666
    2a38:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a3c:	33357593          	andi	a1,a0,819
    2a40:	68b12e23          	sw	a1,1692(sp)

00002a44 <inst_443>:

inst_443:
// rs1_val==1717986917 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x664, 0x66666665, 0x666, x2, 1696, x6)
    2a44:	66666537          	lui	a0,0x66666
    2a48:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a4c:	66657593          	andi	a1,a0,1638
    2a50:	6ab12023          	sw	a1,1696(sp)

00002a54 <inst_444>:

inst_444:
// rs1_val==1717986917 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x66666641, 0x66666665, -0x2d, x2, 1700, x6)
    2a54:	66666537          	lui	a0,0x66666
    2a58:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a5c:	fd357593          	andi	a1,a0,-45
    2a60:	6ab12223          	sw	a1,1700(sp)

00002a64 <inst_445>:

inst_445:
// rs1_val==1717986917 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x25, 0x66666665, 0x2d, x2, 1704, x6)
    2a64:	66666537          	lui	a0,0x66666
    2a68:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a6c:	02d57593          	andi	a1,a0,45
    2a70:	6ab12423          	sw	a1,1704(sp)

00002a74 <inst_446>:

inst_446:
// rs1_val==1717986917 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666665, 0x2, x2, 1708, x6)
    2a74:	66666537          	lui	a0,0x66666
    2a78:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a7c:	00257593          	andi	a1,a0,2
    2a80:	6ab12623          	sw	a1,1708(sp)

00002a84 <inst_447>:

inst_447:
// rs1_val==1717986917 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666665, 0x554, x2, 1712, x6)
    2a84:	66666537          	lui	a0,0x66666
    2a88:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a8c:	55457593          	andi	a1,a0,1364
    2a90:	6ab12823          	sw	a1,1712(sp)

00002a94 <inst_448>:

inst_448:
// rs1_val==1717986917 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x66666665, 0x0, x2, 1716, x6)
    2a94:	66666537          	lui	a0,0x66666
    2a98:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a9c:	00057593          	andi	a1,a0,0
    2aa0:	6ab12a23          	sw	a1,1716(sp)

00002aa4 <inst_449>:

inst_449:
// rs1_val==1717986917 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666665, 0x4, x2, 1720, x6)
    2aa4:	66666537          	lui	a0,0x66666
    2aa8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2aac:	00457593          	andi	a1,a0,4
    2ab0:	6ab12c23          	sw	a1,1720(sp)

00002ab4 <inst_450>:

inst_450:
// rs1_val==1717986917 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x220, 0x66666665, 0x332, x2, 1724, x6)
    2ab4:	66666537          	lui	a0,0x66666
    2ab8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2abc:	33257593          	andi	a1,a0,818
    2ac0:	6ab12e23          	sw	a1,1724(sp)

00002ac4 <inst_451>:

inst_451:
// rs1_val==1717986917 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x665, 0x66666665, 0x665, x2, 1728, x6)
    2ac4:	66666537          	lui	a0,0x66666
    2ac8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2acc:	66557593          	andi	a1,a0,1637
    2ad0:	6cb12023          	sw	a1,1728(sp)

00002ad4 <inst_452>:

inst_452:
// rs1_val==1717986917 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666665, 0x2c, x2, 1732, x6)
    2ad4:	66666537          	lui	a0,0x66666
    2ad8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2adc:	02c57593          	andi	a1,a0,44
    2ae0:	6cb12223          	sw	a1,1732(sp)

00002ae4 <inst_453>:

inst_453:
// rs1_val==1717986917 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x444, 0x66666665, 0x556, x2, 1736, x6)
    2ae4:	66666537          	lui	a0,0x66666
    2ae8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2aec:	55657593          	andi	a1,a0,1366
    2af0:	6cb12423          	sw	a1,1736(sp)

00002af4 <inst_454>:

inst_454:
// rs1_val==1717986917 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x66666221, 0x66666665, -0x555, x2, 1740, x6)
    2af4:	66666537          	lui	a0,0x66666
    2af8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2afc:	aab57593          	andi	a1,a0,-1365
    2b00:	6cb12623          	sw	a1,1740(sp)

00002b04 <inst_455>:

inst_455:
// rs1_val==1717986917 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x4, 0x66666665, 0x6, x2, 1744, x6)
    2b04:	66666537          	lui	a0,0x66666
    2b08:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b0c:	00657593          	andi	a1,a0,6
    2b10:	6cb12823          	sw	a1,1744(sp)

00002b14 <inst_456>:

inst_456:
// rs1_val==1717986917 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x224, 0x66666665, 0x334, x2, 1748, x6)
    2b14:	66666537          	lui	a0,0x66666
    2b18:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b1c:	33457593          	andi	a1,a0,820
    2b20:	6cb12a23          	sw	a1,1748(sp)

00002b24 <inst_457>:

inst_457:
// rs1_val==1717986917 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x665, 0x66666665, 0x667, x2, 1752, x6)
    2b24:	66666537          	lui	a0,0x66666
    2b28:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b2c:	66757593          	andi	a1,a0,1639
    2b30:	6cb12c23          	sw	a1,1752(sp)

00002b34 <inst_458>:

inst_458:
// rs1_val==1717986917 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x66666644, 0x66666665, -0x2c, x2, 1756, x6)
    2b34:	66666537          	lui	a0,0x66666
    2b38:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b3c:	fd457593          	andi	a1,a0,-44
    2b40:	6cb12e23          	sw	a1,1756(sp)

00002b44 <inst_459>:

inst_459:
// rs1_val==1717986917 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x24, 0x66666665, 0x2e, x2, 1760, x6)
    2b44:	66666537          	lui	a0,0x66666
    2b48:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b4c:	02e57593          	andi	a1,a0,46
    2b50:	6eb12023          	sw	a1,1760(sp)

00002b54 <inst_460>:

inst_460:
// rs1_val==46339 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, 0xb503, 0x3, x2, 1764, x6)
    2b54:	0000b537          	lui	a0,0xb
    2b58:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b5c:	00357593          	andi	a1,a0,3
    2b60:	6eb12223          	sw	a1,1764(sp)

00002b64 <inst_461>:

inst_461:
// rs1_val==46339 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x501, 0xb503, 0x555, x2, 1768, x6)
    2b64:	0000b537          	lui	a0,0xb
    2b68:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b6c:	55557593          	andi	a1,a0,1365
    2b70:	6eb12423          	sw	a1,1768(sp)

00002b74 <inst_462>:

inst_462:
// rs1_val==46339 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xb002, 0xb503, -0x556, x2, 1772, x6)
    2b74:	0000b537          	lui	a0,0xb
    2b78:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b7c:	aaa57593          	andi	a1,a0,-1366
    2b80:	6eb12623          	sw	a1,1772(sp)

00002b84 <inst_463>:

inst_463:
// rs1_val==46339 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, 0xb503, 0x5, x2, 1776, x6)
    2b84:	0000b537          	lui	a0,0xb
    2b88:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b8c:	00557593          	andi	a1,a0,5
    2b90:	6eb12823          	sw	a1,1776(sp)

00002b94 <inst_464>:

inst_464:
// rs1_val==46339 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x103, 0xb503, 0x333, x2, 1780, x6)
    2b94:	0000b537          	lui	a0,0xb
    2b98:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2b9c:	33357593          	andi	a1,a0,819
    2ba0:	6eb12a23          	sw	a1,1780(sp)

00002ba4 <inst_465>:

inst_465:
// rs1_val==46339 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x402, 0xb503, 0x666, x2, 1784, x6)
    2ba4:	0000b537          	lui	a0,0xb
    2ba8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bac:	66657593          	andi	a1,a0,1638
    2bb0:	6eb12c23          	sw	a1,1784(sp)

00002bb4 <inst_466>:

inst_466:
// rs1_val==46339 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xb503, 0xb503, -0x2d, x2, 1788, x6)
    2bb4:	0000b537          	lui	a0,0xb
    2bb8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bbc:	fd357593          	andi	a1,a0,-45
    2bc0:	6eb12e23          	sw	a1,1788(sp)

00002bc4 <inst_467>:

inst_467:
// rs1_val==46339 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x1, 0xb503, 0x2d, x2, 1792, x6)
    2bc4:	0000b537          	lui	a0,0xb
    2bc8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bcc:	02d57593          	andi	a1,a0,45
    2bd0:	70b12023          	sw	a1,1792(sp)

00002bd4 <inst_468>:

inst_468:
// rs1_val==46339 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb503, 0x2, x2, 1796, x6)
    2bd4:	0000b537          	lui	a0,0xb
    2bd8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bdc:	00257593          	andi	a1,a0,2
    2be0:	70b12223          	sw	a1,1796(sp)

00002be4 <inst_469>:

inst_469:
// rs1_val==46339 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x500, 0xb503, 0x554, x2, 1800, x6)
    2be4:	0000b537          	lui	a0,0xb
    2be8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bec:	55457593          	andi	a1,a0,1364
    2bf0:	70b12423          	sw	a1,1800(sp)

00002bf4 <inst_470>:

inst_470:
// rs1_val==46339 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb503, 0x0, x2, 1804, x6)
    2bf4:	0000b537          	lui	a0,0xb
    2bf8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bfc:	00057593          	andi	a1,a0,0
    2c00:	70b12623          	sw	a1,1804(sp)

00002c04 <inst_471>:

inst_471:
// rs1_val==46339 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb503, 0x4, x2, 1808, x6)
    2c04:	0000b537          	lui	a0,0xb
    2c08:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c0c:	00457593          	andi	a1,a0,4
    2c10:	70b12823          	sw	a1,1808(sp)

00002c14 <inst_472>:

inst_472:
// rs1_val==46339 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x102, 0xb503, 0x332, x2, 1812, x6)
    2c14:	0000b537          	lui	a0,0xb
    2c18:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c1c:	33257593          	andi	a1,a0,818
    2c20:	70b12a23          	sw	a1,1812(sp)

00002c24 <inst_473>:

inst_473:
// rs1_val==46339 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x401, 0xb503, 0x665, x2, 1816, x6)
    2c24:	0000b537          	lui	a0,0xb
    2c28:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c2c:	66557593          	andi	a1,a0,1637
    2c30:	70b12c23          	sw	a1,1816(sp)

00002c34 <inst_474>:

inst_474:
// rs1_val==46339 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x0, 0xb503, 0x2c, x2, 1820, x6)
    2c34:	0000b537          	lui	a0,0xb
    2c38:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c3c:	02c57593          	andi	a1,a0,44
    2c40:	70b12e23          	sw	a1,1820(sp)

00002c44 <inst_475>:

inst_475:
// rs1_val==46339 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x502, 0xb503, 0x556, x2, 1824, x6)
    2c44:	0000b537          	lui	a0,0xb
    2c48:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c4c:	55657593          	andi	a1,a0,1366
    2c50:	72b12023          	sw	a1,1824(sp)

00002c54 <inst_476>:

inst_476:
// rs1_val==46339 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xb003, 0xb503, -0x555, x2, 1828, x6)
    2c54:	0000b537          	lui	a0,0xb
    2c58:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c5c:	aab57593          	andi	a1,a0,-1365
    2c60:	72b12223          	sw	a1,1828(sp)

00002c64 <inst_477>:

inst_477:
// rs1_val==46339 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb503, 0x6, x2, 1832, x6)
    2c64:	0000b537          	lui	a0,0xb
    2c68:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c6c:	00657593          	andi	a1,a0,6
    2c70:	72b12423          	sw	a1,1832(sp)

00002c74 <inst_478>:

inst_478:
// rs1_val==46339 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x100, 0xb503, 0x334, x2, 1836, x6)
    2c74:	0000b537          	lui	a0,0xb
    2c78:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c7c:	33457593          	andi	a1,a0,820
    2c80:	72b12623          	sw	a1,1836(sp)

00002c84 <inst_479>:

inst_479:
// rs1_val==46339 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x403, 0xb503, 0x667, x2, 1840, x6)
    2c84:	0000b537          	lui	a0,0xb
    2c88:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c8c:	66757593          	andi	a1,a0,1639
    2c90:	72b12823          	sw	a1,1840(sp)

00002c94 <inst_480>:

inst_480:
// rs1_val==46339 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xb500, 0xb503, -0x2c, x2, 1844, x6)
    2c94:	0000b537          	lui	a0,0xb
    2c98:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c9c:	fd457593          	andi	a1,a0,-44
    2ca0:	72b12a23          	sw	a1,1844(sp)

00002ca4 <inst_481>:

inst_481:
// rs1_val==46339 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2, 0xb503, 0x2e, x2, 1848, x6)
    2ca4:	0000b537          	lui	a0,0xb
    2ca8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2cac:	02e57593          	andi	a1,a0,46
    2cb0:	72b12c23          	sw	a1,1848(sp)

00002cb4 <inst_482>:

inst_482:
// rs1_val==1431655766 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x55555556, 0x3, x2, 1852, x6)
    2cb4:	55555537          	lui	a0,0x55555
    2cb8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2cbc:	00357593          	andi	a1,a0,3
    2cc0:	72b12e23          	sw	a1,1852(sp)

00002cc4 <inst_483>:

inst_483:
// rs1_val==1431655766 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555556, 0x555, x2, 1856, x6)
    2cc4:	55555537          	lui	a0,0x55555
    2cc8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2ccc:	55557593          	andi	a1,a0,1365
    2cd0:	74b12023          	sw	a1,1856(sp)

00002cd4 <inst_484>:

inst_484:
// rs1_val==1431655766 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x55555002, 0x55555556, -0x556, x2, 1860, x6)
    2cd4:	55555537          	lui	a0,0x55555
    2cd8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2cdc:	aaa57593          	andi	a1,a0,-1366
    2ce0:	74b12223          	sw	a1,1860(sp)

00002ce4 <inst_485>:

inst_485:
// rs1_val==1431655766 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x5, x2, 1864, x6)
    2ce4:	55555537          	lui	a0,0x55555
    2ce8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2cec:	00557593          	andi	a1,a0,5
    2cf0:	74b12423          	sw	a1,1864(sp)

00002cf4 <inst_486>:

inst_486:
// rs1_val==1431655766 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x112, 0x55555556, 0x333, x2, 1868, x6)
    2cf4:	55555537          	lui	a0,0x55555
    2cf8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2cfc:	33357593          	andi	a1,a0,819
    2d00:	74b12623          	sw	a1,1868(sp)

00002d04 <inst_487>:

inst_487:
// rs1_val==1431655766 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x446, 0x55555556, 0x666, x2, 1872, x6)
    2d04:	55555537          	lui	a0,0x55555
    2d08:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d0c:	66657593          	andi	a1,a0,1638
    2d10:	74b12823          	sw	a1,1872(sp)

00002d14 <inst_488>:

inst_488:
// rs1_val==1431655766 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x55555552, 0x55555556, -0x2d, x2, 1876, x6)
    2d14:	55555537          	lui	a0,0x55555
    2d18:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d1c:	fd357593          	andi	a1,a0,-45
    2d20:	74b12a23          	sw	a1,1876(sp)

00002d24 <inst_489>:

inst_489:
// rs1_val==1431655766 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x2d, x2, 1880, x6)
    2d24:	55555537          	lui	a0,0x55555
    2d28:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d2c:	02d57593          	andi	a1,a0,45
    2d30:	74b12c23          	sw	a1,1880(sp)

00002d34 <inst_490>:

inst_490:
// rs1_val==1431655766 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x55555556, 0x2, x2, 1884, x6)
    2d34:	55555537          	lui	a0,0x55555
    2d38:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d3c:	00257593          	andi	a1,a0,2
    2d40:	74b12e23          	sw	a1,1884(sp)

00002d44 <inst_491>:

inst_491:
// rs1_val==1431655766 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x554, 0x55555556, 0x554, x2, 1888, x6)
    2d44:	55555537          	lui	a0,0x55555
    2d48:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d4c:	55457593          	andi	a1,a0,1364
    2d50:	76b12023          	sw	a1,1888(sp)

00002d54 <inst_492>:

inst_492:
// rs1_val==1431655766 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x55555556, 0x0, x2, 1892, x6)
    2d54:	55555537          	lui	a0,0x55555
    2d58:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d5c:	00057593          	andi	a1,a0,0
    2d60:	76b12223          	sw	a1,1892(sp)

00002d64 <inst_493>:

inst_493:
// rs1_val==1431655766 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x4, x2, 1896, x6)
    2d64:	55555537          	lui	a0,0x55555
    2d68:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d6c:	00457593          	andi	a1,a0,4
    2d70:	76b12423          	sw	a1,1896(sp)

00002d74 <inst_494>:

inst_494:
// rs1_val==1431655766 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x112, 0x55555556, 0x332, x2, 1900, x6)
    2d74:	55555537          	lui	a0,0x55555
    2d78:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d7c:	33257593          	andi	a1,a0,818
    2d80:	76b12623          	sw	a1,1900(sp)

00002d84 <inst_495>:

inst_495:
// rs1_val==1431655766 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x444, 0x55555556, 0x665, x2, 1904, x6)
    2d84:	55555537          	lui	a0,0x55555
    2d88:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d8c:	66557593          	andi	a1,a0,1637
    2d90:	76b12823          	sw	a1,1904(sp)

00002d94 <inst_496>:

inst_496:
// rs1_val==1431655766 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x55555556, 0x2c, x2, 1908, x6)
    2d94:	55555537          	lui	a0,0x55555
    2d98:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d9c:	02c57593          	andi	a1,a0,44
    2da0:	76b12a23          	sw	a1,1908(sp)

00002da4 <inst_497>:

inst_497:
// rs1_val==1431655766 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x556, 0x55555556, 0x556, x2, 1912, x6)
    2da4:	55555537          	lui	a0,0x55555
    2da8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dac:	55657593          	andi	a1,a0,1366
    2db0:	76b12c23          	sw	a1,1912(sp)

00002db4 <inst_498>:

inst_498:
// rs1_val==1431655766 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x55555002, 0x55555556, -0x555, x2, 1916, x6)
    2db4:	55555537          	lui	a0,0x55555
    2db8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dbc:	aab57593          	andi	a1,a0,-1365
    2dc0:	76b12e23          	sw	a1,1916(sp)

00002dc4 <inst_499>:

inst_499:
// rs1_val==1431655766 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x55555556, 0x6, x2, 1920, x6)
    2dc4:	55555537          	lui	a0,0x55555
    2dc8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dcc:	00657593          	andi	a1,a0,6
    2dd0:	78b12023          	sw	a1,1920(sp)

00002dd4 <inst_500>:

inst_500:
// rs1_val==1431655766 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x114, 0x55555556, 0x334, x2, 1924, x6)
    2dd4:	55555537          	lui	a0,0x55555
    2dd8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2ddc:	33457593          	andi	a1,a0,820
    2de0:	78b12223          	sw	a1,1924(sp)

00002de4 <inst_501>:

inst_501:
// rs1_val==1431655766 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x446, 0x55555556, 0x667, x2, 1928, x6)
    2de4:	55555537          	lui	a0,0x55555
    2de8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dec:	66757593          	andi	a1,a0,1639
    2df0:	78b12423          	sw	a1,1928(sp)

00002df4 <inst_502>:

inst_502:
// rs1_val==1431655766 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x55555554, 0x55555556, -0x2c, x2, 1932, x6)
    2df4:	55555537          	lui	a0,0x55555
    2df8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dfc:	fd457593          	andi	a1,a0,-44
    2e00:	78b12623          	sw	a1,1932(sp)

00002e04 <inst_503>:

inst_503:
// rs1_val==1431655766 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x6, 0x55555556, 0x2e, x2, 1936, x6)
    2e04:	55555537          	lui	a0,0x55555
    2e08:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e0c:	02e57593          	andi	a1,a0,46
    2e10:	78b12823          	sw	a1,1936(sp)

00002e14 <inst_504>:

inst_504:
// rs1_val==-1431655765 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x3, -0x55555555, 0x3, x2, 1940, x6)
    2e14:	aaaab537          	lui	a0,0xaaaab
    2e18:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e1c:	00357593          	andi	a1,a0,3
    2e20:	78b12a23          	sw	a1,1940(sp)

00002e24 <inst_505>:

inst_505:
// rs1_val==-1431655765 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x1, -0x55555555, 0x555, x2, 1944, x6)
    2e24:	aaaab537          	lui	a0,0xaaaab
    2e28:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e2c:	55557593          	andi	a1,a0,1365
    2e30:	78b12c23          	sw	a1,1944(sp)

00002e34 <inst_506>:

inst_506:
// rs1_val==-1431655765 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaaa, -0x55555555, -0x556, x2, 1948, x6)
    2e34:	aaaab537          	lui	a0,0xaaaab
    2e38:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e3c:	aaa57593          	andi	a1,a0,-1366
    2e40:	78b12e23          	sw	a1,1948(sp)

00002e44 <inst_507>:

inst_507:
// rs1_val==-1431655765 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x1, -0x55555555, 0x5, x2, 1952, x6)
    2e44:	aaaab537          	lui	a0,0xaaaab
    2e48:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e4c:	00557593          	andi	a1,a0,5
    2e50:	7ab12023          	sw	a1,1952(sp)

00002e54 <inst_508>:

inst_508:
// rs1_val==-1431655765 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x223, -0x55555555, 0x333, x2, 1956, x6)
    2e54:	aaaab537          	lui	a0,0xaaaab
    2e58:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e5c:	33357593          	andi	a1,a0,819
    2e60:	7ab12223          	sw	a1,1956(sp)

00002e64 <inst_509>:

inst_509:
// rs1_val==-1431655765 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555555, 0x666, x2, 1960, x6)
    2e64:	aaaab537          	lui	a0,0xaaaab
    2e68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e6c:	66657593          	andi	a1,a0,1638
    2e70:	7ab12423          	sw	a1,1960(sp)

00002e74 <inst_510>:

inst_510:
// rs1_val==-1431655765 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa83, -0x55555555, -0x2d, x2, 1964, x6)
    2e74:	aaaab537          	lui	a0,0xaaaab
    2e78:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e7c:	fd357593          	andi	a1,a0,-45
    2e80:	7ab12623          	sw	a1,1964(sp)

00002e84 <inst_511>:

inst_511:
// rs1_val==-1431655765 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x29, -0x55555555, 0x2d, x2, 1968, x6)
    2e84:	aaaab537          	lui	a0,0xaaaab
    2e88:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e8c:	02d57593          	andi	a1,a0,45
    2e90:	7ab12823          	sw	a1,1968(sp)

00002e94 <inst_512>:

inst_512:
// rs1_val==-1431655765 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555555, 0x2, x2, 1972, x6)
    2e94:	aaaab537          	lui	a0,0xaaaab
    2e98:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e9c:	00257593          	andi	a1,a0,2
    2ea0:	7ab12a23          	sw	a1,1972(sp)

00002ea4 <inst_513>:

inst_513:
// rs1_val==-1431655765 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555555, 0x554, x2, 1976, x6)
    2ea4:	aaaab537          	lui	a0,0xaaaab
    2ea8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2eac:	55457593          	andi	a1,a0,1364
    2eb0:	7ab12c23          	sw	a1,1976(sp)

00002eb4 <inst_514>:

inst_514:
// rs1_val==-1431655765 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555555, 0x0, x2, 1980, x6)
    2eb4:	aaaab537          	lui	a0,0xaaaab
    2eb8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ebc:	00057593          	andi	a1,a0,0
    2ec0:	7ab12e23          	sw	a1,1980(sp)

00002ec4 <inst_515>:

inst_515:
// rs1_val==-1431655765 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x0, -0x55555555, 0x4, x2, 1984, x6)
    2ec4:	aaaab537          	lui	a0,0xaaaab
    2ec8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ecc:	00457593          	andi	a1,a0,4
    2ed0:	7cb12023          	sw	a1,1984(sp)

00002ed4 <inst_516>:

inst_516:
// rs1_val==-1431655765 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x222, -0x55555555, 0x332, x2, 1988, x6)
    2ed4:	aaaab537          	lui	a0,0xaaaab
    2ed8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2edc:	33257593          	andi	a1,a0,818
    2ee0:	7cb12223          	sw	a1,1988(sp)

00002ee4 <inst_517>:

inst_517:
// rs1_val==-1431655765 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x221, -0x55555555, 0x665, x2, 1992, x6)
    2ee4:	aaaab537          	lui	a0,0xaaaab
    2ee8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2eec:	66557593          	andi	a1,a0,1637
    2ef0:	7cb12423          	sw	a1,1992(sp)

00002ef4 <inst_518>:

inst_518:
// rs1_val==-1431655765 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x28, -0x55555555, 0x2c, x2, 1996, x6)
    2ef4:	aaaab537          	lui	a0,0xaaaab
    2ef8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2efc:	02c57593          	andi	a1,a0,44
    2f00:	7cb12623          	sw	a1,1996(sp)

00002f04 <inst_519>:

inst_519:
// rs1_val==-1431655765 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555555, 0x556, x2, 2000, x6)
    2f04:	aaaab537          	lui	a0,0xaaaab
    2f08:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f0c:	55657593          	andi	a1,a0,1366
    2f10:	7cb12823          	sw	a1,2000(sp)

00002f14 <inst_520>:

inst_520:
// rs1_val==-1431655765 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0xaaaaaaab, -0x55555555, -0x555, x2, 2004, x6)
    2f14:	aaaab537          	lui	a0,0xaaaab
    2f18:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f1c:	aab57593          	andi	a1,a0,-1365
    2f20:	7cb12a23          	sw	a1,2004(sp)

00002f24 <inst_521>:

inst_521:
// rs1_val==-1431655765 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x2, -0x55555555, 0x6, x2, 2008, x6)
    2f24:	aaaab537          	lui	a0,0xaaaab
    2f28:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f2c:	00657593          	andi	a1,a0,6
    2f30:	7cb12c23          	sw	a1,2008(sp)

00002f34 <inst_522>:

inst_522:
// rs1_val==-1431655765 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x220, -0x55555555, 0x334, x2, 2012, x6)
    2f34:	aaaab537          	lui	a0,0xaaaab
    2f38:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f3c:	33457593          	andi	a1,a0,820
    2f40:	7cb12e23          	sw	a1,2012(sp)

00002f44 <inst_523>:

inst_523:
// rs1_val==-1431655765 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x223, -0x55555555, 0x667, x2, 2016, x6)
    2f44:	aaaab537          	lui	a0,0xaaaab
    2f48:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f4c:	66757593          	andi	a1,a0,1639
    2f50:	7eb12023          	sw	a1,2016(sp)

00002f54 <inst_524>:

inst_524:
// rs1_val==-1431655765 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0xaaaaaa80, -0x55555555, -0x2c, x2, 2020, x6)
    2f54:	aaaab537          	lui	a0,0xaaaab
    2f58:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f5c:	fd457593          	andi	a1,a0,-44
    2f60:	7eb12223          	sw	a1,2020(sp)

00002f64 <inst_525>:

inst_525:
// rs1_val==-1431655765 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x2a, -0x55555555, 0x2e, x2, 2024, x6)
    2f64:	aaaab537          	lui	a0,0xaaaab
    2f68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f6c:	02e57593          	andi	a1,a0,46
    2f70:	7eb12423          	sw	a1,2024(sp)

00002f74 <inst_526>:

inst_526:
// rs1_val==6 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x3, x2, 2028, x6)
    2f74:	00600513          	li	a0,6
    2f78:	00357593          	andi	a1,a0,3
    2f7c:	7eb12623          	sw	a1,2028(sp)

00002f80 <inst_527>:

inst_527:
// rs1_val==6 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x555, x2, 2032, x6)
    2f80:	00600513          	li	a0,6
    2f84:	55557593          	andi	a1,a0,1365
    2f88:	7eb12823          	sw	a1,2032(sp)

00002f8c <inst_528>:

inst_528:
// rs1_val==6 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x556, x2, 2036, x6)
    2f8c:	00600513          	li	a0,6
    2f90:	aaa57593          	andi	a1,a0,-1366
    2f94:	7eb12a23          	sw	a1,2036(sp)

00002f98 <inst_529>:

inst_529:
// rs1_val==6 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x5, x2, 2040, x6)
    2f98:	00600513          	li	a0,6
    2f9c:	00557593          	andi	a1,a0,5
    2fa0:	7eb12c23          	sw	a1,2040(sp)

00002fa4 <inst_530>:

inst_530:
// rs1_val==6 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x333, x2, 2044, x6)
    2fa4:	00600513          	li	a0,6
    2fa8:	33357593          	andi	a1,a0,819
    2fac:	7eb12e23          	sw	a1,2044(sp)
RVTEST_SIGBASE( x2,signature_x2_1)
    2fb0:	00002117          	auipc	sp,0x2
    2fb4:	8ac10113          	addi	sp,sp,-1876 # 485c <signature_x2_1>

00002fb8 <inst_531>:

inst_531:
// rs1_val==6 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x666, x2, 0, x6)
    2fb8:	00600513          	li	a0,6
    2fbc:	66657593          	andi	a1,a0,1638
    2fc0:	00b12023          	sw	a1,0(sp)

00002fc4 <inst_532>:

inst_532:
// rs1_val==6 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x2d, x2, 4, x6)
    2fc4:	00600513          	li	a0,6
    2fc8:	fd357593          	andi	a1,a0,-45
    2fcc:	00b12223          	sw	a1,4(sp)

00002fd0 <inst_533>:

inst_533:
// rs1_val==6 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x2d, x2, 8, x6)
    2fd0:	00600513          	li	a0,6
    2fd4:	02d57593          	andi	a1,a0,45
    2fd8:	00b12423          	sw	a1,8(sp)

00002fdc <inst_534>:

inst_534:
// rs1_val==6 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x2, x2, 12, x6)
    2fdc:	00600513          	li	a0,6
    2fe0:	00257593          	andi	a1,a0,2
    2fe4:	00b12623          	sw	a1,12(sp)

00002fe8 <inst_535>:

inst_535:
// rs1_val==6 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x554, x2, 16, x6)
    2fe8:	00600513          	li	a0,6
    2fec:	55457593          	andi	a1,a0,1364
    2ff0:	00b12823          	sw	a1,16(sp)

00002ff4 <inst_536>:

inst_536:
// rs1_val==6 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x6, 0x0, x2, 20, x6)
    2ff4:	00600513          	li	a0,6
    2ff8:	00057593          	andi	a1,a0,0
    2ffc:	00b12a23          	sw	a1,20(sp)

00003000 <inst_537>:

inst_537:
// rs1_val==6 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x4, x2, 24, x6)
    3000:	00600513          	li	a0,6
    3004:	00457593          	andi	a1,a0,4
    3008:	00b12c23          	sw	a1,24(sp)

0000300c <inst_538>:

inst_538:
// rs1_val==6 and imm_val==818, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x332
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, 0x332, x2, 28, x6)
    300c:	00600513          	li	a0,6
    3010:	33257593          	andi	a1,a0,818
    3014:	00b12e23          	sw	a1,28(sp)

00003018 <inst_539>:

inst_539:
// rs1_val==6 and imm_val==1637, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x665
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x665, x2, 32, x6)
    3018:	00600513          	li	a0,6
    301c:	66557593          	andi	a1,a0,1637
    3020:	02b12023          	sw	a1,32(sp)

00003024 <inst_540>:

inst_540:
// rs1_val==6 and imm_val==44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x2c, x2, 36, x6)
    3024:	00600513          	li	a0,6
    3028:	02c57593          	andi	a1,a0,44
    302c:	02b12223          	sw	a1,36(sp)

00003030 <inst_541>:

inst_541:
// rs1_val==6 and imm_val==1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x556
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x556, x2, 40, x6)
    3030:	00600513          	li	a0,6
    3034:	55657593          	andi	a1,a0,1366
    3038:	02b12423          	sw	a1,40(sp)

0000303c <inst_542>:

inst_542:
// rs1_val==6 and imm_val==-1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x555
TEST_IMM_OP( andi, x11, x10, 0x2, 0x6, -0x555, x2, 44, x6)
    303c:	00600513          	li	a0,6
    3040:	aab57593          	andi	a1,a0,-1365
    3044:	02b12623          	sw	a1,44(sp)

00003048 <inst_543>:

inst_543:
// rs1_val==6 and imm_val==6, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x6, x2, 48, x6)
    3048:	00600513          	li	a0,6
    304c:	00657593          	andi	a1,a0,6
    3050:	02b12823          	sw	a1,48(sp)

00003054 <inst_544>:

inst_544:
// rs1_val==6 and imm_val==820, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x334
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, 0x334, x2, 52, x6)
    3054:	00600513          	li	a0,6
    3058:	33457593          	andi	a1,a0,820
    305c:	02b12a23          	sw	a1,52(sp)

00003060 <inst_545>:

inst_545:
// rs1_val==6 and imm_val==1639, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x667
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x667, x2, 56, x6)
    3060:	00600513          	li	a0,6
    3064:	66757593          	andi	a1,a0,1639
    3068:	02b12c23          	sw	a1,56(sp)

0000306c <inst_546>:

inst_546:
// rs1_val==6 and imm_val==-44, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( andi, x11, x10, 0x4, 0x6, -0x2c, x2, 60, x6)
    306c:	00600513          	li	a0,6
    3070:	fd457593          	andi	a1,a0,-44
    3074:	02b12e23          	sw	a1,60(sp)

00003078 <inst_547>:

inst_547:
// rs1_val==6 and imm_val==46, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x6;  immval:0x2e
TEST_IMM_OP( andi, x11, x10, 0x6, 0x6, 0x2e, x2, 64, x6)
    3078:	00600513          	li	a0,6
    307c:	02e57593          	andi	a1,a0,46
    3080:	04b12023          	sw	a1,64(sp)

00003084 <inst_548>:

inst_548:
// rs1_val==858993460 and imm_val==3, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x3
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333334, 0x3, x2, 68, x6)
    3084:	33333537          	lui	a0,0x33333
    3088:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    308c:	00357593          	andi	a1,a0,3
    3090:	04b12223          	sw	a1,68(sp)

00003094 <inst_549>:

inst_549:
// rs1_val==858993460 and imm_val==1365, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x555
TEST_IMM_OP( andi, x11, x10, 0x114, 0x33333334, 0x555, x2, 72, x6)
    3094:	33333537          	lui	a0,0x33333
    3098:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    309c:	55557593          	andi	a1,a0,1365
    30a0:	04b12423          	sw	a1,72(sp)

000030a4 <inst_550>:

inst_550:
// rs1_val==858993460 and imm_val==-1366, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x556
TEST_IMM_OP( andi, x11, x10, 0x33333220, 0x33333334, -0x556, x2, 76, x6)
    30a4:	33333537          	lui	a0,0x33333
    30a8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30ac:	aaa57593          	andi	a1,a0,-1366
    30b0:	04b12623          	sw	a1,76(sp)

000030b4 <inst_551>:

inst_551:
// rs1_val==858993460 and imm_val==5, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x5
TEST_IMM_OP( andi, x11, x10, 0x4, 0x33333334, 0x5, x2, 80, x6)
    30b4:	33333537          	lui	a0,0x33333
    30b8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30bc:	00557593          	andi	a1,a0,5
    30c0:	04b12823          	sw	a1,80(sp)

000030c4 <inst_552>:

inst_552:
// rs1_val==858993460 and imm_val==819, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x333
TEST_IMM_OP( andi, x11, x10, 0x330, 0x33333334, 0x333, x2, 84, x6)
    30c4:	33333537          	lui	a0,0x33333
    30c8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30cc:	33357593          	andi	a1,a0,819
    30d0:	04b12a23          	sw	a1,84(sp)

000030d4 <inst_553>:

inst_553:
// rs1_val==858993460 and imm_val==1638, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x666
TEST_IMM_OP( andi, x11, x10, 0x224, 0x33333334, 0x666, x2, 88, x6)
    30d4:	33333537          	lui	a0,0x33333
    30d8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30dc:	66657593          	andi	a1,a0,1638
    30e0:	04b12c23          	sw	a1,88(sp)

000030e4 <inst_554>:

inst_554:
// rs1_val==858993460 and imm_val==-45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2d
TEST_IMM_OP( andi, x11, x10, 0x33333310, 0x33333334, -0x2d, x2, 92, x6)
    30e4:	33333537          	lui	a0,0x33333
    30e8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30ec:	fd357593          	andi	a1,a0,-45
    30f0:	04b12e23          	sw	a1,92(sp)

000030f4 <inst_555>:

inst_555:
// rs1_val==858993460 and imm_val==45, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2d
TEST_IMM_OP( andi, x11, x10, 0x24, 0x33333334, 0x2d, x2, 96, x6)
    30f4:	33333537          	lui	a0,0x33333
    30f8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30fc:	02d57593          	andi	a1,a0,45
    3100:	06b12023          	sw	a1,96(sp)

00003104 <inst_556>:

inst_556:
// rs1_val==858993460 and imm_val==2, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333334, 0x2, x2, 100, x6)
    3104:	33333537          	lui	a0,0x33333
    3108:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    310c:	00257593          	andi	a1,a0,2
    3110:	06b12223          	sw	a1,100(sp)

00003114 <inst_557>:

inst_557:
// rs1_val==858993460 and imm_val==1364, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x554
TEST_IMM_OP( andi, x11, x10, 0x114, 0x33333334, 0x554, x2, 104, x6)
    3114:	33333537          	lui	a0,0x33333
    3118:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    311c:	55457593          	andi	a1,a0,1364
    3120:	06b12423          	sw	a1,104(sp)

00003124 <inst_558>:

inst_558:
// rs1_val==858993460 and imm_val==0, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x0
TEST_IMM_OP( andi, x11, x10, 0x0, 0x33333334, 0x0, x2, 108, x6)
    3124:	33333537          	lui	a0,0x33333
    3128:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    312c:	00057593          	andi	a1,a0,0
    3130:	06b12623          	sw	a1,108(sp)

00003134 <inst_559>:

inst_559:
// rs1_val==858993460 and imm_val==4, 
// opcode: andi ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x4
TEST_IMM_OP( andi, x11, x10, 0x4, 0x33333334, 0x4, x2, 112, x6)
    3134:	33333537          	lui	a0,0x33333
    3138:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    313c:	00457593          	andi	a1,a0,4
    3140:	06b12823          	sw	a1,112(sp)

00003144 <inst_560>:

inst_560:
// imm_val == 2, rs1_val == 16777216
// opcode: andi ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x2
TEST_IMM_OP( andi, x11, x10, 0x0, 0x1000000, 0x2, x2, 116, x6)
    3144:	01000537          	lui	a0,0x1000
    3148:	00257593          	andi	a1,a0,2
    314c:	06b12a23          	sw	a1,116(sp)

00003150 <inst_561>:

inst_561:
// imm_val == -257, 
// opcode: andi ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x101
TEST_IMM_OP( andi, x11, x10, 0xffff4afc, -0xb504, -0x101, x2, 120, x6)
    3150:	ffff5537          	lui	a0,0xffff5
    3154:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    3158:	eff57593          	andi	a1,a0,-257
    315c:	06b12c23          	sw	a1,120(sp)

00003160 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    3160:	babed0b7          	lui	ra,0xbabed
    3164:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe7afa>

00003168 <write_tohost>:
    3168:	00002017          	auipc	zero,0x2
    316c:	e8102c23          	sw	ra,-360(zero) # fffffe98 <_end+0xffffae94>

00003170 <loop>:
    3170:	0000006f          	j	3170 <loop>
    3174:	0000                	unimp
	...
