
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed8ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff76af52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb3fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd87d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00001317          	auipc	t1,0x1
    102c:	fd830313          	addi	t1,t1,-40 # 2000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb86f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfdab79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfebdba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff46db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f8b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bfadb3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadfbed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fc769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7cbb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5bcdd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadcee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56cf72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab4fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d58fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbeaafea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df53ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa87f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d2bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe7dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df26fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f7b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb7a5bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedbbadb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76dc56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6cab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",sra)

RVTEST_SIGBASE( x20,signature_x20_1)
    10f8:	00001a17          	auipc	s4,0x1
    10fc:	f18a0a13          	addi	s4,s4,-232 # 2010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs2 == rd != rs1, rs1==x16, rs2==x27, rd==x27, rs1_val < 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == -2147483648, rs2_val == 8, rs1_val == (-2**(xlen-1)) and rs2_val >= 0 and rs2_val < xlen
// opcode: sra ; op1:x16; op2:x27; dest:x27; op1val:-0x80000000;  op2val:0x8
TEST_RR_OP(sra, x27, x16, x27, -0x800000, -0x80000000, 0x8, x20, 0, x9)
    1100:	80000837          	lui	a6,0x80000
    1104:	00800d93          	li	s11,8
    1108:	41b85db3          	sra	s11,a6,s11
    110c:	01ba2023          	sw	s11,0(s4)

00001110 <inst_1>:

inst_1:
// rs1 == rs2 != rd, rs1==x12, rs2==x12, rd==x16, rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 33554432
// opcode: sra ; op1:x12; op2:x12; dest:x16; op1val:0x2000000;  op2val:0x2000000
TEST_RR_OP(sra, x16, x12, x12, 0x2000000, 0x2000000, 0x2000000, x20, 4, x9)
    1110:	02000637          	lui	a2,0x2000
    1114:	02000637          	lui	a2,0x2000
    1118:	40c65833          	sra	a6,a2,a2
    111c:	010a2223          	sw	a6,4(s4)

00001120 <inst_2>:

inst_2:
// rs1 == rs2 == rd, rs1==x1, rs2==x1, rd==x1, rs1_val < 0 and rs2_val == 0, rs1_val == -2049
// opcode: sra ; op1:x1; op2:x1; dest:x1; op1val:-0x801;  op2val:-0x801
TEST_RR_OP(sra, x1, x1, x1, -0x1, -0x801, -0x801, x20, 8, x9)
    1120:	fffff0b7          	lui	ra,0xfffff
    1124:	7ff08093          	addi	ra,ra,2047 # fffff7ff <_end+0xffffc7fb>
    1128:	fffff0b7          	lui	ra,0xfffff
    112c:	7ff08093          	addi	ra,ra,2047 # fffff7ff <_end+0xffffc7fb>
    1130:	4010d0b3          	sra	ra,ra,ra
    1134:	001a2423          	sw	ra,8(s4)

00001138 <inst_3>:

inst_3:
// rs1 == rd != rs2, rs1==x13, rs2==x19, rd==x13, rs1_val > 0 and rs2_val == 0, rs1_val==858993459
// opcode: sra ; op1:x13; op2:x19; dest:x13; op1val:0x33333333;  op2val:0x0
TEST_RR_OP(sra, x13, x13, x19, 0x33333333, 0x33333333, 0x0, x20, 12, x9)
    1138:	333336b7          	lui	a3,0x33333
    113c:	33368693          	addi	a3,a3,819 # 33333333 <_end+0x3333032f>
    1140:	00000993          	li	s3,0
    1144:	4136d6b3          	sra	a3,a3,s3
    1148:	00da2623          	sw	a3,12(s4)

0000114c <inst_4>:

inst_4:
// rs1 != rs2  and rs1 != rd and rs2 != rd, rs1==x28, rs2==x2, rd==x8, rs1_val == rs2_val and rs2_val > 0 and rs2_val < xlen, rs1_val==6
// opcode: sra ; op1:x28; op2:x2; dest:x8; op1val:0x6;  op2val:0x6
TEST_RR_OP(sra, x8, x28, x2, 0x0, 0x6, 0x6, x20, 16, x9)
    114c:	00600e13          	li	t3,6
    1150:	00600113          	li	sp,6
    1154:	402e5433          	sra	s0,t3,sp
    1158:	008a2823          	sw	s0,16(s4)

0000115c <inst_5>:

inst_5:
// rs1==x26, rs2==x31, rd==x19, rs1_val == 0 and rs2_val >= 0 and rs2_val < xlen, rs1_val==0
// opcode: sra ; op1:x26; op2:x31; dest:x19; op1val:0x0;  op2val:0x3
TEST_RR_OP(sra, x19, x26, x31, 0x0, 0x0, 0x3, x20, 20, x9)
    115c:	00000d13          	li	s10,0
    1160:	00300f93          	li	t6,3
    1164:	41fd59b3          	sra	s3,s10,t6
    1168:	013a2a23          	sw	s3,20(s4)

0000116c <inst_6>:

inst_6:
// rs1==x14, rs2==x28, rd==x29, rs1_val == (2**(xlen-1)-1) and rs2_val >= 0 and rs2_val < xlen, rs1_val == 2147483647
// opcode: sra ; op1:x14; op2:x28; dest:x29; op1val:0x7fffffff;  op2val:0x12
TEST_RR_OP(sra, x29, x14, x28, 0x1fff, 0x7fffffff, 0x12, x20, 24, x9)
    116c:	80000737          	lui	a4,0x80000
    1170:	fff70713          	addi	a4,a4,-1 # 7fffffff <_end+0x7fffcffb>
    1174:	01200e13          	li	t3,18
    1178:	41c75eb3          	sra	t4,a4,t3
    117c:	01da2c23          	sw	t4,24(s4)

00001180 <inst_7>:

inst_7:
// rs1==x10, rs2==x26, rd==x12, rs1_val == 1 and rs2_val >= 0 and rs2_val < xlen, rs1_val == 1, rs2_val == 2
// opcode: sra ; op1:x10; op2:x26; dest:x12; op1val:0x1;  op2val:0x2
TEST_RR_OP(sra, x12, x10, x26, 0x0, 0x1, 0x2, x20, 28, x9)
    1180:	00100513          	li	a0,1
    1184:	00200d13          	li	s10,2
    1188:	41a55633          	sra	a2,a0,s10
    118c:	00ca2e23          	sw	a2,28(s4)

00001190 <inst_8>:

inst_8:
// rs1==x30, rs2==x16, rd==x15, rs1_val == 2, rs2_val == 4, rs1_val==2
// opcode: sra ; op1:x30; op2:x16; dest:x15; op1val:0x2;  op2val:0x4
TEST_RR_OP(sra, x15, x30, x16, 0x0, 0x2, 0x4, x20, 32, x9)
    1190:	00200f13          	li	t5,2
    1194:	00400813          	li	a6,4
    1198:	410f57b3          	sra	a5,t5,a6
    119c:	02fa2023          	sw	a5,32(s4)

000011a0 <inst_9>:

inst_9:
// rs1==x24, rs2==x0, rd==x6, rs1_val == 4, rs1_val==4
// opcode: sra ; op1:x24; op2:x0; dest:x6; op1val:0x4;  op2val:0x0
TEST_RR_OP(sra, x6, x24, x0, 0x4, 0x4, 0x0, x20, 36, x9)
    11a0:	00400c13          	li	s8,4
    11a4:	00000013          	nop
    11a8:	400c5333          	sra	t1,s8,zero
    11ac:	026a2223          	sw	t1,36(s4)

000011b0 <inst_10>:

inst_10:
// rs1==x21, rs2==x15, rd==x3, rs1_val == 8, rs2_val == 10
// opcode: sra ; op1:x21; op2:x15; dest:x3; op1val:0x8;  op2val:0xa
TEST_RR_OP(sra, x3, x21, x15, 0x0, 0x8, 0xa, x20, 40, x9)
    11b0:	00800a93          	li	s5,8
    11b4:	00a00793          	li	a5,10
    11b8:	40fad1b3          	sra	gp,s5,a5
    11bc:	023a2423          	sw	gp,40(s4)

000011c0 <inst_11>:

inst_11:
// rs1==x15, rs2==x30, rd==x10, rs1_val == 16, 
// opcode: sra ; op1:x15; op2:x30; dest:x10; op1val:0x10;  op2val:0x0
TEST_RR_OP(sra, x10, x15, x30, 0x10, 0x10, 0x0, x20, 44, x9)
    11c0:	01000793          	li	a5,16
    11c4:	00000f13          	li	t5,0
    11c8:	41e7d533          	sra	a0,a5,t5
    11cc:	02aa2623          	sw	a0,44(s4)

000011d0 <inst_12>:

inst_12:
// rs1==x18, rs2==x4, rd==x22, rs1_val == 32, 
// opcode: sra ; op1:x18; op2:x4; dest:x22; op1val:0x20;  op2val:0x3
TEST_RR_OP(sra, x22, x18, x4, 0x4, 0x20, 0x3, x20, 48, x9)
    11d0:	02000913          	li	s2,32
    11d4:	00300213          	li	tp,3
    11d8:	40495b33          	sra	s6,s2,tp
    11dc:	036a2823          	sw	s6,48(s4)

000011e0 <inst_13>:

inst_13:
// rs1==x19, rs2==x17, rd==x11, rs1_val == 64, rs2_val == 23
// opcode: sra ; op1:x19; op2:x17; dest:x11; op1val:0x40;  op2val:0x17
TEST_RR_OP(sra, x11, x19, x17, 0x0, 0x40, 0x17, x20, 52, x9)
    11e0:	04000993          	li	s3,64
    11e4:	01700893          	li	a7,23
    11e8:	4119d5b3          	sra	a1,s3,a7
    11ec:	02ba2a23          	sw	a1,52(s4)

000011f0 <inst_14>:

inst_14:
// rs1==x5, rs2==x14, rd==x0, rs1_val == 128, 
// opcode: sra ; op1:x5; op2:x14; dest:x0; op1val:0x80;  op2val:0x8
TEST_RR_OP(sra, x0, x5, x14, 0, 0x80, 0x8, x20, 56, x9)
    11f0:	08000293          	li	t0,128
    11f4:	00800713          	li	a4,8
    11f8:	40e2d033          	sra	zero,t0,a4
    11fc:	020a2c23          	sw	zero,56(s4)

00001200 <inst_15>:

inst_15:
// rs1==x6, rs2==x24, rd==x5, rs1_val == 256, 
// opcode: sra ; op1:x6; op2:x24; dest:x5; op1val:0x100;  op2val:0x4
TEST_RR_OP(sra, x5, x6, x24, 0x10, 0x100, 0x4, x20, 60, x9)
    1200:	10000313          	li	t1,256
    1204:	00400c13          	li	s8,4
    1208:	418352b3          	sra	t0,t1,s8
    120c:	025a2e23          	sw	t0,60(s4)

00001210 <inst_16>:

inst_16:
// rs1==x7, rs2==x18, rd==x31, rs1_val == 512, 
// opcode: sra ; op1:x7; op2:x18; dest:x31; op1val:0x200;  op2val:0x1f
TEST_RR_OP(sra, x31, x7, x18, 0x0, 0x200, 0x1f, x20, 64, x9)
    1210:	20000393          	li	t2,512
    1214:	01f00913          	li	s2,31
    1218:	4123dfb3          	sra	t6,t2,s2
    121c:	05fa2023          	sw	t6,64(s4)

00001220 <inst_17>:

inst_17:
// rs1==x31, rs2==x21, rd==x30, rs1_val == 1024, rs2_val == 16
// opcode: sra ; op1:x31; op2:x21; dest:x30; op1val:0x400;  op2val:0x10
TEST_RR_OP(sra, x30, x31, x21, 0x0, 0x400, 0x10, x20, 68, x15)
    1220:	40000f93          	li	t6,1024
    1224:	01000a93          	li	s5,16
    1228:	415fdf33          	sra	t5,t6,s5
    122c:	05ea2223          	sw	t5,68(s4)

00001230 <inst_18>:

inst_18:
// rs1==x4, rs2==x11, rd==x2, rs1_val == 2048, 
// opcode: sra ; op1:x4; op2:x11; dest:x2; op1val:0x800;  op2val:0x13
TEST_RR_OP(sra, x2, x4, x11, 0x0, 0x800, 0x13, x20, 72, x15)
    1230:	00001237          	lui	tp,0x1
    1234:	80020213          	addi	tp,tp,-2048 # 800 <offset+0x6e8>
    1238:	01300593          	li	a1,19
    123c:	40b25133          	sra	sp,tp,a1
    1240:	042a2423          	sw	sp,72(s4)

00001244 <inst_19>:

inst_19:
// rs1==x22, rs2==x25, rd==x9, rs1_val == 4096, 
// opcode: sra ; op1:x22; op2:x25; dest:x9; op1val:0x1000;  op2val:0x2
TEST_RR_OP(sra, x9, x22, x25, 0x400, 0x1000, 0x2, x20, 76, x15)
    1244:	00001b37          	lui	s6,0x1
    1248:	00200c93          	li	s9,2
    124c:	419b54b3          	sra	s1,s6,s9
    1250:	049a2623          	sw	s1,76(s4)
RVTEST_SIGBASE( x1,signature_x1_0)
    1254:	00001097          	auipc	ra,0x1
    1258:	e0c08093          	addi	ra,ra,-500 # 2060 <signature_x1_0>

0000125c <inst_20>:

inst_20:
// rs1==x23, rs2==x13, rd==x14, rs1_val == 8192, 
// opcode: sra ; op1:x23; op2:x13; dest:x14; op1val:0x2000;  op2val:0x1f
TEST_RR_OP(sra, x14, x23, x13, 0x0, 0x2000, 0x1f, x1, 0, x15)
    125c:	00002bb7          	lui	s7,0x2
    1260:	01f00693          	li	a3,31
    1264:	40dbd733          	sra	a4,s7,a3
    1268:	00e0a023          	sw	a4,0(ra)

0000126c <inst_21>:

inst_21:
// rs1==x8, rs2==x29, rd==x28, rs1_val == 16384, 
// opcode: sra ; op1:x8; op2:x29; dest:x28; op1val:0x4000;  op2val:0xa
TEST_RR_OP(sra, x28, x8, x29, 0x10, 0x4000, 0xa, x1, 4, x15)
    126c:	00004437          	lui	s0,0x4
    1270:	00a00e93          	li	t4,10
    1274:	41d45e33          	sra	t3,s0,t4
    1278:	01c0a223          	sw	t3,4(ra)

0000127c <inst_22>:

inst_22:
// rs1==x17, rs2==x8, rd==x26, rs1_val == 32768, 
// opcode: sra ; op1:x17; op2:x8; dest:x26; op1val:0x8000;  op2val:0x13
TEST_RR_OP(sra, x26, x17, x8, 0x0, 0x8000, 0x13, x1, 8, x15)
    127c:	000088b7          	lui	a7,0x8
    1280:	01300413          	li	s0,19
    1284:	4088dd33          	sra	s10,a7,s0
    1288:	01a0a423          	sw	s10,8(ra)

0000128c <inst_23>:

inst_23:
// rs1==x29, rs2==x3, rd==x23, rs1_val == 65536, 
// opcode: sra ; op1:x29; op2:x3; dest:x23; op1val:0x10000;  op2val:0x10
TEST_RR_OP(sra, x23, x29, x3, 0x1, 0x10000, 0x10, x1, 12, x15)
    128c:	00010eb7          	lui	t4,0x10
    1290:	01000193          	li	gp,16
    1294:	403edbb3          	sra	s7,t4,gp
    1298:	0170a623          	sw	s7,12(ra)

0000129c <inst_24>:

inst_24:
// rs1==x9, rs2==x5, rd==x7, rs1_val == 131072, 
// opcode: sra ; op1:x9; op2:x5; dest:x7; op1val:0x20000;  op2val:0x0
TEST_RR_OP(sra, x7, x9, x5, 0x20000, 0x20000, 0x0, x1, 16, x15)
    129c:	000204b7          	lui	s1,0x20
    12a0:	00000293          	li	t0,0
    12a4:	4054d3b3          	sra	t2,s1,t0
    12a8:	0070a823          	sw	t2,16(ra)

000012ac <inst_25>:

inst_25:
// rs1==x20, rs2==x7, rd==x24, rs1_val == 262144, 
// opcode: sra ; op1:x20; op2:x7; dest:x24; op1val:0x40000;  op2val:0x8
TEST_RR_OP(sra, x24, x20, x7, 0x400, 0x40000, 0x8, x1, 20, x15)
    12ac:	00040a37          	lui	s4,0x40
    12b0:	00800393          	li	t2,8
    12b4:	407a5c33          	sra	s8,s4,t2
    12b8:	0180aa23          	sw	s8,20(ra)

000012bc <inst_26>:

inst_26:
// rs1==x25, rs2==x10, rd==x17, rs1_val == 524288, 
// opcode: sra ; op1:x25; op2:x10; dest:x17; op1val:0x80000;  op2val:0x8
TEST_RR_OP(sra, x17, x25, x10, 0x800, 0x80000, 0x8, x1, 24, x15)
    12bc:	00080cb7          	lui	s9,0x80
    12c0:	00800513          	li	a0,8
    12c4:	40acd8b3          	sra	a7,s9,a0
    12c8:	0110ac23          	sw	a7,24(ra)

000012cc <inst_27>:

inst_27:
// rs1==x27, rs2==x22, rd==x20, rs1_val == 1048576, rs2_val == 27
// opcode: sra ; op1:x27; op2:x22; dest:x20; op1val:0x100000;  op2val:0x1b
TEST_RR_OP(sra, x20, x27, x22, 0x0, 0x100000, 0x1b, x1, 28, x15)
    12cc:	00100db7          	lui	s11,0x100
    12d0:	01b00b13          	li	s6,27
    12d4:	416dda33          	sra	s4,s11,s6
    12d8:	0140ae23          	sw	s4,28(ra)

000012dc <inst_28>:

inst_28:
// rs1==x3, rs2==x6, rd==x25, rs1_val == 2097152, 
// opcode: sra ; op1:x3; op2:x6; dest:x25; op1val:0x200000;  op2val:0xb
TEST_RR_OP(sra, x25, x3, x6, 0x400, 0x200000, 0xb, x1, 32, x15)
    12dc:	002001b7          	lui	gp,0x200
    12e0:	00b00313          	li	t1,11
    12e4:	4061dcb3          	sra	s9,gp,t1
    12e8:	0390a023          	sw	s9,32(ra)

000012ec <inst_29>:

inst_29:
// rs1==x0, rs2==x23, rd==x4, rs1_val == 4194304, 
// opcode: sra ; op1:x0; op2:x23; dest:x4; op1val:0x0;  op2val:0x8
TEST_RR_OP(sra, x4, x0, x23, 0x0, 0x0, 0x8, x1, 36, x15)
    12ec:	00000013          	nop
    12f0:	00800b93          	li	s7,8
    12f4:	41705233          	sra	tp,zero,s7
    12f8:	0240a223          	sw	tp,36(ra)

000012fc <inst_30>:

inst_30:
// rs1==x2, rs2==x20, rd==x18, rs1_val == 8388608, 
// opcode: sra ; op1:x2; op2:x20; dest:x18; op1val:0x800000;  op2val:0x1b
TEST_RR_OP(sra, x18, x2, x20, 0x0, 0x800000, 0x1b, x1, 40, x15)
    12fc:	00800137          	lui	sp,0x800
    1300:	01b00a13          	li	s4,27
    1304:	41415933          	sra	s2,sp,s4
    1308:	0320a423          	sw	s2,40(ra)

0000130c <inst_31>:

inst_31:
// rs1==x11, rs2==x9, rd==x21, rs1_val == 16777216, 
// opcode: sra ; op1:x11; op2:x9; dest:x21; op1val:0x1000000;  op2val:0xb
TEST_RR_OP(sra, x21, x11, x9, 0x2000, 0x1000000, 0xb, x1, 44, x15)
    130c:	010005b7          	lui	a1,0x1000
    1310:	00b00493          	li	s1,11
    1314:	4095dab3          	sra	s5,a1,s1
    1318:	0350a623          	sw	s5,44(ra)

0000131c <inst_32>:

inst_32:
// rs1_val == 67108864, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x4000000;  op2val:0xc
TEST_RR_OP(sra, x12, x10, x11, 0x4000, 0x4000000, 0xc, x1, 48, x15)
    131c:	04000537          	lui	a0,0x4000
    1320:	00c00593          	li	a1,12
    1324:	40b55633          	sra	a2,a0,a1
    1328:	02c0a823          	sw	a2,48(ra)

0000132c <inst_33>:

inst_33:
// rs1_val == 134217728, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x8000000;  op2val:0x4
TEST_RR_OP(sra, x12, x10, x11, 0x800000, 0x8000000, 0x4, x1, 52, x2)
    132c:	08000537          	lui	a0,0x8000
    1330:	00400593          	li	a1,4
    1334:	40b55633          	sra	a2,a0,a1
    1338:	02c0aa23          	sw	a2,52(ra)

0000133c <inst_34>:

inst_34:
// rs1_val == 268435456, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x10000000;  op2val:0xb
TEST_RR_OP(sra, x12, x10, x11, 0x20000, 0x10000000, 0xb, x1, 56, x2)
    133c:	10000537          	lui	a0,0x10000
    1340:	00b00593          	li	a1,11
    1344:	40b55633          	sra	a2,a0,a1
    1348:	02c0ac23          	sw	a2,56(ra)

0000134c <inst_35>:

inst_35:
// rs1_val == 536870912, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x20000000;  op2val:0xa
TEST_RR_OP(sra, x12, x10, x11, 0x80000, 0x20000000, 0xa, x1, 60, x2)
    134c:	20000537          	lui	a0,0x20000
    1350:	00a00593          	li	a1,10
    1354:	40b55633          	sra	a2,a0,a1
    1358:	02c0ae23          	sw	a2,60(ra)

0000135c <inst_36>:

inst_36:
// rs1_val == 1073741824, rs2_val == 15
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x40000000;  op2val:0xf
TEST_RR_OP(sra, x12, x10, x11, 0x8000, 0x40000000, 0xf, x1, 64, x2)
    135c:	40000537          	lui	a0,0x40000
    1360:	00f00593          	li	a1,15
    1364:	40b55633          	sra	a2,a0,a1
    1368:	04c0a023          	sw	a2,64(ra)

0000136c <inst_37>:

inst_37:
// rs1_val == -2, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x2;  op2val:0x7
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x2, 0x7, x1, 68, x2)
    136c:	ffe00513          	li	a0,-2
    1370:	00700593          	li	a1,7
    1374:	40b55633          	sra	a2,a0,a1
    1378:	04c0a223          	sw	a2,68(ra)

0000137c <inst_38>:

inst_38:
// rs1_val == -3, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x3;  op2val:0x12
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x3, 0x12, x1, 72, x2)
    137c:	ffd00513          	li	a0,-3
    1380:	01200593          	li	a1,18
    1384:	40b55633          	sra	a2,a0,a1
    1388:	04c0a423          	sw	a2,72(ra)

0000138c <inst_39>:

inst_39:
// rs1_val == -5, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x5;  op2val:0x4
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x5, 0x4, x1, 76, x2)
    138c:	ffb00513          	li	a0,-5
    1390:	00400593          	li	a1,4
    1394:	40b55633          	sra	a2,a0,a1
    1398:	04c0a623          	sw	a2,76(ra)

0000139c <inst_40>:

inst_40:
// rs1_val == -9, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x9;  op2val:0x5
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x9, 0x5, x1, 80, x2)
    139c:	ff700513          	li	a0,-9
    13a0:	00500593          	li	a1,5
    13a4:	40b55633          	sra	a2,a0,a1
    13a8:	04c0a823          	sw	a2,80(ra)

000013ac <inst_41>:

inst_41:
// rs1_val == -17, rs2_val == 29
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x11;  op2val:0x1d
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x11, 0x1d, x1, 84, x2)
    13ac:	fef00513          	li	a0,-17
    13b0:	01d00593          	li	a1,29
    13b4:	40b55633          	sra	a2,a0,a1
    13b8:	04c0aa23          	sw	a2,84(ra)

000013bc <inst_42>:

inst_42:
// rs1_val == -33, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x21;  op2val:0xd
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x21, 0xd, x1, 88, x2)
    13bc:	fdf00513          	li	a0,-33
    13c0:	00d00593          	li	a1,13
    13c4:	40b55633          	sra	a2,a0,a1
    13c8:	04c0ac23          	sw	a2,88(ra)

000013cc <inst_43>:

inst_43:
// rs1_val == -65, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x41;  op2val:0x17
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x41, 0x17, x1, 92, x2)
    13cc:	fbf00513          	li	a0,-65
    13d0:	01700593          	li	a1,23
    13d4:	40b55633          	sra	a2,a0,a1
    13d8:	04c0ae23          	sw	a2,92(ra)

000013dc <inst_44>:

inst_44:
// rs1_val == -129, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x81;  op2val:0xd
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x81, 0xd, x1, 96, x2)
    13dc:	f7f00513          	li	a0,-129
    13e0:	00d00593          	li	a1,13
    13e4:	40b55633          	sra	a2,a0,a1
    13e8:	06c0a023          	sw	a2,96(ra)

000013ec <inst_45>:

inst_45:
// rs1_val == -257, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x101;  op2val:0x13
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x101, 0x13, x1, 100, x2)
    13ec:	eff00513          	li	a0,-257
    13f0:	01300593          	li	a1,19
    13f4:	40b55633          	sra	a2,a0,a1
    13f8:	06c0a223          	sw	a2,100(ra)

000013fc <inst_46>:

inst_46:
// rs1_val == -513, rs2_val == 1
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x201;  op2val:0x1
TEST_RR_OP(sra, x12, x10, x11, -0x101, -0x201, 0x1, x1, 104, x2)
    13fc:	dff00513          	li	a0,-513
    1400:	00100593          	li	a1,1
    1404:	40b55633          	sra	a2,a0,a1
    1408:	06c0a423          	sw	a2,104(ra)

0000140c <inst_47>:

inst_47:
// rs1_val == -1025, rs2_val == 21
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x401;  op2val:0x15
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x401, 0x15, x1, 108, x2)
    140c:	bff00513          	li	a0,-1025
    1410:	01500593          	li	a1,21
    1414:	40b55633          	sra	a2,a0,a1
    1418:	06c0a623          	sw	a2,108(ra)

0000141c <inst_48>:

inst_48:
// rs1_val == -4097, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x1001;  op2val:0xe
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x1001, 0xe, x1, 112, x2)
    141c:	fffff537          	lui	a0,0xfffff
    1420:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0xffffbffb>
    1424:	00e00593          	li	a1,14
    1428:	40b55633          	sra	a2,a0,a1
    142c:	06c0a823          	sw	a2,112(ra)

00001430 <inst_49>:

inst_49:
// rs1_val == -8193, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x2001;  op2val:0x8
TEST_RR_OP(sra, x12, x10, x11, -0x21, -0x2001, 0x8, x1, 116, x2)
    1430:	ffffe537          	lui	a0,0xffffe
    1434:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffffaffb>
    1438:	00800593          	li	a1,8
    143c:	40b55633          	sra	a2,a0,a1
    1440:	06c0aa23          	sw	a2,116(ra)

00001444 <inst_50>:

inst_50:
// rs1_val == -16385, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x4001;  op2val:0xe
TEST_RR_OP(sra, x12, x10, x11, -0x2, -0x4001, 0xe, x1, 120, x2)
    1444:	ffffc537          	lui	a0,0xffffc
    1448:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff8ffb>
    144c:	00e00593          	li	a1,14
    1450:	40b55633          	sra	a2,a0,a1
    1454:	06c0ac23          	sw	a2,120(ra)

00001458 <inst_51>:

inst_51:
// rs1_val == -32769, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x8001;  op2val:0xc
TEST_RR_OP(sra, x12, x10, x11, -0x9, -0x8001, 0xc, x1, 124, x2)
    1458:	ffff8537          	lui	a0,0xffff8
    145c:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0xffff4ffb>
    1460:	00c00593          	li	a1,12
    1464:	40b55633          	sra	a2,a0,a1
    1468:	06c0ae23          	sw	a2,124(ra)

0000146c <inst_52>:

inst_52:
// rs1_val == -65537, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x10001;  op2val:0x17
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x10001, 0x17, x1, 128, x2)
    146c:	ffff0537          	lui	a0,0xffff0
    1470:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffecffb>
    1474:	01700593          	li	a1,23
    1478:	40b55633          	sra	a2,a0,a1
    147c:	08c0a023          	sw	a2,128(ra)

00001480 <inst_53>:

inst_53:
// rs1_val == -131073, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x20001;  op2val:0xa
TEST_RR_OP(sra, x12, x10, x11, -0x81, -0x20001, 0xa, x1, 132, x2)
    1480:	fffe0537          	lui	a0,0xfffe0
    1484:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0xfffdcffb>
    1488:	00a00593          	li	a1,10
    148c:	40b55633          	sra	a2,a0,a1
    1490:	08c0a223          	sw	a2,132(ra)

00001494 <inst_54>:

inst_54:
// rs1_val == -262145, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x40001;  op2val:0xb
TEST_RR_OP(sra, x12, x10, x11, -0x81, -0x40001, 0xb, x1, 136, x2)
    1494:	fffc0537          	lui	a0,0xfffc0
    1498:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffbcffb>
    149c:	00b00593          	li	a1,11
    14a0:	40b55633          	sra	a2,a0,a1
    14a4:	08c0a423          	sw	a2,136(ra)

000014a8 <inst_55>:

inst_55:
// rs1_val == -524289, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x80001;  op2val:0x0
TEST_RR_OP(sra, x12, x10, x11, -0x80001, -0x80001, 0x0, x1, 140, x2)
    14a8:	fff80537          	lui	a0,0xfff80
    14ac:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0xfff7cffb>
    14b0:	00000593          	li	a1,0
    14b4:	40b55633          	sra	a2,a0,a1
    14b8:	08c0a623          	sw	a2,140(ra)

000014bc <inst_56>:

inst_56:
// rs1_val == -8388609, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x800001;  op2val:0x13
TEST_RR_OP(sra, x12, x10, x11, -0x11, -0x800001, 0x13, x1, 144, x2)
    14bc:	ff800537          	lui	a0,0xff800
    14c0:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7fcffb>
    14c4:	01300593          	li	a1,19
    14c8:	40b55633          	sra	a2,a0,a1
    14cc:	08c0a823          	sw	a2,144(ra)

000014d0 <inst_57>:

inst_57:
// rs1_val == -16777217, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x1000001;  op2val:0xc
TEST_RR_OP(sra, x12, x10, x11, -0x1001, -0x1000001, 0xc, x1, 148, x2)
    14d0:	ff000537          	lui	a0,0xff000
    14d4:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeffcffb>
    14d8:	00c00593          	li	a1,12
    14dc:	40b55633          	sra	a2,a0,a1
    14e0:	08c0aa23          	sw	a2,148(ra)

000014e4 <inst_58>:

inst_58:
// rs1_val == -33554433, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x2000001;  op2val:0x1f
TEST_RR_OP(sra, x12, x10, x11, -0x1, -0x2000001, 0x1f, x1, 152, x2)
    14e4:	fe000537          	lui	a0,0xfe000
    14e8:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdffcffb>
    14ec:	01f00593          	li	a1,31
    14f0:	40b55633          	sra	a2,a0,a1
    14f4:	08c0ac23          	sw	a2,152(ra)

000014f8 <inst_59>:

inst_59:
// rs1_val == -67108865, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x4000001;  op2val:0xb
TEST_RR_OP(sra, x12, x10, x11, -0x8001, -0x4000001, 0xb, x1, 156, x2)
    14f8:	fc000537          	lui	a0,0xfc000
    14fc:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbffcffb>
    1500:	00b00593          	li	a1,11
    1504:	40b55633          	sra	a2,a0,a1
    1508:	08c0ae23          	sw	a2,156(ra)

0000150c <inst_60>:

inst_60:
// rs1_val == -134217729, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x8000001;  op2val:0xa
TEST_RR_OP(sra, x12, x10, x11, -0x20001, -0x8000001, 0xa, x1, 160, x2)
    150c:	f8000537          	lui	a0,0xf8000
    1510:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ffcffb>
    1514:	00a00593          	li	a1,10
    1518:	40b55633          	sra	a2,a0,a1
    151c:	0ac0a023          	sw	a2,160(ra)

00001520 <inst_61>:

inst_61:
// rs1_val == -268435457, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x10000001;  op2val:0x4
TEST_RR_OP(sra, x12, x10, x11, -0x1000001, -0x10000001, 0x4, x1, 164, x2)
    1520:	f0000537          	lui	a0,0xf0000
    1524:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefffcffb>
    1528:	00400593          	li	a1,4
    152c:	40b55633          	sra	a2,a0,a1
    1530:	0ac0a223          	sw	a2,164(ra)

00001534 <inst_62>:

inst_62:
// rs1_val == -536870913, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x20000001;  op2val:0x7
TEST_RR_OP(sra, x12, x10, x11, -0x400001, -0x20000001, 0x7, x1, 168, x2)
    1534:	e0000537          	lui	a0,0xe0000
    1538:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfffcffb>
    153c:	00700593          	li	a1,7
    1540:	40b55633          	sra	a2,a0,a1
    1544:	0ac0a423          	sw	a2,168(ra)

00001548 <inst_63>:

inst_63:
// rs1_val == -1073741825, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x40000001;  op2val:0x5
TEST_RR_OP(sra, x12, x10, x11, -0x2000001, -0x40000001, 0x5, x1, 172, x2)
    1548:	c0000537          	lui	a0,0xc0000
    154c:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0xbfffcffb>
    1550:	00500593          	li	a1,5
    1554:	40b55633          	sra	a2,a0,a1
    1558:	0ac0a623          	sw	a2,172(ra)

0000155c <inst_64>:

inst_64:
// rs1_val == 1431655765, rs1_val==1431655765
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x55555555;  op2val:0xb
TEST_RR_OP(sra, x12, x10, x11, 0xaaaaa, 0x55555555, 0xb, x1, 176, x2)
    155c:	55555537          	lui	a0,0x55555
    1560:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55552551>
    1564:	00b00593          	li	a1,11
    1568:	40b55633          	sra	a2,a0,a1
    156c:	0ac0a823          	sw	a2,176(ra)

00001570 <inst_65>:

inst_65:
// rs1_val == -1431655766, rs1_val==-1431655766
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x55555556;  op2val:0x13
TEST_RR_OP(sra, x12, x10, x11, -0xaab, -0x55555556, 0x13, x1, 180, x2)
    1570:	aaaab537          	lui	a0,0xaaaab
    1574:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa7aa6>
    1578:	01300593          	li	a1,19
    157c:	40b55633          	sra	a2,a0,a1
    1580:	0ac0aa23          	sw	a2,180(ra)

00001584 <inst_66>:

inst_66:
// rs1_val==3, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x3;  op2val:0x17
TEST_RR_OP(sra, x12, x10, x11, 0x0, 0x3, 0x17, x1, 184, x2)
    1584:	00300513          	li	a0,3
    1588:	01700593          	li	a1,23
    158c:	40b55633          	sra	a2,a0,a1
    1590:	0ac0ac23          	sw	a2,184(ra)

00001594 <inst_67>:

inst_67:
// rs1_val==5, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x5;  op2val:0xe
TEST_RR_OP(sra, x12, x10, x11, 0x0, 0x5, 0xe, x1, 188, x2)
    1594:	00500513          	li	a0,5
    1598:	00e00593          	li	a1,14
    159c:	40b55633          	sra	a2,a0,a1
    15a0:	0ac0ae23          	sw	a2,188(ra)

000015a4 <inst_68>:

inst_68:
// rs1_val==1717986918, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x66666666;  op2val:0x13
TEST_RR_OP(sra, x12, x10, x11, 0xccc, 0x66666666, 0x13, x1, 192, x2)
    15a4:	66666537          	lui	a0,0x66666
    15a8:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66663662>
    15ac:	01300593          	li	a1,19
    15b0:	40b55633          	sra	a2,a0,a1
    15b4:	0cc0a023          	sw	a2,192(ra)

000015b8 <inst_69>:

inst_69:
// rs1_val==-46340, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0xb504;  op2val:0x1
TEST_RR_OP(sra, x12, x10, x11, -0x5a82, -0xb504, 0x1, x1, 196, x2)
    15b8:	ffff5537          	lui	a0,0xffff5
    15bc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xffff1af8>
    15c0:	00100593          	li	a1,1
    15c4:	40b55633          	sra	a2,a0,a1
    15c8:	0cc0a223          	sw	a2,196(ra)

000015cc <inst_70>:

inst_70:
// rs1_val==46341, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0xb505;  op2val:0x8
TEST_RR_OP(sra, x12, x10, x11, 0xb5, 0xb505, 0x8, x1, 200, x2)
    15cc:	0000b537          	lui	a0,0xb
    15d0:	50550513          	addi	a0,a0,1285 # b505 <_end+0x8501>
    15d4:	00800593          	li	a1,8
    15d8:	40b55633          	sra	a2,a0,a1
    15dc:	0cc0a423          	sw	a2,200(ra)

000015e0 <inst_71>:

inst_71:
// rs2_val == 30, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x0;  op2val:0x1e
TEST_RR_OP(sra, x12, x10, x11, 0x0, 0x0, 0x1e, x1, 204, x2)
    15e0:	00000513          	li	a0,0
    15e4:	01e00593          	li	a1,30
    15e8:	40b55633          	sra	a2,a0,a1
    15ec:	0cc0a623          	sw	a2,204(ra)

000015f0 <inst_72>:

inst_72:
// rs1_val==46340, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0xb504;  op2val:0xe
TEST_RR_OP(sra, x12, x10, x11, 0x2, 0xb504, 0xe, x1, 208, x2)
    15f0:	0000b537          	lui	a0,0xb
    15f4:	50450513          	addi	a0,a0,1284 # b504 <_end+0x8500>
    15f8:	00e00593          	li	a1,14
    15fc:	40b55633          	sra	a2,a0,a1
    1600:	0cc0a823          	sw	a2,208(ra)

00001604 <inst_73>:

inst_73:
// rs1_val==1431655764, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x55555554;  op2val:0xc
TEST_RR_OP(sra, x12, x10, x11, 0x55555, 0x55555554, 0xc, x1, 212, x2)
    1604:	55555537          	lui	a0,0x55555
    1608:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55552550>
    160c:	00c00593          	li	a1,12
    1610:	40b55633          	sra	a2,a0,a1
    1614:	0cc0aa23          	sw	a2,212(ra)

00001618 <inst_74>:

inst_74:
// rs1_val == -4194305, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x400001;  op2val:0x13
TEST_RR_OP(sra, x12, x10, x11, -0x9, -0x400001, 0x13, x1, 216, x2)
    1618:	ffc00537          	lui	a0,0xffc00
    161c:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbfcffb>
    1620:	01300593          	li	a1,19
    1624:	40b55633          	sra	a2,a0,a1
    1628:	0cc0ac23          	sw	a2,216(ra)

0000162c <inst_75>:

inst_75:
// rs1_val==858993460, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x33333334;  op2val:0x7
TEST_RR_OP(sra, x12, x10, x11, 0x666666, 0x33333334, 0x7, x1, 220, x2)
    162c:	33333537          	lui	a0,0x33333
    1630:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x33330330>
    1634:	00700593          	li	a1,7
    1638:	40b55633          	sra	a2,a0,a1
    163c:	0cc0ae23          	sw	a2,220(ra)

00001640 <inst_76>:

inst_76:
// rs1_val == -2097153, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x200001;  op2val:0x2
TEST_RR_OP(sra, x12, x10, x11, -0x80001, -0x200001, 0x2, x1, 224, x2)
    1640:	ffe00537          	lui	a0,0xffe00
    1644:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdfcffb>
    1648:	00200593          	li	a1,2
    164c:	40b55633          	sra	a2,a0,a1
    1650:	0ec0a023          	sw	a2,224(ra)

00001654 <inst_77>:

inst_77:
// rs1_val==858993458, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x33333332;  op2val:0x0
TEST_RR_OP(sra, x12, x10, x11, 0x33333332, 0x33333332, 0x0, x1, 228, x2)
    1654:	33333537          	lui	a0,0x33333
    1658:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3333032e>
    165c:	00000593          	li	a1,0
    1660:	40b55633          	sra	a2,a0,a1
    1664:	0ec0a223          	sw	a2,228(ra)

00001668 <inst_78>:

inst_78:
// rs1_val==1717986917, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x66666665;  op2val:0x17
TEST_RR_OP(sra, x12, x10, x11, 0xcc, 0x66666665, 0x17, x1, 232, x2)
    1668:	66666537          	lui	a0,0x66666
    166c:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66663661>
    1670:	01700593          	li	a1,23
    1674:	40b55633          	sra	a2,a0,a1
    1678:	0ec0a423          	sw	a2,232(ra)

0000167c <inst_79>:

inst_79:
// rs1_val==46339, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0xb503;  op2val:0x1f
TEST_RR_OP(sra, x12, x10, x11, 0x0, 0xb503, 0x1f, x1, 236, x2)
    167c:	0000b537          	lui	a0,0xb
    1680:	50350513          	addi	a0,a0,1283 # b503 <_end+0x84ff>
    1684:	01f00593          	li	a1,31
    1688:	40b55633          	sra	a2,a0,a1
    168c:	0ec0a623          	sw	a2,236(ra)

00001690 <inst_80>:

inst_80:
// rs1_val==1431655766, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x55555556;  op2val:0x5
TEST_RR_OP(sra, x12, x10, x11, 0x2aaaaaa, 0x55555556, 0x5, x1, 240, x2)
    1690:	55555537          	lui	a0,0x55555
    1694:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55552552>
    1698:	00500593          	li	a1,5
    169c:	40b55633          	sra	a2,a0,a1
    16a0:	0ec0a823          	sw	a2,240(ra)

000016a4 <inst_81>:

inst_81:
// rs1_val==-1431655765, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x55555555;  op2val:0x1
TEST_RR_OP(sra, x12, x10, x11, -0x2aaaaaab, -0x55555555, 0x1, x1, 244, x2)
    16a4:	aaaab537          	lui	a0,0xaaaab
    16a8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa7aa7>
    16ac:	00100593          	li	a1,1
    16b0:	40b55633          	sra	a2,a0,a1
    16b4:	0ec0aa23          	sw	a2,244(ra)

000016b8 <inst_82>:

inst_82:
// rs1_val == -1048577, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x100001;  op2val:0x10
TEST_RR_OP(sra, x12, x10, x11, -0x11, -0x100001, 0x10, x1, 248, x2)
    16b8:	fff00537          	lui	a0,0xfff00
    16bc:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0xffefcffb>
    16c0:	01000593          	li	a1,16
    16c4:	40b55633          	sra	a2,a0,a1
    16c8:	0ec0ac23          	sw	a2,248(ra)

000016cc <inst_83>:

inst_83:
// rs1_val==1717986919, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x66666667;  op2val:0x0
TEST_RR_OP(sra, x12, x10, x11, 0x66666667, 0x66666667, 0x0, x1, 252, x2)
    16cc:	66666537          	lui	a0,0x66666
    16d0:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66663663>
    16d4:	00000593          	li	a1,0
    16d8:	40b55633          	sra	a2,a0,a1
    16dc:	0ec0ae23          	sw	a2,252(ra)

000016e0 <inst_84>:

inst_84:
// rs1_val==-46339, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0xb503;  op2val:0xd
TEST_RR_OP(sra, x12, x10, x11, -0x6, -0xb503, 0xd, x1, 256, x2)
    16e0:	ffff5537          	lui	a0,0xffff5
    16e4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xffff1af9>
    16e8:	00d00593          	li	a1,13
    16ec:	40b55633          	sra	a2,a0,a1
    16f0:	10c0a023          	sw	a2,256(ra)

000016f4 <inst_85>:

inst_85:
// rs1_val > 0 and rs2_val > 0 and rs2_val < xlen, rs1_val == 33554432
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x2000000;  op2val:0x12
TEST_RR_OP(sra, x12, x10, x11, 0x80, 0x2000000, 0x12, x1, 260, x2)
    16f4:	02000537          	lui	a0,0x2000
    16f8:	01200593          	li	a1,18
    16fc:	40b55633          	sra	a2,a0,a1
    1700:	10c0a223          	sw	a2,260(ra)

00001704 <inst_86>:

inst_86:
// rs1_val < 0 and rs2_val == 0, rs1_val == -2049
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:-0x801;  op2val:0x0
TEST_RR_OP(sra, x12, x10, x11, -0x801, -0x801, 0x0, x1, 264, x2)
    1704:	fffff537          	lui	a0,0xfffff
    1708:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffffc7fb>
    170c:	00000593          	li	a1,0
    1710:	40b55633          	sra	a2,a0,a1
    1714:	10c0a423          	sw	a2,264(ra)

00001718 <inst_87>:

inst_87:
// rs1_val == 4, rs1_val==4
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x4;  op2val:0x3
TEST_RR_OP(sra, x12, x10, x11, 0x0, 0x4, 0x3, x1, 268, x2)
    1718:	00400513          	li	a0,4
    171c:	00300593          	li	a1,3
    1720:	40b55633          	sra	a2,a0,a1
    1724:	10c0a623          	sw	a2,268(ra)

00001728 <inst_88>:

inst_88:
// rs1_val == 128, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x80;  op2val:0x8
TEST_RR_OP(sra, x12, x10, x11, 0x0, 0x80, 0x8, x1, 272, x2)
    1728:	08000513          	li	a0,128
    172c:	00800593          	li	a1,8
    1730:	40b55633          	sra	a2,a0,a1
    1734:	10c0a823          	sw	a2,272(ra)

00001738 <inst_89>:

inst_89:
// rs1_val == 4194304, 
// opcode: sra ; op1:x10; op2:x11; dest:x12; op1val:0x400000;  op2val:0x8
TEST_RR_OP(sra, x12, x10, x11, 0x4000, 0x400000, 0x8, x1, 276, x2)
    1738:	00400537          	lui	a0,0x400
    173c:	00800593          	li	a1,8
    1740:	40b55633          	sra	a2,a0,a1
    1744:	10c0aa23          	sw	a2,276(ra)
    1748:	00000013          	nop
    174c:	00000013          	nop

00001750 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    1750:	babed0b7          	lui	ra,0xbabed
    1754:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe9afa>

00001758 <write_tohost>:
    1758:	00002017          	auipc	zero,0x2
    175c:	8a102423          	sw	ra,-1880(zero) # fffff8a8 <_end+0xffffc8a4>

00001760 <loop>:
    1760:	0000006f          	j	1760 <loop>
	...
