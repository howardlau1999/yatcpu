
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed8ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff76af52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb3fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd87d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00001317          	auipc	t1,0x1
    102c:	fd830313          	addi	t1,t1,-40 # 2000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb86f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfdab79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfebdba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff46db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f8b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bfadb3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadfbed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fc769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7cbb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5bcdd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadcee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56cf72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab4fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d58fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbeaafea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df53ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa87f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d2bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe7dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df26fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f7b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb7a5bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedbbadb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76dc56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6cab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",srai)

RVTEST_SIGBASE( x4,signature_x4_1)
    10f8:	00001217          	auipc	tp,0x1
    10fc:	f1820213          	addi	tp,tp,-232 # 2010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x31, rd==x25, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val == -9
// opcode: srai ; op1:x31; dest:x25; op1val:-0x9;  immval:0x9
TEST_IMM_OP( srai, x25, x31, -0x1, -0x9, 0x9, x4, 0, x6)
    1100:	ff700f93          	li	t6,-9
    1104:	409fdc93          	srai	s9,t6,0x9
    1108:	01922023          	sw	s9,0(tp) # 0 <offset-0x104>

0000110c <inst_1>:

inst_1:
// rs1 == rd, rs1==x10, rd==x10, rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val==5, imm_val == 1
// opcode: srai ; op1:x10; dest:x10; op1val:0x5;  immval:0x1
TEST_IMM_OP( srai, x10, x10, 0x2, 0x5, 0x1, x4, 4, x6)
    110c:	00500513          	li	a0,5
    1110:	40155513          	srai	a0,a0,0x1
    1114:	00a22223          	sw	a0,4(tp) # 4 <offset-0x100>

00001118 <inst_2>:

inst_2:
// rs1==x8, rd==x28, rs1_val < 0 and imm_val == 0, rs1_val == -16777217
// opcode: srai ; op1:x8; dest:x28; op1val:-0x1000001;  immval:0x0
TEST_IMM_OP( srai, x28, x8, -0x1000001, -0x1000001, 0x0, x4, 8, x6)
    1118:	ff000437          	lui	s0,0xff000
    111c:	fff40413          	addi	s0,s0,-1 # feffffff <_end+0xfeffcffb>
    1120:	40045e13          	srai	t3,s0,0x0
    1124:	01c22423          	sw	t3,8(tp) # 8 <offset-0xfc>

00001128 <inst_3>:

inst_3:
// rs1==x17, rd==x5, rs1_val > 0 and imm_val == 0, rs1_val == 1048576
// opcode: srai ; op1:x17; dest:x5; op1val:0x100000;  immval:0x0
TEST_IMM_OP( srai, x5, x17, 0x100000, 0x100000, 0x0, x4, 12, x6)
    1128:	001008b7          	lui	a7,0x100
    112c:	4008d293          	srai	t0,a7,0x0
    1130:	00522623          	sw	t0,12(tp) # c <offset-0xf8>

00001134 <inst_4>:

inst_4:
// rs1==x23, rd==x27, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -131073
// opcode: srai ; op1:x23; dest:x27; op1val:-0x20001;  immval:0x1f
TEST_IMM_OP( srai, x27, x23, -0x1, -0x20001, 0x1f, x4, 16, x6)
    1134:	fffe0bb7          	lui	s7,0xfffe0
    1138:	fffb8b93          	addi	s7,s7,-1 # fffdffff <_end+0xfffdcffb>
    113c:	41fbdd93          	srai	s11,s7,0x1f
    1140:	01b22823          	sw	s11,16(tp) # 10 <offset-0xf4>

00001144 <inst_5>:

inst_5:
// rs1==x13, rd==x20, rs1_val > 0 and imm_val == (xlen-1), rs1_val == 1 and imm_val >= 0 and imm_val < xlen, rs1_val == 1
// opcode: srai ; op1:x13; dest:x20; op1val:0x1;  immval:0x1f
TEST_IMM_OP( srai, x20, x13, 0x0, 0x1, 0x1f, x4, 20, x6)
    1144:	00100693          	li	a3,1
    1148:	41f6da13          	srai	s4,a3,0x1f
    114c:	01422a23          	sw	s4,20(tp) # 14 <offset-0xf0>

00001150 <inst_6>:

inst_6:
// rs1==x22, rd==x11, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, rs1_val==4, imm_val == 4, rs1_val == 4
// opcode: srai ; op1:x22; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( srai, x11, x22, 0x0, 0x4, 0x4, x4, 24, x6)
    1150:	00400b13          	li	s6,4
    1154:	404b5593          	srai	a1,s6,0x4
    1158:	00b22c23          	sw	a1,24(tp) # 18 <offset-0xec>

0000115c <inst_7>:

inst_7:
// rs1==x7, rd==x30, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648
// opcode: srai ; op1:x7; dest:x30; op1val:-0x80000000;  immval:0x0
TEST_IMM_OP( srai, x30, x7, -0x80000000, -0x80000000, 0x0, x4, 28, x6)
    115c:	800003b7          	lui	t2,0x80000
    1160:	4003df13          	srai	t5,t2,0x0
    1164:	01e22e23          	sw	t5,28(tp) # 1c <offset-0xe8>

00001168 <inst_8>:

inst_8:
// rs1==x18, rd==x14, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, rs1_val==0
// opcode: srai ; op1:x18; dest:x14; op1val:0x0;  immval:0xe
TEST_IMM_OP( srai, x14, x18, 0x0, 0x0, 0xe, x4, 32, x6)
    1168:	00000913          	li	s2,0
    116c:	40e95713          	srai	a4,s2,0xe
    1170:	02e22023          	sw	a4,32(tp) # 20 <offset-0xe4>

00001174 <inst_9>:

inst_9:
// rs1==x3, rd==x19, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: srai ; op1:x3; dest:x19; op1val:0x7fffffff;  immval:0x1f
TEST_IMM_OP( srai, x19, x3, 0x0, 0x7fffffff, 0x1f, x4, 36, x6)
    1174:	800001b7          	lui	gp,0x80000
    1178:	fff18193          	addi	gp,gp,-1 # 7fffffff <_end+0x7fffcffb>
    117c:	41f1d993          	srai	s3,gp,0x1f
    1180:	03322223          	sw	s3,36(tp) # 24 <offset-0xe0>

00001184 <inst_10>:

inst_10:
// rs1==x25, rd==x29, rs1_val == 2, rs1_val==2
// opcode: srai ; op1:x25; dest:x29; op1val:0x2;  immval:0x11
TEST_IMM_OP( srai, x29, x25, 0x0, 0x2, 0x11, x4, 40, x6)
    1184:	00200c93          	li	s9,2
    1188:	411cde93          	srai	t4,s9,0x11
    118c:	03d22423          	sw	t4,40(tp) # 28 <offset-0xdc>

00001190 <inst_11>:

inst_11:
// rs1==x30, rd==x3, rs1_val == 8, 
// opcode: srai ; op1:x30; dest:x3; op1val:0x8;  immval:0x11
TEST_IMM_OP( srai, x3, x30, 0x0, 0x8, 0x11, x4, 44, x6)
    1190:	00800f13          	li	t5,8
    1194:	411f5193          	srai	gp,t5,0x11
    1198:	02322623          	sw	gp,44(tp) # 2c <offset-0xd8>

0000119c <inst_12>:

inst_12:
// rs1==x2, rd==x22, rs1_val == 16, 
// opcode: srai ; op1:x2; dest:x22; op1val:0x10;  immval:0x12
TEST_IMM_OP( srai, x22, x2, 0x0, 0x10, 0x12, x4, 48, x6)
    119c:	01000113          	li	sp,16
    11a0:	41215b13          	srai	s6,sp,0x12
    11a4:	03622823          	sw	s6,48(tp) # 30 <offset-0xd4>

000011a8 <inst_13>:

inst_13:
// rs1==x12, rd==x2, rs1_val == 32, 
// opcode: srai ; op1:x12; dest:x2; op1val:0x20;  immval:0xd
TEST_IMM_OP( srai, x2, x12, 0x0, 0x20, 0xd, x4, 52, x6)
    11a8:	02000613          	li	a2,32
    11ac:	40d65113          	srai	sp,a2,0xd
    11b0:	02222a23          	sw	sp,52(tp) # 34 <offset-0xd0>

000011b4 <inst_14>:

inst_14:
// rs1==x1, rd==x12, rs1_val == 64, imm_val == 23
// opcode: srai ; op1:x1; dest:x12; op1val:0x40;  immval:0x17
TEST_IMM_OP( srai, x12, x1, 0x0, 0x40, 0x17, x4, 56, x6)
    11b4:	04000093          	li	ra,64
    11b8:	4170d613          	srai	a2,ra,0x17
    11bc:	02c22c23          	sw	a2,56(tp) # 38 <offset-0xcc>

000011c0 <inst_15>:

inst_15:
// rs1==x20, rd==x24, rs1_val == 128, 
// opcode: srai ; op1:x20; dest:x24; op1val:0x80;  immval:0x9
TEST_IMM_OP( srai, x24, x20, 0x0, 0x80, 0x9, x4, 60, x6)
    11c0:	08000a13          	li	s4,128
    11c4:	409a5c13          	srai	s8,s4,0x9
    11c8:	03822e23          	sw	s8,60(tp) # 3c <offset-0xc8>

000011cc <inst_16>:

inst_16:
// rs1==x11, rd==x0, rs1_val == 256, imm_val == 16
// opcode: srai ; op1:x11; dest:x0; op1val:0x100;  immval:0x10
TEST_IMM_OP( srai, x0, x11, 0, 0x100, 0x10, x4, 64, x6)
    11cc:	10000593          	li	a1,256
    11d0:	4105d013          	srai	zero,a1,0x10
    11d4:	04022023          	sw	zero,64(tp) # 40 <offset-0xc4>

000011d8 <inst_17>:

inst_17:
// rs1==x26, rd==x8, rs1_val == 512, 
// opcode: srai ; op1:x26; dest:x8; op1val:0x200;  immval:0x9
TEST_IMM_OP( srai, x8, x26, 0x1, 0x200, 0x9, x4, 68, x6)
    11d8:	20000d13          	li	s10,512
    11dc:	409d5413          	srai	s0,s10,0x9
    11e0:	04822223          	sw	s0,68(tp) # 44 <offset-0xc0>

000011e4 <inst_18>:

inst_18:
// rs1==x9, rd==x17, rs1_val == 1024, 
// opcode: srai ; op1:x9; dest:x17; op1val:0x400;  immval:0x11
TEST_IMM_OP( srai, x17, x9, 0x0, 0x400, 0x11, x4, 72, x6)
    11e4:	40000493          	li	s1,1024
    11e8:	4114d893          	srai	a7,s1,0x11
    11ec:	05122423          	sw	a7,72(tp) # 48 <offset-0xbc>

000011f0 <inst_19>:

inst_19:
// rs1==x16, rd==x23, rs1_val == 2048, imm_val == 27
// opcode: srai ; op1:x16; dest:x23; op1val:0x800;  immval:0x1b
TEST_IMM_OP( srai, x23, x16, 0x0, 0x800, 0x1b, x4, 76, x6)
    11f0:	00001837          	lui	a6,0x1
    11f4:	80080813          	addi	a6,a6,-2048 # 800 <offset+0x6fc>
    11f8:	41b85b93          	srai	s7,a6,0x1b
    11fc:	05722623          	sw	s7,76(tp) # 4c <offset-0xb8>

00001200 <inst_20>:

inst_20:
// rs1==x14, rd==x13, rs1_val == 4096, 
// opcode: srai ; op1:x14; dest:x13; op1val:0x1000;  immval:0x5
TEST_IMM_OP( srai, x13, x14, 0x80, 0x1000, 0x5, x4, 80, x3)
    1200:	00001737          	lui	a4,0x1
    1204:	40575693          	srai	a3,a4,0x5
    1208:	04d22823          	sw	a3,80(tp) # 50 <offset-0xb4>

0000120c <inst_21>:

inst_21:
// rs1==x21, rd==x7, rs1_val == 8192, 
// opcode: srai ; op1:x21; dest:x7; op1val:0x2000;  immval:0x1
TEST_IMM_OP( srai, x7, x21, 0x1000, 0x2000, 0x1, x4, 84, x3)
    120c:	00002ab7          	lui	s5,0x2
    1210:	401ad393          	srai	t2,s5,0x1
    1214:	04722a23          	sw	t2,84(tp) # 54 <offset-0xb0>
RVTEST_SIGBASE( x2,signature_x2_0)
    1218:	00001117          	auipc	sp,0x1
    121c:	e5010113          	addi	sp,sp,-432 # 2068 <signature_x2_0>

00001220 <inst_22>:

inst_22:
// rs1==x5, rd==x18, rs1_val == 16384, 
// opcode: srai ; op1:x5; dest:x18; op1val:0x4000;  immval:0x5
TEST_IMM_OP( srai, x18, x5, 0x200, 0x4000, 0x5, x2, 0, x3)
    1220:	000042b7          	lui	t0,0x4
    1224:	4052d913          	srai	s2,t0,0x5
    1228:	01212023          	sw	s2,0(sp)

0000122c <inst_23>:

inst_23:
// rs1==x0, rd==x26, rs1_val == 32768, 
// opcode: srai ; op1:x0; dest:x26; op1val:0x0;  immval:0x11
TEST_IMM_OP( srai, x26, x0, 0x0, 0x0, 0x11, x2, 4, x3)
    122c:	00000013          	nop
    1230:	41105d13          	srai	s10,zero,0x11
    1234:	01a12223          	sw	s10,4(sp)

00001238 <inst_24>:

inst_24:
// rs1==x24, rd==x4, rs1_val == 65536, 
// opcode: srai ; op1:x24; dest:x4; op1val:0x10000;  immval:0xd
TEST_IMM_OP( srai, x4, x24, 0x8, 0x10000, 0xd, x2, 8, x3)
    1238:	00010c37          	lui	s8,0x10
    123c:	40dc5213          	srai	tp,s8,0xd
    1240:	00412423          	sw	tp,8(sp)

00001244 <inst_25>:

inst_25:
// rs1==x15, rd==x9, rs1_val == 131072, 
// opcode: srai ; op1:x15; dest:x9; op1val:0x20000;  immval:0x12
TEST_IMM_OP( srai, x9, x15, 0x0, 0x20000, 0x12, x2, 12, x3)
    1244:	000207b7          	lui	a5,0x20
    1248:	4127d493          	srai	s1,a5,0x12
    124c:	00912623          	sw	s1,12(sp)

00001250 <inst_26>:

inst_26:
// rs1==x19, rd==x6, rs1_val == 262144, 
// opcode: srai ; op1:x19; dest:x6; op1val:0x40000;  immval:0x1f
TEST_IMM_OP( srai, x6, x19, 0x0, 0x40000, 0x1f, x2, 16, x3)
    1250:	000409b7          	lui	s3,0x40
    1254:	41f9d313          	srai	t1,s3,0x1f
    1258:	00612823          	sw	t1,16(sp)

0000125c <inst_27>:

inst_27:
// rs1==x28, rd==x21, rs1_val == 524288, imm_val == 21
// opcode: srai ; op1:x28; dest:x21; op1val:0x80000;  immval:0x15
TEST_IMM_OP( srai, x21, x28, 0x0, 0x80000, 0x15, x2, 20, x3)
    125c:	00080e37          	lui	t3,0x80
    1260:	415e5a93          	srai	s5,t3,0x15
    1264:	01512a23          	sw	s5,20(sp)

00001268 <inst_28>:

inst_28:
// rs1==x27, rd==x31, rs1_val == 2097152, 
// opcode: srai ; op1:x27; dest:x31; op1val:0x200000;  immval:0x17
TEST_IMM_OP( srai, x31, x27, 0x0, 0x200000, 0x17, x2, 24, x3)
    1268:	00200db7          	lui	s11,0x200
    126c:	417ddf93          	srai	t6,s11,0x17
    1270:	01f12c23          	sw	t6,24(sp)

00001274 <inst_29>:

inst_29:
// rs1==x6, rd==x1, rs1_val == 4194304, 
// opcode: srai ; op1:x6; dest:x1; op1val:0x400000;  immval:0x12
TEST_IMM_OP( srai, x1, x6, 0x10, 0x400000, 0x12, x2, 28, x3)
    1274:	00400337          	lui	t1,0x400
    1278:	41235093          	srai	ra,t1,0x12
    127c:	00112e23          	sw	ra,28(sp)

00001280 <inst_30>:

inst_30:
// rs1==x4, rd==x15, rs1_val == 8388608, 
// opcode: srai ; op1:x4; dest:x15; op1val:0x800000;  immval:0xb
TEST_IMM_OP( srai, x15, x4, 0x1000, 0x800000, 0xb, x2, 32, x3)
    1280:	00800237          	lui	tp,0x800
    1284:	40b25793          	srai	a5,tp,0xb
    1288:	02f12023          	sw	a5,32(sp)

0000128c <inst_31>:

inst_31:
// rs1==x29, rd==x16, rs1_val == 16777216, 
// opcode: srai ; op1:x29; dest:x16; op1val:0x1000000;  immval:0x1f
TEST_IMM_OP( srai, x16, x29, 0x0, 0x1000000, 0x1f, x2, 36, x3)
    128c:	01000eb7          	lui	t4,0x1000
    1290:	41fed813          	srai	a6,t4,0x1f
    1294:	03012223          	sw	a6,36(sp)

00001298 <inst_32>:

inst_32:
// rs1_val == 33554432, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x2000000;  immval:0x0
TEST_IMM_OP( srai, x11, x10, 0x2000000, 0x2000000, 0x0, x2, 40, x3)
    1298:	02000537          	lui	a0,0x2000
    129c:	40055593          	srai	a1,a0,0x0
    12a0:	02b12423          	sw	a1,40(sp)

000012a4 <inst_33>:

inst_33:
// rs1_val == 67108864, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x6
TEST_IMM_OP( srai, x11, x10, 0x100000, 0x4000000, 0x6, x2, 44, x3)
    12a4:	04000537          	lui	a0,0x4000
    12a8:	40655593          	srai	a1,a0,0x6
    12ac:	02b12623          	sw	a1,44(sp)

000012b0 <inst_34>:

inst_34:
// rs1_val == 134217728, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x7
TEST_IMM_OP( srai, x11, x10, 0x100000, 0x8000000, 0x7, x2, 48, x3)
    12b0:	08000537          	lui	a0,0x8000
    12b4:	40755593          	srai	a1,a0,0x7
    12b8:	02b12823          	sw	a1,48(sp)

000012bc <inst_35>:

inst_35:
// rs1_val == 268435456, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x0
TEST_IMM_OP( srai, x11, x10, 0x10000000, 0x10000000, 0x0, x2, 52, x3)
    12bc:	10000537          	lui	a0,0x10000
    12c0:	40055593          	srai	a1,a0,0x0
    12c4:	02b12a23          	sw	a1,52(sp)

000012c8 <inst_36>:

inst_36:
// rs1_val == 536870912, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x20000000;  immval:0xc
TEST_IMM_OP( srai, x11, x10, 0x20000, 0x20000000, 0xc, x2, 56, x3)
    12c8:	20000537          	lui	a0,0x20000
    12cc:	40c55593          	srai	a1,a0,0xc
    12d0:	02b12c23          	sw	a1,56(sp)

000012d4 <inst_37>:

inst_37:
// rs1_val == 1073741824, imm_val == 8
// opcode: srai ; op1:x10; dest:x11; op1val:0x40000000;  immval:0x8
TEST_IMM_OP( srai, x11, x10, 0x400000, 0x40000000, 0x8, x2, 60, x3)
    12d4:	40000537          	lui	a0,0x40000
    12d8:	40855593          	srai	a1,a0,0x8
    12dc:	02b12e23          	sw	a1,60(sp)

000012e0 <inst_38>:

inst_38:
// rs1_val == -2, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x2;  immval:0x1
TEST_IMM_OP( srai, x11, x10, -0x1, -0x2, 0x1, x2, 64, x3)
    12e0:	ffe00513          	li	a0,-2
    12e4:	40155593          	srai	a1,a0,0x1
    12e8:	04b12023          	sw	a1,64(sp)

000012ec <inst_39>:

inst_39:
// rs1_val == -3, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x3;  immval:0x10
TEST_IMM_OP( srai, x11, x10, -0x1, -0x3, 0x10, x2, 68, x3)
    12ec:	ffd00513          	li	a0,-3
    12f0:	41055593          	srai	a1,a0,0x10
    12f4:	04b12223          	sw	a1,68(sp)

000012f8 <inst_40>:

inst_40:
// rs1_val == -5, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x5;  immval:0x12
TEST_IMM_OP( srai, x11, x10, -0x1, -0x5, 0x12, x2, 72, x3)
    12f8:	ffb00513          	li	a0,-5
    12fc:	41255593          	srai	a1,a0,0x12
    1300:	04b12423          	sw	a1,72(sp)

00001304 <inst_41>:

inst_41:
// rs1_val == -17, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x11;  immval:0x0
TEST_IMM_OP( srai, x11, x10, -0x11, -0x11, 0x0, x2, 76, x3)
    1304:	fef00513          	li	a0,-17
    1308:	40055593          	srai	a1,a0,0x0
    130c:	04b12623          	sw	a1,76(sp)

00001310 <inst_42>:

inst_42:
// rs1_val == -33, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x21;  immval:0x8
TEST_IMM_OP( srai, x11, x10, -0x1, -0x21, 0x8, x2, 80, x3)
    1310:	fdf00513          	li	a0,-33
    1314:	40855593          	srai	a1,a0,0x8
    1318:	04b12823          	sw	a1,80(sp)

0000131c <inst_43>:

inst_43:
// rs1_val == -65, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x41;  immval:0x4
TEST_IMM_OP( srai, x11, x10, -0x5, -0x41, 0x4, x2, 84, x3)
    131c:	fbf00513          	li	a0,-65
    1320:	40455593          	srai	a1,a0,0x4
    1324:	04b12a23          	sw	a1,84(sp)

00001328 <inst_44>:

inst_44:
// rs1_val == -129, imm_val == 15
// opcode: srai ; op1:x10; dest:x11; op1val:-0x81;  immval:0xf
TEST_IMM_OP( srai, x11, x10, -0x1, -0x81, 0xf, x2, 88, x3)
    1328:	f7f00513          	li	a0,-129
    132c:	40f55593          	srai	a1,a0,0xf
    1330:	04b12c23          	sw	a1,88(sp)

00001334 <inst_45>:

inst_45:
// rs1_val == -257, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x101;  immval:0xb
TEST_IMM_OP( srai, x11, x10, -0x1, -0x101, 0xb, x2, 92, x3)
    1334:	eff00513          	li	a0,-257
    1338:	40b55593          	srai	a1,a0,0xb
    133c:	04b12e23          	sw	a1,92(sp)

00001340 <inst_46>:

inst_46:
// rs1_val == -513, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x201;  immval:0xd
TEST_IMM_OP( srai, x11, x10, -0x1, -0x201, 0xd, x2, 96, x3)
    1340:	dff00513          	li	a0,-513
    1344:	40d55593          	srai	a1,a0,0xd
    1348:	06b12023          	sw	a1,96(sp)

0000134c <inst_47>:

inst_47:
// rs1_val == -1025, imm_val == 30
// opcode: srai ; op1:x10; dest:x11; op1val:-0x401;  immval:0x1e
TEST_IMM_OP( srai, x11, x10, -0x1, -0x401, 0x1e, x2, 100, x3)
    134c:	bff00513          	li	a0,-1025
    1350:	41e55593          	srai	a1,a0,0x1e
    1354:	06b12223          	sw	a1,100(sp)

00001358 <inst_48>:

inst_48:
// rs1_val == -2049, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x801;  immval:0xd
TEST_IMM_OP( srai, x11, x10, -0x1, -0x801, 0xd, x2, 104, x3)
    1358:	fffff537          	lui	a0,0xfffff
    135c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffffc7fb>
    1360:	40d55593          	srai	a1,a0,0xd
    1364:	06b12423          	sw	a1,104(sp)

00001368 <inst_49>:

inst_49:
// rs1_val == -4097, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x1001;  immval:0xf
TEST_IMM_OP( srai, x11, x10, -0x1, -0x1001, 0xf, x2, 108, x3)
    1368:	fffff537          	lui	a0,0xfffff
    136c:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0xffffbffb>
    1370:	40f55593          	srai	a1,a0,0xf
    1374:	06b12623          	sw	a1,108(sp)

00001378 <inst_50>:

inst_50:
// rs1_val == -8193, imm_val == 29
// opcode: srai ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x1d
TEST_IMM_OP( srai, x11, x10, -0x1, -0x2001, 0x1d, x2, 112, x3)
    1378:	ffffe537          	lui	a0,0xffffe
    137c:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffffaffb>
    1380:	41d55593          	srai	a1,a0,0x1d
    1384:	06b12823          	sw	a1,112(sp)

00001388 <inst_51>:

inst_51:
// rs1_val == -16385, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x4001;  immval:0x3
TEST_IMM_OP( srai, x11, x10, -0x801, -0x4001, 0x3, x2, 116, x3)
    1388:	ffffc537          	lui	a0,0xffffc
    138c:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff8ffb>
    1390:	40355593          	srai	a1,a0,0x3
    1394:	06b12a23          	sw	a1,116(sp)

00001398 <inst_52>:

inst_52:
// rs1_val == -32769, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x0
TEST_IMM_OP( srai, x11, x10, -0x8001, -0x8001, 0x0, x2, 120, x3)
    1398:	ffff8537          	lui	a0,0xffff8
    139c:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0xffff4ffb>
    13a0:	40055593          	srai	a1,a0,0x0
    13a4:	06b12c23          	sw	a1,120(sp)

000013a8 <inst_53>:

inst_53:
// rs1_val == -65537, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x10001;  immval:0xd
TEST_IMM_OP( srai, x11, x10, -0x9, -0x10001, 0xd, x2, 124, x3)
    13a8:	ffff0537          	lui	a0,0xffff0
    13ac:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffecffb>
    13b0:	40d55593          	srai	a1,a0,0xd
    13b4:	06b12e23          	sw	a1,124(sp)

000013b8 <inst_54>:

inst_54:
// rs1_val == -262145, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x40001;  immval:0x11
TEST_IMM_OP( srai, x11, x10, -0x3, -0x40001, 0x11, x2, 128, x3)
    13b8:	fffc0537          	lui	a0,0xfffc0
    13bc:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffbcffb>
    13c0:	41155593          	srai	a1,a0,0x11
    13c4:	08b12023          	sw	a1,128(sp)

000013c8 <inst_55>:

inst_55:
// rs1_val == -524289, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x80001;  immval:0x9
TEST_IMM_OP( srai, x11, x10, -0x401, -0x80001, 0x9, x2, 132, x3)
    13c8:	fff80537          	lui	a0,0xfff80
    13cc:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0xfff7cffb>
    13d0:	40955593          	srai	a1,a0,0x9
    13d4:	08b12223          	sw	a1,132(sp)

000013d8 <inst_56>:

inst_56:
// rs1_val == -1048577, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x100001;  immval:0x1
TEST_IMM_OP( srai, x11, x10, -0x80001, -0x100001, 0x1, x2, 136, x3)
    13d8:	fff00537          	lui	a0,0xfff00
    13dc:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0xffefcffb>
    13e0:	40155593          	srai	a1,a0,0x1
    13e4:	08b12423          	sw	a1,136(sp)

000013e8 <inst_57>:

inst_57:
// rs1_val == -2097153, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x11
TEST_IMM_OP( srai, x11, x10, -0x11, -0x200001, 0x11, x2, 140, x3)
    13e8:	ffe00537          	lui	a0,0xffe00
    13ec:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdfcffb>
    13f0:	41155593          	srai	a1,a0,0x11
    13f4:	08b12623          	sw	a1,140(sp)

000013f8 <inst_58>:

inst_58:
// rs1_val == -4194305, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x11
TEST_IMM_OP( srai, x11, x10, -0x21, -0x400001, 0x11, x2, 144, x3)
    13f8:	ffc00537          	lui	a0,0xffc00
    13fc:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbfcffb>
    1400:	41155593          	srai	a1,a0,0x11
    1404:	08b12823          	sw	a1,144(sp)

00001408 <inst_59>:

inst_59:
// rs1_val == -8388609, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x800001;  immval:0xe
TEST_IMM_OP( srai, x11, x10, -0x201, -0x800001, 0xe, x2, 148, x3)
    1408:	ff800537          	lui	a0,0xff800
    140c:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7fcffb>
    1410:	40e55593          	srai	a1,a0,0xe
    1414:	08b12a23          	sw	a1,148(sp)

00001418 <inst_60>:

inst_60:
// rs1_val == -33554433, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x2000001;  immval:0x4
TEST_IMM_OP( srai, x11, x10, -0x200001, -0x2000001, 0x4, x2, 152, x3)
    1418:	fe000537          	lui	a0,0xfe000
    141c:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdffcffb>
    1420:	40455593          	srai	a1,a0,0x4
    1424:	08b12c23          	sw	a1,152(sp)

00001428 <inst_61>:

inst_61:
// rs1_val == -67108865, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x4000001;  immval:0x12
TEST_IMM_OP( srai, x11, x10, -0x101, -0x4000001, 0x12, x2, 156, x3)
    1428:	fc000537          	lui	a0,0xfc000
    142c:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbffcffb>
    1430:	41255593          	srai	a1,a0,0x12
    1434:	08b12e23          	sw	a1,156(sp)

00001438 <inst_62>:

inst_62:
// rs1_val == -134217729, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0xd
TEST_IMM_OP( srai, x11, x10, -0x4001, -0x8000001, 0xd, x2, 160, x3)
    1438:	f8000537          	lui	a0,0xf8000
    143c:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ffcffb>
    1440:	40d55593          	srai	a1,a0,0xd
    1444:	0ab12023          	sw	a1,160(sp)

00001448 <inst_63>:

inst_63:
// rs1_val == -268435457, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0x3
TEST_IMM_OP( srai, x11, x10, -0x2000001, -0x10000001, 0x3, x2, 164, x3)
    1448:	f0000537          	lui	a0,0xf0000
    144c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefffcffb>
    1450:	40355593          	srai	a1,a0,0x3
    1454:	0ab12223          	sw	a1,164(sp)

00001458 <inst_64>:

inst_64:
// rs1_val == -536870913, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x20000001;  immval:0x7
TEST_IMM_OP( srai, x11, x10, -0x400001, -0x20000001, 0x7, x2, 168, x3)
    1458:	e0000537          	lui	a0,0xe0000
    145c:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfffcffb>
    1460:	40755593          	srai	a1,a0,0x7
    1464:	0ab12423          	sw	a1,168(sp)

00001468 <inst_65>:

inst_65:
// rs1_val == -1073741825, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x40000001;  immval:0x13
TEST_IMM_OP( srai, x11, x10, -0x801, -0x40000001, 0x13, x2, 172, x3)
    1468:	c0000537          	lui	a0,0xc0000
    146c:	fff50513          	addi	a0,a0,-1 # bfffffff <_end+0xbfffcffb>
    1470:	41355593          	srai	a1,a0,0x13
    1474:	0ab12623          	sw	a1,172(sp)

00001478 <inst_66>:

inst_66:
// rs1_val == 1431655765, rs1_val==1431655765
// opcode: srai ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x15
TEST_IMM_OP( srai, x11, x10, 0x2aa, 0x55555555, 0x15, x2, 176, x3)
    1478:	55555537          	lui	a0,0x55555
    147c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55552551>
    1480:	41555593          	srai	a1,a0,0x15
    1484:	0ab12823          	sw	a1,176(sp)

00001488 <inst_67>:

inst_67:
// rs1_val == -1431655766, rs1_val==-1431655766
// opcode: srai ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0xf
TEST_IMM_OP( srai, x11, x10, -0xaaab, -0x55555556, 0xf, x2, 180, x3)
    1488:	aaaab537          	lui	a0,0xaaaab
    148c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa7aa6>
    1490:	40f55593          	srai	a1,a0,0xf
    1494:	0ab12a23          	sw	a1,180(sp)

00001498 <inst_68>:

inst_68:
// rs1_val==3, imm_val == 10
// opcode: srai ; op1:x10; dest:x11; op1val:0x3;  immval:0xa
TEST_IMM_OP( srai, x11, x10, 0x0, 0x3, 0xa, x2, 184, x3)
    1498:	00300513          	li	a0,3
    149c:	40a55593          	srai	a1,a0,0xa
    14a0:	0ab12c23          	sw	a1,184(sp)

000014a4 <inst_69>:

inst_69:
// rs1_val==858993459, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( srai, x11, x10, 0x33333333, 0x33333333, 0x0, x2, 188, x3)
    14a4:	33333537          	lui	a0,0x33333
    14a8:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3333032f>
    14ac:	40055593          	srai	a1,a0,0x0
    14b0:	0ab12e23          	sw	a1,188(sp)

000014b4 <inst_70>:

inst_70:
// rs1_val==1717986919, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x66666667;  immval:0xa
TEST_IMM_OP( srai, x11, x10, 0x199999, 0x66666667, 0xa, x2, 192, x3)
    14b4:	66666537          	lui	a0,0x66666
    14b8:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66663663>
    14bc:	40a55593          	srai	a1,a0,0xa
    14c0:	0cb12023          	sw	a1,192(sp)

000014c4 <inst_71>:

inst_71:
// rs1_val==-46339, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x1
TEST_IMM_OP( srai, x11, x10, -0x5a82, -0xb503, 0x1, x2, 196, x3)
    14c4:	ffff5537          	lui	a0,0xffff5
    14c8:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xffff1af9>
    14cc:	40155593          	srai	a1,a0,0x1
    14d0:	0cb12223          	sw	a1,196(sp)

000014d4 <inst_72>:

inst_72:
// rs1_val==46341, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xb505;  immval:0x0
TEST_IMM_OP( srai, x11, x10, 0xb505, 0xb505, 0x0, x2, 200, x3)
    14d4:	0000b537          	lui	a0,0xb
    14d8:	50550513          	addi	a0,a0,1285 # b505 <_end+0x8501>
    14dc:	40055593          	srai	a1,a0,0x0
    14e0:	0cb12423          	sw	a1,200(sp)

000014e4 <inst_73>:

inst_73:
// imm_val == 2, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2
TEST_IMM_OP( srai, x11, x10, 0x15555555, 0x55555555, 0x2, x2, 204, x3)
    14e4:	55555537          	lui	a0,0x55555
    14e8:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55552551>
    14ec:	40255593          	srai	a1,a0,0x2
    14f0:	0cb12623          	sw	a1,204(sp)

000014f4 <inst_74>:

inst_74:
// rs1_val==1717986918, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x1b
TEST_IMM_OP( srai, x11, x10, 0xc, 0x66666666, 0x1b, x2, 208, x3)
    14f4:	66666537          	lui	a0,0x66666
    14f8:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66663662>
    14fc:	41b55593          	srai	a1,a0,0x1b
    1500:	0cb12823          	sw	a1,208(sp)

00001504 <inst_75>:

inst_75:
// rs1_val==-46340, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0xb504;  immval:0xc
TEST_IMM_OP( srai, x11, x10, -0xc, -0xb504, 0xc, x2, 212, x3)
    1504:	ffff5537          	lui	a0,0xffff5
    1508:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xffff1af8>
    150c:	40c55593          	srai	a1,a0,0xc
    1510:	0cb12a23          	sw	a1,212(sp)

00001514 <inst_76>:

inst_76:
// rs1_val==46340, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xb504;  immval:0x0
TEST_IMM_OP( srai, x11, x10, 0xb504, 0xb504, 0x0, x2, 216, x3)
    1514:	0000b537          	lui	a0,0xb
    1518:	50450513          	addi	a0,a0,1284 # b504 <_end+0x8500>
    151c:	40055593          	srai	a1,a0,0x0
    1520:	0cb12c23          	sw	a1,216(sp)

00001524 <inst_77>:

inst_77:
// rs1_val==1431655764, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( srai, x11, x10, 0x1555555, 0x55555554, 0x6, x2, 220, x3)
    1524:	55555537          	lui	a0,0x55555
    1528:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55552550>
    152c:	40655593          	srai	a1,a0,0x6
    1530:	0cb12e23          	sw	a1,220(sp)

00001534 <inst_78>:

inst_78:
// rs1_val==858993458, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x1e
TEST_IMM_OP( srai, x11, x10, 0x0, 0x33333332, 0x1e, x2, 224, x3)
    1534:	33333537          	lui	a0,0x33333
    1538:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3333032e>
    153c:	41e55593          	srai	a1,a0,0x1e
    1540:	0eb12023          	sw	a1,224(sp)

00001544 <inst_79>:

inst_79:
// rs1_val==1717986917, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x1f
TEST_IMM_OP( srai, x11, x10, 0x0, 0x66666665, 0x1f, x2, 228, x3)
    1544:	66666537          	lui	a0,0x66666
    1548:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66663661>
    154c:	41f55593          	srai	a1,a0,0x1f
    1550:	0eb12223          	sw	a1,228(sp)

00001554 <inst_80>:

inst_80:
// rs1_val==46339, 
// opcode: srai ; op1:x10; dest:x11; op1val:0xb503;  immval:0x17
TEST_IMM_OP( srai, x11, x10, 0x0, 0xb503, 0x17, x2, 232, x3)
    1554:	0000b537          	lui	a0,0xb
    1558:	50350513          	addi	a0,a0,1283 # b503 <_end+0x84ff>
    155c:	41755593          	srai	a1,a0,0x17
    1560:	0eb12423          	sw	a1,232(sp)

00001564 <inst_81>:

inst_81:
// rs1_val==1431655766, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x1b
TEST_IMM_OP( srai, x11, x10, 0xa, 0x55555556, 0x1b, x2, 236, x3)
    1564:	55555537          	lui	a0,0x55555
    1568:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55552552>
    156c:	41b55593          	srai	a1,a0,0x1b
    1570:	0eb12623          	sw	a1,236(sp)

00001574 <inst_82>:

inst_82:
// rs1_val==-1431655765, 
// opcode: srai ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0xa
TEST_IMM_OP( srai, x11, x10, -0x155556, -0x55555555, 0xa, x2, 240, x3)
    1574:	aaaab537          	lui	a0,0xaaaab
    1578:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa7aa7>
    157c:	40a55593          	srai	a1,a0,0xa
    1580:	0eb12823          	sw	a1,240(sp)

00001584 <inst_83>:

inst_83:
// rs1_val==6, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( srai, x11, x10, 0x0, 0x6, 0x6, x2, 244, x3)
    1584:	00600513          	li	a0,6
    1588:	40655593          	srai	a1,a0,0x6
    158c:	0eb12a23          	sw	a1,244(sp)

00001590 <inst_84>:

inst_84:
// rs1_val==858993460, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x33333334;  immval:0xc
TEST_IMM_OP( srai, x11, x10, 0x33333, 0x33333334, 0xc, x2, 248, x3)
    1590:	33333537          	lui	a0,0x33333
    1594:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x33330330>
    1598:	40c55593          	srai	a1,a0,0xc
    159c:	0eb12c23          	sw	a1,248(sp)

000015a0 <inst_85>:

inst_85:
// rs1_val == 256, imm_val == 16
// opcode: srai ; op1:x10; dest:x11; op1val:0x100;  immval:0x10
TEST_IMM_OP( srai, x11, x10, 0x0, 0x100, 0x10, x2, 252, x3)
    15a0:	10000513          	li	a0,256
    15a4:	41055593          	srai	a1,a0,0x10
    15a8:	0eb12e23          	sw	a1,252(sp)

000015ac <inst_86>:

inst_86:
// rs1_val == 32768, 
// opcode: srai ; op1:x10; dest:x11; op1val:0x8000;  immval:0x11
TEST_IMM_OP( srai, x11, x10, 0x0, 0x8000, 0x11, x2, 256, x3)
    15ac:	00008537          	lui	a0,0x8
    15b0:	41155593          	srai	a1,a0,0x11
    15b4:	10b12023          	sw	a1,256(sp)
    15b8:	00000013          	nop
    15bc:	00000013          	nop

000015c0 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    15c0:	babed0b7          	lui	ra,0xbabed
    15c4:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe9afa>

000015c8 <write_tohost>:
    15c8:	00002017          	auipc	zero,0x2
    15cc:	a2102c23          	sw	ra,-1480(zero) # fffffa38 <_end+0xffffca34>

000015d0 <loop>:
    15d0:	0000006f          	j	15d0 <loop>
	...
