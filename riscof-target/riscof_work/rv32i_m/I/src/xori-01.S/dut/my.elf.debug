
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed6ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff768f52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb1fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd67d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00003317          	auipc	t1,0x3
    102c:	fd830313          	addi	t1,t1,-40 # 4000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb66f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfd8b79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfe9dba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff26db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f6b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bf8db3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadf9ed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fa769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7abb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5badd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadaee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56af72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab2fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d56fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbea8fea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df51ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa67f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d0bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe5dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df06fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f5b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb785bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedb9adb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76da56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6aab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",xori)

RVTEST_SIGBASE( x2,signature_x2_1)
    10f8:	00003117          	auipc	sp,0x3
    10fc:	f1810113          	addi	sp,sp,-232 # 4010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x24, rd==x10, imm_val == (-2**(12-1)), imm_val == -2048, rs1_val != imm_val, rs1_val > 0 and imm_val < 0
// opcode: xori ; op1:x24; dest:x10; op1val:0x33333334;  immval:-0x800
TEST_IMM_OP( xori, x10, x24, 0xcccccb34, 0x33333334, -0x800, x2, 0, x13)
    1100:	33333c37          	lui	s8,0x33333
    1104:	334c0c13          	addi	s8,s8,820 # 33333334 <_end+0x3332e330>
    1108:	800c4513          	xori	a0,s8,-2048
    110c:	00a12023          	sw	a0,0(sp)

00001110 <inst_1>:

inst_1:
// rs1 == rd, rs1==x18, rd==x18, imm_val == 0, rs1_val == 4, rs1_val==4 and imm_val==0
// opcode: xori ; op1:x18; dest:x18; op1val:0x4;  immval:0x0
TEST_IMM_OP( xori, x18, x18, 0x4, 0x4, 0x0, x2, 4, x13)
    1110:	00400913          	li	s2,4
    1114:	00094913          	xori	s2,s2,0
    1118:	01212223          	sw	s2,4(sp)

0000111c <inst_2>:

inst_2:
// rs1==x15, rd==x24, imm_val == (2**(12-1)-1), rs1_val < 0 and imm_val > 0, imm_val == 2047
// opcode: xori ; op1:x15; dest:x24; op1val:-0x4;  immval:0x7ff
TEST_IMM_OP( xori, x24, x15, 0xfffff803, -0x4, 0x7ff, x2, 8, x13)
    111c:	ffc00793          	li	a5,-4
    1120:	7ff7cc13          	xori	s8,a5,2047
    1124:	01812423          	sw	s8,8(sp)

00001128 <inst_3>:

inst_3:
// rs1==x11, rd==x20, imm_val == 1, rs1_val > 0 and imm_val > 0, rs1_val == 2
// opcode: xori ; op1:x11; dest:x20; op1val:0x2;  immval:0x1
TEST_IMM_OP( xori, x20, x11, 0x3, 0x2, 0x1, x2, 12, x13)
    1128:	00200593          	li	a1,2
    112c:	0015ca13          	xori	s4,a1,1
    1130:	01412623          	sw	s4,12(sp)

00001134 <inst_4>:

inst_4:
// rs1==x7, rd==x21, rs1_val == (-2**(xlen-1)), rs1_val == -2147483648
// opcode: xori ; op1:x7; dest:x21; op1val:-0x80000000;  immval:0x554
TEST_IMM_OP( xori, x21, x7, 0x80000554, -0x80000000, 0x554, x2, 16, x13)
    1134:	800003b7          	lui	t2,0x80000
    1138:	5543ca93          	xori	s5,t2,1364
    113c:	01512823          	sw	s5,16(sp)

00001140 <inst_5>:

inst_5:
// rs1==x17, rd==x27, rs1_val == 0, imm_val == -1025
// opcode: xori ; op1:x17; dest:x27; op1val:0x0;  immval:-0x401
TEST_IMM_OP( xori, x27, x17, 0xfffffbff, 0x0, -0x401, x2, 20, x13)
    1140:	00000893          	li	a7,0
    1144:	bff8cd93          	xori	s11,a7,-1025
    1148:	01b12a23          	sw	s11,20(sp)

0000114c <inst_6>:

inst_6:
// rs1==x22, rd==x1, rs1_val == (2**(xlen-1)-1), rs1_val == 2147483647
// opcode: xori ; op1:x22; dest:x1; op1val:0x7fffffff;  immval:-0xa
TEST_IMM_OP( xori, x1, x22, 0x80000009, 0x7fffffff, -0xa, x2, 24, x13)
    114c:	80000b37          	lui	s6,0x80000
    1150:	fffb0b13          	addi	s6,s6,-1 # 7fffffff <_end+0x7fffaffb>
    1154:	ff6b4093          	xori	ra,s6,-10
    1158:	00112c23          	sw	ra,24(sp)

0000115c <inst_7>:

inst_7:
// rs1==x20, rd==x22, rs1_val == 1, imm_val == 4
// opcode: xori ; op1:x20; dest:x22; op1val:0x1;  immval:0x4
TEST_IMM_OP( xori, x22, x20, 0x5, 0x1, 0x4, x2, 28, x13)
    115c:	00100a13          	li	s4,1
    1160:	004a4b13          	xori	s6,s4,4
    1164:	01612e23          	sw	s6,28(sp)

00001168 <inst_8>:

inst_8:
// rs1==x19, rd==x31, rs1_val == imm_val, imm_val == -513, rs1_val < 0 and imm_val < 0, rs1_val == -513
// opcode: xori ; op1:x19; dest:x31; op1val:-0x201;  immval:-0x201
TEST_IMM_OP( xori, x31, x19, 0x0, -0x201, -0x201, x2, 32, x13)
    1168:	dff00993          	li	s3,-513
    116c:	dff9cf93          	xori	t6,s3,-513
    1170:	03f12023          	sw	t6,32(sp)

00001174 <inst_9>:

inst_9:
// rs1==x9, rd==x5, imm_val == 2, rs1_val == -33
// opcode: xori ; op1:x9; dest:x5; op1val:-0x21;  immval:0x2
TEST_IMM_OP( xori, x5, x9, 0xffffffdd, -0x21, 0x2, x2, 36, x13)
    1174:	fdf00493          	li	s1,-33
    1178:	0024c293          	xori	t0,s1,2
    117c:	02512223          	sw	t0,36(sp)

00001180 <inst_10>:

inst_10:
// rs1==x28, rd==x29, imm_val == 8, 
// opcode: xori ; op1:x28; dest:x29; op1val:-0x80000000;  immval:0x8
TEST_IMM_OP( xori, x29, x28, 0x80000008, -0x80000000, 0x8, x2, 40, x13)
    1180:	80000e37          	lui	t3,0x80000
    1184:	008e4e93          	xori	t4,t3,8
    1188:	03d12423          	sw	t4,40(sp)

0000118c <inst_11>:

inst_11:
// rs1==x30, rd==x4, imm_val == 16, rs1_val == -1073741825
// opcode: xori ; op1:x30; dest:x4; op1val:-0x40000001;  immval:0x10
TEST_IMM_OP( xori, x4, x30, 0xbfffffef, -0x40000001, 0x10, x2, 44, x13)
    118c:	c0000f37          	lui	t5,0xc0000
    1190:	ffff0f13          	addi	t5,t5,-1 # bfffffff <_end+0xbfffaffb>
    1194:	010f4213          	xori	tp,t5,16
    1198:	02412623          	sw	tp,44(sp)

0000119c <inst_12>:

inst_12:
// rs1==x27, rd==x8, imm_val == 32, 
// opcode: xori ; op1:x27; dest:x8; op1val:0x7fffffff;  immval:0x20
TEST_IMM_OP( xori, x8, x27, 0x7fffffdf, 0x7fffffff, 0x20, x2, 48, x13)
    119c:	80000db7          	lui	s11,0x80000
    11a0:	fffd8d93          	addi	s11,s11,-1 # 7fffffff <_end+0x7fffaffb>
    11a4:	020dc413          	xori	s0,s11,32
    11a8:	02812823          	sw	s0,48(sp)

000011ac <inst_13>:

inst_13:
// rs1==x3, rd==x25, imm_val == 64, 
// opcode: xori ; op1:x3; dest:x25; op1val:0x66666666;  immval:0x40
TEST_IMM_OP( xori, x25, x3, 0x66666626, 0x66666666, 0x40, x2, 52, x13)
    11ac:	666661b7          	lui	gp,0x66666
    11b0:	66618193          	addi	gp,gp,1638 # 66666666 <_end+0x66661662>
    11b4:	0401cc93          	xori	s9,gp,64
    11b8:	03912a23          	sw	s9,52(sp)

000011bc <inst_14>:

inst_14:
// rs1==x31, rd==x17, imm_val == 128, rs1_val == -524289
// opcode: xori ; op1:x31; dest:x17; op1val:-0x80001;  immval:0x80
TEST_IMM_OP( xori, x17, x31, 0xfff7ff7f, -0x80001, 0x80, x2, 56, x13)
    11bc:	fff80fb7          	lui	t6,0xfff80
    11c0:	ffff8f93          	addi	t6,t6,-1 # fff7ffff <_end+0xfff7affb>
    11c4:	080fc893          	xori	a7,t6,128
    11c8:	03112c23          	sw	a7,56(sp)

000011cc <inst_15>:

inst_15:
// rs1==x29, rd==x16, imm_val == 256, 
// opcode: xori ; op1:x29; dest:x16; op1val:-0xb504;  immval:0x100
TEST_IMM_OP( xori, x16, x29, 0xffff4bfc, -0xb504, 0x100, x2, 60, x13)
    11cc:	ffff5eb7          	lui	t4,0xffff5
    11d0:	afce8e93          	addi	t4,t4,-1284 # ffff4afc <_end+0xfffefaf8>
    11d4:	100ec813          	xori	a6,t4,256
    11d8:	03012e23          	sw	a6,60(sp)

000011dc <inst_16>:

inst_16:
// rs1==x4, rd==x6, imm_val == 512, 
// opcode: xori ; op1:x4; dest:x6; op1val:0x0;  immval:0x200
TEST_IMM_OP( xori, x6, x4, 0x200, 0x0, 0x200, x2, 64, x13)
    11dc:	00000213          	li	tp,0
    11e0:	20024313          	xori	t1,tp,512
    11e4:	04612023          	sw	t1,64(sp)

000011e8 <inst_17>:

inst_17:
// rs1==x14, rd==x3, imm_val == 1024, rs1_val == -1048577
// opcode: xori ; op1:x14; dest:x3; op1val:-0x100001;  immval:0x400
TEST_IMM_OP( xori, x3, x14, 0xffeffbff, -0x100001, 0x400, x2, 68, x13)
    11e8:	fff00737          	lui	a4,0xfff00
    11ec:	fff70713          	addi	a4,a4,-1 # ffefffff <_end+0xffefaffb>
    11f0:	40074193          	xori	gp,a4,1024
    11f4:	04312223          	sw	gp,68(sp)

000011f8 <inst_18>:

inst_18:
// rs1==x12, rd==x15, imm_val == -2, 
// opcode: xori ; op1:x12; dest:x15; op1val:-0x7;  immval:-0x2
TEST_IMM_OP( xori, x15, x12, 0x7, -0x7, -0x2, x2, 72, x13)
    11f8:	ff900613          	li	a2,-7
    11fc:	ffe64793          	xori	a5,a2,-2
    1200:	04f12423          	sw	a5,72(sp)

00001204 <inst_19>:

inst_19:
// rs1==x21, rd==x9, imm_val == -3, 
// opcode: xori ; op1:x21; dest:x9; op1val:0x5;  immval:-0x3
TEST_IMM_OP( xori, x9, x21, 0xfffffff8, 0x5, -0x3, x2, 76, x4)
    1204:	00500a93          	li	s5,5
    1208:	ffdac493          	xori	s1,s5,-3
    120c:	04912623          	sw	s1,76(sp)

00001210 <inst_20>:

inst_20:
// rs1==x10, rd==x19, imm_val == -5, 
// opcode: xori ; op1:x10; dest:x19; op1val:-0xb504;  immval:-0x5
TEST_IMM_OP( xori, x19, x10, 0xb507, -0xb504, -0x5, x2, 80, x4)
    1210:	ffff5537          	lui	a0,0xffff5
    1214:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1218:	ffb54993          	xori	s3,a0,-5
    121c:	05312823          	sw	s3,80(sp)

00001220 <inst_21>:

inst_21:
// rs1==x16, rd==x26, imm_val == -9, 
// opcode: xori ; op1:x16; dest:x26; op1val:0x1;  immval:-0x9
TEST_IMM_OP( xori, x26, x16, 0xfffffff6, 0x1, -0x9, x2, 84, x4)
    1220:	00100813          	li	a6,1
    1224:	ff784d13          	xori	s10,a6,-9
    1228:	05a12a23          	sw	s10,84(sp)
RVTEST_SIGBASE( x3,signature_x3_0)
    122c:	00003197          	auipc	gp,0x3
    1230:	e3c18193          	addi	gp,gp,-452 # 4068 <signature_x3_0>

00001234 <inst_22>:

inst_22:
// rs1==x26, rd==x30, imm_val == -17, 
// opcode: xori ; op1:x26; dest:x30; op1val:0x66666667;  immval:-0x11
TEST_IMM_OP( xori, x30, x26, 0x99999988, 0x66666667, -0x11, x3, 0, x4)
    1234:	66666d37          	lui	s10,0x66666
    1238:	667d0d13          	addi	s10,s10,1639 # 66666667 <_end+0x66661663>
    123c:	fefd4f13          	xori	t5,s10,-17
    1240:	01e1a023          	sw	t5,0(gp)

00001244 <inst_23>:

inst_23:
// rs1==x1, rd==x23, imm_val == -33, rs1_val == -65
// opcode: xori ; op1:x1; dest:x23; op1val:-0x41;  immval:-0x21
TEST_IMM_OP( xori, x23, x1, 0x60, -0x41, -0x21, x3, 4, x4)
    1244:	fbf00093          	li	ra,-65
    1248:	fdf0cb93          	xori	s7,ra,-33
    124c:	0171a223          	sw	s7,4(gp)

00001250 <inst_24>:

inst_24:
// rs1==x6, rd==x0, imm_val == -65, 
// opcode: xori ; op1:x6; dest:x0; op1val:-0x1;  immval:-0x41
TEST_IMM_OP( xori, x0, x6, 0, -0x1, -0x41, x3, 8, x4)
    1250:	fff00313          	li	t1,-1
    1254:	fbf34013          	xori	zero,t1,-65
    1258:	0001a423          	sw	zero,8(gp)

0000125c <inst_25>:

inst_25:
// rs1==x2, rd==x7, imm_val == -129, rs1_val == 1431655765
// opcode: xori ; op1:x2; dest:x7; op1val:0x55555555;  immval:-0x81
TEST_IMM_OP( xori, x7, x2, 0xaaaaaa2a, 0x55555555, -0x81, x3, 12, x4)
    125c:	55555137          	lui	sp,0x55555
    1260:	55510113          	addi	sp,sp,1365 # 55555555 <_end+0x55550551>
    1264:	f7f14393          	xori	t2,sp,-129
    1268:	0071a623          	sw	t2,12(gp)

0000126c <inst_26>:

inst_26:
// rs1==x0, rd==x14, imm_val == -257, 
// opcode: xori ; op1:x0; dest:x14; op1val:0x0;  immval:-0x101
TEST_IMM_OP( xori, x14, x0, 0xfffffeff, 0x0, -0x101, x3, 16, x4)
    126c:	00000013          	nop
    1270:	eff04713          	xori	a4,zero,-257
    1274:	00e1a823          	sw	a4,16(gp)

00001278 <inst_27>:

inst_27:
// rs1==x8, rd==x13, imm_val == 1365, 
// opcode: xori ; op1:x8; dest:x13; op1val:0x3fffffff;  immval:0x555
TEST_IMM_OP( xori, x13, x8, 0x3ffffaaa, 0x3fffffff, 0x555, x3, 20, x4)
    1278:	40000437          	lui	s0,0x40000
    127c:	fff40413          	addi	s0,s0,-1 # 3fffffff <_end+0x3fffaffb>
    1280:	55544693          	xori	a3,s0,1365
    1284:	00d1aa23          	sw	a3,20(gp)

00001288 <inst_28>:

inst_28:
// rs1==x25, rd==x12, imm_val == -1366, 
// opcode: xori ; op1:x25; dest:x12; op1val:-0x7;  immval:-0x556
TEST_IMM_OP( xori, x12, x25, 0x553, -0x7, -0x556, x3, 24, x4)
    1288:	ff900c93          	li	s9,-7
    128c:	aaacc613          	xori	a2,s9,-1366
    1290:	00c1ac23          	sw	a2,24(gp)

00001294 <inst_29>:

inst_29:
// rs1==x13, rd==x11, rs1_val == 8, 
// opcode: xori ; op1:x13; dest:x11; op1val:0x8;  immval:0x0
TEST_IMM_OP( xori, x11, x13, 0x8, 0x8, 0x0, x3, 28, x4)
    1294:	00800693          	li	a3,8
    1298:	0006c593          	xori	a1,a3,0
    129c:	00b1ae23          	sw	a1,28(gp)

000012a0 <inst_30>:

inst_30:
// rs1==x23, rd==x2, rs1_val == 16, 
// opcode: xori ; op1:x23; dest:x2; op1val:0x10;  immval:0x1
TEST_IMM_OP( xori, x2, x23, 0x11, 0x10, 0x1, x3, 32, x4)
    12a0:	01000b93          	li	s7,16
    12a4:	001bc113          	xori	sp,s7,1
    12a8:	0221a023          	sw	sp,32(gp)

000012ac <inst_31>:

inst_31:
// rs1==x5, rd==x28, rs1_val == 32, 
// opcode: xori ; op1:x5; dest:x28; op1val:0x20;  immval:0x555
TEST_IMM_OP( xori, x28, x5, 0x575, 0x20, 0x555, x3, 36, x4)
    12ac:	02000293          	li	t0,32
    12b0:	5552ce13          	xori	t3,t0,1365
    12b4:	03c1a223          	sw	t3,36(gp)

000012b8 <inst_32>:

inst_32:
// rs1_val == 64, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x40;  immval:0x100
TEST_IMM_OP( xori, x11, x10, 0x140, 0x40, 0x100, x3, 40, x4)
    12b8:	04000513          	li	a0,64
    12bc:	10054593          	xori	a1,a0,256
    12c0:	02b1a423          	sw	a1,40(gp)

000012c4 <inst_33>:

inst_33:
// rs1_val == 128, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x80;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x85, 0x80, 0x5, x3, 44, x4)
    12c4:	08000513          	li	a0,128
    12c8:	00554593          	xori	a1,a0,5
    12cc:	02b1a623          	sw	a1,44(gp)

000012d0 <inst_34>:

inst_34:
// rs1_val == 256, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x100;  immval:-0x41
TEST_IMM_OP( xori, x11, x10, 0xfffffebf, 0x100, -0x41, x3, 48, x4)
    12d0:	10000513          	li	a0,256
    12d4:	fbf54593          	xori	a1,a0,-65
    12d8:	02b1a823          	sw	a1,48(gp)

000012dc <inst_35>:

inst_35:
// rs1_val == 512, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x200;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x202, 0x200, 0x2, x3, 52, x4)
    12dc:	20000513          	li	a0,512
    12e0:	00254593          	xori	a1,a0,2
    12e4:	02b1aa23          	sw	a1,52(gp)

000012e8 <inst_36>:

inst_36:
// rs1_val == 1024, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x400;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffeab, 0x400, -0x555, x3, 56, x4)
    12e8:	40000513          	li	a0,1024
    12ec:	aab54593          	xori	a1,a0,-1365
    12f0:	02b1ac23          	sw	a1,56(gp)

000012f4 <inst_37>:

inst_37:
// rs1_val == 2048, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x800;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x804, 0x800, 0x4, x3, 60, x4)
    12f4:	00001537          	lui	a0,0x1
    12f8:	80050513          	addi	a0,a0,-2048 # 800 <offset+0x780>
    12fc:	00454593          	xori	a1,a0,4
    1300:	02b1ae23          	sw	a1,60(gp)

00001304 <inst_38>:

inst_38:
// rs1_val == 4096, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x1000;  immval:0x8
TEST_IMM_OP( xori, x11, x10, 0x1008, 0x1000, 0x8, x3, 64, x4)
    1304:	00001537          	lui	a0,0x1
    1308:	00854593          	xori	a1,a0,8
    130c:	04b1a023          	sw	a1,64(gp)

00001310 <inst_39>:

inst_39:
// rs1_val == 8192, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2000;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x2554, 0x2000, 0x554, x3, 68, x4)
    1310:	00002537          	lui	a0,0x2
    1314:	55454593          	xori	a1,a0,1364
    1318:	04b1a223          	sw	a1,68(gp)

0000131c <inst_40>:

inst_40:
// rs1_val == 16384, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4000;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x4004, 0x4000, 0x4, x3, 72, x4)
    131c:	00004537          	lui	a0,0x4
    1320:	00454593          	xori	a1,a0,4
    1324:	04b1a423          	sw	a1,72(gp)

00001328 <inst_41>:

inst_41:
// rs1_val == 32768, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x8000;  immval:0x7ff
TEST_IMM_OP( xori, x11, x10, 0x87ff, 0x8000, 0x7ff, x3, 76, x4)
    1328:	00008537          	lui	a0,0x8
    132c:	7ff54593          	xori	a1,a0,2047
    1330:	04b1a623          	sw	a1,76(gp)

00001334 <inst_42>:

inst_42:
// rs1_val == 65536, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x10000;  immval:0x40
TEST_IMM_OP( xori, x11, x10, 0x10040, 0x10000, 0x40, x3, 80, x4)
    1334:	00010537          	lui	a0,0x10
    1338:	04054593          	xori	a1,a0,64
    133c:	04b1a823          	sw	a1,80(gp)

00001340 <inst_43>:

inst_43:
// rs1_val == 131072, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x20000;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2002c, 0x20000, 0x2c, x3, 84, x4)
    1340:	00020537          	lui	a0,0x20
    1344:	02c54593          	xori	a1,a0,44
    1348:	04b1aa23          	sw	a1,84(gp)

0000134c <inst_44>:

inst_44:
// rs1_val == 262144, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x40000;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffbfaaa, 0x40000, -0x556, x3, 88, x4)
    134c:	00040537          	lui	a0,0x40
    1350:	aaa54593          	xori	a1,a0,-1366
    1354:	04b1ac23          	sw	a1,88(gp)

00001358 <inst_45>:

inst_45:
// rs1_val == 524288, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x80000;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x80333, 0x80000, 0x333, x3, 92, x4)
    1358:	00080537          	lui	a0,0x80
    135c:	33354593          	xori	a1,a0,819
    1360:	04b1ae23          	sw	a1,92(gp)

00001364 <inst_46>:

inst_46:
// rs1_val == 1048576, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x100000;  immval:-0x6
TEST_IMM_OP( xori, x11, x10, 0xffeffffa, 0x100000, -0x6, x3, 96, x4)
    1364:	00100537          	lui	a0,0x100
    1368:	ffa54593          	xori	a1,a0,-6
    136c:	06b1a023          	sw	a1,96(gp)

00001370 <inst_47>:

inst_47:
// rs1_val == 2097152, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x200000;  immval:-0x3
TEST_IMM_OP( xori, x11, x10, 0xffdffffd, 0x200000, -0x3, x3, 100, x4)
    1370:	00200537          	lui	a0,0x200
    1374:	ffd54593          	xori	a1,a0,-3
    1378:	06b1a223          	sw	a1,100(gp)

0000137c <inst_48>:

inst_48:
// rs1_val == 4194304, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x400000;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x400555, 0x400000, 0x555, x3, 104, x4)
    137c:	00400537          	lui	a0,0x400
    1380:	55554593          	xori	a1,a0,1365
    1384:	06b1a423          	sw	a1,104(gp)

00001388 <inst_49>:

inst_49:
// rs1_val == 8388608, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x800000;  immval:-0x9
TEST_IMM_OP( xori, x11, x10, 0xff7ffff7, 0x800000, -0x9, x3, 108, x4)
    1388:	00800537          	lui	a0,0x800
    138c:	ff754593          	xori	a1,a0,-9
    1390:	06b1a623          	sw	a1,108(gp)

00001394 <inst_50>:

inst_50:
// rs1_val == 16777216, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x1000005, 0x1000000, 0x5, x3, 112, x4)
    1394:	01000537          	lui	a0,0x1000
    1398:	00554593          	xori	a1,a0,5
    139c:	06b1a823          	sw	a1,112(gp)

000013a0 <inst_51>:

inst_51:
// rs1_val == 33554432, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2000000;  immval:-0x201
TEST_IMM_OP( xori, x11, x10, 0xfdfffdff, 0x2000000, -0x201, x3, 116, x4)
    13a0:	02000537          	lui	a0,0x2000
    13a4:	dff54593          	xori	a1,a0,-513
    13a8:	06b1aa23          	sw	a1,116(gp)

000013ac <inst_52>:

inst_52:
// rs1_val == 67108864, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x4000000, 0x4000000, 0x0, x3, 120, x4)
    13ac:	04000537          	lui	a0,0x4000
    13b0:	00054593          	xori	a1,a0,0
    13b4:	06b1ac23          	sw	a1,120(gp)

000013b8 <inst_53>:

inst_53:
// rs1_val == 134217728, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x8000334, 0x8000000, 0x334, x3, 124, x4)
    13b8:	08000537          	lui	a0,0x8000
    13bc:	33454593          	xori	a1,a0,820
    13c0:	06b1ae23          	sw	a1,124(gp)

000013c4 <inst_54>:

inst_54:
// rs1_val == 268435456, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x10000000;  immval:-0x41
TEST_IMM_OP( xori, x11, x10, 0xefffffbf, 0x10000000, -0x41, x3, 128, x4)
    13c4:	10000537          	lui	a0,0x10000
    13c8:	fbf54593          	xori	a1,a0,-65
    13cc:	08b1a023          	sw	a1,128(gp)

000013d0 <inst_55>:

inst_55:
// rs1_val == 536870912, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x20000000;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x20000555, 0x20000000, 0x555, x3, 132, x4)
    13d0:	20000537          	lui	a0,0x20000
    13d4:	55554593          	xori	a1,a0,1365
    13d8:	08b1a223          	sw	a1,132(gp)

000013dc <inst_56>:

inst_56:
// rs1_val == 1073741824, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x40000000;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xbffffaaa, 0x40000000, -0x556, x3, 136, x4)
    13dc:	40000537          	lui	a0,0x40000
    13e0:	aaa54593          	xori	a1,a0,-1366
    13e4:	08b1a423          	sw	a1,136(gp)

000013e8 <inst_57>:

inst_57:
// rs1_val == -2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x2;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xfffffffa, -0x2, 0x4, x3, 140, x4)
    13e8:	ffe00513          	li	a0,-2
    13ec:	00454593          	xori	a1,a0,4
    13f0:	08b1a623          	sw	a1,140(gp)

000013f4 <inst_58>:

inst_58:
// rs1_val == -3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x3;  immval:-0x3
TEST_IMM_OP( xori, x11, x10, 0x0, -0x3, -0x3, x3, 144, x4)
    13f4:	ffd00513          	li	a0,-3
    13f8:	ffd54593          	xori	a1,a0,-3
    13fc:	08b1a823          	sw	a1,144(gp)

00001400 <inst_59>:

inst_59:
// rs1_val == -5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x5;  immval:-0x400
TEST_IMM_OP( xori, x11, x10, 0x3fb, -0x5, -0x400, x3, 148, x4)
    1400:	ffb00513          	li	a0,-5
    1404:	c0054593          	xori	a1,a0,-1024
    1408:	08b1aa23          	sw	a1,148(gp)

0000140c <inst_60>:

inst_60:
// rs1_val == -9, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x9;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x55c, -0x9, -0x555, x3, 152, x4)
    140c:	ff700513          	li	a0,-9
    1410:	aab54593          	xori	a1,a0,-1365
    1414:	08b1ac23          	sw	a1,152(gp)

00001418 <inst_61>:

inst_61:
// rs1_val == -17, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x11;  immval:0x80
TEST_IMM_OP( xori, x11, x10, 0xffffff6f, -0x11, 0x80, x3, 156, x4)
    1418:	fef00513          	li	a0,-17
    141c:	08054593          	xori	a1,a0,128
    1420:	08b1ae23          	sw	a1,156(gp)

00001424 <inst_62>:

inst_62:
// rs1_val == -129, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x81;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xfffff919, -0x81, 0x666, x3, 160, x4)
    1424:	f7f00513          	li	a0,-129
    1428:	66654593          	xori	a1,a0,1638
    142c:	0ab1a023          	sw	a1,160(gp)

00001430 <inst_63>:

inst_63:
// rs1_val == -257, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x101;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xfffffef9, -0x101, 0x6, x3, 164, x4)
    1430:	eff00513          	li	a0,-257
    1434:	00654593          	xori	a1,a0,6
    1438:	0ab1a223          	sw	a1,164(gp)

0000143c <inst_64>:

inst_64:
// rs1_val == -1025, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x401;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xfffffbf9, -0x401, 0x6, x3, 168, x4)
    143c:	bff00513          	li	a0,-1025
    1440:	00654593          	xori	a1,a0,6
    1444:	0ab1a423          	sw	a1,168(gp)

00001448 <inst_65>:

inst_65:
// rs1_val == -2049, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x801;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xfffff7fd, -0x801, 0x2, x3, 172, x4)
    1448:	fffff537          	lui	a0,0xfffff
    144c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffffa7fb>
    1450:	00254593          	xori	a1,a0,2
    1454:	0ab1a623          	sw	a1,172(gp)

00001458 <inst_66>:

inst_66:
// rs1_val == -4097, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x1001;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffffefff, -0x1001, 0x0, x3, 176, x4)
    1458:	fffff537          	lui	a0,0xfffff
    145c:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0xffff9ffb>
    1460:	00054593          	xori	a1,a0,0
    1464:	0ab1a823          	sw	a1,176(gp)

00001468 <inst_67>:

inst_67:
// rs1_val == -8193, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x7ff
TEST_IMM_OP( xori, x11, x10, 0xffffd800, -0x2001, 0x7ff, x3, 180, x4)
    1468:	ffffe537          	lui	a0,0xffffe
    146c:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffff8ffb>
    1470:	7ff54593          	xori	a1,a0,2047
    1474:	0ab1aa23          	sw	a1,180(gp)

00001478 <inst_68>:

inst_68:
// rs1_val == -16385, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x4001;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x402b, -0x4001, -0x2c, x3, 184, x4)
    1478:	ffffc537          	lui	a0,0xffffc
    147c:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff6ffb>
    1480:	fd454593          	xori	a1,a0,-44
    1484:	0ab1ac23          	sw	a1,184(gp)

00001488 <inst_69>:

inst_69:
// rs1_val == -32769, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffff799a, -0x8001, 0x665, x3, 188, x4)
    1488:	ffff8537          	lui	a0,0xffff8
    148c:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0xffff2ffb>
    1490:	66554593          	xori	a1,a0,1637
    1494:	0ab1ae23          	sw	a1,188(gp)

00001498 <inst_70>:

inst_70:
// rs1_val == -65537, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x10001;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xfffefccd, -0x10001, 0x332, x3, 192, x4)
    1498:	ffff0537          	lui	a0,0xffff0
    149c:	fff50513          	addi	a0,a0,-1 # fffeffff <_end+0xfffeaffb>
    14a0:	33254593          	xori	a1,a0,818
    14a4:	0cb1a023          	sw	a1,192(gp)

000014a8 <inst_71>:

inst_71:
// rs1_val == -131073, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x20001;  immval:-0x101
TEST_IMM_OP( xori, x11, x10, 0x20100, -0x20001, -0x101, x3, 196, x4)
    14a8:	fffe0537          	lui	a0,0xfffe0
    14ac:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0xfffdaffb>
    14b0:	eff54593          	xori	a1,a0,-257
    14b4:	0cb1a223          	sw	a1,196(gp)

000014b8 <inst_72>:

inst_72:
// rs1_val == -262145, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x40001;  immval:-0x800
TEST_IMM_OP( xori, x11, x10, 0x407ff, -0x40001, -0x800, x3, 200, x4)
    14b8:	fffc0537          	lui	a0,0xfffc0
    14bc:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffbaffb>
    14c0:	80054593          	xori	a1,a0,-2048
    14c4:	0cb1a423          	sw	a1,200(gp)

000014c8 <inst_73>:

inst_73:
// rs1_val == -2097153, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffdfffff, -0x200001, 0x0, x3, 204, x4)
    14c8:	ffe00537          	lui	a0,0xffe00
    14cc:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdfaffb>
    14d0:	00054593          	xori	a1,a0,0
    14d4:	0cb1a623          	sw	a1,204(gp)

000014d8 <inst_74>:

inst_74:
// rs1_val == -4194305, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x400001;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffbff99a, -0x400001, 0x665, x3, 208, x4)
    14d8:	ffc00537          	lui	a0,0xffc00
    14dc:	fff50513          	addi	a0,a0,-1 # ffbfffff <_end+0xffbfaffb>
    14e0:	66554593          	xori	a1,a0,1637
    14e4:	0cb1a823          	sw	a1,208(gp)

000014e8 <inst_75>:

inst_75:
// rs1_val == -8388609, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xff7ff998, -0x800001, 0x667, x3, 212, x4)
    14e8:	ff800537          	lui	a0,0xff800
    14ec:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7faffb>
    14f0:	66754593          	xori	a1,a0,1639
    14f4:	0cb1aa23          	sw	a1,212(gp)

000014f8 <inst_76>:

inst_76:
// rs1_val == -16777217, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x1000001;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x1000555, -0x1000001, -0x556, x3, 216, x4)
    14f8:	ff000537          	lui	a0,0xff000
    14fc:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeffaffb>
    1500:	aaa54593          	xori	a1,a0,-1366
    1504:	0cb1ac23          	sw	a1,216(gp)

00001508 <inst_77>:

inst_77:
// rs1_val == -33554433, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x2000001;  immval:-0x8
TEST_IMM_OP( xori, x11, x10, 0x2000007, -0x2000001, -0x8, x3, 220, x4)
    1508:	fe000537          	lui	a0,0xfe000
    150c:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdffaffb>
    1510:	ff854593          	xori	a1,a0,-8
    1514:	0cb1ae23          	sw	a1,220(gp)

00001518 <inst_78>:

inst_78:
// rs1_val == -67108865, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x4000001;  immval:-0x2
TEST_IMM_OP( xori, x11, x10, 0x4000001, -0x4000001, -0x2, x3, 224, x4)
    1518:	fc000537          	lui	a0,0xfc000
    151c:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbffaffb>
    1520:	ffe54593          	xori	a1,a0,-2
    1524:	0eb1a023          	sw	a1,224(gp)

00001528 <inst_79>:

inst_79:
// rs1_val == -134217729, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x8000001;  immval:-0x400
TEST_IMM_OP( xori, x11, x10, 0x80003ff, -0x8000001, -0x400, x3, 228, x4)
    1528:	f8000537          	lui	a0,0xf8000
    152c:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ffaffb>
    1530:	c0054593          	xori	a1,a0,-1024
    1534:	0eb1a223          	sw	a1,228(gp)

00001538 <inst_80>:

inst_80:
// rs1_val == -268435457, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x10000001;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x1000002b, -0x10000001, -0x2c, x3, 232, x4)
    1538:	f0000537          	lui	a0,0xf0000
    153c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefffaffb>
    1540:	fd454593          	xori	a1,a0,-44
    1544:	0eb1a423          	sw	a1,232(gp)

00001548 <inst_81>:

inst_81:
// rs1_val == -536870913, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x20000001;  immval:-0x101
TEST_IMM_OP( xori, x11, x10, 0x20000100, -0x20000001, -0x101, x3, 236, x4)
    1548:	e0000537          	lui	a0,0xe0000
    154c:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfffaffb>
    1550:	eff54593          	xori	a1,a0,-257
    1554:	0eb1a623          	sw	a1,236(gp)

00001558 <inst_82>:

inst_82:
// rs1_val == -1431655766, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x200
TEST_IMM_OP( xori, x11, x10, 0xaaaaa8aa, -0x55555556, 0x200, x3, 240, x4)
    1558:	aaaab537          	lui	a0,0xaaaab
    155c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1560:	20054593          	xori	a1,a0,512
    1564:	0eb1a823          	sw	a1,240(gp)

00001568 <inst_83>:

inst_83:
// rs1_val==3 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x0, 0x3, 0x3, x3, 244, x4)
    1568:	00300513          	li	a0,3
    156c:	00354593          	xori	a1,a0,3
    1570:	0eb1aa23          	sw	a1,244(gp)

00001574 <inst_84>:

inst_84:
// rs1_val==3 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x556, 0x3, 0x555, x3, 248, x4)
    1574:	00300513          	li	a0,3
    1578:	55554593          	xori	a1,a0,1365
    157c:	0eb1ac23          	sw	a1,248(gp)

00001580 <inst_85>:

inst_85:
// rs1_val==3 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaa9, 0x3, -0x556, x3, 252, x4)
    1580:	00300513          	li	a0,3
    1584:	aaa54593          	xori	a1,a0,-1366
    1588:	0eb1ae23          	sw	a1,252(gp)

0000158c <inst_86>:

inst_86:
// rs1_val==3 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x6, 0x3, 0x5, x3, 256, x4)
    158c:	00300513          	li	a0,3
    1590:	00554593          	xori	a1,a0,5
    1594:	10b1a023          	sw	a1,256(gp)

00001598 <inst_87>:

inst_87:
// rs1_val==3 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x330, 0x3, 0x333, x3, 260, x4)
    1598:	00300513          	li	a0,3
    159c:	33354593          	xori	a1,a0,819
    15a0:	10b1a223          	sw	a1,260(gp)

000015a4 <inst_88>:

inst_88:
// rs1_val==3 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x665, 0x3, 0x666, x3, 264, x4)
    15a4:	00300513          	li	a0,3
    15a8:	66654593          	xori	a1,a0,1638
    15ac:	10b1a423          	sw	a1,264(gp)

000015b0 <inst_89>:

inst_89:
// rs1_val==3 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd0, 0x3, -0x2d, x3, 268, x4)
    15b0:	00300513          	li	a0,3
    15b4:	fd354593          	xori	a1,a0,-45
    15b8:	10b1a623          	sw	a1,268(gp)

000015bc <inst_90>:

inst_90:
// rs1_val==3 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2e, 0x3, 0x2d, x3, 272, x4)
    15bc:	00300513          	li	a0,3
    15c0:	02d54593          	xori	a1,a0,45
    15c4:	10b1a823          	sw	a1,272(gp)

000015c8 <inst_91>:

inst_91:
// rs1_val==3 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x1, 0x3, 0x2, x3, 276, x4)
    15c8:	00300513          	li	a0,3
    15cc:	00254593          	xori	a1,a0,2
    15d0:	10b1aa23          	sw	a1,276(gp)

000015d4 <inst_92>:

inst_92:
// rs1_val==3 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x557, 0x3, 0x554, x3, 280, x4)
    15d4:	00300513          	li	a0,3
    15d8:	55454593          	xori	a1,a0,1364
    15dc:	10b1ac23          	sw	a1,280(gp)

000015e0 <inst_93>:

inst_93:
// rs1_val==3 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x3, 0x3, 0x0, x3, 284, x4)
    15e0:	00300513          	li	a0,3
    15e4:	00054593          	xori	a1,a0,0
    15e8:	10b1ae23          	sw	a1,284(gp)

000015ec <inst_94>:

inst_94:
// rs1_val==3 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x7, 0x3, 0x4, x3, 288, x4)
    15ec:	00300513          	li	a0,3
    15f0:	00454593          	xori	a1,a0,4
    15f4:	12b1a023          	sw	a1,288(gp)

000015f8 <inst_95>:

inst_95:
// rs1_val==3 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x331, 0x3, 0x332, x3, 292, x4)
    15f8:	00300513          	li	a0,3
    15fc:	33254593          	xori	a1,a0,818
    1600:	12b1a223          	sw	a1,292(gp)

00001604 <inst_96>:

inst_96:
// rs1_val==3 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x666, 0x3, 0x665, x3, 296, x4)
    1604:	00300513          	li	a0,3
    1608:	66554593          	xori	a1,a0,1637
    160c:	12b1a423          	sw	a1,296(gp)

00001610 <inst_97>:

inst_97:
// rs1_val==3 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2f, 0x3, 0x2c, x3, 300, x4)
    1610:	00300513          	li	a0,3
    1614:	02c54593          	xori	a1,a0,44
    1618:	12b1a623          	sw	a1,300(gp)

0000161c <inst_98>:

inst_98:
// rs1_val==3 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x555, 0x3, 0x556, x3, 304, x4)
    161c:	00300513          	li	a0,3
    1620:	55654593          	xori	a1,a0,1366
    1624:	12b1a823          	sw	a1,304(gp)

00001628 <inst_99>:

inst_99:
// rs1_val==3 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaa8, 0x3, -0x555, x3, 308, x4)
    1628:	00300513          	li	a0,3
    162c:	aab54593          	xori	a1,a0,-1365
    1630:	12b1aa23          	sw	a1,308(gp)

00001634 <inst_100>:

inst_100:
// rs1_val==3 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x5, 0x3, 0x6, x3, 312, x4)
    1634:	00300513          	li	a0,3
    1638:	00654593          	xori	a1,a0,6
    163c:	12b1ac23          	sw	a1,312(gp)

00001640 <inst_101>:

inst_101:
// rs1_val==3 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x337, 0x3, 0x334, x3, 316, x4)
    1640:	00300513          	li	a0,3
    1644:	33454593          	xori	a1,a0,820
    1648:	12b1ae23          	sw	a1,316(gp)

0000164c <inst_102>:

inst_102:
// rs1_val==3 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x664, 0x3, 0x667, x3, 320, x4)
    164c:	00300513          	li	a0,3
    1650:	66754593          	xori	a1,a0,1639
    1654:	14b1a023          	sw	a1,320(gp)

00001658 <inst_103>:

inst_103:
// rs1_val==3 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd7, 0x3, -0x2c, x3, 324, x4)
    1658:	00300513          	li	a0,3
    165c:	fd454593          	xori	a1,a0,-44
    1660:	14b1a223          	sw	a1,324(gp)

00001664 <inst_104>:

inst_104:
// rs1_val==3 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x3;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2d, 0x3, 0x2e, x3, 328, x4)
    1664:	00300513          	li	a0,3
    1668:	02e54593          	xori	a1,a0,46
    166c:	14b1a423          	sw	a1,328(gp)

00001670 <inst_105>:

inst_105:
// rs1_val==1431655765 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x55555556, 0x55555555, 0x3, x3, 332, x4)
    1670:	55555537          	lui	a0,0x55555
    1674:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1678:	00354593          	xori	a1,a0,3
    167c:	14b1a623          	sw	a1,332(gp)

00001680 <inst_106>:

inst_106:
// rs1_val==1431655765 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x55555000, 0x55555555, 0x555, x3, 336, x4)
    1680:	55555537          	lui	a0,0x55555
    1684:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1688:	55554593          	xori	a1,a0,1365
    168c:	14b1a823          	sw	a1,336(gp)

00001690 <inst_107>:

inst_107:
// rs1_val==1431655765 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, 0x55555555, -0x556, x3, 340, x4)
    1690:	55555537          	lui	a0,0x55555
    1694:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1698:	aaa54593          	xori	a1,a0,-1366
    169c:	14b1aa23          	sw	a1,340(gp)

000016a0 <inst_108>:

inst_108:
// rs1_val==1431655765 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x55555550, 0x55555555, 0x5, x3, 344, x4)
    16a0:	55555537          	lui	a0,0x55555
    16a4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16a8:	00554593          	xori	a1,a0,5
    16ac:	14b1ac23          	sw	a1,344(gp)

000016b0 <inst_109>:

inst_109:
// rs1_val==1431655765 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x55555666, 0x55555555, 0x333, x3, 348, x4)
    16b0:	55555537          	lui	a0,0x55555
    16b4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16b8:	33354593          	xori	a1,a0,819
    16bc:	14b1ae23          	sw	a1,348(gp)

000016c0 <inst_110>:

inst_110:
// rs1_val==1431655765 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x55555333, 0x55555555, 0x666, x3, 352, x4)
    16c0:	55555537          	lui	a0,0x55555
    16c4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16c8:	66654593          	xori	a1,a0,1638
    16cc:	16b1a023          	sw	a1,352(gp)

000016d0 <inst_111>:

inst_111:
// rs1_val==1431655765 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa86, 0x55555555, -0x2d, x3, 356, x4)
    16d0:	55555537          	lui	a0,0x55555
    16d4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16d8:	fd354593          	xori	a1,a0,-45
    16dc:	16b1a223          	sw	a1,356(gp)

000016e0 <inst_112>:

inst_112:
// rs1_val==1431655765 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555578, 0x55555555, 0x2d, x3, 360, x4)
    16e0:	55555537          	lui	a0,0x55555
    16e4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16e8:	02d54593          	xori	a1,a0,45
    16ec:	16b1a423          	sw	a1,360(gp)

000016f0 <inst_113>:

inst_113:
// rs1_val==1431655765 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x55555557, 0x55555555, 0x2, x3, 364, x4)
    16f0:	55555537          	lui	a0,0x55555
    16f4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    16f8:	00254593          	xori	a1,a0,2
    16fc:	16b1a623          	sw	a1,364(gp)

00001700 <inst_114>:

inst_114:
// rs1_val==1431655765 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x55555001, 0x55555555, 0x554, x3, 368, x4)
    1700:	55555537          	lui	a0,0x55555
    1704:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1708:	55454593          	xori	a1,a0,1364
    170c:	16b1a823          	sw	a1,368(gp)

00001710 <inst_115>:

inst_115:
// rs1_val==1431655765 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x55555555, 0x55555555, 0x0, x3, 372, x4)
    1710:	55555537          	lui	a0,0x55555
    1714:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1718:	00054593          	xori	a1,a0,0
    171c:	16b1aa23          	sw	a1,372(gp)

00001720 <inst_116>:

inst_116:
// rs1_val==1431655765 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x55555551, 0x55555555, 0x4, x3, 376, x4)
    1720:	55555537          	lui	a0,0x55555
    1724:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1728:	00454593          	xori	a1,a0,4
    172c:	16b1ac23          	sw	a1,376(gp)

00001730 <inst_117>:

inst_117:
// rs1_val==1431655765 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x55555667, 0x55555555, 0x332, x3, 380, x4)
    1730:	55555537          	lui	a0,0x55555
    1734:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1738:	33254593          	xori	a1,a0,818
    173c:	16b1ae23          	sw	a1,380(gp)

00001740 <inst_118>:

inst_118:
// rs1_val==1431655765 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x55555330, 0x55555555, 0x665, x3, 384, x4)
    1740:	55555537          	lui	a0,0x55555
    1744:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1748:	66554593          	xori	a1,a0,1637
    174c:	18b1a023          	sw	a1,384(gp)

00001750 <inst_119>:

inst_119:
// rs1_val==1431655765 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x55555579, 0x55555555, 0x2c, x3, 388, x4)
    1750:	55555537          	lui	a0,0x55555
    1754:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1758:	02c54593          	xori	a1,a0,44
    175c:	18b1a223          	sw	a1,388(gp)

00001760 <inst_120>:

inst_120:
// rs1_val==1431655765 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x55555003, 0x55555555, 0x556, x3, 392, x4)
    1760:	55555537          	lui	a0,0x55555
    1764:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1768:	55654593          	xori	a1,a0,1366
    176c:	18b1a423          	sw	a1,392(gp)

00001770 <inst_121>:

inst_121:
// rs1_val==1431655765 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, 0x55555555, -0x555, x3, 396, x4)
    1770:	55555537          	lui	a0,0x55555
    1774:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1778:	aab54593          	xori	a1,a0,-1365
    177c:	18b1a623          	sw	a1,396(gp)

00001780 <inst_122>:

inst_122:
// rs1_val==1431655765 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x55555553, 0x55555555, 0x6, x3, 400, x4)
    1780:	55555537          	lui	a0,0x55555
    1784:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1788:	00654593          	xori	a1,a0,6
    178c:	18b1a823          	sw	a1,400(gp)

00001790 <inst_123>:

inst_123:
// rs1_val==1431655765 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x55555661, 0x55555555, 0x334, x3, 404, x4)
    1790:	55555537          	lui	a0,0x55555
    1794:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    1798:	33454593          	xori	a1,a0,820
    179c:	18b1aa23          	sw	a1,404(gp)

000017a0 <inst_124>:

inst_124:
// rs1_val==1431655765 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x55555332, 0x55555555, 0x667, x3, 408, x4)
    17a0:	55555537          	lui	a0,0x55555
    17a4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    17a8:	66754593          	xori	a1,a0,1639
    17ac:	18b1ac23          	sw	a1,408(gp)

000017b0 <inst_125>:

inst_125:
// rs1_val==1431655765 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa81, 0x55555555, -0x2c, x3, 412, x4)
    17b0:	55555537          	lui	a0,0x55555
    17b4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    17b8:	fd454593          	xori	a1,a0,-44
    17bc:	18b1ae23          	sw	a1,412(gp)

000017c0 <inst_126>:

inst_126:
// rs1_val==1431655765 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x5555557b, 0x55555555, 0x2e, x3, 416, x4)
    17c0:	55555537          	lui	a0,0x55555
    17c4:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55550551>
    17c8:	02e54593          	xori	a1,a0,46
    17cc:	1ab1a023          	sw	a1,416(gp)

000017d0 <inst_127>:

inst_127:
// rs1_val==-1431655766 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa9, -0x55555556, 0x3, x3, 420, x4)
    17d0:	aaaab537          	lui	a0,0xaaaab
    17d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17d8:	00354593          	xori	a1,a0,3
    17dc:	1ab1a223          	sw	a1,420(gp)

000017e0 <inst_128>:

inst_128:
// rs1_val==-1431655766 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, -0x55555556, 0x555, x3, 424, x4)
    17e0:	aaaab537          	lui	a0,0xaaaab
    17e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17e8:	55554593          	xori	a1,a0,1365
    17ec:	1ab1a423          	sw	a1,424(gp)

000017f0 <inst_129>:

inst_129:
// rs1_val==-1431655766 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x55555000, -0x55555556, -0x556, x3, 428, x4)
    17f0:	aaaab537          	lui	a0,0xaaaab
    17f4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    17f8:	aaa54593          	xori	a1,a0,-1366
    17fc:	1ab1a623          	sw	a1,428(gp)

00001800 <inst_130>:

inst_130:
// rs1_val==-1431655766 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaf, -0x55555556, 0x5, x3, 432, x4)
    1800:	aaaab537          	lui	a0,0xaaaab
    1804:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1808:	00554593          	xori	a1,a0,5
    180c:	1ab1a823          	sw	a1,432(gp)

00001810 <inst_131>:

inst_131:
// rs1_val==-1431655766 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xaaaaa999, -0x55555556, 0x333, x3, 436, x4)
    1810:	aaaab537          	lui	a0,0xaaaab
    1814:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1818:	33354593          	xori	a1,a0,819
    181c:	1ab1aa23          	sw	a1,436(gp)

00001820 <inst_132>:

inst_132:
// rs1_val==-1431655766 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccc, -0x55555556, 0x666, x3, 440, x4)
    1820:	aaaab537          	lui	a0,0xaaaab
    1824:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1828:	66654593          	xori	a1,a0,1638
    182c:	1ab1ac23          	sw	a1,440(gp)

00001830 <inst_133>:

inst_133:
// rs1_val==-1431655766 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555579, -0x55555556, -0x2d, x3, 444, x4)
    1830:	aaaab537          	lui	a0,0xaaaab
    1834:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1838:	fd354593          	xori	a1,a0,-45
    183c:	1ab1ae23          	sw	a1,444(gp)

00001840 <inst_134>:

inst_134:
// rs1_val==-1431655766 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa87, -0x55555556, 0x2d, x3, 448, x4)
    1840:	aaaab537          	lui	a0,0xaaaab
    1844:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1848:	02d54593          	xori	a1,a0,45
    184c:	1cb1a023          	sw	a1,448(gp)

00001850 <inst_135>:

inst_135:
// rs1_val==-1431655766 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa8, -0x55555556, 0x2, x3, 452, x4)
    1850:	aaaab537          	lui	a0,0xaaaab
    1854:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1858:	00254593          	xori	a1,a0,2
    185c:	1cb1a223          	sw	a1,452(gp)

00001860 <inst_136>:

inst_136:
// rs1_val==-1431655766 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, -0x55555556, 0x554, x3, 456, x4)
    1860:	aaaab537          	lui	a0,0xaaaab
    1864:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1868:	55454593          	xori	a1,a0,1364
    186c:	1cb1a423          	sw	a1,456(gp)

00001870 <inst_137>:

inst_137:
// rs1_val==-1431655766 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaa, -0x55555556, 0x0, x3, 460, x4)
    1870:	aaaab537          	lui	a0,0xaaaab
    1874:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1878:	00054593          	xori	a1,a0,0
    187c:	1cb1a623          	sw	a1,460(gp)

00001880 <inst_138>:

inst_138:
// rs1_val==-1431655766 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaae, -0x55555556, 0x4, x3, 464, x4)
    1880:	aaaab537          	lui	a0,0xaaaab
    1884:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1888:	00454593          	xori	a1,a0,4
    188c:	1cb1a823          	sw	a1,464(gp)

00001890 <inst_139>:

inst_139:
// rs1_val==-1431655766 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xaaaaa998, -0x55555556, 0x332, x3, 468, x4)
    1890:	aaaab537          	lui	a0,0xaaaab
    1894:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1898:	33254593          	xori	a1,a0,818
    189c:	1cb1aa23          	sw	a1,468(gp)

000018a0 <inst_140>:

inst_140:
// rs1_val==-1431655766 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccf, -0x55555556, 0x665, x3, 472, x4)
    18a0:	aaaab537          	lui	a0,0xaaaab
    18a4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18a8:	66554593          	xori	a1,a0,1637
    18ac:	1cb1ac23          	sw	a1,472(gp)

000018b0 <inst_141>:

inst_141:
// rs1_val==-1431655766 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa86, -0x55555556, 0x2c, x3, 476, x4)
    18b0:	aaaab537          	lui	a0,0xaaaab
    18b4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18b8:	02c54593          	xori	a1,a0,44
    18bc:	1cb1ae23          	sw	a1,476(gp)

000018c0 <inst_142>:

inst_142:
// rs1_val==-1431655766 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffc, -0x55555556, 0x556, x3, 480, x4)
    18c0:	aaaab537          	lui	a0,0xaaaab
    18c4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18c8:	55654593          	xori	a1,a0,1366
    18cc:	1eb1a023          	sw	a1,480(gp)

000018d0 <inst_143>:

inst_143:
// rs1_val==-1431655766 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x55555001, -0x55555556, -0x555, x3, 484, x4)
    18d0:	aaaab537          	lui	a0,0xaaaab
    18d4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18d8:	aab54593          	xori	a1,a0,-1365
    18dc:	1eb1a223          	sw	a1,484(gp)

000018e0 <inst_144>:

inst_144:
// rs1_val==-1431655766 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaac, -0x55555556, 0x6, x3, 488, x4)
    18e0:	aaaab537          	lui	a0,0xaaaab
    18e4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18e8:	00654593          	xori	a1,a0,6
    18ec:	1eb1a423          	sw	a1,488(gp)

000018f0 <inst_145>:

inst_145:
// rs1_val==-1431655766 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xaaaaa99e, -0x55555556, 0x334, x3, 492, x4)
    18f0:	aaaab537          	lui	a0,0xaaaab
    18f4:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    18f8:	33454593          	xori	a1,a0,820
    18fc:	1eb1a623          	sw	a1,492(gp)

00001900 <inst_146>:

inst_146:
// rs1_val==-1431655766 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccd, -0x55555556, 0x667, x3, 496, x4)
    1900:	aaaab537          	lui	a0,0xaaaab
    1904:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1908:	66754593          	xori	a1,a0,1639
    190c:	1eb1a823          	sw	a1,496(gp)

00001910 <inst_147>:

inst_147:
// rs1_val==-1431655766 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x5555557e, -0x55555556, -0x2c, x3, 500, x4)
    1910:	aaaab537          	lui	a0,0xaaaab
    1914:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1918:	fd454593          	xori	a1,a0,-44
    191c:	1eb1aa23          	sw	a1,500(gp)

00001920 <inst_148>:

inst_148:
// rs1_val==-1431655766 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa84, -0x55555556, 0x2e, x3, 504, x4)
    1920:	aaaab537          	lui	a0,0xaaaab
    1924:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa5aa6>
    1928:	02e54593          	xori	a1,a0,46
    192c:	1eb1ac23          	sw	a1,504(gp)

00001930 <inst_149>:

inst_149:
// rs1_val==5 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x6, 0x5, 0x3, x3, 508, x4)
    1930:	00500513          	li	a0,5
    1934:	00354593          	xori	a1,a0,3
    1938:	1eb1ae23          	sw	a1,508(gp)

0000193c <inst_150>:

inst_150:
// rs1_val==5 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x550, 0x5, 0x555, x3, 512, x4)
    193c:	00500513          	li	a0,5
    1940:	55554593          	xori	a1,a0,1365
    1944:	20b1a023          	sw	a1,512(gp)

00001948 <inst_151>:

inst_151:
// rs1_val==5 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaaf, 0x5, -0x556, x3, 516, x4)
    1948:	00500513          	li	a0,5
    194c:	aaa54593          	xori	a1,a0,-1366
    1950:	20b1a223          	sw	a1,516(gp)

00001954 <inst_152>:

inst_152:
// rs1_val==5 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x0, 0x5, 0x5, x3, 520, x4)
    1954:	00500513          	li	a0,5
    1958:	00554593          	xori	a1,a0,5
    195c:	20b1a423          	sw	a1,520(gp)

00001960 <inst_153>:

inst_153:
// rs1_val==5 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x336, 0x5, 0x333, x3, 524, x4)
    1960:	00500513          	li	a0,5
    1964:	33354593          	xori	a1,a0,819
    1968:	20b1a623          	sw	a1,524(gp)

0000196c <inst_154>:

inst_154:
// rs1_val==5 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x663, 0x5, 0x666, x3, 528, x4)
    196c:	00500513          	li	a0,5
    1970:	66654593          	xori	a1,a0,1638
    1974:	20b1a823          	sw	a1,528(gp)

00001978 <inst_155>:

inst_155:
// rs1_val==5 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd6, 0x5, -0x2d, x3, 532, x4)
    1978:	00500513          	li	a0,5
    197c:	fd354593          	xori	a1,a0,-45
    1980:	20b1aa23          	sw	a1,532(gp)

00001984 <inst_156>:

inst_156:
// rs1_val==5 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x28, 0x5, 0x2d, x3, 536, x4)
    1984:	00500513          	li	a0,5
    1988:	02d54593          	xori	a1,a0,45
    198c:	20b1ac23          	sw	a1,536(gp)

00001990 <inst_157>:

inst_157:
// rs1_val==5 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x7, 0x5, 0x2, x3, 540, x4)
    1990:	00500513          	li	a0,5
    1994:	00254593          	xori	a1,a0,2
    1998:	20b1ae23          	sw	a1,540(gp)

0000199c <inst_158>:

inst_158:
// rs1_val==5 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x551, 0x5, 0x554, x3, 544, x4)
    199c:	00500513          	li	a0,5
    19a0:	55454593          	xori	a1,a0,1364
    19a4:	22b1a023          	sw	a1,544(gp)

000019a8 <inst_159>:

inst_159:
// rs1_val==5 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x5, 0x5, 0x0, x3, 548, x4)
    19a8:	00500513          	li	a0,5
    19ac:	00054593          	xori	a1,a0,0
    19b0:	22b1a223          	sw	a1,548(gp)

000019b4 <inst_160>:

inst_160:
// rs1_val==5 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x1, 0x5, 0x4, x3, 552, x4)
    19b4:	00500513          	li	a0,5
    19b8:	00454593          	xori	a1,a0,4
    19bc:	22b1a423          	sw	a1,552(gp)

000019c0 <inst_161>:

inst_161:
// rs1_val==5 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x337, 0x5, 0x332, x3, 556, x4)
    19c0:	00500513          	li	a0,5
    19c4:	33254593          	xori	a1,a0,818
    19c8:	22b1a623          	sw	a1,556(gp)

000019cc <inst_162>:

inst_162:
// rs1_val==5 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x660, 0x5, 0x665, x3, 560, x4)
    19cc:	00500513          	li	a0,5
    19d0:	66554593          	xori	a1,a0,1637
    19d4:	22b1a823          	sw	a1,560(gp)

000019d8 <inst_163>:

inst_163:
// rs1_val==5 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x29, 0x5, 0x2c, x3, 564, x4)
    19d8:	00500513          	li	a0,5
    19dc:	02c54593          	xori	a1,a0,44
    19e0:	22b1aa23          	sw	a1,564(gp)

000019e4 <inst_164>:

inst_164:
// rs1_val==5 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x553, 0x5, 0x556, x3, 568, x4)
    19e4:	00500513          	li	a0,5
    19e8:	55654593          	xori	a1,a0,1366
    19ec:	22b1ac23          	sw	a1,568(gp)

000019f0 <inst_165>:

inst_165:
// rs1_val==5 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaae, 0x5, -0x555, x3, 572, x4)
    19f0:	00500513          	li	a0,5
    19f4:	aab54593          	xori	a1,a0,-1365
    19f8:	22b1ae23          	sw	a1,572(gp)

000019fc <inst_166>:

inst_166:
// rs1_val==5 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x3, 0x5, 0x6, x3, 576, x4)
    19fc:	00500513          	li	a0,5
    1a00:	00654593          	xori	a1,a0,6
    1a04:	24b1a023          	sw	a1,576(gp)

00001a08 <inst_167>:

inst_167:
// rs1_val==5 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x331, 0x5, 0x334, x3, 580, x4)
    1a08:	00500513          	li	a0,5
    1a0c:	33454593          	xori	a1,a0,820
    1a10:	24b1a223          	sw	a1,580(gp)

00001a14 <inst_168>:

inst_168:
// rs1_val==5 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x662, 0x5, 0x667, x3, 584, x4)
    1a14:	00500513          	li	a0,5
    1a18:	66754593          	xori	a1,a0,1639
    1a1c:	24b1a423          	sw	a1,584(gp)

00001a20 <inst_169>:

inst_169:
// rs1_val==5 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd1, 0x5, -0x2c, x3, 588, x4)
    1a20:	00500513          	li	a0,5
    1a24:	fd454593          	xori	a1,a0,-44
    1a28:	24b1a623          	sw	a1,588(gp)

00001a2c <inst_170>:

inst_170:
// rs1_val==5 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x5;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2b, 0x5, 0x2e, x3, 592, x4)
    1a2c:	00500513          	li	a0,5
    1a30:	02e54593          	xori	a1,a0,46
    1a34:	24b1a823          	sw	a1,592(gp)

00001a38 <inst_171>:

inst_171:
// rs1_val==858993459 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x33333330, 0x33333333, 0x3, x3, 596, x4)
    1a38:	33333537          	lui	a0,0x33333
    1a3c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a40:	00354593          	xori	a1,a0,3
    1a44:	24b1aa23          	sw	a1,596(gp)

00001a48 <inst_172>:

inst_172:
// rs1_val==858993459 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x33333666, 0x33333333, 0x555, x3, 600, x4)
    1a48:	33333537          	lui	a0,0x33333
    1a4c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a50:	55554593          	xori	a1,a0,1365
    1a54:	24b1ac23          	sw	a1,600(gp)

00001a58 <inst_173>:

inst_173:
// rs1_val==858993459 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xccccc999, 0x33333333, -0x556, x3, 604, x4)
    1a58:	33333537          	lui	a0,0x33333
    1a5c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a60:	aaa54593          	xori	a1,a0,-1366
    1a64:	24b1ae23          	sw	a1,604(gp)

00001a68 <inst_174>:

inst_174:
// rs1_val==858993459 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x33333336, 0x33333333, 0x5, x3, 608, x4)
    1a68:	33333537          	lui	a0,0x33333
    1a6c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a70:	00554593          	xori	a1,a0,5
    1a74:	26b1a023          	sw	a1,608(gp)

00001a78 <inst_175>:

inst_175:
// rs1_val==858993459 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x33333000, 0x33333333, 0x333, x3, 612, x4)
    1a78:	33333537          	lui	a0,0x33333
    1a7c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a80:	33354593          	xori	a1,a0,819
    1a84:	26b1a223          	sw	a1,612(gp)

00001a88 <inst_176>:

inst_176:
// rs1_val==858993459 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x33333555, 0x33333333, 0x666, x3, 616, x4)
    1a88:	33333537          	lui	a0,0x33333
    1a8c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1a90:	66654593          	xori	a1,a0,1638
    1a94:	26b1a423          	sw	a1,616(gp)

00001a98 <inst_177>:

inst_177:
// rs1_val==858993459 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xcccccce0, 0x33333333, -0x2d, x3, 620, x4)
    1a98:	33333537          	lui	a0,0x33333
    1a9c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1aa0:	fd354593          	xori	a1,a0,-45
    1aa4:	26b1a623          	sw	a1,620(gp)

00001aa8 <inst_178>:

inst_178:
// rs1_val==858993459 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x3333331e, 0x33333333, 0x2d, x3, 624, x4)
    1aa8:	33333537          	lui	a0,0x33333
    1aac:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ab0:	02d54593          	xori	a1,a0,45
    1ab4:	26b1a823          	sw	a1,624(gp)

00001ab8 <inst_179>:

inst_179:
// rs1_val==858993459 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x33333331, 0x33333333, 0x2, x3, 628, x4)
    1ab8:	33333537          	lui	a0,0x33333
    1abc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ac0:	00254593          	xori	a1,a0,2
    1ac4:	26b1aa23          	sw	a1,628(gp)

00001ac8 <inst_180>:

inst_180:
// rs1_val==858993459 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x33333667, 0x33333333, 0x554, x3, 632, x4)
    1ac8:	33333537          	lui	a0,0x33333
    1acc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ad0:	55454593          	xori	a1,a0,1364
    1ad4:	26b1ac23          	sw	a1,632(gp)

00001ad8 <inst_181>:

inst_181:
// rs1_val==858993459 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x33333333, 0x33333333, 0x0, x3, 636, x4)
    1ad8:	33333537          	lui	a0,0x33333
    1adc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1ae0:	00054593          	xori	a1,a0,0
    1ae4:	26b1ae23          	sw	a1,636(gp)

00001ae8 <inst_182>:

inst_182:
// rs1_val==858993459 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x33333337, 0x33333333, 0x4, x3, 640, x4)
    1ae8:	33333537          	lui	a0,0x33333
    1aec:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1af0:	00454593          	xori	a1,a0,4
    1af4:	28b1a023          	sw	a1,640(gp)

00001af8 <inst_183>:

inst_183:
// rs1_val==858993459 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x33333001, 0x33333333, 0x332, x3, 644, x4)
    1af8:	33333537          	lui	a0,0x33333
    1afc:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b00:	33254593          	xori	a1,a0,818
    1b04:	28b1a223          	sw	a1,644(gp)

00001b08 <inst_184>:

inst_184:
// rs1_val==858993459 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x33333556, 0x33333333, 0x665, x3, 648, x4)
    1b08:	33333537          	lui	a0,0x33333
    1b0c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b10:	66554593          	xori	a1,a0,1637
    1b14:	28b1a423          	sw	a1,648(gp)

00001b18 <inst_185>:

inst_185:
// rs1_val==858993459 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x3333331f, 0x33333333, 0x2c, x3, 652, x4)
    1b18:	33333537          	lui	a0,0x33333
    1b1c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b20:	02c54593          	xori	a1,a0,44
    1b24:	28b1a623          	sw	a1,652(gp)

00001b28 <inst_186>:

inst_186:
// rs1_val==858993459 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x33333665, 0x33333333, 0x556, x3, 656, x4)
    1b28:	33333537          	lui	a0,0x33333
    1b2c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b30:	55654593          	xori	a1,a0,1366
    1b34:	28b1a823          	sw	a1,656(gp)

00001b38 <inst_187>:

inst_187:
// rs1_val==858993459 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xccccc998, 0x33333333, -0x555, x3, 660, x4)
    1b38:	33333537          	lui	a0,0x33333
    1b3c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b40:	aab54593          	xori	a1,a0,-1365
    1b44:	28b1aa23          	sw	a1,660(gp)

00001b48 <inst_188>:

inst_188:
// rs1_val==858993459 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x33333335, 0x33333333, 0x6, x3, 664, x4)
    1b48:	33333537          	lui	a0,0x33333
    1b4c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b50:	00654593          	xori	a1,a0,6
    1b54:	28b1ac23          	sw	a1,664(gp)

00001b58 <inst_189>:

inst_189:
// rs1_val==858993459 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x33333007, 0x33333333, 0x334, x3, 668, x4)
    1b58:	33333537          	lui	a0,0x33333
    1b5c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b60:	33454593          	xori	a1,a0,820
    1b64:	28b1ae23          	sw	a1,668(gp)

00001b68 <inst_190>:

inst_190:
// rs1_val==858993459 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x33333554, 0x33333333, 0x667, x3, 672, x4)
    1b68:	33333537          	lui	a0,0x33333
    1b6c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b70:	66754593          	xori	a1,a0,1639
    1b74:	2ab1a023          	sw	a1,672(gp)

00001b78 <inst_191>:

inst_191:
// rs1_val==858993459 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xcccccce7, 0x33333333, -0x2c, x3, 676, x4)
    1b78:	33333537          	lui	a0,0x33333
    1b7c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b80:	fd454593          	xori	a1,a0,-44
    1b84:	2ab1a223          	sw	a1,676(gp)

00001b88 <inst_192>:

inst_192:
// rs1_val==858993459 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x3333331d, 0x33333333, 0x2e, x3, 680, x4)
    1b88:	33333537          	lui	a0,0x33333
    1b8c:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3332e32f>
    1b90:	02e54593          	xori	a1,a0,46
    1b94:	2ab1a423          	sw	a1,680(gp)

00001b98 <inst_193>:

inst_193:
// rs1_val==1717986918 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x66666665, 0x66666666, 0x3, x3, 684, x4)
    1b98:	66666537          	lui	a0,0x66666
    1b9c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1ba0:	00354593          	xori	a1,a0,3
    1ba4:	2ab1a623          	sw	a1,684(gp)

00001ba8 <inst_194>:

inst_194:
// rs1_val==1717986918 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x66666333, 0x66666666, 0x555, x3, 688, x4)
    1ba8:	66666537          	lui	a0,0x66666
    1bac:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bb0:	55554593          	xori	a1,a0,1365
    1bb4:	2ab1a823          	sw	a1,688(gp)

00001bb8 <inst_195>:

inst_195:
// rs1_val==1717986918 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x99999ccc, 0x66666666, -0x556, x3, 692, x4)
    1bb8:	66666537          	lui	a0,0x66666
    1bbc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bc0:	aaa54593          	xori	a1,a0,-1366
    1bc4:	2ab1aa23          	sw	a1,692(gp)

00001bc8 <inst_196>:

inst_196:
// rs1_val==1717986918 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x66666663, 0x66666666, 0x5, x3, 696, x4)
    1bc8:	66666537          	lui	a0,0x66666
    1bcc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bd0:	00554593          	xori	a1,a0,5
    1bd4:	2ab1ac23          	sw	a1,696(gp)

00001bd8 <inst_197>:

inst_197:
// rs1_val==1717986918 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x66666555, 0x66666666, 0x333, x3, 700, x4)
    1bd8:	66666537          	lui	a0,0x66666
    1bdc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1be0:	33354593          	xori	a1,a0,819
    1be4:	2ab1ae23          	sw	a1,700(gp)

00001be8 <inst_198>:

inst_198:
// rs1_val==1717986918 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x66666000, 0x66666666, 0x666, x3, 704, x4)
    1be8:	66666537          	lui	a0,0x66666
    1bec:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1bf0:	66654593          	xori	a1,a0,1638
    1bf4:	2cb1a023          	sw	a1,704(gp)

00001bf8 <inst_199>:

inst_199:
// rs1_val==1717986918 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x999999b5, 0x66666666, -0x2d, x3, 708, x4)
    1bf8:	66666537          	lui	a0,0x66666
    1bfc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c00:	fd354593          	xori	a1,a0,-45
    1c04:	2cb1a223          	sw	a1,708(gp)

00001c08 <inst_200>:

inst_200:
// rs1_val==1717986918 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x6666664b, 0x66666666, 0x2d, x3, 712, x4)
    1c08:	66666537          	lui	a0,0x66666
    1c0c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c10:	02d54593          	xori	a1,a0,45
    1c14:	2cb1a423          	sw	a1,712(gp)

00001c18 <inst_201>:

inst_201:
// rs1_val==1717986918 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x66666664, 0x66666666, 0x2, x3, 716, x4)
    1c18:	66666537          	lui	a0,0x66666
    1c1c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c20:	00254593          	xori	a1,a0,2
    1c24:	2cb1a623          	sw	a1,716(gp)

00001c28 <inst_202>:

inst_202:
// rs1_val==1717986918 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x66666332, 0x66666666, 0x554, x3, 720, x4)
    1c28:	66666537          	lui	a0,0x66666
    1c2c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c30:	55454593          	xori	a1,a0,1364
    1c34:	2cb1a823          	sw	a1,720(gp)

00001c38 <inst_203>:

inst_203:
// rs1_val==1717986918 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x66666666, 0x66666666, 0x0, x3, 724, x4)
    1c38:	66666537          	lui	a0,0x66666
    1c3c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c40:	00054593          	xori	a1,a0,0
    1c44:	2cb1aa23          	sw	a1,724(gp)

00001c48 <inst_204>:

inst_204:
// rs1_val==1717986918 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x66666662, 0x66666666, 0x4, x3, 728, x4)
    1c48:	66666537          	lui	a0,0x66666
    1c4c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c50:	00454593          	xori	a1,a0,4
    1c54:	2cb1ac23          	sw	a1,728(gp)

00001c58 <inst_205>:

inst_205:
// rs1_val==1717986918 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x66666554, 0x66666666, 0x332, x3, 732, x4)
    1c58:	66666537          	lui	a0,0x66666
    1c5c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c60:	33254593          	xori	a1,a0,818
    1c64:	2cb1ae23          	sw	a1,732(gp)

00001c68 <inst_206>:

inst_206:
// rs1_val==1717986918 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x66666003, 0x66666666, 0x665, x3, 736, x4)
    1c68:	66666537          	lui	a0,0x66666
    1c6c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c70:	66554593          	xori	a1,a0,1637
    1c74:	2eb1a023          	sw	a1,736(gp)

00001c78 <inst_207>:

inst_207:
// rs1_val==1717986918 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x6666664a, 0x66666666, 0x2c, x3, 740, x4)
    1c78:	66666537          	lui	a0,0x66666
    1c7c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c80:	02c54593          	xori	a1,a0,44
    1c84:	2eb1a223          	sw	a1,740(gp)

00001c88 <inst_208>:

inst_208:
// rs1_val==1717986918 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x66666330, 0x66666666, 0x556, x3, 744, x4)
    1c88:	66666537          	lui	a0,0x66666
    1c8c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1c90:	55654593          	xori	a1,a0,1366
    1c94:	2eb1a423          	sw	a1,744(gp)

00001c98 <inst_209>:

inst_209:
// rs1_val==1717986918 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x99999ccd, 0x66666666, -0x555, x3, 748, x4)
    1c98:	66666537          	lui	a0,0x66666
    1c9c:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1ca0:	aab54593          	xori	a1,a0,-1365
    1ca4:	2eb1a623          	sw	a1,748(gp)

00001ca8 <inst_210>:

inst_210:
// rs1_val==1717986918 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x66666660, 0x66666666, 0x6, x3, 752, x4)
    1ca8:	66666537          	lui	a0,0x66666
    1cac:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1cb0:	00654593          	xori	a1,a0,6
    1cb4:	2eb1a823          	sw	a1,752(gp)

00001cb8 <inst_211>:

inst_211:
// rs1_val==1717986918 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x66666552, 0x66666666, 0x334, x3, 756, x4)
    1cb8:	66666537          	lui	a0,0x66666
    1cbc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1cc0:	33454593          	xori	a1,a0,820
    1cc4:	2eb1aa23          	sw	a1,756(gp)

00001cc8 <inst_212>:

inst_212:
// rs1_val==1717986918 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x66666001, 0x66666666, 0x667, x3, 760, x4)
    1cc8:	66666537          	lui	a0,0x66666
    1ccc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1cd0:	66754593          	xori	a1,a0,1639
    1cd4:	2eb1ac23          	sw	a1,760(gp)

00001cd8 <inst_213>:

inst_213:
// rs1_val==1717986918 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x999999b2, 0x66666666, -0x2c, x3, 764, x4)
    1cd8:	66666537          	lui	a0,0x66666
    1cdc:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1ce0:	fd454593          	xori	a1,a0,-44
    1ce4:	2eb1ae23          	sw	a1,764(gp)

00001ce8 <inst_214>:

inst_214:
// rs1_val==1717986918 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666666;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x66666648, 0x66666666, 0x2e, x3, 768, x4)
    1ce8:	66666537          	lui	a0,0x66666
    1cec:	66650513          	addi	a0,a0,1638 # 66666666 <_end+0x66661662>
    1cf0:	02e54593          	xori	a1,a0,46
    1cf4:	30b1a023          	sw	a1,768(gp)

00001cf8 <inst_215>:

inst_215:
// rs1_val==-46340 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xffff4aff, -0xb504, 0x3, x3, 772, x4)
    1cf8:	ffff5537          	lui	a0,0xffff5
    1cfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d00:	00354593          	xori	a1,a0,3
    1d04:	30b1a223          	sw	a1,772(gp)

00001d08 <inst_216>:

inst_216:
// rs1_val==-46340 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fa9, -0xb504, 0x555, x3, 776, x4)
    1d08:	ffff5537          	lui	a0,0xffff5
    1d0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d10:	55554593          	xori	a1,a0,1365
    1d14:	30b1a423          	sw	a1,776(gp)

00001d18 <inst_217>:

inst_217:
// rs1_val==-46340 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xb056, -0xb504, -0x556, x3, 780, x4)
    1d18:	ffff5537          	lui	a0,0xffff5
    1d1c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d20:	aaa54593          	xori	a1,a0,-1366
    1d24:	30b1a623          	sw	a1,780(gp)

00001d28 <inst_218>:

inst_218:
// rs1_val==-46340 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xffff4af9, -0xb504, 0x5, x3, 784, x4)
    1d28:	ffff5537          	lui	a0,0xffff5
    1d2c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d30:	00554593          	xori	a1,a0,5
    1d34:	30b1a823          	sw	a1,784(gp)

00001d38 <inst_219>:

inst_219:
// rs1_val==-46340 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xffff49cf, -0xb504, 0x333, x3, 788, x4)
    1d38:	ffff5537          	lui	a0,0xffff5
    1d3c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d40:	33354593          	xori	a1,a0,819
    1d44:	30b1aa23          	sw	a1,788(gp)

00001d48 <inst_220>:

inst_220:
// rs1_val==-46340 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xffff4c9a, -0xb504, 0x666, x3, 792, x4)
    1d48:	ffff5537          	lui	a0,0xffff5
    1d4c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d50:	66654593          	xori	a1,a0,1638
    1d54:	30b1ac23          	sw	a1,792(gp)

00001d58 <inst_221>:

inst_221:
// rs1_val==-46340 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xb52f, -0xb504, -0x2d, x3, 796, x4)
    1d58:	ffff5537          	lui	a0,0xffff5
    1d5c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d60:	fd354593          	xori	a1,a0,-45
    1d64:	30b1ae23          	sw	a1,796(gp)

00001d68 <inst_222>:

inst_222:
// rs1_val==-46340 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad1, -0xb504, 0x2d, x3, 800, x4)
    1d68:	ffff5537          	lui	a0,0xffff5
    1d6c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d70:	02d54593          	xori	a1,a0,45
    1d74:	32b1a023          	sw	a1,800(gp)

00001d78 <inst_223>:

inst_223:
// rs1_val==-46340 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xffff4afe, -0xb504, 0x2, x3, 804, x4)
    1d78:	ffff5537          	lui	a0,0xffff5
    1d7c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d80:	00254593          	xori	a1,a0,2
    1d84:	32b1a223          	sw	a1,804(gp)

00001d88 <inst_224>:

inst_224:
// rs1_val==-46340 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xffff4fa8, -0xb504, 0x554, x3, 808, x4)
    1d88:	ffff5537          	lui	a0,0xffff5
    1d8c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1d90:	55454593          	xori	a1,a0,1364
    1d94:	32b1a423          	sw	a1,808(gp)

00001d98 <inst_225>:

inst_225:
// rs1_val==-46340 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffff4afc, -0xb504, 0x0, x3, 812, x4)
    1d98:	ffff5537          	lui	a0,0xffff5
    1d9c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1da0:	00054593          	xori	a1,a0,0
    1da4:	32b1a623          	sw	a1,812(gp)

00001da8 <inst_226>:

inst_226:
// rs1_val==-46340 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xffff4af8, -0xb504, 0x4, x3, 816, x4)
    1da8:	ffff5537          	lui	a0,0xffff5
    1dac:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1db0:	00454593          	xori	a1,a0,4
    1db4:	32b1a823          	sw	a1,816(gp)

00001db8 <inst_227>:

inst_227:
// rs1_val==-46340 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xffff49ce, -0xb504, 0x332, x3, 820, x4)
    1db8:	ffff5537          	lui	a0,0xffff5
    1dbc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1dc0:	33254593          	xori	a1,a0,818
    1dc4:	32b1aa23          	sw	a1,820(gp)

00001dc8 <inst_228>:

inst_228:
// rs1_val==-46340 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffff4c99, -0xb504, 0x665, x3, 824, x4)
    1dc8:	ffff5537          	lui	a0,0xffff5
    1dcc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1dd0:	66554593          	xori	a1,a0,1637
    1dd4:	32b1ac23          	sw	a1,824(gp)

00001dd8 <inst_229>:

inst_229:
// rs1_val==-46340 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, -0xb504, 0x2c, x3, 828, x4)
    1dd8:	ffff5537          	lui	a0,0xffff5
    1ddc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1de0:	02c54593          	xori	a1,a0,44
    1de4:	32b1ae23          	sw	a1,828(gp)

00001de8 <inst_230>:

inst_230:
// rs1_val==-46340 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4faa, -0xb504, 0x556, x3, 832, x4)
    1de8:	ffff5537          	lui	a0,0xffff5
    1dec:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1df0:	55654593          	xori	a1,a0,1366
    1df4:	34b1a023          	sw	a1,832(gp)

00001df8 <inst_231>:

inst_231:
// rs1_val==-46340 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xb057, -0xb504, -0x555, x3, 836, x4)
    1df8:	ffff5537          	lui	a0,0xffff5
    1dfc:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e00:	aab54593          	xori	a1,a0,-1365
    1e04:	34b1a223          	sw	a1,836(gp)

00001e08 <inst_232>:

inst_232:
// rs1_val==-46340 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xffff4afa, -0xb504, 0x6, x3, 840, x4)
    1e08:	ffff5537          	lui	a0,0xffff5
    1e0c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e10:	00654593          	xori	a1,a0,6
    1e14:	34b1a423          	sw	a1,840(gp)

00001e18 <inst_233>:

inst_233:
// rs1_val==-46340 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xffff49c8, -0xb504, 0x334, x3, 844, x4)
    1e18:	ffff5537          	lui	a0,0xffff5
    1e1c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e20:	33454593          	xori	a1,a0,820
    1e24:	34b1a623          	sw	a1,844(gp)

00001e28 <inst_234>:

inst_234:
// rs1_val==-46340 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xffff4c9b, -0xb504, 0x667, x3, 848, x4)
    1e28:	ffff5537          	lui	a0,0xffff5
    1e2c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e30:	66754593          	xori	a1,a0,1639
    1e34:	34b1a823          	sw	a1,848(gp)

00001e38 <inst_235>:

inst_235:
// rs1_val==-46340 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xb528, -0xb504, -0x2c, x3, 852, x4)
    1e38:	ffff5537          	lui	a0,0xffff5
    1e3c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e40:	fd454593          	xori	a1,a0,-44
    1e44:	34b1aa23          	sw	a1,852(gp)

00001e48 <inst_236>:

inst_236:
// rs1_val==-46340 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xffff4ad2, -0xb504, 0x2e, x3, 856, x4)
    1e48:	ffff5537          	lui	a0,0xffff5
    1e4c:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xfffefaf8>
    1e50:	02e54593          	xori	a1,a0,46
    1e54:	34b1ac23          	sw	a1,856(gp)

00001e58 <inst_237>:

inst_237:
// rs1_val==46340 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xb507, 0xb504, 0x3, x3, 860, x4)
    1e58:	0000b537          	lui	a0,0xb
    1e5c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e60:	00354593          	xori	a1,a0,3
    1e64:	34b1ae23          	sw	a1,860(gp)

00001e68 <inst_238>:

inst_238:
// rs1_val==46340 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xb051, 0xb504, 0x555, x3, 864, x4)
    1e68:	0000b537          	lui	a0,0xb
    1e6c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e70:	55554593          	xori	a1,a0,1365
    1e74:	36b1a023          	sw	a1,864(gp)

00001e78 <inst_239>:

inst_239:
// rs1_val==46340 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4fae, 0xb504, -0x556, x3, 868, x4)
    1e78:	0000b537          	lui	a0,0xb
    1e7c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e80:	aaa54593          	xori	a1,a0,-1366
    1e84:	36b1a223          	sw	a1,868(gp)

00001e88 <inst_240>:

inst_240:
// rs1_val==46340 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xb501, 0xb504, 0x5, x3, 872, x4)
    1e88:	0000b537          	lui	a0,0xb
    1e8c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1e90:	00554593          	xori	a1,a0,5
    1e94:	36b1a423          	sw	a1,872(gp)

00001e98 <inst_241>:

inst_241:
// rs1_val==46340 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xb637, 0xb504, 0x333, x3, 876, x4)
    1e98:	0000b537          	lui	a0,0xb
    1e9c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ea0:	33354593          	xori	a1,a0,819
    1ea4:	36b1a623          	sw	a1,876(gp)

00001ea8 <inst_242>:

inst_242:
// rs1_val==46340 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xb362, 0xb504, 0x666, x3, 880, x4)
    1ea8:	0000b537          	lui	a0,0xb
    1eac:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1eb0:	66654593          	xori	a1,a0,1638
    1eb4:	36b1a823          	sw	a1,880(gp)

00001eb8 <inst_243>:

inst_243:
// rs1_val==46340 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad7, 0xb504, -0x2d, x3, 884, x4)
    1eb8:	0000b537          	lui	a0,0xb
    1ebc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ec0:	fd354593          	xori	a1,a0,-45
    1ec4:	36b1aa23          	sw	a1,884(gp)

00001ec8 <inst_244>:

inst_244:
// rs1_val==46340 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xb529, 0xb504, 0x2d, x3, 888, x4)
    1ec8:	0000b537          	lui	a0,0xb
    1ecc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ed0:	02d54593          	xori	a1,a0,45
    1ed4:	36b1ac23          	sw	a1,888(gp)

00001ed8 <inst_245>:

inst_245:
// rs1_val==46340 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xb506, 0xb504, 0x2, x3, 892, x4)
    1ed8:	0000b537          	lui	a0,0xb
    1edc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ee0:	00254593          	xori	a1,a0,2
    1ee4:	36b1ae23          	sw	a1,892(gp)

00001ee8 <inst_246>:

inst_246:
// rs1_val==46340 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xb050, 0xb504, 0x554, x3, 896, x4)
    1ee8:	0000b537          	lui	a0,0xb
    1eec:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1ef0:	55454593          	xori	a1,a0,1364
    1ef4:	38b1a023          	sw	a1,896(gp)

00001ef8 <inst_247>:

inst_247:
// rs1_val==46340 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xb504, 0xb504, 0x0, x3, 900, x4)
    1ef8:	0000b537          	lui	a0,0xb
    1efc:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f00:	00054593          	xori	a1,a0,0
    1f04:	38b1a223          	sw	a1,900(gp)

00001f08 <inst_248>:

inst_248:
// rs1_val==46340 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xb500, 0xb504, 0x4, x3, 904, x4)
    1f08:	0000b537          	lui	a0,0xb
    1f0c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f10:	00454593          	xori	a1,a0,4
    1f14:	38b1a423          	sw	a1,904(gp)

00001f18 <inst_249>:

inst_249:
// rs1_val==46340 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xb636, 0xb504, 0x332, x3, 908, x4)
    1f18:	0000b537          	lui	a0,0xb
    1f1c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f20:	33254593          	xori	a1,a0,818
    1f24:	38b1a623          	sw	a1,908(gp)

00001f28 <inst_250>:

inst_250:
// rs1_val==46340 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xb361, 0xb504, 0x665, x3, 912, x4)
    1f28:	0000b537          	lui	a0,0xb
    1f2c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f30:	66554593          	xori	a1,a0,1637
    1f34:	38b1a823          	sw	a1,912(gp)

00001f38 <inst_251>:

inst_251:
// rs1_val==46340 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xb528, 0xb504, 0x2c, x3, 916, x4)
    1f38:	0000b537          	lui	a0,0xb
    1f3c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f40:	02c54593          	xori	a1,a0,44
    1f44:	38b1aa23          	sw	a1,916(gp)

00001f48 <inst_252>:

inst_252:
// rs1_val==46340 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xb052, 0xb504, 0x556, x3, 920, x4)
    1f48:	0000b537          	lui	a0,0xb
    1f4c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f50:	55654593          	xori	a1,a0,1366
    1f54:	38b1ac23          	sw	a1,920(gp)

00001f58 <inst_253>:

inst_253:
// rs1_val==46340 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4faf, 0xb504, -0x555, x3, 924, x4)
    1f58:	0000b537          	lui	a0,0xb
    1f5c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f60:	aab54593          	xori	a1,a0,-1365
    1f64:	38b1ae23          	sw	a1,924(gp)

00001f68 <inst_254>:

inst_254:
// rs1_val==46340 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xb502, 0xb504, 0x6, x3, 928, x4)
    1f68:	0000b537          	lui	a0,0xb
    1f6c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f70:	00654593          	xori	a1,a0,6
    1f74:	3ab1a023          	sw	a1,928(gp)

00001f78 <inst_255>:

inst_255:
// rs1_val==46340 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xb630, 0xb504, 0x334, x3, 932, x4)
    1f78:	0000b537          	lui	a0,0xb
    1f7c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f80:	33454593          	xori	a1,a0,820
    1f84:	3ab1a223          	sw	a1,932(gp)

00001f88 <inst_256>:

inst_256:
// rs1_val==46340 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xb363, 0xb504, 0x667, x3, 936, x4)
    1f88:	0000b537          	lui	a0,0xb
    1f8c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1f90:	66754593          	xori	a1,a0,1639
    1f94:	3ab1a423          	sw	a1,936(gp)

00001f98 <inst_257>:

inst_257:
// rs1_val==46340 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, 0xb504, -0x2c, x3, 940, x4)
    1f98:	0000b537          	lui	a0,0xb
    1f9c:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1fa0:	fd454593          	xori	a1,a0,-44
    1fa4:	3ab1a623          	sw	a1,940(gp)

00001fa8 <inst_258>:

inst_258:
// rs1_val==46340 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb504;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xb52a, 0xb504, 0x2e, x3, 944, x4)
    1fa8:	0000b537          	lui	a0,0xb
    1fac:	50450513          	addi	a0,a0,1284 # b504 <_end+0x6500>
    1fb0:	02e54593          	xori	a1,a0,46
    1fb4:	3ab1a823          	sw	a1,944(gp)

00001fb8 <inst_259>:

inst_259:
// rs1_val==2 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x1, 0x2, 0x3, x3, 948, x4)
    1fb8:	00200513          	li	a0,2
    1fbc:	00354593          	xori	a1,a0,3
    1fc0:	3ab1aa23          	sw	a1,948(gp)

00001fc4 <inst_260>:

inst_260:
// rs1_val==2 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x557, 0x2, 0x555, x3, 952, x4)
    1fc4:	00200513          	li	a0,2
    1fc8:	55554593          	xori	a1,a0,1365
    1fcc:	3ab1ac23          	sw	a1,952(gp)

00001fd0 <inst_261>:

inst_261:
// rs1_val==2 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaa8, 0x2, -0x556, x3, 956, x4)
    1fd0:	00200513          	li	a0,2
    1fd4:	aaa54593          	xori	a1,a0,-1366
    1fd8:	3ab1ae23          	sw	a1,956(gp)

00001fdc <inst_262>:

inst_262:
// rs1_val==2 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x7, 0x2, 0x5, x3, 960, x4)
    1fdc:	00200513          	li	a0,2
    1fe0:	00554593          	xori	a1,a0,5
    1fe4:	3cb1a023          	sw	a1,960(gp)

00001fe8 <inst_263>:

inst_263:
// rs1_val==2 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x331, 0x2, 0x333, x3, 964, x4)
    1fe8:	00200513          	li	a0,2
    1fec:	33354593          	xori	a1,a0,819
    1ff0:	3cb1a223          	sw	a1,964(gp)

00001ff4 <inst_264>:

inst_264:
// rs1_val==2 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x664, 0x2, 0x666, x3, 968, x4)
    1ff4:	00200513          	li	a0,2
    1ff8:	66654593          	xori	a1,a0,1638
    1ffc:	3cb1a423          	sw	a1,968(gp)

00002000 <inst_265>:

inst_265:
// rs1_val==2 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd1, 0x2, -0x2d, x3, 972, x4)
    2000:	00200513          	li	a0,2
    2004:	fd354593          	xori	a1,a0,-45
    2008:	3cb1a623          	sw	a1,972(gp)

0000200c <inst_266>:

inst_266:
// rs1_val==2 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2f, 0x2, 0x2d, x3, 976, x4)
    200c:	00200513          	li	a0,2
    2010:	02d54593          	xori	a1,a0,45
    2014:	3cb1a823          	sw	a1,976(gp)

00002018 <inst_267>:

inst_267:
// rs1_val==2 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x0, 0x2, 0x2, x3, 980, x4)
    2018:	00200513          	li	a0,2
    201c:	00254593          	xori	a1,a0,2
    2020:	3cb1aa23          	sw	a1,980(gp)

00002024 <inst_268>:

inst_268:
// rs1_val==2 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x556, 0x2, 0x554, x3, 984, x4)
    2024:	00200513          	li	a0,2
    2028:	55454593          	xori	a1,a0,1364
    202c:	3cb1ac23          	sw	a1,984(gp)

00002030 <inst_269>:

inst_269:
// rs1_val==2 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x2, 0x2, 0x0, x3, 988, x4)
    2030:	00200513          	li	a0,2
    2034:	00054593          	xori	a1,a0,0
    2038:	3cb1ae23          	sw	a1,988(gp)

0000203c <inst_270>:

inst_270:
// rs1_val==2 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x6, 0x2, 0x4, x3, 992, x4)
    203c:	00200513          	li	a0,2
    2040:	00454593          	xori	a1,a0,4
    2044:	3eb1a023          	sw	a1,992(gp)

00002048 <inst_271>:

inst_271:
// rs1_val==2 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x330, 0x2, 0x332, x3, 996, x4)
    2048:	00200513          	li	a0,2
    204c:	33254593          	xori	a1,a0,818
    2050:	3eb1a223          	sw	a1,996(gp)

00002054 <inst_272>:

inst_272:
// rs1_val==2 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x667, 0x2, 0x665, x3, 1000, x4)
    2054:	00200513          	li	a0,2
    2058:	66554593          	xori	a1,a0,1637
    205c:	3eb1a423          	sw	a1,1000(gp)

00002060 <inst_273>:

inst_273:
// rs1_val==2 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2e, 0x2, 0x2c, x3, 1004, x4)
    2060:	00200513          	li	a0,2
    2064:	02c54593          	xori	a1,a0,44
    2068:	3eb1a623          	sw	a1,1004(gp)

0000206c <inst_274>:

inst_274:
// rs1_val==2 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x554, 0x2, 0x556, x3, 1008, x4)
    206c:	00200513          	li	a0,2
    2070:	55654593          	xori	a1,a0,1366
    2074:	3eb1a823          	sw	a1,1008(gp)

00002078 <inst_275>:

inst_275:
// rs1_val==2 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaa9, 0x2, -0x555, x3, 1012, x4)
    2078:	00200513          	li	a0,2
    207c:	aab54593          	xori	a1,a0,-1365
    2080:	3eb1aa23          	sw	a1,1012(gp)

00002084 <inst_276>:

inst_276:
// rs1_val==2 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x4, 0x2, 0x6, x3, 1016, x4)
    2084:	00200513          	li	a0,2
    2088:	00654593          	xori	a1,a0,6
    208c:	3eb1ac23          	sw	a1,1016(gp)

00002090 <inst_277>:

inst_277:
// rs1_val==2 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x336, 0x2, 0x334, x3, 1020, x4)
    2090:	00200513          	li	a0,2
    2094:	33454593          	xori	a1,a0,820
    2098:	3eb1ae23          	sw	a1,1020(gp)

0000209c <inst_278>:

inst_278:
// rs1_val==2 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x665, 0x2, 0x667, x3, 1024, x4)
    209c:	00200513          	li	a0,2
    20a0:	66754593          	xori	a1,a0,1639
    20a4:	40b1a023          	sw	a1,1024(gp)

000020a8 <inst_279>:

inst_279:
// rs1_val==2 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd6, 0x2, -0x2c, x3, 1028, x4)
    20a8:	00200513          	li	a0,2
    20ac:	fd454593          	xori	a1,a0,-44
    20b0:	40b1a223          	sw	a1,1028(gp)

000020b4 <inst_280>:

inst_280:
// rs1_val==2 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x2;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2c, 0x2, 0x2e, x3, 1032, x4)
    20b4:	00200513          	li	a0,2
    20b8:	02e54593          	xori	a1,a0,46
    20bc:	40b1a423          	sw	a1,1032(gp)

000020c0 <inst_281>:

inst_281:
// rs1_val==1431655764 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x55555557, 0x55555554, 0x3, x3, 1036, x4)
    20c0:	55555537          	lui	a0,0x55555
    20c4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20c8:	00354593          	xori	a1,a0,3
    20cc:	40b1a623          	sw	a1,1036(gp)

000020d0 <inst_282>:

inst_282:
// rs1_val==1431655764 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x55555001, 0x55555554, 0x555, x3, 1040, x4)
    20d0:	55555537          	lui	a0,0x55555
    20d4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20d8:	55554593          	xori	a1,a0,1365
    20dc:	40b1a823          	sw	a1,1040(gp)

000020e0 <inst_283>:

inst_283:
// rs1_val==1431655764 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, 0x55555554, -0x556, x3, 1044, x4)
    20e0:	55555537          	lui	a0,0x55555
    20e4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20e8:	aaa54593          	xori	a1,a0,-1366
    20ec:	40b1aa23          	sw	a1,1044(gp)

000020f0 <inst_284>:

inst_284:
// rs1_val==1431655764 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x55555551, 0x55555554, 0x5, x3, 1048, x4)
    20f0:	55555537          	lui	a0,0x55555
    20f4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    20f8:	00554593          	xori	a1,a0,5
    20fc:	40b1ac23          	sw	a1,1048(gp)

00002100 <inst_285>:

inst_285:
// rs1_val==1431655764 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x55555667, 0x55555554, 0x333, x3, 1052, x4)
    2100:	55555537          	lui	a0,0x55555
    2104:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2108:	33354593          	xori	a1,a0,819
    210c:	40b1ae23          	sw	a1,1052(gp)

00002110 <inst_286>:

inst_286:
// rs1_val==1431655764 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x55555332, 0x55555554, 0x666, x3, 1056, x4)
    2110:	55555537          	lui	a0,0x55555
    2114:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2118:	66654593          	xori	a1,a0,1638
    211c:	42b1a023          	sw	a1,1056(gp)

00002120 <inst_287>:

inst_287:
// rs1_val==1431655764 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa87, 0x55555554, -0x2d, x3, 1060, x4)
    2120:	55555537          	lui	a0,0x55555
    2124:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2128:	fd354593          	xori	a1,a0,-45
    212c:	42b1a223          	sw	a1,1060(gp)

00002130 <inst_288>:

inst_288:
// rs1_val==1431655764 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555579, 0x55555554, 0x2d, x3, 1064, x4)
    2130:	55555537          	lui	a0,0x55555
    2134:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2138:	02d54593          	xori	a1,a0,45
    213c:	42b1a423          	sw	a1,1064(gp)

00002140 <inst_289>:

inst_289:
// rs1_val==1431655764 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x55555556, 0x55555554, 0x2, x3, 1068, x4)
    2140:	55555537          	lui	a0,0x55555
    2144:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2148:	00254593          	xori	a1,a0,2
    214c:	42b1a623          	sw	a1,1068(gp)

00002150 <inst_290>:

inst_290:
// rs1_val==1431655764 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x55555000, 0x55555554, 0x554, x3, 1072, x4)
    2150:	55555537          	lui	a0,0x55555
    2154:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2158:	55454593          	xori	a1,a0,1364
    215c:	42b1a823          	sw	a1,1072(gp)

00002160 <inst_291>:

inst_291:
// rs1_val==1431655764 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x55555554, 0x55555554, 0x0, x3, 1076, x4)
    2160:	55555537          	lui	a0,0x55555
    2164:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2168:	00054593          	xori	a1,a0,0
    216c:	42b1aa23          	sw	a1,1076(gp)

00002170 <inst_292>:

inst_292:
// rs1_val==1431655764 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x55555550, 0x55555554, 0x4, x3, 1080, x4)
    2170:	55555537          	lui	a0,0x55555
    2174:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2178:	00454593          	xori	a1,a0,4
    217c:	42b1ac23          	sw	a1,1080(gp)

00002180 <inst_293>:

inst_293:
// rs1_val==1431655764 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x55555666, 0x55555554, 0x332, x3, 1084, x4)
    2180:	55555537          	lui	a0,0x55555
    2184:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2188:	33254593          	xori	a1,a0,818
    218c:	42b1ae23          	sw	a1,1084(gp)

00002190 <inst_294>:

inst_294:
// rs1_val==1431655764 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x55555331, 0x55555554, 0x665, x3, 1088, x4)
    2190:	55555537          	lui	a0,0x55555
    2194:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2198:	66554593          	xori	a1,a0,1637
    219c:	44b1a023          	sw	a1,1088(gp)

000021a0 <inst_295>:

inst_295:
// rs1_val==1431655764 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x55555578, 0x55555554, 0x2c, x3, 1092, x4)
    21a0:	55555537          	lui	a0,0x55555
    21a4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21a8:	02c54593          	xori	a1,a0,44
    21ac:	44b1a223          	sw	a1,1092(gp)

000021b0 <inst_296>:

inst_296:
// rs1_val==1431655764 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x55555002, 0x55555554, 0x556, x3, 1096, x4)
    21b0:	55555537          	lui	a0,0x55555
    21b4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21b8:	55654593          	xori	a1,a0,1366
    21bc:	44b1a423          	sw	a1,1096(gp)

000021c0 <inst_297>:

inst_297:
// rs1_val==1431655764 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, 0x55555554, -0x555, x3, 1100, x4)
    21c0:	55555537          	lui	a0,0x55555
    21c4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21c8:	aab54593          	xori	a1,a0,-1365
    21cc:	44b1a623          	sw	a1,1100(gp)

000021d0 <inst_298>:

inst_298:
// rs1_val==1431655764 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x55555552, 0x55555554, 0x6, x3, 1104, x4)
    21d0:	55555537          	lui	a0,0x55555
    21d4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21d8:	00654593          	xori	a1,a0,6
    21dc:	44b1a823          	sw	a1,1104(gp)

000021e0 <inst_299>:

inst_299:
// rs1_val==1431655764 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x55555660, 0x55555554, 0x334, x3, 1108, x4)
    21e0:	55555537          	lui	a0,0x55555
    21e4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21e8:	33454593          	xori	a1,a0,820
    21ec:	44b1aa23          	sw	a1,1108(gp)

000021f0 <inst_300>:

inst_300:
// rs1_val==1431655764 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x55555333, 0x55555554, 0x667, x3, 1112, x4)
    21f0:	55555537          	lui	a0,0x55555
    21f4:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    21f8:	66754593          	xori	a1,a0,1639
    21fc:	44b1ac23          	sw	a1,1112(gp)

00002200 <inst_301>:

inst_301:
// rs1_val==1431655764 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa80, 0x55555554, -0x2c, x3, 1116, x4)
    2200:	55555537          	lui	a0,0x55555
    2204:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2208:	fd454593          	xori	a1,a0,-44
    220c:	44b1ae23          	sw	a1,1116(gp)

00002210 <inst_302>:

inst_302:
// rs1_val==1431655764 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x5555557a, 0x55555554, 0x2e, x3, 1120, x4)
    2210:	55555537          	lui	a0,0x55555
    2214:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55550550>
    2218:	02e54593          	xori	a1,a0,46
    221c:	46b1a023          	sw	a1,1120(gp)

00002220 <inst_303>:

inst_303:
// rs1_val==0 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x3, 0x0, 0x3, x3, 1124, x4)
    2220:	00000513          	li	a0,0
    2224:	00354593          	xori	a1,a0,3
    2228:	46b1a223          	sw	a1,1124(gp)

0000222c <inst_304>:

inst_304:
// rs1_val==0 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x555, 0x0, 0x555, x3, 1128, x4)
    222c:	00000513          	li	a0,0
    2230:	55554593          	xori	a1,a0,1365
    2234:	46b1a423          	sw	a1,1128(gp)

00002238 <inst_305>:

inst_305:
// rs1_val==0 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaaa, 0x0, -0x556, x3, 1132, x4)
    2238:	00000513          	li	a0,0
    223c:	aaa54593          	xori	a1,a0,-1366
    2240:	46b1a623          	sw	a1,1132(gp)

00002244 <inst_306>:

inst_306:
// rs1_val==0 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x5, 0x0, 0x5, x3, 1136, x4)
    2244:	00000513          	li	a0,0
    2248:	00554593          	xori	a1,a0,5
    224c:	46b1a823          	sw	a1,1136(gp)

00002250 <inst_307>:

inst_307:
// rs1_val==0 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x333, 0x0, 0x333, x3, 1140, x4)
    2250:	00000513          	li	a0,0
    2254:	33354593          	xori	a1,a0,819
    2258:	46b1aa23          	sw	a1,1140(gp)

0000225c <inst_308>:

inst_308:
// rs1_val==0 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x666, 0x0, 0x666, x3, 1144, x4)
    225c:	00000513          	li	a0,0
    2260:	66654593          	xori	a1,a0,1638
    2264:	46b1ac23          	sw	a1,1144(gp)

00002268 <inst_309>:

inst_309:
// rs1_val==0 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd3, 0x0, -0x2d, x3, 1148, x4)
    2268:	00000513          	li	a0,0
    226c:	fd354593          	xori	a1,a0,-45
    2270:	46b1ae23          	sw	a1,1148(gp)

00002274 <inst_310>:

inst_310:
// rs1_val==0 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2d, 0x0, 0x2d, x3, 1152, x4)
    2274:	00000513          	li	a0,0
    2278:	02d54593          	xori	a1,a0,45
    227c:	48b1a023          	sw	a1,1152(gp)

00002280 <inst_311>:

inst_311:
// rs1_val==858993460 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x33333006, 0x33333334, 0x332, x3, 1156, x4)
    2280:	33333537          	lui	a0,0x33333
    2284:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2288:	33254593          	xori	a1,a0,818
    228c:	48b1a223          	sw	a1,1156(gp)

00002290 <inst_312>:

inst_312:
// rs1_val==858993460 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x33333551, 0x33333334, 0x665, x3, 1160, x4)
    2290:	33333537          	lui	a0,0x33333
    2294:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2298:	66554593          	xori	a1,a0,1637
    229c:	48b1a423          	sw	a1,1160(gp)

000022a0 <inst_313>:

inst_313:
// rs1_val==858993460 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x33333318, 0x33333334, 0x2c, x3, 1164, x4)
    22a0:	33333537          	lui	a0,0x33333
    22a4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22a8:	02c54593          	xori	a1,a0,44
    22ac:	48b1a623          	sw	a1,1164(gp)

000022b0 <inst_314>:

inst_314:
// rs1_val==858993460 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x33333662, 0x33333334, 0x556, x3, 1168, x4)
    22b0:	33333537          	lui	a0,0x33333
    22b4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22b8:	55654593          	xori	a1,a0,1366
    22bc:	48b1a823          	sw	a1,1168(gp)

000022c0 <inst_315>:

inst_315:
// rs1_val==858993460 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xccccc99f, 0x33333334, -0x555, x3, 1172, x4)
    22c0:	33333537          	lui	a0,0x33333
    22c4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22c8:	aab54593          	xori	a1,a0,-1365
    22cc:	48b1aa23          	sw	a1,1172(gp)

000022d0 <inst_316>:

inst_316:
// rs1_val==858993460 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x33333332, 0x33333334, 0x6, x3, 1176, x4)
    22d0:	33333537          	lui	a0,0x33333
    22d4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22d8:	00654593          	xori	a1,a0,6
    22dc:	48b1ac23          	sw	a1,1176(gp)

000022e0 <inst_317>:

inst_317:
// rs1_val==858993460 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x33333000, 0x33333334, 0x334, x3, 1180, x4)
    22e0:	33333537          	lui	a0,0x33333
    22e4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22e8:	33454593          	xori	a1,a0,820
    22ec:	48b1ae23          	sw	a1,1180(gp)

000022f0 <inst_318>:

inst_318:
// rs1_val==858993460 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x33333553, 0x33333334, 0x667, x3, 1184, x4)
    22f0:	33333537          	lui	a0,0x33333
    22f4:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    22f8:	66754593          	xori	a1,a0,1639
    22fc:	4ab1a023          	sw	a1,1184(gp)

00002300 <inst_319>:

inst_319:
// rs1_val==858993460 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xcccccce0, 0x33333334, -0x2c, x3, 1188, x4)
    2300:	33333537          	lui	a0,0x33333
    2304:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2308:	fd454593          	xori	a1,a0,-44
    230c:	4ab1a223          	sw	a1,1188(gp)

00002310 <inst_320>:

inst_320:
// rs1_val==858993460 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x3333331a, 0x33333334, 0x2e, x3, 1192, x4)
    2310:	33333537          	lui	a0,0x33333
    2314:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    2318:	02e54593          	xori	a1,a0,46
    231c:	4ab1a423          	sw	a1,1192(gp)

00002320 <inst_321>:

inst_321:
// rs1_val==1717986919 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x66666664, 0x66666667, 0x3, x3, 1196, x4)
    2320:	66666537          	lui	a0,0x66666
    2324:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2328:	00354593          	xori	a1,a0,3
    232c:	4ab1a623          	sw	a1,1196(gp)

00002330 <inst_322>:

inst_322:
// rs1_val==1717986919 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x66666332, 0x66666667, 0x555, x3, 1200, x4)
    2330:	66666537          	lui	a0,0x66666
    2334:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2338:	55554593          	xori	a1,a0,1365
    233c:	4ab1a823          	sw	a1,1200(gp)

00002340 <inst_323>:

inst_323:
// rs1_val==1717986919 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x99999ccd, 0x66666667, -0x556, x3, 1204, x4)
    2340:	66666537          	lui	a0,0x66666
    2344:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2348:	aaa54593          	xori	a1,a0,-1366
    234c:	4ab1aa23          	sw	a1,1204(gp)

00002350 <inst_324>:

inst_324:
// rs1_val==1717986919 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x66666662, 0x66666667, 0x5, x3, 1208, x4)
    2350:	66666537          	lui	a0,0x66666
    2354:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2358:	00554593          	xori	a1,a0,5
    235c:	4ab1ac23          	sw	a1,1208(gp)

00002360 <inst_325>:

inst_325:
// rs1_val==1717986919 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x66666554, 0x66666667, 0x333, x3, 1212, x4)
    2360:	66666537          	lui	a0,0x66666
    2364:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2368:	33354593          	xori	a1,a0,819
    236c:	4ab1ae23          	sw	a1,1212(gp)

00002370 <inst_326>:

inst_326:
// rs1_val==1717986919 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x66666001, 0x66666667, 0x666, x3, 1216, x4)
    2370:	66666537          	lui	a0,0x66666
    2374:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2378:	66654593          	xori	a1,a0,1638
    237c:	4cb1a023          	sw	a1,1216(gp)

00002380 <inst_327>:

inst_327:
// rs1_val==1717986919 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x999999b4, 0x66666667, -0x2d, x3, 1220, x4)
    2380:	66666537          	lui	a0,0x66666
    2384:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2388:	fd354593          	xori	a1,a0,-45
    238c:	4cb1a223          	sw	a1,1220(gp)

00002390 <inst_328>:

inst_328:
// rs1_val==1717986919 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x6666664a, 0x66666667, 0x2d, x3, 1224, x4)
    2390:	66666537          	lui	a0,0x66666
    2394:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2398:	02d54593          	xori	a1,a0,45
    239c:	4cb1a423          	sw	a1,1224(gp)

000023a0 <inst_329>:

inst_329:
// rs1_val==1717986919 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x66666665, 0x66666667, 0x2, x3, 1228, x4)
    23a0:	66666537          	lui	a0,0x66666
    23a4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23a8:	00254593          	xori	a1,a0,2
    23ac:	4cb1a623          	sw	a1,1228(gp)

000023b0 <inst_330>:

inst_330:
// rs1_val==1717986919 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x66666333, 0x66666667, 0x554, x3, 1232, x4)
    23b0:	66666537          	lui	a0,0x66666
    23b4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23b8:	55454593          	xori	a1,a0,1364
    23bc:	4cb1a823          	sw	a1,1232(gp)

000023c0 <inst_331>:

inst_331:
// rs1_val==1717986919 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x66666667, 0x66666667, 0x0, x3, 1236, x4)
    23c0:	66666537          	lui	a0,0x66666
    23c4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23c8:	00054593          	xori	a1,a0,0
    23cc:	4cb1aa23          	sw	a1,1236(gp)

000023d0 <inst_332>:

inst_332:
// rs1_val==1717986919 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x66666663, 0x66666667, 0x4, x3, 1240, x4)
    23d0:	66666537          	lui	a0,0x66666
    23d4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23d8:	00454593          	xori	a1,a0,4
    23dc:	4cb1ac23          	sw	a1,1240(gp)

000023e0 <inst_333>:

inst_333:
// rs1_val==1717986919 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x66666555, 0x66666667, 0x332, x3, 1244, x4)
    23e0:	66666537          	lui	a0,0x66666
    23e4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23e8:	33254593          	xori	a1,a0,818
    23ec:	4cb1ae23          	sw	a1,1244(gp)

000023f0 <inst_334>:

inst_334:
// rs1_val==1717986919 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x66666002, 0x66666667, 0x665, x3, 1248, x4)
    23f0:	66666537          	lui	a0,0x66666
    23f4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    23f8:	66554593          	xori	a1,a0,1637
    23fc:	4eb1a023          	sw	a1,1248(gp)

00002400 <inst_335>:

inst_335:
// rs1_val==1717986919 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x6666664b, 0x66666667, 0x2c, x3, 1252, x4)
    2400:	66666537          	lui	a0,0x66666
    2404:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2408:	02c54593          	xori	a1,a0,44
    240c:	4eb1a223          	sw	a1,1252(gp)

00002410 <inst_336>:

inst_336:
// rs1_val==1717986919 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x66666331, 0x66666667, 0x556, x3, 1256, x4)
    2410:	66666537          	lui	a0,0x66666
    2414:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2418:	55654593          	xori	a1,a0,1366
    241c:	4eb1a423          	sw	a1,1256(gp)

00002420 <inst_337>:

inst_337:
// rs1_val==1717986919 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x99999ccc, 0x66666667, -0x555, x3, 1260, x4)
    2420:	66666537          	lui	a0,0x66666
    2424:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2428:	aab54593          	xori	a1,a0,-1365
    242c:	4eb1a623          	sw	a1,1260(gp)

00002430 <inst_338>:

inst_338:
// rs1_val==1717986919 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x66666661, 0x66666667, 0x6, x3, 1264, x4)
    2430:	66666537          	lui	a0,0x66666
    2434:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2438:	00654593          	xori	a1,a0,6
    243c:	4eb1a823          	sw	a1,1264(gp)

00002440 <inst_339>:

inst_339:
// rs1_val==1717986919 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x66666553, 0x66666667, 0x334, x3, 1268, x4)
    2440:	66666537          	lui	a0,0x66666
    2444:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2448:	33454593          	xori	a1,a0,820
    244c:	4eb1aa23          	sw	a1,1268(gp)

00002450 <inst_340>:

inst_340:
// rs1_val==1717986919 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x66666000, 0x66666667, 0x667, x3, 1272, x4)
    2450:	66666537          	lui	a0,0x66666
    2454:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2458:	66754593          	xori	a1,a0,1639
    245c:	4eb1ac23          	sw	a1,1272(gp)

00002460 <inst_341>:

inst_341:
// rs1_val==1717986919 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x999999b3, 0x66666667, -0x2c, x3, 1276, x4)
    2460:	66666537          	lui	a0,0x66666
    2464:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2468:	fd454593          	xori	a1,a0,-44
    246c:	4eb1ae23          	sw	a1,1276(gp)

00002470 <inst_342>:

inst_342:
// rs1_val==1717986919 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x66666649, 0x66666667, 0x2e, x3, 1280, x4)
    2470:	66666537          	lui	a0,0x66666
    2474:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66661663>
    2478:	02e54593          	xori	a1,a0,46
    247c:	50b1a023          	sw	a1,1280(gp)

00002480 <inst_343>:

inst_343:
// rs1_val==-46339 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xffff4afe, -0xb503, 0x3, x3, 1284, x4)
    2480:	ffff5537          	lui	a0,0xffff5
    2484:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2488:	00354593          	xori	a1,a0,3
    248c:	50b1a223          	sw	a1,1284(gp)

00002490 <inst_344>:

inst_344:
// rs1_val==-46339 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fa8, -0xb503, 0x555, x3, 1288, x4)
    2490:	ffff5537          	lui	a0,0xffff5
    2494:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2498:	55554593          	xori	a1,a0,1365
    249c:	50b1a423          	sw	a1,1288(gp)

000024a0 <inst_345>:

inst_345:
// rs1_val==-46339 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xb057, -0xb503, -0x556, x3, 1292, x4)
    24a0:	ffff5537          	lui	a0,0xffff5
    24a4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24a8:	aaa54593          	xori	a1,a0,-1366
    24ac:	50b1a623          	sw	a1,1292(gp)

000024b0 <inst_346>:

inst_346:
// rs1_val==-46339 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xffff4af8, -0xb503, 0x5, x3, 1296, x4)
    24b0:	ffff5537          	lui	a0,0xffff5
    24b4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24b8:	00554593          	xori	a1,a0,5
    24bc:	50b1a823          	sw	a1,1296(gp)

000024c0 <inst_347>:

inst_347:
// rs1_val==-46339 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xffff49ce, -0xb503, 0x333, x3, 1300, x4)
    24c0:	ffff5537          	lui	a0,0xffff5
    24c4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24c8:	33354593          	xori	a1,a0,819
    24cc:	50b1aa23          	sw	a1,1300(gp)

000024d0 <inst_348>:

inst_348:
// rs1_val==-46339 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xffff4c9b, -0xb503, 0x666, x3, 1304, x4)
    24d0:	ffff5537          	lui	a0,0xffff5
    24d4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24d8:	66654593          	xori	a1,a0,1638
    24dc:	50b1ac23          	sw	a1,1304(gp)

000024e0 <inst_349>:

inst_349:
// rs1_val==-46339 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xb52e, -0xb503, -0x2d, x3, 1308, x4)
    24e0:	ffff5537          	lui	a0,0xffff5
    24e4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24e8:	fd354593          	xori	a1,a0,-45
    24ec:	50b1ae23          	sw	a1,1308(gp)

000024f0 <inst_350>:

inst_350:
// rs1_val==-46339 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, -0xb503, 0x2d, x3, 1312, x4)
    24f0:	ffff5537          	lui	a0,0xffff5
    24f4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    24f8:	02d54593          	xori	a1,a0,45
    24fc:	52b1a023          	sw	a1,1312(gp)

00002500 <inst_351>:

inst_351:
// rs1_val==-46339 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xffff4aff, -0xb503, 0x2, x3, 1316, x4)
    2500:	ffff5537          	lui	a0,0xffff5
    2504:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2508:	00254593          	xori	a1,a0,2
    250c:	52b1a223          	sw	a1,1316(gp)

00002510 <inst_352>:

inst_352:
// rs1_val==-46339 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xffff4fa9, -0xb503, 0x554, x3, 1320, x4)
    2510:	ffff5537          	lui	a0,0xffff5
    2514:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2518:	55454593          	xori	a1,a0,1364
    251c:	52b1a423          	sw	a1,1320(gp)

00002520 <inst_353>:

inst_353:
// rs1_val==-46339 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xffff4afd, -0xb503, 0x0, x3, 1324, x4)
    2520:	ffff5537          	lui	a0,0xffff5
    2524:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2528:	00054593          	xori	a1,a0,0
    252c:	52b1a623          	sw	a1,1324(gp)

00002530 <inst_354>:

inst_354:
// rs1_val==-46339 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xffff4af9, -0xb503, 0x4, x3, 1328, x4)
    2530:	ffff5537          	lui	a0,0xffff5
    2534:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2538:	00454593          	xori	a1,a0,4
    253c:	52b1a823          	sw	a1,1328(gp)

00002540 <inst_355>:

inst_355:
// rs1_val==-46339 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xffff49cf, -0xb503, 0x332, x3, 1332, x4)
    2540:	ffff5537          	lui	a0,0xffff5
    2544:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2548:	33254593          	xori	a1,a0,818
    254c:	52b1aa23          	sw	a1,1332(gp)

00002550 <inst_356>:

inst_356:
// rs1_val==-46339 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xffff4c98, -0xb503, 0x665, x3, 1336, x4)
    2550:	ffff5537          	lui	a0,0xffff5
    2554:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2558:	66554593          	xori	a1,a0,1637
    255c:	52b1ac23          	sw	a1,1336(gp)

00002560 <inst_357>:

inst_357:
// rs1_val==-46339 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad1, -0xb503, 0x2c, x3, 1340, x4)
    2560:	ffff5537          	lui	a0,0xffff5
    2564:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2568:	02c54593          	xori	a1,a0,44
    256c:	52b1ae23          	sw	a1,1340(gp)

00002570 <inst_358>:

inst_358:
// rs1_val==-46339 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4fab, -0xb503, 0x556, x3, 1344, x4)
    2570:	ffff5537          	lui	a0,0xffff5
    2574:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2578:	55654593          	xori	a1,a0,1366
    257c:	54b1a023          	sw	a1,1344(gp)

00002580 <inst_359>:

inst_359:
// rs1_val==-46339 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xb056, -0xb503, -0x555, x3, 1348, x4)
    2580:	ffff5537          	lui	a0,0xffff5
    2584:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2588:	aab54593          	xori	a1,a0,-1365
    258c:	54b1a223          	sw	a1,1348(gp)

00002590 <inst_360>:

inst_360:
// rs1_val==-46339 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xffff4afb, -0xb503, 0x6, x3, 1352, x4)
    2590:	ffff5537          	lui	a0,0xffff5
    2594:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    2598:	00654593          	xori	a1,a0,6
    259c:	54b1a423          	sw	a1,1352(gp)

000025a0 <inst_361>:

inst_361:
// rs1_val==-46339 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xffff49c9, -0xb503, 0x334, x3, 1356, x4)
    25a0:	ffff5537          	lui	a0,0xffff5
    25a4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    25a8:	33454593          	xori	a1,a0,820
    25ac:	54b1a623          	sw	a1,1356(gp)

000025b0 <inst_362>:

inst_362:
// rs1_val==-46339 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xffff4c9a, -0xb503, 0x667, x3, 1360, x4)
    25b0:	ffff5537          	lui	a0,0xffff5
    25b4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    25b8:	66754593          	xori	a1,a0,1639
    25bc:	54b1a823          	sw	a1,1360(gp)

000025c0 <inst_363>:

inst_363:
// rs1_val==-46339 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xb529, -0xb503, -0x2c, x3, 1364, x4)
    25c0:	ffff5537          	lui	a0,0xffff5
    25c4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    25c8:	fd454593          	xori	a1,a0,-44
    25cc:	54b1aa23          	sw	a1,1364(gp)

000025d0 <inst_364>:

inst_364:
// rs1_val==-46339 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xffff4ad3, -0xb503, 0x2e, x3, 1368, x4)
    25d0:	ffff5537          	lui	a0,0xffff5
    25d4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xfffefaf9>
    25d8:	02e54593          	xori	a1,a0,46
    25dc:	54b1ac23          	sw	a1,1368(gp)

000025e0 <inst_365>:

inst_365:
// rs1_val==46341 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xb506, 0xb505, 0x3, x3, 1372, x4)
    25e0:	0000b537          	lui	a0,0xb
    25e4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25e8:	00354593          	xori	a1,a0,3
    25ec:	54b1ae23          	sw	a1,1372(gp)

000025f0 <inst_366>:

inst_366:
// rs1_val==46341 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xb050, 0xb505, 0x555, x3, 1376, x4)
    25f0:	0000b537          	lui	a0,0xb
    25f4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    25f8:	55554593          	xori	a1,a0,1365
    25fc:	56b1a023          	sw	a1,1376(gp)

00002600 <inst_367>:

inst_367:
// rs1_val==46341 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4faf, 0xb505, -0x556, x3, 1380, x4)
    2600:	0000b537          	lui	a0,0xb
    2604:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2608:	aaa54593          	xori	a1,a0,-1366
    260c:	56b1a223          	sw	a1,1380(gp)

00002610 <inst_368>:

inst_368:
// rs1_val==46341 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xb500, 0xb505, 0x5, x3, 1384, x4)
    2610:	0000b537          	lui	a0,0xb
    2614:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2618:	00554593          	xori	a1,a0,5
    261c:	56b1a423          	sw	a1,1384(gp)

00002620 <inst_369>:

inst_369:
// rs1_val==46341 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xb636, 0xb505, 0x333, x3, 1388, x4)
    2620:	0000b537          	lui	a0,0xb
    2624:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2628:	33354593          	xori	a1,a0,819
    262c:	56b1a623          	sw	a1,1388(gp)

00002630 <inst_370>:

inst_370:
// rs1_val==46341 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xb363, 0xb505, 0x666, x3, 1392, x4)
    2630:	0000b537          	lui	a0,0xb
    2634:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2638:	66654593          	xori	a1,a0,1638
    263c:	56b1a823          	sw	a1,1392(gp)

00002640 <inst_371>:

inst_371:
// rs1_val==46341 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad6, 0xb505, -0x2d, x3, 1396, x4)
    2640:	0000b537          	lui	a0,0xb
    2644:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2648:	fd354593          	xori	a1,a0,-45
    264c:	56b1aa23          	sw	a1,1396(gp)

00002650 <inst_372>:

inst_372:
// rs1_val==46341 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xb528, 0xb505, 0x2d, x3, 1400, x4)
    2650:	0000b537          	lui	a0,0xb
    2654:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2658:	02d54593          	xori	a1,a0,45
    265c:	56b1ac23          	sw	a1,1400(gp)

00002660 <inst_373>:

inst_373:
// rs1_val==46341 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xb507, 0xb505, 0x2, x3, 1404, x4)
    2660:	0000b537          	lui	a0,0xb
    2664:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2668:	00254593          	xori	a1,a0,2
    266c:	56b1ae23          	sw	a1,1404(gp)

00002670 <inst_374>:

inst_374:
// rs1_val==46341 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xb051, 0xb505, 0x554, x3, 1408, x4)
    2670:	0000b537          	lui	a0,0xb
    2674:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2678:	55454593          	xori	a1,a0,1364
    267c:	58b1a023          	sw	a1,1408(gp)

00002680 <inst_375>:

inst_375:
// rs1_val==46341 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xb505, 0xb505, 0x0, x3, 1412, x4)
    2680:	0000b537          	lui	a0,0xb
    2684:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2688:	00054593          	xori	a1,a0,0
    268c:	58b1a223          	sw	a1,1412(gp)

00002690 <inst_376>:

inst_376:
// rs1_val==46341 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xb501, 0xb505, 0x4, x3, 1416, x4)
    2690:	0000b537          	lui	a0,0xb
    2694:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2698:	00454593          	xori	a1,a0,4
    269c:	58b1a423          	sw	a1,1416(gp)

000026a0 <inst_377>:

inst_377:
// rs1_val==46341 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xb637, 0xb505, 0x332, x3, 1420, x4)
    26a0:	0000b537          	lui	a0,0xb
    26a4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26a8:	33254593          	xori	a1,a0,818
    26ac:	58b1a623          	sw	a1,1420(gp)

000026b0 <inst_378>:

inst_378:
// rs1_val==46341 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xb360, 0xb505, 0x665, x3, 1424, x4)
    26b0:	0000b537          	lui	a0,0xb
    26b4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26b8:	66554593          	xori	a1,a0,1637
    26bc:	58b1a823          	sw	a1,1424(gp)

000026c0 <inst_379>:

inst_379:
// rs1_val==46341 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xb529, 0xb505, 0x2c, x3, 1428, x4)
    26c0:	0000b537          	lui	a0,0xb
    26c4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26c8:	02c54593          	xori	a1,a0,44
    26cc:	58b1aa23          	sw	a1,1428(gp)

000026d0 <inst_380>:

inst_380:
// rs1_val==46341 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xb053, 0xb505, 0x556, x3, 1432, x4)
    26d0:	0000b537          	lui	a0,0xb
    26d4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26d8:	55654593          	xori	a1,a0,1366
    26dc:	58b1ac23          	sw	a1,1432(gp)

000026e0 <inst_381>:

inst_381:
// rs1_val==46341 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fae, 0xb505, -0x555, x3, 1436, x4)
    26e0:	0000b537          	lui	a0,0xb
    26e4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26e8:	aab54593          	xori	a1,a0,-1365
    26ec:	58b1ae23          	sw	a1,1436(gp)

000026f0 <inst_382>:

inst_382:
// rs1_val==46341 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xb503, 0xb505, 0x6, x3, 1440, x4)
    26f0:	0000b537          	lui	a0,0xb
    26f4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    26f8:	00654593          	xori	a1,a0,6
    26fc:	5ab1a023          	sw	a1,1440(gp)

00002700 <inst_383>:

inst_383:
// rs1_val==46341 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xb631, 0xb505, 0x334, x3, 1444, x4)
    2700:	0000b537          	lui	a0,0xb
    2704:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2708:	33454593          	xori	a1,a0,820
    270c:	5ab1a223          	sw	a1,1444(gp)

00002710 <inst_384>:

inst_384:
// rs1_val==46341 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xb362, 0xb505, 0x667, x3, 1448, x4)
    2710:	0000b537          	lui	a0,0xb
    2714:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2718:	66754593          	xori	a1,a0,1639
    271c:	5ab1a423          	sw	a1,1448(gp)

00002720 <inst_385>:

inst_385:
// rs1_val==46341 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad1, 0xb505, -0x2c, x3, 1452, x4)
    2720:	0000b537          	lui	a0,0xb
    2724:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2728:	fd454593          	xori	a1,a0,-44
    272c:	5ab1a623          	sw	a1,1452(gp)

00002730 <inst_386>:

inst_386:
// rs1_val==46341 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb505;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xb52b, 0xb505, 0x2e, x3, 1456, x4)
    2730:	0000b537          	lui	a0,0xb
    2734:	50550513          	addi	a0,a0,1285 # b505 <_end+0x6501>
    2738:	02e54593          	xori	a1,a0,46
    273c:	5ab1a823          	sw	a1,1456(gp)

00002740 <inst_387>:

inst_387:
// rs1_val==0 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x2, 0x0, 0x2, x3, 1460, x4)
    2740:	00000513          	li	a0,0
    2744:	00254593          	xori	a1,a0,2
    2748:	5ab1aa23          	sw	a1,1460(gp)

0000274c <inst_388>:

inst_388:
// rs1_val==0 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x554, 0x0, 0x554, x3, 1464, x4)
    274c:	00000513          	li	a0,0
    2750:	55454593          	xori	a1,a0,1364
    2754:	5ab1ac23          	sw	a1,1464(gp)

00002758 <inst_389>:

inst_389:
// rs1_val==0 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x0, 0x0, 0x0, x3, 1468, x4)
    2758:	00000513          	li	a0,0
    275c:	00054593          	xori	a1,a0,0
    2760:	5ab1ae23          	sw	a1,1468(gp)

00002764 <inst_390>:

inst_390:
// rs1_val==0 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x4, 0x0, 0x4, x3, 1472, x4)
    2764:	00000513          	li	a0,0
    2768:	00454593          	xori	a1,a0,4
    276c:	5cb1a023          	sw	a1,1472(gp)

00002770 <inst_391>:

inst_391:
// rs1_val==0 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x332, 0x0, 0x332, x3, 1476, x4)
    2770:	00000513          	li	a0,0
    2774:	33254593          	xori	a1,a0,818
    2778:	5cb1a223          	sw	a1,1476(gp)

0000277c <inst_392>:

inst_392:
// rs1_val==0 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x665, 0x0, 0x665, x3, 1480, x4)
    277c:	00000513          	li	a0,0
    2780:	66554593          	xori	a1,a0,1637
    2784:	5cb1a423          	sw	a1,1480(gp)

00002788 <inst_393>:

inst_393:
// rs1_val==0 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2c, 0x0, 0x2c, x3, 1484, x4)
    2788:	00000513          	li	a0,0
    278c:	02c54593          	xori	a1,a0,44
    2790:	5cb1a623          	sw	a1,1484(gp)

00002794 <inst_394>:

inst_394:
// rs1_val==0 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x556, 0x0, 0x556, x3, 1488, x4)
    2794:	00000513          	li	a0,0
    2798:	55654593          	xori	a1,a0,1366
    279c:	5cb1a823          	sw	a1,1488(gp)

000027a0 <inst_395>:

inst_395:
// rs1_val==0 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaab, 0x0, -0x555, x3, 1492, x4)
    27a0:	00000513          	li	a0,0
    27a4:	aab54593          	xori	a1,a0,-1365
    27a8:	5cb1aa23          	sw	a1,1492(gp)

000027ac <inst_396>:

inst_396:
// rs1_val==0 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x6, 0x0, 0x6, x3, 1496, x4)
    27ac:	00000513          	li	a0,0
    27b0:	00654593          	xori	a1,a0,6
    27b4:	5cb1ac23          	sw	a1,1496(gp)

000027b8 <inst_397>:

inst_397:
// rs1_val==0 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x334, 0x0, 0x334, x3, 1500, x4)
    27b8:	00000513          	li	a0,0
    27bc:	33454593          	xori	a1,a0,820
    27c0:	5cb1ae23          	sw	a1,1500(gp)

000027c4 <inst_398>:

inst_398:
// rs1_val==0 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x667, 0x0, 0x667, x3, 1504, x4)
    27c4:	00000513          	li	a0,0
    27c8:	66754593          	xori	a1,a0,1639
    27cc:	5eb1a023          	sw	a1,1504(gp)

000027d0 <inst_399>:

inst_399:
// rs1_val==0 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd4, 0x0, -0x2c, x3, 1508, x4)
    27d0:	00000513          	li	a0,0
    27d4:	fd454593          	xori	a1,a0,-44
    27d8:	5eb1a223          	sw	a1,1508(gp)

000027dc <inst_400>:

inst_400:
// rs1_val==0 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x0;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2e, 0x0, 0x2e, x3, 1512, x4)
    27dc:	00000513          	li	a0,0
    27e0:	02e54593          	xori	a1,a0,46
    27e4:	5eb1a423          	sw	a1,1512(gp)

000027e8 <inst_401>:

inst_401:
// rs1_val==4 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x7, 0x4, 0x3, x3, 1516, x4)
    27e8:	00400513          	li	a0,4
    27ec:	00354593          	xori	a1,a0,3
    27f0:	5eb1a623          	sw	a1,1516(gp)

000027f4 <inst_402>:

inst_402:
// rs1_val==4 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x551, 0x4, 0x555, x3, 1520, x4)
    27f4:	00400513          	li	a0,4
    27f8:	55554593          	xori	a1,a0,1365
    27fc:	5eb1a823          	sw	a1,1520(gp)

00002800 <inst_403>:

inst_403:
// rs1_val==4 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaae, 0x4, -0x556, x3, 1524, x4)
    2800:	00400513          	li	a0,4
    2804:	aaa54593          	xori	a1,a0,-1366
    2808:	5eb1aa23          	sw	a1,1524(gp)

0000280c <inst_404>:

inst_404:
// rs1_val==4 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x1, 0x4, 0x5, x3, 1528, x4)
    280c:	00400513          	li	a0,4
    2810:	00554593          	xori	a1,a0,5
    2814:	5eb1ac23          	sw	a1,1528(gp)

00002818 <inst_405>:

inst_405:
// rs1_val==4 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x337, 0x4, 0x333, x3, 1532, x4)
    2818:	00400513          	li	a0,4
    281c:	33354593          	xori	a1,a0,819
    2820:	5eb1ae23          	sw	a1,1532(gp)

00002824 <inst_406>:

inst_406:
// rs1_val==4 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x662, 0x4, 0x666, x3, 1536, x4)
    2824:	00400513          	li	a0,4
    2828:	66654593          	xori	a1,a0,1638
    282c:	60b1a023          	sw	a1,1536(gp)

00002830 <inst_407>:

inst_407:
// rs1_val==4 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd7, 0x4, -0x2d, x3, 1540, x4)
    2830:	00400513          	li	a0,4
    2834:	fd354593          	xori	a1,a0,-45
    2838:	60b1a223          	sw	a1,1540(gp)

0000283c <inst_408>:

inst_408:
// rs1_val==4 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x29, 0x4, 0x2d, x3, 1544, x4)
    283c:	00400513          	li	a0,4
    2840:	02d54593          	xori	a1,a0,45
    2844:	60b1a423          	sw	a1,1544(gp)

00002848 <inst_409>:

inst_409:
// rs1_val==4 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x6, 0x4, 0x2, x3, 1548, x4)
    2848:	00400513          	li	a0,4
    284c:	00254593          	xori	a1,a0,2
    2850:	60b1a623          	sw	a1,1548(gp)

00002854 <inst_410>:

inst_410:
// rs1_val==4 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x550, 0x4, 0x554, x3, 1552, x4)
    2854:	00400513          	li	a0,4
    2858:	55454593          	xori	a1,a0,1364
    285c:	60b1a823          	sw	a1,1552(gp)

00002860 <inst_411>:

inst_411:
// rs1_val==4 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x0, 0x4, 0x4, x3, 1556, x4)
    2860:	00400513          	li	a0,4
    2864:	00454593          	xori	a1,a0,4
    2868:	60b1aa23          	sw	a1,1556(gp)

0000286c <inst_412>:

inst_412:
// rs1_val==4 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x336, 0x4, 0x332, x3, 1560, x4)
    286c:	00400513          	li	a0,4
    2870:	33254593          	xori	a1,a0,818
    2874:	60b1ac23          	sw	a1,1560(gp)

00002878 <inst_413>:

inst_413:
// rs1_val==4 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x661, 0x4, 0x665, x3, 1564, x4)
    2878:	00400513          	li	a0,4
    287c:	66554593          	xori	a1,a0,1637
    2880:	60b1ae23          	sw	a1,1564(gp)

00002884 <inst_414>:

inst_414:
// rs1_val==4 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x28, 0x4, 0x2c, x3, 1568, x4)
    2884:	00400513          	li	a0,4
    2888:	02c54593          	xori	a1,a0,44
    288c:	62b1a023          	sw	a1,1568(gp)

00002890 <inst_415>:

inst_415:
// rs1_val==4 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x552, 0x4, 0x556, x3, 1572, x4)
    2890:	00400513          	li	a0,4
    2894:	55654593          	xori	a1,a0,1366
    2898:	62b1a223          	sw	a1,1572(gp)

0000289c <inst_416>:

inst_416:
// rs1_val==4 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaaf, 0x4, -0x555, x3, 1576, x4)
    289c:	00400513          	li	a0,4
    28a0:	aab54593          	xori	a1,a0,-1365
    28a4:	62b1a423          	sw	a1,1576(gp)

000028a8 <inst_417>:

inst_417:
// rs1_val==4 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x2, 0x4, 0x6, x3, 1580, x4)
    28a8:	00400513          	li	a0,4
    28ac:	00654593          	xori	a1,a0,6
    28b0:	62b1a623          	sw	a1,1580(gp)

000028b4 <inst_418>:

inst_418:
// rs1_val==4 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x330, 0x4, 0x334, x3, 1584, x4)
    28b4:	00400513          	li	a0,4
    28b8:	33454593          	xori	a1,a0,820
    28bc:	62b1a823          	sw	a1,1584(gp)

000028c0 <inst_419>:

inst_419:
// rs1_val==4 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x663, 0x4, 0x667, x3, 1588, x4)
    28c0:	00400513          	li	a0,4
    28c4:	66754593          	xori	a1,a0,1639
    28c8:	62b1aa23          	sw	a1,1588(gp)

000028cc <inst_420>:

inst_420:
// rs1_val==4 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd0, 0x4, -0x2c, x3, 1592, x4)
    28cc:	00400513          	li	a0,4
    28d0:	fd454593          	xori	a1,a0,-44
    28d4:	62b1ac23          	sw	a1,1592(gp)

000028d8 <inst_421>:

inst_421:
// rs1_val==4 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x4;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x2a, 0x4, 0x2e, x3, 1596, x4)
    28d8:	00400513          	li	a0,4
    28dc:	02e54593          	xori	a1,a0,46
    28e0:	62b1ae23          	sw	a1,1596(gp)

000028e4 <inst_422>:

inst_422:
// rs1_val==858993458 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x33333331, 0x33333332, 0x3, x3, 1600, x4)
    28e4:	33333537          	lui	a0,0x33333
    28e8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28ec:	00354593          	xori	a1,a0,3
    28f0:	64b1a023          	sw	a1,1600(gp)

000028f4 <inst_423>:

inst_423:
// rs1_val==858993458 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x33333667, 0x33333332, 0x555, x3, 1604, x4)
    28f4:	33333537          	lui	a0,0x33333
    28f8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    28fc:	55554593          	xori	a1,a0,1365
    2900:	64b1a223          	sw	a1,1604(gp)

00002904 <inst_424>:

inst_424:
// rs1_val==858993458 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xccccc998, 0x33333332, -0x556, x3, 1608, x4)
    2904:	33333537          	lui	a0,0x33333
    2908:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    290c:	aaa54593          	xori	a1,a0,-1366
    2910:	64b1a423          	sw	a1,1608(gp)

00002914 <inst_425>:

inst_425:
// rs1_val==858993458 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x33333337, 0x33333332, 0x5, x3, 1612, x4)
    2914:	33333537          	lui	a0,0x33333
    2918:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    291c:	00554593          	xori	a1,a0,5
    2920:	64b1a623          	sw	a1,1612(gp)

00002924 <inst_426>:

inst_426:
// rs1_val==858993458 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x33333001, 0x33333332, 0x333, x3, 1616, x4)
    2924:	33333537          	lui	a0,0x33333
    2928:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    292c:	33354593          	xori	a1,a0,819
    2930:	64b1a823          	sw	a1,1616(gp)

00002934 <inst_427>:

inst_427:
// rs1_val==858993458 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x33333554, 0x33333332, 0x666, x3, 1620, x4)
    2934:	33333537          	lui	a0,0x33333
    2938:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    293c:	66654593          	xori	a1,a0,1638
    2940:	64b1aa23          	sw	a1,1620(gp)

00002944 <inst_428>:

inst_428:
// rs1_val==858993458 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xcccccce1, 0x33333332, -0x2d, x3, 1624, x4)
    2944:	33333537          	lui	a0,0x33333
    2948:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    294c:	fd354593          	xori	a1,a0,-45
    2950:	64b1ac23          	sw	a1,1624(gp)

00002954 <inst_429>:

inst_429:
// rs1_val==858993458 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x3333331f, 0x33333332, 0x2d, x3, 1628, x4)
    2954:	33333537          	lui	a0,0x33333
    2958:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    295c:	02d54593          	xori	a1,a0,45
    2960:	64b1ae23          	sw	a1,1628(gp)

00002964 <inst_430>:

inst_430:
// rs1_val==858993458 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x33333330, 0x33333332, 0x2, x3, 1632, x4)
    2964:	33333537          	lui	a0,0x33333
    2968:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    296c:	00254593          	xori	a1,a0,2
    2970:	66b1a023          	sw	a1,1632(gp)

00002974 <inst_431>:

inst_431:
// rs1_val==858993458 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x33333666, 0x33333332, 0x554, x3, 1636, x4)
    2974:	33333537          	lui	a0,0x33333
    2978:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    297c:	55454593          	xori	a1,a0,1364
    2980:	66b1a223          	sw	a1,1636(gp)

00002984 <inst_432>:

inst_432:
// rs1_val==858993458 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x33333332, 0x33333332, 0x0, x3, 1640, x4)
    2984:	33333537          	lui	a0,0x33333
    2988:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    298c:	00054593          	xori	a1,a0,0
    2990:	66b1a423          	sw	a1,1640(gp)

00002994 <inst_433>:

inst_433:
// rs1_val==858993458 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x33333336, 0x33333332, 0x4, x3, 1644, x4)
    2994:	33333537          	lui	a0,0x33333
    2998:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    299c:	00454593          	xori	a1,a0,4
    29a0:	66b1a623          	sw	a1,1644(gp)

000029a4 <inst_434>:

inst_434:
// rs1_val==858993458 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x33333000, 0x33333332, 0x332, x3, 1648, x4)
    29a4:	33333537          	lui	a0,0x33333
    29a8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29ac:	33254593          	xori	a1,a0,818
    29b0:	66b1a823          	sw	a1,1648(gp)

000029b4 <inst_435>:

inst_435:
// rs1_val==858993458 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x33333557, 0x33333332, 0x665, x3, 1652, x4)
    29b4:	33333537          	lui	a0,0x33333
    29b8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29bc:	66554593          	xori	a1,a0,1637
    29c0:	66b1aa23          	sw	a1,1652(gp)

000029c4 <inst_436>:

inst_436:
// rs1_val==858993458 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x3333331e, 0x33333332, 0x2c, x3, 1656, x4)
    29c4:	33333537          	lui	a0,0x33333
    29c8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29cc:	02c54593          	xori	a1,a0,44
    29d0:	66b1ac23          	sw	a1,1656(gp)

000029d4 <inst_437>:

inst_437:
// rs1_val==858993458 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x33333664, 0x33333332, 0x556, x3, 1660, x4)
    29d4:	33333537          	lui	a0,0x33333
    29d8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29dc:	55654593          	xori	a1,a0,1366
    29e0:	66b1ae23          	sw	a1,1660(gp)

000029e4 <inst_438>:

inst_438:
// rs1_val==858993458 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xccccc999, 0x33333332, -0x555, x3, 1664, x4)
    29e4:	33333537          	lui	a0,0x33333
    29e8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29ec:	aab54593          	xori	a1,a0,-1365
    29f0:	68b1a023          	sw	a1,1664(gp)

000029f4 <inst_439>:

inst_439:
// rs1_val==858993458 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x33333334, 0x33333332, 0x6, x3, 1668, x4)
    29f4:	33333537          	lui	a0,0x33333
    29f8:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    29fc:	00654593          	xori	a1,a0,6
    2a00:	68b1a223          	sw	a1,1668(gp)

00002a04 <inst_440>:

inst_440:
// rs1_val==858993458 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x33333006, 0x33333332, 0x334, x3, 1672, x4)
    2a04:	33333537          	lui	a0,0x33333
    2a08:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2a0c:	33454593          	xori	a1,a0,820
    2a10:	68b1a423          	sw	a1,1672(gp)

00002a14 <inst_441>:

inst_441:
// rs1_val==858993458 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x33333555, 0x33333332, 0x667, x3, 1676, x4)
    2a14:	33333537          	lui	a0,0x33333
    2a18:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2a1c:	66754593          	xori	a1,a0,1639
    2a20:	68b1a623          	sw	a1,1676(gp)

00002a24 <inst_442>:

inst_442:
// rs1_val==858993458 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xcccccce6, 0x33333332, -0x2c, x3, 1680, x4)
    2a24:	33333537          	lui	a0,0x33333
    2a28:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2a2c:	fd454593          	xori	a1,a0,-44
    2a30:	68b1a823          	sw	a1,1680(gp)

00002a34 <inst_443>:

inst_443:
// rs1_val==858993458 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x3333331c, 0x33333332, 0x2e, x3, 1684, x4)
    2a34:	33333537          	lui	a0,0x33333
    2a38:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3332e32e>
    2a3c:	02e54593          	xori	a1,a0,46
    2a40:	68b1aa23          	sw	a1,1684(gp)

00002a44 <inst_444>:

inst_444:
// rs1_val==1717986917 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x66666666, 0x66666665, 0x3, x3, 1688, x4)
    2a44:	66666537          	lui	a0,0x66666
    2a48:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a4c:	00354593          	xori	a1,a0,3
    2a50:	68b1ac23          	sw	a1,1688(gp)

00002a54 <inst_445>:

inst_445:
// rs1_val==1717986917 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x66666330, 0x66666665, 0x555, x3, 1692, x4)
    2a54:	66666537          	lui	a0,0x66666
    2a58:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a5c:	55554593          	xori	a1,a0,1365
    2a60:	68b1ae23          	sw	a1,1692(gp)

00002a64 <inst_446>:

inst_446:
// rs1_val==1717986917 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x99999ccf, 0x66666665, -0x556, x3, 1696, x4)
    2a64:	66666537          	lui	a0,0x66666
    2a68:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a6c:	aaa54593          	xori	a1,a0,-1366
    2a70:	6ab1a023          	sw	a1,1696(gp)

00002a74 <inst_447>:

inst_447:
// rs1_val==1717986917 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x66666660, 0x66666665, 0x5, x3, 1700, x4)
    2a74:	66666537          	lui	a0,0x66666
    2a78:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a7c:	00554593          	xori	a1,a0,5
    2a80:	6ab1a223          	sw	a1,1700(gp)

00002a84 <inst_448>:

inst_448:
// rs1_val==1717986917 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x66666556, 0x66666665, 0x333, x3, 1704, x4)
    2a84:	66666537          	lui	a0,0x66666
    2a88:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a8c:	33354593          	xori	a1,a0,819
    2a90:	6ab1a423          	sw	a1,1704(gp)

00002a94 <inst_449>:

inst_449:
// rs1_val==1717986917 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x66666003, 0x66666665, 0x666, x3, 1708, x4)
    2a94:	66666537          	lui	a0,0x66666
    2a98:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2a9c:	66654593          	xori	a1,a0,1638
    2aa0:	6ab1a623          	sw	a1,1708(gp)

00002aa4 <inst_450>:

inst_450:
// rs1_val==1717986917 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x999999b6, 0x66666665, -0x2d, x3, 1712, x4)
    2aa4:	66666537          	lui	a0,0x66666
    2aa8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2aac:	fd354593          	xori	a1,a0,-45
    2ab0:	6ab1a823          	sw	a1,1712(gp)

00002ab4 <inst_451>:

inst_451:
// rs1_val==1717986917 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x66666648, 0x66666665, 0x2d, x3, 1716, x4)
    2ab4:	66666537          	lui	a0,0x66666
    2ab8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2abc:	02d54593          	xori	a1,a0,45
    2ac0:	6ab1aa23          	sw	a1,1716(gp)

00002ac4 <inst_452>:

inst_452:
// rs1_val==1717986917 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x66666667, 0x66666665, 0x2, x3, 1720, x4)
    2ac4:	66666537          	lui	a0,0x66666
    2ac8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2acc:	00254593          	xori	a1,a0,2
    2ad0:	6ab1ac23          	sw	a1,1720(gp)

00002ad4 <inst_453>:

inst_453:
// rs1_val==1717986917 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x66666331, 0x66666665, 0x554, x3, 1724, x4)
    2ad4:	66666537          	lui	a0,0x66666
    2ad8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2adc:	55454593          	xori	a1,a0,1364
    2ae0:	6ab1ae23          	sw	a1,1724(gp)

00002ae4 <inst_454>:

inst_454:
// rs1_val==1717986917 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x66666665, 0x66666665, 0x0, x3, 1728, x4)
    2ae4:	66666537          	lui	a0,0x66666
    2ae8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2aec:	00054593          	xori	a1,a0,0
    2af0:	6cb1a023          	sw	a1,1728(gp)

00002af4 <inst_455>:

inst_455:
// rs1_val==1717986917 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x66666661, 0x66666665, 0x4, x3, 1732, x4)
    2af4:	66666537          	lui	a0,0x66666
    2af8:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2afc:	00454593          	xori	a1,a0,4
    2b00:	6cb1a223          	sw	a1,1732(gp)

00002b04 <inst_456>:

inst_456:
// rs1_val==1717986917 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x66666557, 0x66666665, 0x332, x3, 1736, x4)
    2b04:	66666537          	lui	a0,0x66666
    2b08:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b0c:	33254593          	xori	a1,a0,818
    2b10:	6cb1a423          	sw	a1,1736(gp)

00002b14 <inst_457>:

inst_457:
// rs1_val==1717986917 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x66666000, 0x66666665, 0x665, x3, 1740, x4)
    2b14:	66666537          	lui	a0,0x66666
    2b18:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b1c:	66554593          	xori	a1,a0,1637
    2b20:	6cb1a623          	sw	a1,1740(gp)

00002b24 <inst_458>:

inst_458:
// rs1_val==1717986917 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x66666649, 0x66666665, 0x2c, x3, 1744, x4)
    2b24:	66666537          	lui	a0,0x66666
    2b28:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b2c:	02c54593          	xori	a1,a0,44
    2b30:	6cb1a823          	sw	a1,1744(gp)

00002b34 <inst_459>:

inst_459:
// rs1_val==1717986917 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x66666333, 0x66666665, 0x556, x3, 1748, x4)
    2b34:	66666537          	lui	a0,0x66666
    2b38:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b3c:	55654593          	xori	a1,a0,1366
    2b40:	6cb1aa23          	sw	a1,1748(gp)

00002b44 <inst_460>:

inst_460:
// rs1_val==1717986917 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x99999cce, 0x66666665, -0x555, x3, 1752, x4)
    2b44:	66666537          	lui	a0,0x66666
    2b48:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b4c:	aab54593          	xori	a1,a0,-1365
    2b50:	6cb1ac23          	sw	a1,1752(gp)

00002b54 <inst_461>:

inst_461:
// rs1_val==1717986917 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x66666663, 0x66666665, 0x6, x3, 1756, x4)
    2b54:	66666537          	lui	a0,0x66666
    2b58:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b5c:	00654593          	xori	a1,a0,6
    2b60:	6cb1ae23          	sw	a1,1756(gp)

00002b64 <inst_462>:

inst_462:
// rs1_val==1717986917 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x66666551, 0x66666665, 0x334, x3, 1760, x4)
    2b64:	66666537          	lui	a0,0x66666
    2b68:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b6c:	33454593          	xori	a1,a0,820
    2b70:	6eb1a023          	sw	a1,1760(gp)

00002b74 <inst_463>:

inst_463:
// rs1_val==1717986917 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x66666002, 0x66666665, 0x667, x3, 1764, x4)
    2b74:	66666537          	lui	a0,0x66666
    2b78:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b7c:	66754593          	xori	a1,a0,1639
    2b80:	6eb1a223          	sw	a1,1764(gp)

00002b84 <inst_464>:

inst_464:
// rs1_val==1717986917 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x999999b1, 0x66666665, -0x2c, x3, 1768, x4)
    2b84:	66666537          	lui	a0,0x66666
    2b88:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b8c:	fd454593          	xori	a1,a0,-44
    2b90:	6eb1a423          	sw	a1,1768(gp)

00002b94 <inst_465>:

inst_465:
// rs1_val==1717986917 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x6666664b, 0x66666665, 0x2e, x3, 1772, x4)
    2b94:	66666537          	lui	a0,0x66666
    2b98:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66661661>
    2b9c:	02e54593          	xori	a1,a0,46
    2ba0:	6eb1a623          	sw	a1,1772(gp)

00002ba4 <inst_466>:

inst_466:
// rs1_val==46339 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xb500, 0xb503, 0x3, x3, 1776, x4)
    2ba4:	0000b537          	lui	a0,0xb
    2ba8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bac:	00354593          	xori	a1,a0,3
    2bb0:	6eb1a823          	sw	a1,1776(gp)

00002bb4 <inst_467>:

inst_467:
// rs1_val==46339 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xb056, 0xb503, 0x555, x3, 1780, x4)
    2bb4:	0000b537          	lui	a0,0xb
    2bb8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bbc:	55554593          	xori	a1,a0,1365
    2bc0:	6eb1aa23          	sw	a1,1780(gp)

00002bc4 <inst_468>:

inst_468:
// rs1_val==46339 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xffff4fa9, 0xb503, -0x556, x3, 1784, x4)
    2bc4:	0000b537          	lui	a0,0xb
    2bc8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bcc:	aaa54593          	xori	a1,a0,-1366
    2bd0:	6eb1ac23          	sw	a1,1784(gp)

00002bd4 <inst_469>:

inst_469:
// rs1_val==46339 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xb506, 0xb503, 0x5, x3, 1788, x4)
    2bd4:	0000b537          	lui	a0,0xb
    2bd8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bdc:	00554593          	xori	a1,a0,5
    2be0:	6eb1ae23          	sw	a1,1788(gp)

00002be4 <inst_470>:

inst_470:
// rs1_val==46339 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xb630, 0xb503, 0x333, x3, 1792, x4)
    2be4:	0000b537          	lui	a0,0xb
    2be8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bec:	33354593          	xori	a1,a0,819
    2bf0:	70b1a023          	sw	a1,1792(gp)

00002bf4 <inst_471>:

inst_471:
// rs1_val==46339 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xb365, 0xb503, 0x666, x3, 1796, x4)
    2bf4:	0000b537          	lui	a0,0xb
    2bf8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2bfc:	66654593          	xori	a1,a0,1638
    2c00:	70b1a223          	sw	a1,1796(gp)

00002c04 <inst_472>:

inst_472:
// rs1_val==46339 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffff4ad0, 0xb503, -0x2d, x3, 1800, x4)
    2c04:	0000b537          	lui	a0,0xb
    2c08:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c0c:	fd354593          	xori	a1,a0,-45
    2c10:	70b1a423          	sw	a1,1800(gp)

00002c14 <inst_473>:

inst_473:
// rs1_val==46339 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xb52e, 0xb503, 0x2d, x3, 1804, x4)
    2c14:	0000b537          	lui	a0,0xb
    2c18:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c1c:	02d54593          	xori	a1,a0,45
    2c20:	70b1a623          	sw	a1,1804(gp)

00002c24 <inst_474>:

inst_474:
// rs1_val==46339 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xb501, 0xb503, 0x2, x3, 1808, x4)
    2c24:	0000b537          	lui	a0,0xb
    2c28:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c2c:	00254593          	xori	a1,a0,2
    2c30:	70b1a823          	sw	a1,1808(gp)

00002c34 <inst_475>:

inst_475:
// rs1_val==46339 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xb057, 0xb503, 0x554, x3, 1812, x4)
    2c34:	0000b537          	lui	a0,0xb
    2c38:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c3c:	55454593          	xori	a1,a0,1364
    2c40:	70b1aa23          	sw	a1,1812(gp)

00002c44 <inst_476>:

inst_476:
// rs1_val==46339 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xb503, 0xb503, 0x0, x3, 1816, x4)
    2c44:	0000b537          	lui	a0,0xb
    2c48:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c4c:	00054593          	xori	a1,a0,0
    2c50:	70b1ac23          	sw	a1,1816(gp)

00002c54 <inst_477>:

inst_477:
// rs1_val==46339 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xb507, 0xb503, 0x4, x3, 1820, x4)
    2c54:	0000b537          	lui	a0,0xb
    2c58:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c5c:	00454593          	xori	a1,a0,4
    2c60:	70b1ae23          	sw	a1,1820(gp)

00002c64 <inst_478>:

inst_478:
// rs1_val==46339 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xb631, 0xb503, 0x332, x3, 1824, x4)
    2c64:	0000b537          	lui	a0,0xb
    2c68:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c6c:	33254593          	xori	a1,a0,818
    2c70:	72b1a023          	sw	a1,1824(gp)

00002c74 <inst_479>:

inst_479:
// rs1_val==46339 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xb366, 0xb503, 0x665, x3, 1828, x4)
    2c74:	0000b537          	lui	a0,0xb
    2c78:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c7c:	66554593          	xori	a1,a0,1637
    2c80:	72b1a223          	sw	a1,1828(gp)

00002c84 <inst_480>:

inst_480:
// rs1_val==46339 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xb52f, 0xb503, 0x2c, x3, 1832, x4)
    2c84:	0000b537          	lui	a0,0xb
    2c88:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c8c:	02c54593          	xori	a1,a0,44
    2c90:	72b1a423          	sw	a1,1832(gp)

00002c94 <inst_481>:

inst_481:
// rs1_val==46339 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xb055, 0xb503, 0x556, x3, 1836, x4)
    2c94:	0000b537          	lui	a0,0xb
    2c98:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2c9c:	55654593          	xori	a1,a0,1366
    2ca0:	72b1a623          	sw	a1,1836(gp)

00002ca4 <inst_482>:

inst_482:
// rs1_val==46339 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xffff4fa8, 0xb503, -0x555, x3, 1840, x4)
    2ca4:	0000b537          	lui	a0,0xb
    2ca8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2cac:	aab54593          	xori	a1,a0,-1365
    2cb0:	72b1a823          	sw	a1,1840(gp)

00002cb4 <inst_483>:

inst_483:
// rs1_val==46339 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xb505, 0xb503, 0x6, x3, 1844, x4)
    2cb4:	0000b537          	lui	a0,0xb
    2cb8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2cbc:	00654593          	xori	a1,a0,6
    2cc0:	72b1aa23          	sw	a1,1844(gp)

00002cc4 <inst_484>:

inst_484:
// rs1_val==46339 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xb637, 0xb503, 0x334, x3, 1848, x4)
    2cc4:	0000b537          	lui	a0,0xb
    2cc8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2ccc:	33454593          	xori	a1,a0,820
    2cd0:	72b1ac23          	sw	a1,1848(gp)

00002cd4 <inst_485>:

inst_485:
// rs1_val==46339 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xb364, 0xb503, 0x667, x3, 1852, x4)
    2cd4:	0000b537          	lui	a0,0xb
    2cd8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2cdc:	66754593          	xori	a1,a0,1639
    2ce0:	72b1ae23          	sw	a1,1852(gp)

00002ce4 <inst_486>:

inst_486:
// rs1_val==46339 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffff4ad7, 0xb503, -0x2c, x3, 1856, x4)
    2ce4:	0000b537          	lui	a0,0xb
    2ce8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2cec:	fd454593          	xori	a1,a0,-44
    2cf0:	74b1a023          	sw	a1,1856(gp)

00002cf4 <inst_487>:

inst_487:
// rs1_val==46339 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0xb503;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xb52d, 0xb503, 0x2e, x3, 1860, x4)
    2cf4:	0000b537          	lui	a0,0xb
    2cf8:	50350513          	addi	a0,a0,1283 # b503 <_end+0x64ff>
    2cfc:	02e54593          	xori	a1,a0,46
    2d00:	74b1a223          	sw	a1,1860(gp)

00002d04 <inst_488>:

inst_488:
// rs1_val==1431655766 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x55555555, 0x55555556, 0x3, x3, 1864, x4)
    2d04:	55555537          	lui	a0,0x55555
    2d08:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d0c:	00354593          	xori	a1,a0,3
    2d10:	74b1a423          	sw	a1,1864(gp)

00002d14 <inst_489>:

inst_489:
// rs1_val==1431655766 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x55555003, 0x55555556, 0x555, x3, 1868, x4)
    2d14:	55555537          	lui	a0,0x55555
    2d18:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d1c:	55554593          	xori	a1,a0,1365
    2d20:	74b1a623          	sw	a1,1868(gp)

00002d24 <inst_490>:

inst_490:
// rs1_val==1431655766 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffc, 0x55555556, -0x556, x3, 1872, x4)
    2d24:	55555537          	lui	a0,0x55555
    2d28:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d2c:	aaa54593          	xori	a1,a0,-1366
    2d30:	74b1a823          	sw	a1,1872(gp)

00002d34 <inst_491>:

inst_491:
// rs1_val==1431655766 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x55555553, 0x55555556, 0x5, x3, 1876, x4)
    2d34:	55555537          	lui	a0,0x55555
    2d38:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d3c:	00554593          	xori	a1,a0,5
    2d40:	74b1aa23          	sw	a1,1876(gp)

00002d44 <inst_492>:

inst_492:
// rs1_val==1431655766 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x55555665, 0x55555556, 0x333, x3, 1880, x4)
    2d44:	55555537          	lui	a0,0x55555
    2d48:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d4c:	33354593          	xori	a1,a0,819
    2d50:	74b1ac23          	sw	a1,1880(gp)

00002d54 <inst_493>:

inst_493:
// rs1_val==1431655766 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x55555330, 0x55555556, 0x666, x3, 1884, x4)
    2d54:	55555537          	lui	a0,0x55555
    2d58:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d5c:	66654593          	xori	a1,a0,1638
    2d60:	74b1ae23          	sw	a1,1884(gp)

00002d64 <inst_494>:

inst_494:
// rs1_val==1431655766 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa85, 0x55555556, -0x2d, x3, 1888, x4)
    2d64:	55555537          	lui	a0,0x55555
    2d68:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d6c:	fd354593          	xori	a1,a0,-45
    2d70:	76b1a023          	sw	a1,1888(gp)

00002d74 <inst_495>:

inst_495:
// rs1_val==1431655766 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x5555557b, 0x55555556, 0x2d, x3, 1892, x4)
    2d74:	55555537          	lui	a0,0x55555
    2d78:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d7c:	02d54593          	xori	a1,a0,45
    2d80:	76b1a223          	sw	a1,1892(gp)

00002d84 <inst_496>:

inst_496:
// rs1_val==1431655766 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x55555554, 0x55555556, 0x2, x3, 1896, x4)
    2d84:	55555537          	lui	a0,0x55555
    2d88:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d8c:	00254593          	xori	a1,a0,2
    2d90:	76b1a423          	sw	a1,1896(gp)

00002d94 <inst_497>:

inst_497:
// rs1_val==1431655766 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x55555002, 0x55555556, 0x554, x3, 1900, x4)
    2d94:	55555537          	lui	a0,0x55555
    2d98:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2d9c:	55454593          	xori	a1,a0,1364
    2da0:	76b1a623          	sw	a1,1900(gp)

00002da4 <inst_498>:

inst_498:
// rs1_val==1431655766 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x55555556, 0x55555556, 0x0, x3, 1904, x4)
    2da4:	55555537          	lui	a0,0x55555
    2da8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dac:	00054593          	xori	a1,a0,0
    2db0:	76b1a823          	sw	a1,1904(gp)

00002db4 <inst_499>:

inst_499:
// rs1_val==1431655766 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x55555552, 0x55555556, 0x4, x3, 1908, x4)
    2db4:	55555537          	lui	a0,0x55555
    2db8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dbc:	00454593          	xori	a1,a0,4
    2dc0:	76b1aa23          	sw	a1,1908(gp)

00002dc4 <inst_500>:

inst_500:
// rs1_val==1431655766 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x55555664, 0x55555556, 0x332, x3, 1912, x4)
    2dc4:	55555537          	lui	a0,0x55555
    2dc8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dcc:	33254593          	xori	a1,a0,818
    2dd0:	76b1ac23          	sw	a1,1912(gp)

00002dd4 <inst_501>:

inst_501:
// rs1_val==1431655766 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x55555333, 0x55555556, 0x665, x3, 1916, x4)
    2dd4:	55555537          	lui	a0,0x55555
    2dd8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2ddc:	66554593          	xori	a1,a0,1637
    2de0:	76b1ae23          	sw	a1,1916(gp)

00002de4 <inst_502>:

inst_502:
// rs1_val==1431655766 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x5555557a, 0x55555556, 0x2c, x3, 1920, x4)
    2de4:	55555537          	lui	a0,0x55555
    2de8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dec:	02c54593          	xori	a1,a0,44
    2df0:	78b1a023          	sw	a1,1920(gp)

00002df4 <inst_503>:

inst_503:
// rs1_val==1431655766 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x55555000, 0x55555556, 0x556, x3, 1924, x4)
    2df4:	55555537          	lui	a0,0x55555
    2df8:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2dfc:	55654593          	xori	a1,a0,1366
    2e00:	78b1a223          	sw	a1,1924(gp)

00002e04 <inst_504>:

inst_504:
// rs1_val==1431655766 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffd, 0x55555556, -0x555, x3, 1928, x4)
    2e04:	55555537          	lui	a0,0x55555
    2e08:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e0c:	aab54593          	xori	a1,a0,-1365
    2e10:	78b1a423          	sw	a1,1928(gp)

00002e14 <inst_505>:

inst_505:
// rs1_val==1431655766 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x55555550, 0x55555556, 0x6, x3, 1932, x4)
    2e14:	55555537          	lui	a0,0x55555
    2e18:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e1c:	00654593          	xori	a1,a0,6
    2e20:	78b1a623          	sw	a1,1932(gp)

00002e24 <inst_506>:

inst_506:
// rs1_val==1431655766 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x55555662, 0x55555556, 0x334, x3, 1936, x4)
    2e24:	55555537          	lui	a0,0x55555
    2e28:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e2c:	33454593          	xori	a1,a0,820
    2e30:	78b1a823          	sw	a1,1936(gp)

00002e34 <inst_507>:

inst_507:
// rs1_val==1431655766 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x55555331, 0x55555556, 0x667, x3, 1940, x4)
    2e34:	55555537          	lui	a0,0x55555
    2e38:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e3c:	66754593          	xori	a1,a0,1639
    2e40:	78b1aa23          	sw	a1,1940(gp)

00002e44 <inst_508>:

inst_508:
// rs1_val==1431655766 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa82, 0x55555556, -0x2c, x3, 1944, x4)
    2e44:	55555537          	lui	a0,0x55555
    2e48:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e4c:	fd454593          	xori	a1,a0,-44
    2e50:	78b1ac23          	sw	a1,1944(gp)

00002e54 <inst_509>:

inst_509:
// rs1_val==1431655766 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x55555578, 0x55555556, 0x2e, x3, 1948, x4)
    2e54:	55555537          	lui	a0,0x55555
    2e58:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55550552>
    2e5c:	02e54593          	xori	a1,a0,46
    2e60:	78b1ae23          	sw	a1,1948(gp)

00002e64 <inst_510>:

inst_510:
// rs1_val==-1431655765 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa8, -0x55555555, 0x3, x3, 1952, x4)
    2e64:	aaaab537          	lui	a0,0xaaaab
    2e68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e6c:	00354593          	xori	a1,a0,3
    2e70:	7ab1a023          	sw	a1,1952(gp)

00002e74 <inst_511>:

inst_511:
// rs1_val==-1431655765 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffe, -0x55555555, 0x555, x3, 1956, x4)
    2e74:	aaaab537          	lui	a0,0xaaaab
    2e78:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e7c:	55554593          	xori	a1,a0,1365
    2e80:	7ab1a223          	sw	a1,1956(gp)

00002e84 <inst_512>:

inst_512:
// rs1_val==-1431655765 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0x55555001, -0x55555555, -0x556, x3, 1960, x4)
    2e84:	aaaab537          	lui	a0,0xaaaab
    2e88:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e8c:	aaa54593          	xori	a1,a0,-1366
    2e90:	7ab1a423          	sw	a1,1960(gp)

00002e94 <inst_513>:

inst_513:
// rs1_val==-1431655765 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaae, -0x55555555, 0x5, x3, 1964, x4)
    2e94:	aaaab537          	lui	a0,0xaaaab
    2e98:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2e9c:	00554593          	xori	a1,a0,5
    2ea0:	7ab1a623          	sw	a1,1964(gp)

00002ea4 <inst_514>:

inst_514:
// rs1_val==-1431655765 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0xaaaaa998, -0x55555555, 0x333, x3, 1968, x4)
    2ea4:	aaaab537          	lui	a0,0xaaaab
    2ea8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2eac:	33354593          	xori	a1,a0,819
    2eb0:	7ab1a823          	sw	a1,1968(gp)

00002eb4 <inst_515>:

inst_515:
// rs1_val==-1431655765 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccd, -0x55555555, 0x666, x3, 1972, x4)
    2eb4:	aaaab537          	lui	a0,0xaaaab
    2eb8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ebc:	66654593          	xori	a1,a0,1638
    2ec0:	7ab1aa23          	sw	a1,1972(gp)

00002ec4 <inst_516>:

inst_516:
// rs1_val==-1431655765 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0x55555578, -0x55555555, -0x2d, x3, 1976, x4)
    2ec4:	aaaab537          	lui	a0,0xaaaab
    2ec8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2ecc:	fd354593          	xori	a1,a0,-45
    2ed0:	7ab1ac23          	sw	a1,1976(gp)

00002ed4 <inst_517>:

inst_517:
// rs1_val==-1431655765 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa86, -0x55555555, 0x2d, x3, 1980, x4)
    2ed4:	aaaab537          	lui	a0,0xaaaab
    2ed8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2edc:	02d54593          	xori	a1,a0,45
    2ee0:	7ab1ae23          	sw	a1,1980(gp)

00002ee4 <inst_518>:

inst_518:
// rs1_val==-1431655765 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaa9, -0x55555555, 0x2, x3, 1984, x4)
    2ee4:	aaaab537          	lui	a0,0xaaaab
    2ee8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2eec:	00254593          	xori	a1,a0,2
    2ef0:	7cb1a023          	sw	a1,1984(gp)

00002ef4 <inst_519>:

inst_519:
// rs1_val==-1431655765 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0xaaaaafff, -0x55555555, 0x554, x3, 1988, x4)
    2ef4:	aaaab537          	lui	a0,0xaaaab
    2ef8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2efc:	55454593          	xori	a1,a0,1364
    2f00:	7cb1a223          	sw	a1,1988(gp)

00002f04 <inst_520>:

inst_520:
// rs1_val==-1431655765 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaab, -0x55555555, 0x0, x3, 1992, x4)
    2f04:	aaaab537          	lui	a0,0xaaaab
    2f08:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f0c:	00054593          	xori	a1,a0,0
    2f10:	7cb1a423          	sw	a1,1992(gp)

00002f14 <inst_521>:

inst_521:
// rs1_val==-1431655765 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaaf, -0x55555555, 0x4, x3, 1996, x4)
    2f14:	aaaab537          	lui	a0,0xaaaab
    2f18:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f1c:	00454593          	xori	a1,a0,4
    2f20:	7cb1a623          	sw	a1,1996(gp)

00002f24 <inst_522>:

inst_522:
// rs1_val==-1431655765 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0xaaaaa999, -0x55555555, 0x332, x3, 2000, x4)
    2f24:	aaaab537          	lui	a0,0xaaaab
    2f28:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f2c:	33254593          	xori	a1,a0,818
    2f30:	7cb1a823          	sw	a1,2000(gp)

00002f34 <inst_523>:

inst_523:
// rs1_val==-1431655765 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0xaaaaacce, -0x55555555, 0x665, x3, 2004, x4)
    2f34:	aaaab537          	lui	a0,0xaaaab
    2f38:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f3c:	66554593          	xori	a1,a0,1637
    2f40:	7cb1aa23          	sw	a1,2004(gp)

00002f44 <inst_524>:

inst_524:
// rs1_val==-1431655765 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa87, -0x55555555, 0x2c, x3, 2008, x4)
    2f44:	aaaab537          	lui	a0,0xaaaab
    2f48:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f4c:	02c54593          	xori	a1,a0,44
    2f50:	7cb1ac23          	sw	a1,2008(gp)

00002f54 <inst_525>:

inst_525:
// rs1_val==-1431655765 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0xaaaaaffd, -0x55555555, 0x556, x3, 2012, x4)
    2f54:	aaaab537          	lui	a0,0xaaaab
    2f58:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f5c:	55654593          	xori	a1,a0,1366
    2f60:	7cb1ae23          	sw	a1,2012(gp)

00002f64 <inst_526>:

inst_526:
// rs1_val==-1431655765 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0x55555000, -0x55555555, -0x555, x3, 2016, x4)
    2f64:	aaaab537          	lui	a0,0xaaaab
    2f68:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f6c:	aab54593          	xori	a1,a0,-1365
    2f70:	7eb1a023          	sw	a1,2016(gp)

00002f74 <inst_527>:

inst_527:
// rs1_val==-1431655765 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0xaaaaaaad, -0x55555555, 0x6, x3, 2020, x4)
    2f74:	aaaab537          	lui	a0,0xaaaab
    2f78:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f7c:	00654593          	xori	a1,a0,6
    2f80:	7eb1a223          	sw	a1,2020(gp)

00002f84 <inst_528>:

inst_528:
// rs1_val==-1431655765 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0xaaaaa99f, -0x55555555, 0x334, x3, 2024, x4)
    2f84:	aaaab537          	lui	a0,0xaaaab
    2f88:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f8c:	33454593          	xori	a1,a0,820
    2f90:	7eb1a423          	sw	a1,2024(gp)

00002f94 <inst_529>:

inst_529:
// rs1_val==-1431655765 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0xaaaaaccc, -0x55555555, 0x667, x3, 2028, x4)
    2f94:	aaaab537          	lui	a0,0xaaaab
    2f98:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2f9c:	66754593          	xori	a1,a0,1639
    2fa0:	7eb1a623          	sw	a1,2028(gp)

00002fa4 <inst_530>:

inst_530:
// rs1_val==-1431655765 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0x5555557f, -0x55555555, -0x2c, x3, 2032, x4)
    2fa4:	aaaab537          	lui	a0,0xaaaab
    2fa8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2fac:	fd454593          	xori	a1,a0,-44
    2fb0:	7eb1a823          	sw	a1,2032(gp)

00002fb4 <inst_531>:

inst_531:
// rs1_val==-1431655765 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0xaaaaaa85, -0x55555555, 0x2e, x3, 2036, x4)
    2fb4:	aaaab537          	lui	a0,0xaaaab
    2fb8:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa5aa7>
    2fbc:	02e54593          	xori	a1,a0,46
    2fc0:	7eb1aa23          	sw	a1,2036(gp)

00002fc4 <inst_532>:

inst_532:
// rs1_val==6 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x5, 0x6, 0x3, x3, 2040, x4)
    2fc4:	00600513          	li	a0,6
    2fc8:	00354593          	xori	a1,a0,3
    2fcc:	7eb1ac23          	sw	a1,2040(gp)

00002fd0 <inst_533>:

inst_533:
// rs1_val==6 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x553, 0x6, 0x555, x3, 2044, x4)
    2fd0:	00600513          	li	a0,6
    2fd4:	55554593          	xori	a1,a0,1365
    2fd8:	7eb1ae23          	sw	a1,2044(gp)
RVTEST_SIGBASE( x3,signature_x3_1)
    2fdc:	00002197          	auipc	gp,0x2
    2fe0:	88c18193          	addi	gp,gp,-1908 # 4868 <signature_x3_1>

00002fe4 <inst_534>:

inst_534:
// rs1_val==6 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xfffffaac, 0x6, -0x556, x3, 0, x4)
    2fe4:	00600513          	li	a0,6
    2fe8:	aaa54593          	xori	a1,a0,-1366
    2fec:	00b1a023          	sw	a1,0(gp)

00002ff0 <inst_535>:

inst_535:
// rs1_val==6 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x3, 0x6, 0x5, x3, 4, x4)
    2ff0:	00600513          	li	a0,6
    2ff4:	00554593          	xori	a1,a0,5
    2ff8:	00b1a223          	sw	a1,4(gp)

00002ffc <inst_536>:

inst_536:
// rs1_val==6 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x335, 0x6, 0x333, x3, 8, x4)
    2ffc:	00600513          	li	a0,6
    3000:	33354593          	xori	a1,a0,819
    3004:	00b1a423          	sw	a1,8(gp)

00003008 <inst_537>:

inst_537:
// rs1_val==6 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x660, 0x6, 0x666, x3, 12, x4)
    3008:	00600513          	li	a0,6
    300c:	66654593          	xori	a1,a0,1638
    3010:	00b1a623          	sw	a1,12(gp)

00003014 <inst_538>:

inst_538:
// rs1_val==6 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xffffffd5, 0x6, -0x2d, x3, 16, x4)
    3014:	00600513          	li	a0,6
    3018:	fd354593          	xori	a1,a0,-45
    301c:	00b1a823          	sw	a1,16(gp)

00003020 <inst_539>:

inst_539:
// rs1_val==6 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x2b, 0x6, 0x2d, x3, 20, x4)
    3020:	00600513          	li	a0,6
    3024:	02d54593          	xori	a1,a0,45
    3028:	00b1aa23          	sw	a1,20(gp)

0000302c <inst_540>:

inst_540:
// rs1_val==6 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x4, 0x6, 0x2, x3, 24, x4)
    302c:	00600513          	li	a0,6
    3030:	00254593          	xori	a1,a0,2
    3034:	00b1ac23          	sw	a1,24(gp)

00003038 <inst_541>:

inst_541:
// rs1_val==6 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x552, 0x6, 0x554, x3, 28, x4)
    3038:	00600513          	li	a0,6
    303c:	55454593          	xori	a1,a0,1364
    3040:	00b1ae23          	sw	a1,28(gp)

00003044 <inst_542>:

inst_542:
// rs1_val==6 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x6, 0x6, 0x0, x3, 32, x4)
    3044:	00600513          	li	a0,6
    3048:	00054593          	xori	a1,a0,0
    304c:	02b1a023          	sw	a1,32(gp)

00003050 <inst_543>:

inst_543:
// rs1_val==6 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x2, 0x6, 0x4, x3, 36, x4)
    3050:	00600513          	li	a0,6
    3054:	00454593          	xori	a1,a0,4
    3058:	02b1a223          	sw	a1,36(gp)

0000305c <inst_544>:

inst_544:
// rs1_val==6 and imm_val==818, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x332
TEST_IMM_OP( xori, x11, x10, 0x334, 0x6, 0x332, x3, 40, x4)
    305c:	00600513          	li	a0,6
    3060:	33254593          	xori	a1,a0,818
    3064:	02b1a423          	sw	a1,40(gp)

00003068 <inst_545>:

inst_545:
// rs1_val==6 and imm_val==1637, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x665
TEST_IMM_OP( xori, x11, x10, 0x663, 0x6, 0x665, x3, 44, x4)
    3068:	00600513          	li	a0,6
    306c:	66554593          	xori	a1,a0,1637
    3070:	02b1a623          	sw	a1,44(gp)

00003074 <inst_546>:

inst_546:
// rs1_val==6 and imm_val==44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2c
TEST_IMM_OP( xori, x11, x10, 0x2a, 0x6, 0x2c, x3, 48, x4)
    3074:	00600513          	li	a0,6
    3078:	02c54593          	xori	a1,a0,44
    307c:	02b1a823          	sw	a1,48(gp)

00003080 <inst_547>:

inst_547:
// rs1_val==6 and imm_val==1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x556
TEST_IMM_OP( xori, x11, x10, 0x550, 0x6, 0x556, x3, 52, x4)
    3080:	00600513          	li	a0,6
    3084:	55654593          	xori	a1,a0,1366
    3088:	02b1aa23          	sw	a1,52(gp)

0000308c <inst_548>:

inst_548:
// rs1_val==6 and imm_val==-1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x555
TEST_IMM_OP( xori, x11, x10, 0xfffffaad, 0x6, -0x555, x3, 56, x4)
    308c:	00600513          	li	a0,6
    3090:	aab54593          	xori	a1,a0,-1365
    3094:	02b1ac23          	sw	a1,56(gp)

00003098 <inst_549>:

inst_549:
// rs1_val==6 and imm_val==6, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x6
TEST_IMM_OP( xori, x11, x10, 0x0, 0x6, 0x6, x3, 60, x4)
    3098:	00600513          	li	a0,6
    309c:	00654593          	xori	a1,a0,6
    30a0:	02b1ae23          	sw	a1,60(gp)

000030a4 <inst_550>:

inst_550:
// rs1_val==6 and imm_val==820, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x334
TEST_IMM_OP( xori, x11, x10, 0x332, 0x6, 0x334, x3, 64, x4)
    30a4:	00600513          	li	a0,6
    30a8:	33454593          	xori	a1,a0,820
    30ac:	04b1a023          	sw	a1,64(gp)

000030b0 <inst_551>:

inst_551:
// rs1_val==6 and imm_val==1639, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x667
TEST_IMM_OP( xori, x11, x10, 0x661, 0x6, 0x667, x3, 68, x4)
    30b0:	00600513          	li	a0,6
    30b4:	66754593          	xori	a1,a0,1639
    30b8:	04b1a223          	sw	a1,68(gp)

000030bc <inst_552>:

inst_552:
// rs1_val==6 and imm_val==-44, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:-0x2c
TEST_IMM_OP( xori, x11, x10, 0xffffffd2, 0x6, -0x2c, x3, 72, x4)
    30bc:	00600513          	li	a0,6
    30c0:	fd454593          	xori	a1,a0,-44
    30c4:	04b1a423          	sw	a1,72(gp)

000030c8 <inst_553>:

inst_553:
// rs1_val==6 and imm_val==46, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x6;  immval:0x2e
TEST_IMM_OP( xori, x11, x10, 0x28, 0x6, 0x2e, x3, 76, x4)
    30c8:	00600513          	li	a0,6
    30cc:	02e54593          	xori	a1,a0,46
    30d0:	04b1a623          	sw	a1,76(gp)

000030d4 <inst_554>:

inst_554:
// rs1_val==858993460 and imm_val==3, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x3
TEST_IMM_OP( xori, x11, x10, 0x33333337, 0x33333334, 0x3, x3, 80, x4)
    30d4:	33333537          	lui	a0,0x33333
    30d8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30dc:	00354593          	xori	a1,a0,3
    30e0:	04b1a823          	sw	a1,80(gp)

000030e4 <inst_555>:

inst_555:
// rs1_val==858993460 and imm_val==1365, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x555
TEST_IMM_OP( xori, x11, x10, 0x33333661, 0x33333334, 0x555, x3, 84, x4)
    30e4:	33333537          	lui	a0,0x33333
    30e8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30ec:	55554593          	xori	a1,a0,1365
    30f0:	04b1aa23          	sw	a1,84(gp)

000030f4 <inst_556>:

inst_556:
// rs1_val==858993460 and imm_val==-1366, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x556
TEST_IMM_OP( xori, x11, x10, 0xccccc99e, 0x33333334, -0x556, x3, 88, x4)
    30f4:	33333537          	lui	a0,0x33333
    30f8:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    30fc:	aaa54593          	xori	a1,a0,-1366
    3100:	04b1ac23          	sw	a1,88(gp)

00003104 <inst_557>:

inst_557:
// rs1_val==858993460 and imm_val==5, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x5
TEST_IMM_OP( xori, x11, x10, 0x33333331, 0x33333334, 0x5, x3, 92, x4)
    3104:	33333537          	lui	a0,0x33333
    3108:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    310c:	00554593          	xori	a1,a0,5
    3110:	04b1ae23          	sw	a1,92(gp)

00003114 <inst_558>:

inst_558:
// rs1_val==858993460 and imm_val==819, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x333
TEST_IMM_OP( xori, x11, x10, 0x33333007, 0x33333334, 0x333, x3, 96, x4)
    3114:	33333537          	lui	a0,0x33333
    3118:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    311c:	33354593          	xori	a1,a0,819
    3120:	06b1a023          	sw	a1,96(gp)

00003124 <inst_559>:

inst_559:
// rs1_val==858993460 and imm_val==1638, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x666
TEST_IMM_OP( xori, x11, x10, 0x33333552, 0x33333334, 0x666, x3, 100, x4)
    3124:	33333537          	lui	a0,0x33333
    3128:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    312c:	66654593          	xori	a1,a0,1638
    3130:	06b1a223          	sw	a1,100(gp)

00003134 <inst_560>:

inst_560:
// rs1_val==858993460 and imm_val==-45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:-0x2d
TEST_IMM_OP( xori, x11, x10, 0xcccccce7, 0x33333334, -0x2d, x3, 104, x4)
    3134:	33333537          	lui	a0,0x33333
    3138:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    313c:	fd354593          	xori	a1,a0,-45
    3140:	06b1a423          	sw	a1,104(gp)

00003144 <inst_561>:

inst_561:
// rs1_val==858993460 and imm_val==45, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2d
TEST_IMM_OP( xori, x11, x10, 0x33333319, 0x33333334, 0x2d, x3, 108, x4)
    3144:	33333537          	lui	a0,0x33333
    3148:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    314c:	02d54593          	xori	a1,a0,45
    3150:	06b1a623          	sw	a1,108(gp)

00003154 <inst_562>:

inst_562:
// rs1_val==858993460 and imm_val==2, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x2
TEST_IMM_OP( xori, x11, x10, 0x33333336, 0x33333334, 0x2, x3, 112, x4)
    3154:	33333537          	lui	a0,0x33333
    3158:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    315c:	00254593          	xori	a1,a0,2
    3160:	06b1a823          	sw	a1,112(gp)

00003164 <inst_563>:

inst_563:
// rs1_val==858993460 and imm_val==1364, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x554
TEST_IMM_OP( xori, x11, x10, 0x33333660, 0x33333334, 0x554, x3, 116, x4)
    3164:	33333537          	lui	a0,0x33333
    3168:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    316c:	55454593          	xori	a1,a0,1364
    3170:	06b1aa23          	sw	a1,116(gp)

00003174 <inst_564>:

inst_564:
// rs1_val==858993460 and imm_val==0, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x0
TEST_IMM_OP( xori, x11, x10, 0x33333334, 0x33333334, 0x0, x3, 120, x4)
    3174:	33333537          	lui	a0,0x33333
    3178:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    317c:	00054593          	xori	a1,a0,0
    3180:	06b1ac23          	sw	a1,120(gp)

00003184 <inst_565>:

inst_565:
// rs1_val==858993460 and imm_val==4, 
// opcode: xori ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x4
TEST_IMM_OP( xori, x11, x10, 0x33333330, 0x33333334, 0x4, x3, 124, x4)
    3184:	33333537          	lui	a0,0x33333
    3188:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x3332e330>
    318c:	00454593          	xori	a1,a0,4
    3190:	06b1ae23          	sw	a1,124(gp)
    3194:	00000013          	nop
    3198:	00000013          	nop
    319c:	00000013          	nop

000031a0 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    31a0:	babed0b7          	lui	ra,0xbabed
    31a4:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe7afa>

000031a8 <write_tohost>:
    31a8:	00002017          	auipc	zero,0x2
    31ac:	e4102c23          	sw	ra,-424(zero) # fffffe58 <_end+0xffffae54>

000031b0 <loop>:
    31b0:	0000006f          	j	31b0 <loop>
	...
