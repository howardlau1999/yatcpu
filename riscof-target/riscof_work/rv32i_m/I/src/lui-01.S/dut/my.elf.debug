
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed8ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff76af52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb3fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd87d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00001317          	auipc	t1,0x1
    102c:	fd830313          	addi	t1,t1,-40 # 2000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb86f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfdab79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfebdba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff46db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f8b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bfadb3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadfbed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fc769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7cbb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5bcdd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadcee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56cf72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab4fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d58fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbeaafea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df53ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa87f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d2bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe7dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df26fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f7b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb7a5bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedbbadb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76dc56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6cab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",lui)

RVTEST_SIGBASE( x9,signature_x9_1)
    10f8:	00001497          	auipc	s1,0x1
    10fc:	f1848493          	addi	s1,s1,-232 # 2010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rd==x8, imm_val == 0, imm_val==0
// opcode: lui ; dest:x8; immval:0x0
TEST_CASE(x7, x8, 0x0, x9, 0, lui x8,0x0)
    1100:	00000437          	lui	s0,0x0
    1104:	0084a023          	sw	s0,0(s1)

00001108 <inst_1>:

inst_1:
// rd==x5, imm_val > 0, imm_val==5
// opcode: lui ; dest:x5; immval:0x5
TEST_CASE(x7, x5, 0x5000, x9, 4, lui x5,0x5)
    1108:	000052b7          	lui	t0,0x5
    110c:	0054a223          	sw	t0,4(s1)

00001110 <inst_2>:

inst_2:
// rd==x19, imm_val == ((2**20)-1), 
// opcode: lui ; dest:x19; immval:0xfffff
TEST_CASE(x7, x19, -0x1000, x9, 8, lui x19,0xfffff)
    1110:	fffff9b7          	lui	s3,0xfffff
    1114:	0134a423          	sw	s3,8(s1)

00001118 <inst_3>:

inst_3:
// rd==x13, imm_val==3, 
// opcode: lui ; dest:x13; immval:0x3
TEST_CASE(x7, x13, 0x3000, x9, 12, lui x13,0x3)
    1118:	000036b7          	lui	a3,0x3
    111c:	00d4a623          	sw	a3,12(s1)

00001120 <inst_4>:

inst_4:
// rd==x0, imm_val==349525, imm_val == 349525
// opcode: lui ; dest:x0; immval:0x55555
TEST_CASE(x7, x0, 0, x9, 16, lui x0,0x55555)
    1120:	55555037          	lui	zero,0x55555
    1124:	0004a823          	sw	zero,16(s1)

00001128 <inst_5>:

inst_5:
// rd==x4, imm_val==699050, imm_val == 699050
// opcode: lui ; dest:x4; immval:0xaaaaa
TEST_CASE(x7, x4, -0x55556000, x9, 20, lui x4,0xaaaaa)
    1128:	aaaaa237          	lui	tp,0xaaaaa
    112c:	0044aa23          	sw	tp,20(s1)

00001130 <inst_6>:

inst_6:
// rd==x22, imm_val==209715, 
// opcode: lui ; dest:x22; immval:0x33333
TEST_CASE(x7, x22, 0x33333000, x9, 24, lui x22,0x33333)
    1130:	33333b37          	lui	s6,0x33333
    1134:	0164ac23          	sw	s6,24(s1)

00001138 <inst_7>:

inst_7:
// rd==x26, imm_val==419430, 
// opcode: lui ; dest:x26; immval:0x66666
TEST_CASE(x7, x26, 0x66666000, x9, 28, lui x26,0x66666)
    1138:	66666d37          	lui	s10,0x66666
    113c:	01a4ae23          	sw	s10,28(s1)

00001140 <inst_8>:

inst_8:
// rd==x29, imm_val==724, 
// opcode: lui ; dest:x29; immval:0x2d4
TEST_CASE(x7, x29, 0x2d4000, x9, 32, lui x29,0x2d4)
    1140:	002d4eb7          	lui	t4,0x2d4
    1144:	03d4a023          	sw	t4,32(s1)

00001148 <inst_9>:

inst_9:
// rd==x3, imm_val==1023, 
// opcode: lui ; dest:x3; immval:0x3ff
TEST_CASE(x7, x3, 0x3ff000, x9, 36, lui x3,0x3ff)
    1148:	003ff1b7          	lui	gp,0x3ff
    114c:	0234a223          	sw	gp,36(s1)

00001150 <inst_10>:

inst_10:
// rd==x30, imm_val==2, imm_val == 2
// opcode: lui ; dest:x30; immval:0x2
TEST_CASE(x7, x30, 0x2000, x9, 40, lui x30,0x2)
    1150:	00002f37          	lui	t5,0x2
    1154:	03e4a423          	sw	t5,40(s1)

00001158 <inst_11>:

inst_11:
// rd==x16, imm_val==349524, 
// opcode: lui ; dest:x16; immval:0x55554
TEST_CASE(x7, x16, 0x55554000, x9, 44, lui x16,0x55554)
    1158:	55554837          	lui	a6,0x55554
    115c:	0304a623          	sw	a6,44(s1)

00001160 <inst_12>:

inst_12:
// rd==x2, imm_val==699049, 
// opcode: lui ; dest:x2; immval:0xaaaa9
TEST_CASE(x7, x2, -0x55557000, x9, 48, lui x2,0xaaaa9)
    1160:	aaaa9137          	lui	sp,0xaaaa9
    1164:	0224a823          	sw	sp,48(s1)

00001168 <inst_13>:

inst_13:
// rd==x24, imm_val==4, imm_val == 4
// opcode: lui ; dest:x24; immval:0x4
TEST_CASE(x7, x24, 0x4000, x9, 52, lui x24,0x4)
    1168:	00004c37          	lui	s8,0x4
    116c:	0384aa23          	sw	s8,52(s1)

00001170 <inst_14>:

inst_14:
// rd==x27, imm_val==209714, 
// opcode: lui ; dest:x27; immval:0x33332
TEST_CASE(x7, x27, 0x33332000, x9, 56, lui x27,0x33332)
    1170:	33332db7          	lui	s11,0x33332
    1174:	03b4ac23          	sw	s11,56(s1)

00001178 <inst_15>:

inst_15:
// rd==x20, imm_val==419429, 
// opcode: lui ; dest:x20; immval:0x66665
TEST_CASE(x7, x20, 0x66665000, x9, 60, lui x20,0x66665)
    1178:	66665a37          	lui	s4,0x66665
    117c:	0344ae23          	sw	s4,60(s1)

00001180 <inst_16>:

inst_16:
// rd==x28, imm_val==723, 
// opcode: lui ; dest:x28; immval:0x2d3
TEST_CASE(x7, x28, 0x2d3000, x9, 64, lui x28,0x2d3)
    1180:	002d3e37          	lui	t3,0x2d3
    1184:	05c4a023          	sw	t3,64(s1)

00001188 <inst_17>:

inst_17:
// rd==x6, imm_val==1022, 
// opcode: lui ; dest:x6; immval:0x3fe
TEST_CASE(x7, x6, 0x3fe000, x9, 68, lui x6,0x3fe)
    1188:	003fe337          	lui	t1,0x3fe
    118c:	0464a223          	sw	t1,68(s1)

00001190 <inst_18>:

inst_18:
// rd==x10, imm_val==349526, 
// opcode: lui ; dest:x10; immval:0x55556
TEST_CASE(x7, x10, 0x55556000, x9, 72, lui x10,0x55556)
    1190:	55556537          	lui	a0,0x55556
    1194:	04a4a423          	sw	a0,72(s1)

00001198 <inst_19>:

inst_19:
// rd==x12, imm_val==699051, 
// opcode: lui ; dest:x12; immval:0xaaaab
TEST_CASE(x7, x12, -0x55555000, x9, 76, lui x12,0xaaaab)
    1198:	aaaab637          	lui	a2,0xaaaab
    119c:	04c4a623          	sw	a2,76(s1)

000011a0 <inst_20>:

inst_20:
// rd==x15, imm_val==6, 
// opcode: lui ; dest:x15; immval:0x6
TEST_CASE(x7, x15, 0x6000, x9, 80, lui x15,0x6)
    11a0:	000067b7          	lui	a5,0x6
    11a4:	04f4a823          	sw	a5,80(s1)

000011a8 <inst_21>:

inst_21:
// rd==x23, imm_val==209716, 
// opcode: lui ; dest:x23; immval:0x33334
TEST_CASE(x7, x23, 0x33334000, x9, 84, lui x23,0x33334)
    11a8:	33334bb7          	lui	s7,0x33334
    11ac:	0574aa23          	sw	s7,84(s1)

000011b0 <inst_22>:

inst_22:
// rd==x1, imm_val==419431, 
// opcode: lui ; dest:x1; immval:0x66667
TEST_CASE(x7, x1, 0x66667000, x9, 88, lui x1,0x66667)
    11b0:	666670b7          	lui	ra,0x66667
    11b4:	0414ac23          	sw	ra,88(s1)

000011b8 <inst_23>:

inst_23:
// rd==x18, imm_val==725, 
// opcode: lui ; dest:x18; immval:0x2d5
TEST_CASE(x7, x18, 0x2d5000, x9, 92, lui x18,0x2d5)
    11b8:	002d5937          	lui	s2,0x2d5
    11bc:	0524ae23          	sw	s2,92(s1)

000011c0 <inst_24>:

inst_24:
// rd==x11, imm_val==1, imm_val == 1
// opcode: lui ; dest:x11; immval:0x1
TEST_CASE(x7, x11, 0x1000, x9, 96, lui x11,0x1)
    11c0:	000015b7          	lui	a1,0x1
    11c4:	06b4a023          	sw	a1,96(s1)

000011c8 <inst_25>:

inst_25:
// rd==x21, imm_val==1024, imm_val == 1024
// opcode: lui ; dest:x21; immval:0x400
TEST_CASE(x7, x21, 0x400000, x9, 100, lui x21,0x400)
    11c8:	00400ab7          	lui	s5,0x400
    11cc:	0754a223          	sw	s5,100(s1)

000011d0 <inst_26>:

inst_26:
// rd==x17, imm_val == 8, 
// opcode: lui ; dest:x17; immval:0x8
TEST_CASE(x7, x17, 0x8000, x9, 104, lui x17,0x8)
    11d0:	000088b7          	lui	a7,0x8
    11d4:	0714a423          	sw	a7,104(s1)

000011d8 <inst_27>:

inst_27:
// rd==x25, imm_val == 16, 
// opcode: lui ; dest:x25; immval:0x10
TEST_CASE(x7, x25, 0x10000, x9, 108, lui x25,0x10)
    11d8:	00010cb7          	lui	s9,0x10
    11dc:	0794a623          	sw	s9,108(s1)

000011e0 <inst_28>:

inst_28:
// rd==x7, imm_val == 32, 
// opcode: lui ; dest:x7; immval:0x20
TEST_CASE(x2, x7, 0x20000, x9, 112, lui x7,0x20)
    11e0:	000203b7          	lui	t2,0x20
    11e4:	0674a823          	sw	t2,112(s1)
RVTEST_SIGBASE( x1,signature_x1_0)
    11e8:	00001097          	auipc	ra,0x1
    11ec:	e9c08093          	addi	ra,ra,-356 # 2084 <signature_x1_0>

000011f0 <inst_29>:

inst_29:
// rd==x14, imm_val == 64, 
// opcode: lui ; dest:x14; immval:0x40
TEST_CASE(x2, x14, 0x40000, x1, 0, lui x14,0x40)
    11f0:	00040737          	lui	a4,0x40
    11f4:	00e0a023          	sw	a4,0(ra)

000011f8 <inst_30>:

inst_30:
// rd==x9, imm_val == 128, 
// opcode: lui ; dest:x9; immval:0x80
TEST_CASE(x2, x9, 0x80000, x1, 4, lui x9,0x80)
    11f8:	000804b7          	lui	s1,0x80
    11fc:	0090a223          	sw	s1,4(ra)

00001200 <inst_31>:

inst_31:
// rd==x31, imm_val == 983039, 
// opcode: lui ; dest:x31; immval:0xeffff
TEST_CASE(x2, x31, -0x10001000, x1, 8, lui x31,0xeffff)
    1200:	efffffb7          	lui	t6,0xeffff
    1204:	01f0a423          	sw	t6,8(ra)

00001208 <inst_32>:

inst_32:
// imm_val == 917503, 
// opcode: lui ; dest:x10; immval:0xdffff
TEST_CASE(x2, x10, -0x20001000, x1, 12, lui x10,0xdffff)
    1208:	dffff537          	lui	a0,0xdffff
    120c:	00a0a623          	sw	a0,12(ra)

00001210 <inst_33>:

inst_33:
// imm_val == 786431, 
// opcode: lui ; dest:x10; immval:0xbffff
TEST_CASE(x2, x10, -0x40001000, x1, 16, lui x10,0xbffff)
    1210:	bffff537          	lui	a0,0xbffff
    1214:	00a0a823          	sw	a0,16(ra)

00001218 <inst_34>:

inst_34:
// imm_val == 524287, 
// opcode: lui ; dest:x10; immval:0x7ffff
TEST_CASE(x2, x10, 0x7ffff000, x1, 20, lui x10,0x7ffff)
    1218:	7ffff537          	lui	a0,0x7ffff
    121c:	00a0aa23          	sw	a0,20(ra)

00001220 <inst_35>:

inst_35:
// imm_val == 256, 
// opcode: lui ; dest:x10; immval:0x100
TEST_CASE(x2, x10, 0x100000, x1, 24, lui x10,0x100)
    1220:	00100537          	lui	a0,0x100
    1224:	00a0ac23          	sw	a0,24(ra)

00001228 <inst_36>:

inst_36:
// imm_val == 512, 
// opcode: lui ; dest:x10; immval:0x200
TEST_CASE(x2, x10, 0x200000, x1, 28, lui x10,0x200)
    1228:	00200537          	lui	a0,0x200
    122c:	00a0ae23          	sw	a0,28(ra)

00001230 <inst_37>:

inst_37:
// imm_val == 2048, 
// opcode: lui ; dest:x10; immval:0x800
TEST_CASE(x2, x10, 0x800000, x1, 32, lui x10,0x800)
    1230:	00800537          	lui	a0,0x800
    1234:	02a0a023          	sw	a0,32(ra)

00001238 <inst_38>:

inst_38:
// imm_val == 4096, 
// opcode: lui ; dest:x10; immval:0x1000
TEST_CASE(x2, x10, 0x1000000, x1, 36, lui x10,0x1000)
    1238:	01000537          	lui	a0,0x1000
    123c:	02a0a223          	sw	a0,36(ra)

00001240 <inst_39>:

inst_39:
// imm_val == 8192, 
// opcode: lui ; dest:x10; immval:0x2000
TEST_CASE(x2, x10, 0x2000000, x1, 40, lui x10,0x2000)
    1240:	02000537          	lui	a0,0x2000
    1244:	02a0a423          	sw	a0,40(ra)

00001248 <inst_40>:

inst_40:
// imm_val == 16384, 
// opcode: lui ; dest:x10; immval:0x4000
TEST_CASE(x2, x10, 0x4000000, x1, 44, lui x10,0x4000)
    1248:	04000537          	lui	a0,0x4000
    124c:	02a0a623          	sw	a0,44(ra)

00001250 <inst_41>:

inst_41:
// imm_val == 32768, 
// opcode: lui ; dest:x10; immval:0x8000
TEST_CASE(x2, x10, 0x8000000, x1, 48, lui x10,0x8000)
    1250:	08000537          	lui	a0,0x8000
    1254:	02a0a823          	sw	a0,48(ra)

00001258 <inst_42>:

inst_42:
// imm_val == 65536, 
// opcode: lui ; dest:x10; immval:0x10000
TEST_CASE(x2, x10, 0x10000000, x1, 52, lui x10,0x10000)
    1258:	10000537          	lui	a0,0x10000
    125c:	02a0aa23          	sw	a0,52(ra)

00001260 <inst_43>:

inst_43:
// imm_val == 131072, 
// opcode: lui ; dest:x10; immval:0x20000
TEST_CASE(x2, x10, 0x20000000, x1, 56, lui x10,0x20000)
    1260:	20000537          	lui	a0,0x20000
    1264:	02a0ac23          	sw	a0,56(ra)

00001268 <inst_44>:

inst_44:
// imm_val == 262144, 
// opcode: lui ; dest:x10; immval:0x40000
TEST_CASE(x2, x10, 0x40000000, x1, 60, lui x10,0x40000)
    1268:	40000537          	lui	a0,0x40000
    126c:	02a0ae23          	sw	a0,60(ra)

00001270 <inst_45>:

inst_45:
// imm_val == 524288, 
// opcode: lui ; dest:x10; immval:0x80000
TEST_CASE(x2, x10, -0x80000000, x1, 64, lui x10,0x80000)
    1270:	80000537          	lui	a0,0x80000
    1274:	04a0a023          	sw	a0,64(ra)

00001278 <inst_46>:

inst_46:
// imm_val == 1048574, 
// opcode: lui ; dest:x10; immval:0xffffe
TEST_CASE(x2, x10, -0x2000, x1, 68, lui x10,0xffffe)
    1278:	ffffe537          	lui	a0,0xffffe
    127c:	04a0a223          	sw	a0,68(ra)

00001280 <inst_47>:

inst_47:
// imm_val == 1048573, 
// opcode: lui ; dest:x10; immval:0xffffd
TEST_CASE(x2, x10, -0x3000, x1, 72, lui x10,0xffffd)
    1280:	ffffd537          	lui	a0,0xffffd
    1284:	04a0a423          	sw	a0,72(ra)

00001288 <inst_48>:

inst_48:
// imm_val == 1048571, 
// opcode: lui ; dest:x10; immval:0xffffb
TEST_CASE(x2, x10, -0x5000, x1, 76, lui x10,0xffffb)
    1288:	ffffb537          	lui	a0,0xffffb
    128c:	04a0a623          	sw	a0,76(ra)

00001290 <inst_49>:

inst_49:
// imm_val == 1048567, 
// opcode: lui ; dest:x10; immval:0xffff7
TEST_CASE(x2, x10, -0x9000, x1, 80, lui x10,0xffff7)
    1290:	ffff7537          	lui	a0,0xffff7
    1294:	04a0a823          	sw	a0,80(ra)

00001298 <inst_50>:

inst_50:
// imm_val == 1048559, 
// opcode: lui ; dest:x10; immval:0xfffef
TEST_CASE(x2, x10, -0x11000, x1, 84, lui x10,0xfffef)
    1298:	fffef537          	lui	a0,0xfffef
    129c:	04a0aa23          	sw	a0,84(ra)

000012a0 <inst_51>:

inst_51:
// imm_val == 1048543, 
// opcode: lui ; dest:x10; immval:0xfffdf
TEST_CASE(x2, x10, -0x21000, x1, 88, lui x10,0xfffdf)
    12a0:	fffdf537          	lui	a0,0xfffdf
    12a4:	04a0ac23          	sw	a0,88(ra)

000012a8 <inst_52>:

inst_52:
// imm_val == 1048511, 
// opcode: lui ; dest:x10; immval:0xfffbf
TEST_CASE(x2, x10, -0x41000, x1, 92, lui x10,0xfffbf)
    12a8:	fffbf537          	lui	a0,0xfffbf
    12ac:	04a0ae23          	sw	a0,92(ra)

000012b0 <inst_53>:

inst_53:
// imm_val == 1048447, 
// opcode: lui ; dest:x10; immval:0xfff7f
TEST_CASE(x2, x10, -0x81000, x1, 96, lui x10,0xfff7f)
    12b0:	fff7f537          	lui	a0,0xfff7f
    12b4:	06a0a023          	sw	a0,96(ra)

000012b8 <inst_54>:

inst_54:
// imm_val == 1048319, 
// opcode: lui ; dest:x10; immval:0xffeff
TEST_CASE(x2, x10, -0x101000, x1, 100, lui x10,0xffeff)
    12b8:	ffeff537          	lui	a0,0xffeff
    12bc:	06a0a223          	sw	a0,100(ra)

000012c0 <inst_55>:

inst_55:
// imm_val == 1048063, 
// opcode: lui ; dest:x10; immval:0xffdff
TEST_CASE(x2, x10, -0x201000, x1, 104, lui x10,0xffdff)
    12c0:	ffdff537          	lui	a0,0xffdff
    12c4:	06a0a423          	sw	a0,104(ra)

000012c8 <inst_56>:

inst_56:
// imm_val == 1047551, 
// opcode: lui ; dest:x10; immval:0xffbff
TEST_CASE(x2, x10, -0x401000, x1, 108, lui x10,0xffbff)
    12c8:	ffbff537          	lui	a0,0xffbff
    12cc:	06a0a623          	sw	a0,108(ra)

000012d0 <inst_57>:

inst_57:
// imm_val == 1046527, 
// opcode: lui ; dest:x10; immval:0xff7ff
TEST_CASE(x2, x10, -0x801000, x1, 112, lui x10,0xff7ff)
    12d0:	ff7ff537          	lui	a0,0xff7ff
    12d4:	06a0a823          	sw	a0,112(ra)

000012d8 <inst_58>:

inst_58:
// imm_val == 1044479, 
// opcode: lui ; dest:x10; immval:0xfefff
TEST_CASE(x2, x10, -0x1001000, x1, 116, lui x10,0xfefff)
    12d8:	fefff537          	lui	a0,0xfefff
    12dc:	06a0aa23          	sw	a0,116(ra)

000012e0 <inst_59>:

inst_59:
// imm_val == 1040383, 
// opcode: lui ; dest:x10; immval:0xfdfff
TEST_CASE(x2, x10, -0x2001000, x1, 120, lui x10,0xfdfff)
    12e0:	fdfff537          	lui	a0,0xfdfff
    12e4:	06a0ac23          	sw	a0,120(ra)

000012e8 <inst_60>:

inst_60:
// imm_val == 1032191, 
// opcode: lui ; dest:x10; immval:0xfbfff
TEST_CASE(x2, x10, -0x4001000, x1, 124, lui x10,0xfbfff)
    12e8:	fbfff537          	lui	a0,0xfbfff
    12ec:	06a0ae23          	sw	a0,124(ra)

000012f0 <inst_61>:

inst_61:
// imm_val == 1015807, 
// opcode: lui ; dest:x10; immval:0xf7fff
TEST_CASE(x2, x10, -0x8001000, x1, 128, lui x10,0xf7fff)
    12f0:	f7fff537          	lui	a0,0xf7fff
    12f4:	08a0a023          	sw	a0,128(ra)

000012f8 <inst_62>:

inst_62:
// imm_val==349525, imm_val == 349525
// opcode: lui ; dest:x10; immval:0x55555
TEST_CASE(x2, x10, 0x55555000, x1, 132, lui x10,0x55555)
    12f8:	55555537          	lui	a0,0x55555
    12fc:	08a0a223          	sw	a0,132(ra)

00001300 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    1300:	babed0b7          	lui	ra,0xbabed
    1304:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe9afa>

00001308 <write_tohost>:
    1308:	00002017          	auipc	zero,0x2
    130c:	ce102c23          	sw	ra,-776(zero) # fffffcf8 <_end+0xffffccf4>

00001310 <loop>:
    1310:	0000006f          	j	1310 <loop>
    1314:	0000                	unimp
	...
