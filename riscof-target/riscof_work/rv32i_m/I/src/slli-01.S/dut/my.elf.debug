
my.elf:     file format elf32-littleriscv


Disassembly of section .text:

00001000 <rvtest_entry_point>:

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN
    1000:	feedc0b7          	lui	ra,0xfeedc
    1004:	ead08093          	addi	ra,ra,-339 # feedbead <_end+0xfeed8ea9>
    1008:	ff76e137          	lui	sp,0xff76e
    100c:	f5610113          	addi	sp,sp,-170 # ff76df56 <_end+0xff76af52>
    1010:	7fbb71b7          	lui	gp,0x7fbb7
    1014:	fab18193          	addi	gp,gp,-85 # 7fbb6fab <_end+0x7fbb3fa7>
    1018:	bfddb237          	lui	tp,0xbfddb
    101c:	7d520213          	addi	tp,tp,2005 # bfddb7d5 <_end+0xbfdd87d1>
    1020:	00000297          	auipc	t0,0x0
    1024:	0d828293          	addi	t0,t0,216 # 10f8 <rvtest_code_begin>
    1028:	00001317          	auipc	t1,0x1
    102c:	fd830313          	addi	t1,t1,-40 # 2000 <rvtest_data_begin>
    1030:	b7fbb3b7          	lui	t2,0xb7fbb
    1034:	6fa38393          	addi	t2,t2,1786 # b7fbb6fa <_end+0xb7fb86f6>
    1038:	5bfde437          	lui	s0,0x5bfde
    103c:	b7d40413          	addi	s0,s0,-1155 # 5bfddb7d <_end+0x5bfdab79>
    1040:	adfef4b7          	lui	s1,0xadfef
    1044:	dbe48493          	addi	s1,s1,-578 # adfeedbe <_end+0xadfebdba>
    1048:	56ff7537          	lui	a0,0x56ff7
    104c:	6df50513          	addi	a0,a0,1759 # 56ff76df <_end+0x56ff46db>
    1050:	ab7fc5b7          	lui	a1,0xab7fc
    1054:	b6f58593          	addi	a1,a1,-1169 # ab7fbb6f <_end+0xab7f8b6b>
    1058:	d5bfe637          	lui	a2,0xd5bfe
    105c:	db760613          	addi	a2,a2,-585 # d5bfddb7 <_end+0xd5bfadb3>
    1060:	eadff6b7          	lui	a3,0xeadff
    1064:	edb68693          	addi	a3,a3,-293 # eadfeedb <_end+0xeadfbed7>
    1068:	f56ff737          	lui	a4,0xf56ff
    106c:	76d70713          	addi	a4,a4,1901 # f56ff76d <_end+0xf56fc769>
    1070:	fab807b7          	lui	a5,0xfab80
    1074:	bb678793          	addi	a5,a5,-1098 # fab7fbb6 <_end+0xfab7cbb2>
    1078:	7d5c0837          	lui	a6,0x7d5c0
    107c:	ddb80813          	addi	a6,a6,-549 # 7d5bfddb <_end+0x7d5bcdd7>
    1080:	beae08b7          	lui	a7,0xbeae0
    1084:	eed88893          	addi	a7,a7,-275 # beadfeed <_end+0xbeadcee9>
    1088:	df570937          	lui	s2,0xdf570
    108c:	f7690913          	addi	s2,s2,-138 # df56ff76 <_end+0xdf56cf72>
    1090:	6fab89b7          	lui	s3,0x6fab8
    1094:	fbb98993          	addi	s3,s3,-69 # 6fab7fbb <_end+0x6fab4fb7>
    1098:	b7d5ca37          	lui	s4,0xb7d5c
    109c:	fdda0a13          	addi	s4,s4,-35 # b7d5bfdd <_end+0xb7d58fd9>
    10a0:	dbeaeab7          	lui	s5,0xdbeae
    10a4:	feea8a93          	addi	s5,s5,-18 # dbeadfee <_end+0xdbeaafea>
    10a8:	6df57b37          	lui	s6,0x6df57
    10ac:	ff7b0b13          	addi	s6,s6,-9 # 6df56ff7 <_end+0x6df53ff3>
    10b0:	b6fabbb7          	lui	s7,0xb6fab
    10b4:	7fbb8b93          	addi	s7,s7,2043 # b6fab7fb <_end+0xb6fa87f7>
    10b8:	db7d6c37          	lui	s8,0xdb7d6
    10bc:	bfdc0c13          	addi	s8,s8,-1027 # db7d5bfd <_end+0xdb7d2bf9>
    10c0:	edbebcb7          	lui	s9,0xedbeb
    10c4:	dfec8c93          	addi	s9,s9,-514 # edbeadfe <_end+0xedbe7dfa>
    10c8:	76df5d37          	lui	s10,0x76df5
    10cc:	6ffd0d13          	addi	s10,s10,1791 # 76df56ff <_end+0x76df26fb>
    10d0:	bb6fbdb7          	lui	s11,0xbb6fb
    10d4:	b7fd8d93          	addi	s11,s11,-1153 # bb6fab7f <_end+0xbb6f7b7b>
    10d8:	ddb7de37          	lui	t3,0xddb7d
    10dc:	5bfe0e13          	addi	t3,t3,1471 # ddb7d5bf <_end+0xddb7a5bb>
    10e0:	eedbfeb7          	lui	t4,0xeedbf
    10e4:	adfe8e93          	addi	t4,t4,-1313 # eedbeadf <_end+0xeedbbadb>
    10e8:	f76dff37          	lui	t5,0xf76df
    10ec:	56ff0f13          	addi	t5,t5,1391 # f76df56f <_end+0xf76dc56b>
    10f0:	fbb70fb7          	lui	t6,0xfbb70
    10f4:	ab7f8f93          	addi	t6,t6,-1353 # fbb6fab7 <_end+0xfbb6cab3>

000010f8 <rvtest_code_begin>:

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*32.*);check ISA:=regex(.*I.*);def TEST_CASE_1=True;",slli)

RVTEST_SIGBASE( x3,signature_x3_1)
    10f8:	00001197          	auipc	gp,0x1
    10fc:	f1818193          	addi	gp,gp,-232 # 2010 <begin_signature>

00001100 <inst_0>:

inst_0:
// rs1 != rd, rs1==x17, rd==x27, rs1_val < 0 and imm_val > 0 and imm_val < xlen, rs1_val == -1073741825, imm_val == 29
// opcode: slli ; op1:x17; dest:x27; op1val:-0x40000001;  immval:0x1d
TEST_IMM_OP( slli, x27, x17, 0xe0000000, -0x40000001, 0x1d, x3, 0, x7)
    1100:	c00008b7          	lui	a7,0xc0000
    1104:	fff88893          	addi	a7,a7,-1 # bfffffff <_end+0xbfffcffb>
    1108:	01d89d93          	slli	s11,a7,0x1d
    110c:	01b1a023          	sw	s11,0(gp)

00001110 <inst_1>:

inst_1:
// rs1 == rd, rs1==x26, rd==x26, rs1_val > 0 and imm_val > 0 and imm_val < xlen, rs1_val==1717986918, imm_val == 15
// opcode: slli ; op1:x26; dest:x26; op1val:0x66666666;  immval:0xf
TEST_IMM_OP( slli, x26, x26, 0x33330000, 0x66666666, 0xf, x3, 4, x7)
    1110:	66666d37          	lui	s10,0x66666
    1114:	666d0d13          	addi	s10,s10,1638 # 66666666 <_end+0x66663662>
    1118:	00fd1d13          	slli	s10,s10,0xf
    111c:	01a1a223          	sw	s10,4(gp)

00001120 <inst_2>:

inst_2:
// rs1==x22, rd==x11, rs1_val < 0 and imm_val == 0, rs1_val == -65537
// opcode: slli ; op1:x22; dest:x11; op1val:-0x10001;  immval:0x0
TEST_IMM_OP( slli, x11, x22, 0xfffeffff, -0x10001, 0x0, x3, 8, x7)
    1120:	ffff0b37          	lui	s6,0xffff0
    1124:	fffb0b13          	addi	s6,s6,-1 # fffeffff <_end+0xfffecffb>
    1128:	000b1593          	slli	a1,s6,0x0
    112c:	00b1a423          	sw	a1,8(gp)

00001130 <inst_3>:

inst_3:
// rs1==x15, rd==x6, rs1_val > 0 and imm_val == 0, rs1_val==4, rs1_val == 4
// opcode: slli ; op1:x15; dest:x6; op1val:0x4;  immval:0x0
TEST_IMM_OP( slli, x6, x15, 0x4, 0x4, 0x0, x3, 12, x7)
    1130:	00400793          	li	a5,4
    1134:	00079313          	slli	t1,a5,0x0
    1138:	0061a623          	sw	t1,12(gp)

0000113c <inst_4>:

inst_4:
// rs1==x9, rd==x16, rs1_val < 0 and imm_val == (xlen-1), rs1_val == -4194305
// opcode: slli ; op1:x9; dest:x16; op1val:-0x400001;  immval:0x1f
TEST_IMM_OP( slli, x16, x9, 0x80000000, -0x400001, 0x1f, x3, 16, x7)
    113c:	ffc004b7          	lui	s1,0xffc00
    1140:	fff48493          	addi	s1,s1,-1 # ffbfffff <_end+0xffbfcffb>
    1144:	01f49813          	slli	a6,s1,0x1f
    1148:	0101a823          	sw	a6,16(gp)

0000114c <inst_5>:

inst_5:
// rs1==x11, rd==x20, rs1_val > 0 and imm_val == (xlen-1), 
// opcode: slli ; op1:x11; dest:x20; op1val:0x4;  immval:0x1f
TEST_IMM_OP( slli, x20, x11, 0x0, 0x4, 0x1f, x3, 20, x7)
    114c:	00400593          	li	a1,4
    1150:	01f59a13          	slli	s4,a1,0x1f
    1154:	0141aa23          	sw	s4,20(gp)

00001158 <inst_6>:

inst_6:
// rs1==x1, rd==x19, rs1_val == imm_val and imm_val > 0 and imm_val < xlen, imm_val == 8, rs1_val == 8
// opcode: slli ; op1:x1; dest:x19; op1val:0x8;  immval:0x8
TEST_IMM_OP( slli, x19, x1, 0x800, 0x8, 0x8, x3, 24, x7)
    1158:	00800093          	li	ra,8
    115c:	00809993          	slli	s3,ra,0x8
    1160:	0131ac23          	sw	s3,24(gp)

00001164 <inst_7>:

inst_7:
// rs1==x19, rd==x25, rs1_val == (-2**(xlen-1)) and imm_val >= 0 and imm_val < xlen, rs1_val == -2147483648, imm_val == 16
// opcode: slli ; op1:x19; dest:x25; op1val:-0x80000000;  immval:0x10
TEST_IMM_OP( slli, x25, x19, 0x0, -0x80000000, 0x10, x3, 28, x7)
    1164:	800009b7          	lui	s3,0x80000
    1168:	01099c93          	slli	s9,s3,0x10
    116c:	0191ae23          	sw	s9,28(gp)

00001170 <inst_8>:

inst_8:
// rs1==x8, rd==x12, rs1_val == 0 and imm_val >= 0 and imm_val < xlen, rs1_val==0
// opcode: slli ; op1:x8; dest:x12; op1val:0x0;  immval:0xc
TEST_IMM_OP( slli, x12, x8, 0x0, 0x0, 0xc, x3, 32, x7)
    1170:	00000413          	li	s0,0
    1174:	00c41613          	slli	a2,s0,0xc
    1178:	02c1a023          	sw	a2,32(gp)

0000117c <inst_9>:

inst_9:
// rs1==x27, rd==x30, rs1_val == (2**(xlen-1)-1) and imm_val >= 0 and imm_val < xlen, rs1_val == 2147483647
// opcode: slli ; op1:x27; dest:x30; op1val:0x7fffffff;  immval:0x8
TEST_IMM_OP( slli, x30, x27, 0xffffff00, 0x7fffffff, 0x8, x3, 36, x7)
    117c:	80000db7          	lui	s11,0x80000
    1180:	fffd8d93          	addi	s11,s11,-1 # 7fffffff <_end+0x7fffcffb>
    1184:	008d9f13          	slli	t5,s11,0x8
    1188:	03e1a223          	sw	t5,36(gp)

0000118c <inst_10>:

inst_10:
// rs1==x2, rd==x4, rs1_val == 1 and imm_val >= 0 and imm_val < xlen, imm_val == 1, rs1_val == 1
// opcode: slli ; op1:x2; dest:x4; op1val:0x1;  immval:0x1
TEST_IMM_OP( slli, x4, x2, 0x2, 0x1, 0x1, x3, 40, x7)
    118c:	00100113          	li	sp,1
    1190:	00111213          	slli	tp,sp,0x1
    1194:	0241a423          	sw	tp,40(gp)

00001198 <inst_11>:

inst_11:
// rs1==x31, rd==x14, rs1_val == 2, rs1_val==2
// opcode: slli ; op1:x31; dest:x14; op1val:0x2;  immval:0x6
TEST_IMM_OP( slli, x14, x31, 0x80, 0x2, 0x6, x3, 44, x7)
    1198:	00200f93          	li	t6,2
    119c:	006f9713          	slli	a4,t6,0x6
    11a0:	02e1a623          	sw	a4,44(gp)

000011a4 <inst_12>:

inst_12:
// rs1==x24, rd==x17, rs1_val == 16, 
// opcode: slli ; op1:x24; dest:x17; op1val:0x10;  immval:0xe
TEST_IMM_OP( slli, x17, x24, 0x40000, 0x10, 0xe, x3, 48, x7)
    11a4:	01000c13          	li	s8,16
    11a8:	00ec1893          	slli	a7,s8,0xe
    11ac:	0311a823          	sw	a7,48(gp)

000011b0 <inst_13>:

inst_13:
// rs1==x4, rd==x10, rs1_val == 32, 
// opcode: slli ; op1:x4; dest:x10; op1val:0x20;  immval:0x3
TEST_IMM_OP( slli, x10, x4, 0x100, 0x20, 0x3, x3, 52, x7)
    11b0:	02000213          	li	tp,32
    11b4:	00321513          	slli	a0,tp,0x3
    11b8:	02a1aa23          	sw	a0,52(gp)

000011bc <inst_14>:

inst_14:
// rs1==x18, rd==x2, rs1_val == 64, imm_val == 21
// opcode: slli ; op1:x18; dest:x2; op1val:0x40;  immval:0x15
TEST_IMM_OP( slli, x2, x18, 0x8000000, 0x40, 0x15, x3, 56, x7)
    11bc:	04000913          	li	s2,64
    11c0:	01591113          	slli	sp,s2,0x15
    11c4:	0221ac23          	sw	sp,56(gp)

000011c8 <inst_15>:

inst_15:
// rs1==x5, rd==x23, rs1_val == 128, 
// opcode: slli ; op1:x5; dest:x23; op1val:0x80;  immval:0x15
TEST_IMM_OP( slli, x23, x5, 0x10000000, 0x80, 0x15, x3, 60, x7)
    11c8:	08000293          	li	t0,128
    11cc:	01529b93          	slli	s7,t0,0x15
    11d0:	0371ae23          	sw	s7,60(gp)

000011d4 <inst_16>:

inst_16:
// rs1==x13, rd==x8, rs1_val == 256, 
// opcode: slli ; op1:x13; dest:x8; op1val:0x100;  immval:0x1
TEST_IMM_OP( slli, x8, x13, 0x200, 0x100, 0x1, x3, 64, x7)
    11d4:	10000693          	li	a3,256
    11d8:	00169413          	slli	s0,a3,0x1
    11dc:	0481a023          	sw	s0,64(gp)

000011e0 <inst_17>:

inst_17:
// rs1==x20, rd==x0, rs1_val == 512, 
// opcode: slli ; op1:x20; dest:x0; op1val:0x200;  immval:0x0
TEST_IMM_OP( slli, x0, x20, 0, 0x200, 0x0, x3, 68, x7)
    11e0:	20000a13          	li	s4,512
    11e4:	000a1013          	slli	zero,s4,0x0
    11e8:	0401a223          	sw	zero,68(gp)

000011ec <inst_18>:

inst_18:
// rs1==x16, rd==x9, rs1_val == 1024, imm_val == 2
// opcode: slli ; op1:x16; dest:x9; op1val:0x400;  immval:0x2
TEST_IMM_OP( slli, x9, x16, 0x1000, 0x400, 0x2, x3, 72, x7)
    11ec:	40000813          	li	a6,1024
    11f0:	00281493          	slli	s1,a6,0x2
    11f4:	0491a423          	sw	s1,72(gp)

000011f8 <inst_19>:

inst_19:
// rs1==x21, rd==x5, rs1_val == 2048, 
// opcode: slli ; op1:x21; dest:x5; op1val:0x800;  immval:0x13
TEST_IMM_OP( slli, x5, x21, 0x40000000, 0x800, 0x13, x3, 76, x7)
    11f8:	00001ab7          	lui	s5,0x1
    11fc:	800a8a93          	addi	s5,s5,-2048 # 800 <offset+0x6fc>
    1200:	013a9293          	slli	t0,s5,0x13
    1204:	0451a623          	sw	t0,76(gp)

00001208 <inst_20>:

inst_20:
// rs1==x23, rd==x1, rs1_val == 4096, 
// opcode: slli ; op1:x23; dest:x1; op1val:0x1000;  immval:0x7
TEST_IMM_OP( slli, x1, x23, 0x80000, 0x1000, 0x7, x3, 80, x2)
    1208:	00001bb7          	lui	s7,0x1
    120c:	007b9093          	slli	ra,s7,0x7
    1210:	0411a823          	sw	ra,80(gp)

00001214 <inst_21>:

inst_21:
// rs1==x12, rd==x18, rs1_val == 8192, 
// opcode: slli ; op1:x12; dest:x18; op1val:0x2000;  immval:0x10
TEST_IMM_OP( slli, x18, x12, 0x20000000, 0x2000, 0x10, x3, 84, x2)
    1214:	00002637          	lui	a2,0x2
    1218:	01061913          	slli	s2,a2,0x10
    121c:	0521aa23          	sw	s2,84(gp)

00001220 <inst_22>:

inst_22:
// rs1==x29, rd==x15, rs1_val == 16384, 
// opcode: slli ; op1:x29; dest:x15; op1val:0x4000;  immval:0xb
TEST_IMM_OP( slli, x15, x29, 0x2000000, 0x4000, 0xb, x3, 88, x2)
    1220:	00004eb7          	lui	t4,0x4
    1224:	00be9793          	slli	a5,t4,0xb
    1228:	04f1ac23          	sw	a5,88(gp)
RVTEST_SIGBASE( x1,signature_x1_0)
    122c:	00001097          	auipc	ra,0x1
    1230:	e4008093          	addi	ra,ra,-448 # 206c <signature_x1_0>

00001234 <inst_23>:

inst_23:
// rs1==x3, rd==x21, rs1_val == 32768, imm_val == 23
// opcode: slli ; op1:x3; dest:x21; op1val:0x8000;  immval:0x17
TEST_IMM_OP( slli, x21, x3, 0x0, 0x8000, 0x17, x1, 0, x2)
    1234:	000081b7          	lui	gp,0x8
    1238:	01719a93          	slli	s5,gp,0x17
    123c:	0150a023          	sw	s5,0(ra)

00001240 <inst_24>:

inst_24:
// rs1==x0, rd==x31, rs1_val == 65536, 
// opcode: slli ; op1:x0; dest:x31; op1val:0x0;  immval:0x1
TEST_IMM_OP( slli, x31, x0, 0x0, 0x0, 0x1, x1, 4, x2)
    1240:	00000013          	nop
    1244:	00101f93          	slli	t6,zero,0x1
    1248:	01f0a223          	sw	t6,4(ra)

0000124c <inst_25>:

inst_25:
// rs1==x14, rd==x3, rs1_val == 131072, imm_val == 27
// opcode: slli ; op1:x14; dest:x3; op1val:0x20000;  immval:0x1b
TEST_IMM_OP( slli, x3, x14, 0x0, 0x20000, 0x1b, x1, 8, x2)
    124c:	00020737          	lui	a4,0x20
    1250:	01b71193          	slli	gp,a4,0x1b
    1254:	0030a423          	sw	gp,8(ra)

00001258 <inst_26>:

inst_26:
// rs1==x25, rd==x24, rs1_val == 262144, 
// opcode: slli ; op1:x25; dest:x24; op1val:0x40000;  immval:0x1f
TEST_IMM_OP( slli, x24, x25, 0x0, 0x40000, 0x1f, x1, 12, x2)
    1258:	00040cb7          	lui	s9,0x40
    125c:	01fc9c13          	slli	s8,s9,0x1f
    1260:	0180a623          	sw	s8,12(ra)

00001264 <inst_27>:

inst_27:
// rs1==x30, rd==x29, rs1_val == 524288, 
// opcode: slli ; op1:x30; dest:x29; op1val:0x80000;  immval:0xf
TEST_IMM_OP( slli, x29, x30, 0x0, 0x80000, 0xf, x1, 16, x2)
    1264:	00080f37          	lui	t5,0x80
    1268:	00ff1e93          	slli	t4,t5,0xf
    126c:	01d0a823          	sw	t4,16(ra)

00001270 <inst_28>:

inst_28:
// rs1==x28, rd==x13, rs1_val == 1048576, 
// opcode: slli ; op1:x28; dest:x13; op1val:0x100000;  immval:0x17
TEST_IMM_OP( slli, x13, x28, 0x0, 0x100000, 0x17, x1, 20, x2)
    1270:	00100e37          	lui	t3,0x100
    1274:	017e1693          	slli	a3,t3,0x17
    1278:	00d0aa23          	sw	a3,20(ra)

0000127c <inst_29>:

inst_29:
// rs1==x10, rd==x7, rs1_val == 2097152, 
// opcode: slli ; op1:x10; dest:x7; op1val:0x200000;  immval:0x7
TEST_IMM_OP( slli, x7, x10, 0x10000000, 0x200000, 0x7, x1, 24, x2)
    127c:	00200537          	lui	a0,0x200
    1280:	00751393          	slli	t2,a0,0x7
    1284:	0070ac23          	sw	t2,24(ra)

00001288 <inst_30>:

inst_30:
// rs1==x7, rd==x22, rs1_val == 4194304, 
// opcode: slli ; op1:x7; dest:x22; op1val:0x400000;  immval:0x1d
TEST_IMM_OP( slli, x22, x7, 0x0, 0x400000, 0x1d, x1, 28, x2)
    1288:	004003b7          	lui	t2,0x400
    128c:	01d39b13          	slli	s6,t2,0x1d
    1290:	0160ae23          	sw	s6,28(ra)

00001294 <inst_31>:

inst_31:
// rs1==x6, rd==x28, rs1_val == 8388608, 
// opcode: slli ; op1:x6; dest:x28; op1val:0x800000;  immval:0x2
TEST_IMM_OP( slli, x28, x6, 0x2000000, 0x800000, 0x2, x1, 32, x2)
    1294:	00800337          	lui	t1,0x800
    1298:	00231e13          	slli	t3,t1,0x2
    129c:	03c0a023          	sw	t3,32(ra)

000012a0 <inst_32>:

inst_32:
// rs1_val == 16777216, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x1000000;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0x40000000, 0x1000000, 0x6, x1, 36, x2)
    12a0:	01000537          	lui	a0,0x1000
    12a4:	00651593          	slli	a1,a0,0x6
    12a8:	02b0a223          	sw	a1,36(ra)

000012ac <inst_33>:

inst_33:
// rs1_val == 33554432, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x2000000;  immval:0x5
TEST_IMM_OP( slli, x11, x10, 0x40000000, 0x2000000, 0x5, x1, 40, x2)
    12ac:	02000537          	lui	a0,0x2000
    12b0:	00551593          	slli	a1,a0,0x5
    12b4:	02b0a423          	sw	a1,40(ra)

000012b8 <inst_34>:

inst_34:
// rs1_val == 67108864, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x4000000;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0x0, 0x4000000, 0x11, x1, 44, x2)
    12b8:	04000537          	lui	a0,0x4000
    12bc:	01151593          	slli	a1,a0,0x11
    12c0:	02b0a623          	sw	a1,44(ra)

000012c4 <inst_35>:

inst_35:
// rs1_val == 134217728, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x8000000;  immval:0x0
TEST_IMM_OP( slli, x11, x10, 0x8000000, 0x8000000, 0x0, x1, 48, x2)
    12c4:	08000537          	lui	a0,0x8000
    12c8:	00051593          	slli	a1,a0,0x0
    12cc:	02b0a823          	sw	a1,48(ra)

000012d0 <inst_36>:

inst_36:
// rs1_val == 268435456, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x10000000;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0x10000000, 0x3, x1, 52, x2)
    12d0:	10000537          	lui	a0,0x10000
    12d4:	00351593          	slli	a1,a0,0x3
    12d8:	02b0aa23          	sw	a1,52(ra)

000012dc <inst_37>:

inst_37:
// rs1_val == 536870912, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x20000000;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0x0, 0x20000000, 0xc, x1, 56, x2)
    12dc:	20000537          	lui	a0,0x20000
    12e0:	00c51593          	slli	a1,a0,0xc
    12e4:	02b0ac23          	sw	a1,56(ra)

000012e8 <inst_38>:

inst_38:
// rs1_val == 1073741824, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x40000000;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0x0, 0x40000000, 0xb, x1, 60, x2)
    12e8:	40000537          	lui	a0,0x40000
    12ec:	00b51593          	slli	a1,a0,0xb
    12f0:	02b0ae23          	sw	a1,60(ra)

000012f4 <inst_39>:

inst_39:
// rs1_val == -2, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xffff8000, -0x2, 0xe, x1, 64, x2)
    12f4:	ffe00513          	li	a0,-2
    12f8:	00e51593          	slli	a1,a0,0xe
    12fc:	04b0a023          	sw	a1,64(ra)

00001300 <inst_40>:

inst_40:
// rs1_val == -3, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x3;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xfffffffa, -0x3, 0x1, x1, 68, x2)
    1300:	ffd00513          	li	a0,-3
    1304:	00151593          	slli	a1,a0,0x1
    1308:	04b0a223          	sw	a1,68(ra)

0000130c <inst_41>:

inst_41:
// rs1_val == -5, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x5;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xfffffd80, -0x5, 0x7, x1, 72, x2)
    130c:	ffb00513          	li	a0,-5
    1310:	00751593          	slli	a1,a0,0x7
    1314:	04b0a423          	sw	a1,72(ra)

00001318 <inst_42>:

inst_42:
// rs1_val == -9, imm_val == 10
// opcode: slli ; op1:x10; dest:x11; op1val:-0x9;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xffffdc00, -0x9, 0xa, x1, 76, x2)
    1318:	ff700513          	li	a0,-9
    131c:	00a51593          	slli	a1,a0,0xa
    1320:	04b0a623          	sw	a1,76(ra)

00001324 <inst_43>:

inst_43:
// rs1_val == -17, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x11;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xffde0000, -0x11, 0x11, x1, 80, x2)
    1324:	fef00513          	li	a0,-17
    1328:	01151593          	slli	a1,a0,0x11
    132c:	04b0a823          	sw	a1,80(ra)

00001330 <inst_44>:

inst_44:
// rs1_val == -33, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x21;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xfff7c000, -0x21, 0xe, x1, 84, x2)
    1330:	fdf00513          	li	a0,-33
    1334:	00e51593          	slli	a1,a0,0xe
    1338:	04b0aa23          	sw	a1,84(ra)

0000133c <inst_45>:

inst_45:
// rs1_val == -65, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x41;  immval:0x13
TEST_IMM_OP( slli, x11, x10, 0xfdf80000, -0x41, 0x13, x1, 88, x2)
    133c:	fbf00513          	li	a0,-65
    1340:	01351593          	slli	a1,a0,0x13
    1344:	04b0ac23          	sw	a1,88(ra)

00001348 <inst_46>:

inst_46:
// rs1_val == -129, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x81;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xff7f0000, -0x81, 0x10, x1, 92, x2)
    1348:	f7f00513          	li	a0,-129
    134c:	01051593          	slli	a1,a0,0x10
    1350:	04b0ae23          	sw	a1,92(ra)

00001354 <inst_47>:

inst_47:
// rs1_val == -257, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x101;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfff7f800, -0x101, 0xb, x1, 96, x2)
    1354:	eff00513          	li	a0,-257
    1358:	00b51593          	slli	a1,a0,0xb
    135c:	06b0a023          	sw	a1,96(ra)

00001360 <inst_48>:

inst_48:
// rs1_val == -513, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x201;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xfbfe0000, -0x201, 0x11, x1, 100, x2)
    1360:	dff00513          	li	a0,-513
    1364:	01151593          	slli	a1,a0,0x11
    1368:	06b0a223          	sw	a1,100(ra)

0000136c <inst_49>:

inst_49:
// rs1_val == -1025, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x401;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xfffdff80, -0x401, 0x7, x1, 104, x2)
    136c:	bff00513          	li	a0,-1025
    1370:	00751593          	slli	a1,a0,0x7
    1374:	06b0a423          	sw	a1,104(ra)

00001378 <inst_50>:

inst_50:
// rs1_val == -2049, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x801;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0xfbff8000, -0x801, 0xf, x1, 108, x2)
    1378:	fffff537          	lui	a0,0xfffff
    137c:	7ff50513          	addi	a0,a0,2047 # fffff7ff <_end+0xffffc7fb>
    1380:	00f51593          	slli	a1,a0,0xf
    1384:	06b0a623          	sw	a1,108(ra)

00001388 <inst_51>:

inst_51:
// rs1_val == -4097, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1001;  immval:0xa
TEST_IMM_OP( slli, x11, x10, 0xffbffc00, -0x1001, 0xa, x1, 112, x2)
    1388:	fffff537          	lui	a0,0xfffff
    138c:	fff50513          	addi	a0,a0,-1 # ffffefff <_end+0xffffbffb>
    1390:	00a51593          	slli	a1,a0,0xa
    1394:	06b0a823          	sw	a1,112(ra)

00001398 <inst_52>:

inst_52:
// rs1_val == -8193, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xfff7ffc0, -0x2001, 0x6, x1, 116, x2)
    1398:	ffffe537          	lui	a0,0xffffe
    139c:	fff50513          	addi	a0,a0,-1 # ffffdfff <_end+0xffffaffb>
    13a0:	00651593          	slli	a1,a0,0x6
    13a4:	06b0aa23          	sw	a1,116(ra)

000013a8 <inst_53>:

inst_53:
// rs1_val == -16385, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4001;  immval:0x2
TEST_IMM_OP( slli, x11, x10, 0xfffefffc, -0x4001, 0x2, x1, 120, x2)
    13a8:	ffffc537          	lui	a0,0xffffc
    13ac:	fff50513          	addi	a0,a0,-1 # ffffbfff <_end+0xffff8ffb>
    13b0:	00251593          	slli	a1,a0,0x2
    13b4:	06b0ac23          	sw	a1,120(ra)

000013b8 <inst_54>:

inst_54:
// rs1_val == -32769, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x8001;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0xfffbfff8, -0x8001, 0x3, x1, 124, x2)
    13b8:	ffff8537          	lui	a0,0xffff8
    13bc:	fff50513          	addi	a0,a0,-1 # ffff7fff <_end+0xffff4ffb>
    13c0:	00351593          	slli	a1,a0,0x3
    13c4:	06b0ae23          	sw	a1,124(ra)

000013c8 <inst_55>:

inst_55:
// rs1_val == -131073, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20001;  immval:0x1d
TEST_IMM_OP( slli, x11, x10, 0xe0000000, -0x20001, 0x1d, x1, 128, x2)
    13c8:	fffe0537          	lui	a0,0xfffe0
    13cc:	fff50513          	addi	a0,a0,-1 # fffdffff <_end+0xfffdcffb>
    13d0:	01d51593          	slli	a1,a0,0x1d
    13d4:	08b0a023          	sw	a1,128(ra)

000013d8 <inst_56>:

inst_56:
// rs1_val == -262145, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x40001;  immval:0x1d
TEST_IMM_OP( slli, x11, x10, 0xe0000000, -0x40001, 0x1d, x1, 132, x2)
    13d8:	fffc0537          	lui	a0,0xfffc0
    13dc:	fff50513          	addi	a0,a0,-1 # fffbffff <_end+0xfffbcffb>
    13e0:	01d51593          	slli	a1,a0,0x1d
    13e4:	08b0a223          	sw	a1,132(ra)

000013e8 <inst_57>:

inst_57:
// rs1_val == -524289, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x80001;  immval:0xc
TEST_IMM_OP( slli, x11, x10, 0x7ffff000, -0x80001, 0xc, x1, 136, x2)
    13e8:	fff80537          	lui	a0,0xfff80
    13ec:	fff50513          	addi	a0,a0,-1 # fff7ffff <_end+0xfff7cffb>
    13f0:	00c51593          	slli	a1,a0,0xc
    13f4:	08b0a423          	sw	a1,136(ra)

000013f8 <inst_58>:

inst_58:
// rs1_val == -2097153, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x200001;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xf7ffffc0, -0x200001, 0x6, x1, 140, x2)
    13f8:	ffe00537          	lui	a0,0xffe00
    13fc:	fff50513          	addi	a0,a0,-1 # ffdfffff <_end+0xffdfcffb>
    1400:	00651593          	slli	a1,a0,0x6
    1404:	08b0a623          	sw	a1,140(ra)

00001408 <inst_59>:

inst_59:
// rs1_val == -8388609, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x800001;  immval:0x13
TEST_IMM_OP( slli, x11, x10, 0xfff80000, -0x800001, 0x13, x1, 144, x2)
    1408:	ff800537          	lui	a0,0xff800
    140c:	fff50513          	addi	a0,a0,-1 # ff7fffff <_end+0xff7fcffb>
    1410:	01351593          	slli	a1,a0,0x13
    1414:	08b0a823          	sw	a1,144(ra)

00001418 <inst_60>:

inst_60:
// rs1_val == -16777217, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x1000001;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xfffe0000, -0x1000001, 0x11, x1, 148, x2)
    1418:	ff000537          	lui	a0,0xff000
    141c:	fff50513          	addi	a0,a0,-1 # feffffff <_end+0xfeffcffb>
    1420:	01151593          	slli	a1,a0,0x11
    1424:	08b0aa23          	sw	a1,148(ra)

00001428 <inst_61>:

inst_61:
// rs1_val == -33554433, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x2000001;  immval:0xf
TEST_IMM_OP( slli, x11, x10, 0xffff8000, -0x2000001, 0xf, x1, 152, x2)
    1428:	fe000537          	lui	a0,0xfe000
    142c:	fff50513          	addi	a0,a0,-1 # fdffffff <_end+0xfdffcffb>
    1430:	00f51593          	slli	a1,a0,0xf
    1434:	08b0ac23          	sw	a1,152(ra)

00001438 <inst_62>:

inst_62:
// rs1_val == -67108865, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x4000001;  immval:0xd
TEST_IMM_OP( slli, x11, x10, 0xffffe000, -0x4000001, 0xd, x1, 156, x2)
    1438:	fc000537          	lui	a0,0xfc000
    143c:	fff50513          	addi	a0,a0,-1 # fbffffff <_end+0xfbffcffb>
    1440:	00d51593          	slli	a1,a0,0xd
    1444:	08b0ae23          	sw	a1,156(ra)

00001448 <inst_63>:

inst_63:
// rs1_val == -134217729, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x8000001;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xffffc000, -0x8000001, 0xe, x1, 160, x2)
    1448:	f8000537          	lui	a0,0xf8000
    144c:	fff50513          	addi	a0,a0,-1 # f7ffffff <_end+0xf7ffcffb>
    1450:	00e51593          	slli	a1,a0,0xe
    1454:	0ab0a023          	sw	a1,160(ra)

00001458 <inst_64>:

inst_64:
// rs1_val == -268435457, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x10000001;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0xffffff80, -0x10000001, 0x7, x1, 164, x2)
    1458:	f0000537          	lui	a0,0xf0000
    145c:	fff50513          	addi	a0,a0,-1 # efffffff <_end+0xefffcffb>
    1460:	00751593          	slli	a1,a0,0x7
    1464:	0ab0a223          	sw	a1,164(ra)

00001468 <inst_65>:

inst_65:
// rs1_val == -536870913, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x20000001;  immval:0xb
TEST_IMM_OP( slli, x11, x10, 0xfffff800, -0x20000001, 0xb, x1, 168, x2)
    1468:	e0000537          	lui	a0,0xe0000
    146c:	fff50513          	addi	a0,a0,-1 # dfffffff <_end+0xdfffcffb>
    1470:	00b51593          	slli	a1,a0,0xb
    1474:	0ab0a423          	sw	a1,168(ra)

00001478 <inst_66>:

inst_66:
// rs1_val == 1431655765, rs1_val==1431655765
// opcode: slli ; op1:x10; dest:x11; op1val:0x55555555;  immval:0x11
TEST_IMM_OP( slli, x11, x10, 0xaaaa0000, 0x55555555, 0x11, x1, 172, x2)
    1478:	55555537          	lui	a0,0x55555
    147c:	55550513          	addi	a0,a0,1365 # 55555555 <_end+0x55552551>
    1480:	01151593          	slli	a1,a0,0x11
    1484:	0ab0a623          	sw	a1,172(ra)

00001488 <inst_67>:

inst_67:
// rs1_val == -1431655766, rs1_val==-1431655766
// opcode: slli ; op1:x10; dest:x11; op1val:-0x55555556;  immval:0x17
TEST_IMM_OP( slli, x11, x10, 0x55000000, -0x55555556, 0x17, x1, 176, x2)
    1488:	aaaab537          	lui	a0,0xaaaab
    148c:	aaa50513          	addi	a0,a0,-1366 # aaaaaaaa <_end+0xaaaa7aa6>
    1490:	01751593          	slli	a1,a0,0x17
    1494:	0ab0a823          	sw	a1,176(ra)

00001498 <inst_68>:

inst_68:
// rs1_val==3, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x3;  immval:0x13
TEST_IMM_OP( slli, x11, x10, 0x180000, 0x3, 0x13, x1, 180, x2)
    1498:	00300513          	li	a0,3
    149c:	01351593          	slli	a1,a0,0x13
    14a0:	0ab0aa23          	sw	a1,180(ra)

000014a4 <inst_69>:

inst_69:
// rs1_val==5, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x5;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0xa, 0x5, 0x1, x1, 184, x2)
    14a4:	00500513          	li	a0,5
    14a8:	00151593          	slli	a1,a0,0x1
    14ac:	0ab0ac23          	sw	a1,184(ra)

000014b0 <inst_70>:

inst_70:
// rs1_val==858993459, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x33333333;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0x99999998, 0x33333333, 0x3, x1, 188, x2)
    14b0:	33333537          	lui	a0,0x33333
    14b4:	33350513          	addi	a0,a0,819 # 33333333 <_end+0x3333032f>
    14b8:	00351593          	slli	a1,a0,0x3
    14bc:	0ab0ae23          	sw	a1,188(ra)

000014c0 <inst_71>:

inst_71:
// rs1_val==-46340, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0xb504;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xffd2bf00, -0xb504, 0x6, x1, 192, x2)
    14c0:	ffff5537          	lui	a0,0xffff5
    14c4:	afc50513          	addi	a0,a0,-1284 # ffff4afc <_end+0xffff1af8>
    14c8:	00651593          	slli	a1,a0,0x6
    14cc:	0cb0a023          	sw	a1,192(ra)

000014d0 <inst_72>:

inst_72:
// rs1_val==1717986919, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x66666667;  immval:0x17
TEST_IMM_OP( slli, x11, x10, 0x33800000, 0x66666667, 0x17, x1, 196, x2)
    14d0:	66666537          	lui	a0,0x66666
    14d4:	66750513          	addi	a0,a0,1639 # 66666667 <_end+0x66663663>
    14d8:	01751593          	slli	a1,a0,0x17
    14dc:	0cb0a223          	sw	a1,196(ra)

000014e0 <inst_73>:

inst_73:
// rs1_val==-46339, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0xb503;  immval:0x6
TEST_IMM_OP( slli, x11, x10, 0xffd2bf40, -0xb503, 0x6, x1, 200, x2)
    14e0:	ffff5537          	lui	a0,0xffff5
    14e4:	afd50513          	addi	a0,a0,-1283 # ffff4afd <_end+0xffff1af9>
    14e8:	00651593          	slli	a1,a0,0x6
    14ec:	0cb0a423          	sw	a1,200(ra)

000014f0 <inst_74>:

inst_74:
// rs1_val==46341, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb505;  immval:0x1f
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0xb505, 0x1f, x1, 204, x2)
    14f0:	0000b537          	lui	a0,0xb
    14f4:	50550513          	addi	a0,a0,1285 # b505 <_end+0x8501>
    14f8:	01f51593          	slli	a1,a0,0x1f
    14fc:	0cb0a623          	sw	a1,204(ra)

00001500 <inst_75>:

inst_75:
// imm_val == 4, rs1_val==858993458
// opcode: slli ; op1:x10; dest:x11; op1val:0x33333332;  immval:0x4
TEST_IMM_OP( slli, x11, x10, 0x33333320, 0x33333332, 0x4, x1, 208, x2)
    1500:	33333537          	lui	a0,0x33333
    1504:	33250513          	addi	a0,a0,818 # 33333332 <_end+0x3333032e>
    1508:	00451593          	slli	a1,a0,0x4
    150c:	0cb0a823          	sw	a1,208(ra)

00001510 <inst_76>:

inst_76:
// imm_val == 30, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x6;  immval:0x1e
TEST_IMM_OP( slli, x11, x10, 0x80000000, -0x6, 0x1e, x1, 212, x2)
    1510:	ffa00513          	li	a0,-6
    1514:	01e51593          	slli	a1,a0,0x1e
    1518:	0cb0aa23          	sw	a1,212(ra)

0000151c <inst_77>:

inst_77:
// rs1_val==46340, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb504;  immval:0x7
TEST_IMM_OP( slli, x11, x10, 0x5a8200, 0xb504, 0x7, x1, 216, x2)
    151c:	0000b537          	lui	a0,0xb
    1520:	50450513          	addi	a0,a0,1284 # b504 <_end+0x8500>
    1524:	00751593          	slli	a1,a0,0x7
    1528:	0cb0ac23          	sw	a1,216(ra)

0000152c <inst_78>:

inst_78:
// rs1_val == -1048577, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x100001;  immval:0x8
TEST_IMM_OP( slli, x11, x10, 0xefffff00, -0x100001, 0x8, x1, 220, x2)
    152c:	fff00537          	lui	a0,0xfff00
    1530:	fff50513          	addi	a0,a0,-1 # ffefffff <_end+0xffefcffb>
    1534:	00851593          	slli	a1,a0,0x8
    1538:	0cb0ae23          	sw	a1,220(ra)

0000153c <inst_79>:

inst_79:
// rs1_val==1431655764, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x55555554;  immval:0x3
TEST_IMM_OP( slli, x11, x10, 0xaaaaaaa0, 0x55555554, 0x3, x1, 224, x2)
    153c:	55555537          	lui	a0,0x55555
    1540:	55450513          	addi	a0,a0,1364 # 55555554 <_end+0x55552550>
    1544:	00351593          	slli	a1,a0,0x3
    1548:	0eb0a023          	sw	a1,224(ra)

0000154c <inst_80>:

inst_80:
// rs1_val==1717986917, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x66666665;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0x66650000, 0x66666665, 0x10, x1, 228, x2)
    154c:	66666537          	lui	a0,0x66666
    1550:	66550513          	addi	a0,a0,1637 # 66666665 <_end+0x66663661>
    1554:	01051593          	slli	a1,a0,0x10
    1558:	0eb0a223          	sw	a1,228(ra)

0000155c <inst_81>:

inst_81:
// rs1_val==46339, 
// opcode: slli ; op1:x10; dest:x11; op1val:0xb503;  immval:0x10
TEST_IMM_OP( slli, x11, x10, 0xb5030000, 0xb503, 0x10, x1, 232, x2)
    155c:	0000b537          	lui	a0,0xb
    1560:	50350513          	addi	a0,a0,1283 # b503 <_end+0x84ff>
    1564:	01051593          	slli	a1,a0,0x10
    1568:	0eb0a423          	sw	a1,232(ra)

0000156c <inst_82>:

inst_82:
// rs1_val==1431655766, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x55555556;  immval:0x17
TEST_IMM_OP( slli, x11, x10, 0xab000000, 0x55555556, 0x17, x1, 236, x2)
    156c:	55555537          	lui	a0,0x55555
    1570:	55650513          	addi	a0,a0,1366 # 55555556 <_end+0x55552552>
    1574:	01751593          	slli	a1,a0,0x17
    1578:	0eb0a623          	sw	a1,236(ra)

0000157c <inst_83>:

inst_83:
// rs1_val==-1431655765, 
// opcode: slli ; op1:x10; dest:x11; op1val:-0x55555555;  immval:0xe
TEST_IMM_OP( slli, x11, x10, 0xaaaac000, -0x55555555, 0xe, x1, 240, x2)
    157c:	aaaab537          	lui	a0,0xaaaab
    1580:	aab50513          	addi	a0,a0,-1365 # aaaaaaab <_end+0xaaaa7aa7>
    1584:	00e51593          	slli	a1,a0,0xe
    1588:	0eb0a823          	sw	a1,240(ra)

0000158c <inst_84>:

inst_84:
// rs1_val==6, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x6;  immval:0x1e
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0x6, 0x1e, x1, 244, x2)
    158c:	00600513          	li	a0,6
    1590:	01e51593          	slli	a1,a0,0x1e
    1594:	0eb0aa23          	sw	a1,244(ra)

00001598 <inst_85>:

inst_85:
// rs1_val==858993460, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x33333334;  immval:0x1d
TEST_IMM_OP( slli, x11, x10, 0x80000000, 0x33333334, 0x1d, x1, 248, x2)
    1598:	33333537          	lui	a0,0x33333
    159c:	33450513          	addi	a0,a0,820 # 33333334 <_end+0x33330330>
    15a0:	01d51593          	slli	a1,a0,0x1d
    15a4:	0eb0ac23          	sw	a1,248(ra)

000015a8 <inst_86>:

inst_86:
// rs1_val == 512, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x200;  immval:0x0
TEST_IMM_OP( slli, x11, x10, 0x200, 0x200, 0x0, x1, 252, x2)
    15a8:	20000513          	li	a0,512
    15ac:	00051593          	slli	a1,a0,0x0
    15b0:	0eb0ae23          	sw	a1,252(ra)

000015b4 <inst_87>:

inst_87:
// rs1_val == 65536, 
// opcode: slli ; op1:x10; dest:x11; op1val:0x10000;  immval:0x1
TEST_IMM_OP( slli, x11, x10, 0x20000, 0x10000, 0x1, x1, 256, x2)
    15b4:	00010537          	lui	a0,0x10
    15b8:	00151593          	slli	a1,a0,0x1
    15bc:	10b0a023          	sw	a1,256(ra)

000015c0 <rvtest_code_end>:
#endif


RVTEST_CODE_END
RVMODEL_HALT
    15c0:	babed0b7          	lui	ra,0xbabed
    15c4:	afe08093          	addi	ra,ra,-1282 # babecafe <_end+0xbabe9afa>

000015c8 <write_tohost>:
    15c8:	00002017          	auipc	zero,0x2
    15cc:	a2102c23          	sw	ra,-1480(zero) # fffffa38 <_end+0xffffca34>

000015d0 <loop>:
    15d0:	0000006f          	j	15d0 <loop>
    15d4:	0000                	unimp
	...
